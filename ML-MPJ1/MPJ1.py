{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install lemon-explain[all]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QLbKv9J0s_Uh",
        "outputId": "2cb76a02-b336-40df-f8d8-b468baa1a389"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting lemon-explain[all]\n",
            "  Using cached lemon_explain-0.1.1-py3-none-any.whl (26 kB)\n",
            "Collecting pandas<2,>=1 (from lemon-explain[all])\n",
            "  Using cached pandas-1.5.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\n",
            "Requirement already satisfied: scikit-learn<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from lemon-explain[all]) (1.2.2)\n",
            "Collecting py-entitymatching<0.5.0,>=0.4.0 (from lemon-explain[all])\n",
            "  Using cached py-entitymatching-0.4.2.tar.gz (2.1 MB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting pyarrow<6.0.0,>=5.0.0 (from lemon-explain[all])\n",
            "  Using cached pyarrow-5.0.0.tar.gz (739 kB)\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\n",
            "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lbHRzoSVtLx_",
        "outputId": "50897fd7-daa4-4d86-e7f9-845045ce9af9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('/content/Book1.csv')"
      ],
      "metadata": {
        "id": "OCEJQofnuw5R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "eSWVMGsbu5oY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df= pd.read_csv('/content/Book1.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "rdVfnIz3vAIO",
        "outputId": "797a5eb6-4212-4de0-f4b0-1fcd37bd9160"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    p_hours  w_1\n",
              "0      0.50    0\n",
              "1      0.75    0\n",
              "2      1.00    0\n",
              "3      2.00    0\n",
              "4      3.00    1\n",
              "5      4.00    0\n",
              "6      5.00    1\n",
              "7      5.50    1\n",
              "8      4.50    1\n",
              "9      3.50    1\n",
              "10     2.50    0\n",
              "11     3.75    1\n",
              "12     4.75    1\n",
              "13     5.75    1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f62e0d7-f59a-4087-b0e8-f1ac1afb1092\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>p_hours</th>\n",
              "      <th>w_1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.75</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>5.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5.50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>4.50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3.50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>3.75</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>4.75</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>5.75</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f62e0d7-f59a-4087-b0e8-f1ac1afb1092')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f62e0d7-f59a-4087-b0e8-f1ac1afb1092 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f62e0d7-f59a-4087-b0e8-f1ac1afb1092');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1598a81c-0b73-490d-a8a9-0e62340dd2c6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1598a81c-0b73-490d-a8a9-0e62340dd2c6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1598a81c-0b73-490d-a8a9-0e62340dd2c6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"p_hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.755290276861339,\n        \"min\": 0.5,\n        \"max\": 5.75,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          3.5,\n          3.75,\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "0NRX_xAhvFV2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x=df[['p_hours']].values\n",
        "y=df[['w_1']].values\n",
        "x,y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fqxz4wC1vPuu",
        "outputId": "0ab84383-96b6-42d6-d1f1-4b14218837c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[0.5 ],\n",
              "        [0.75],\n",
              "        [1.  ],\n",
              "        [2.  ],\n",
              "        [3.  ],\n",
              "        [4.  ],\n",
              "        [5.  ],\n",
              "        [5.5 ],\n",
              "        [4.5 ],\n",
              "        [3.5 ],\n",
              "        [2.5 ],\n",
              "        [3.75],\n",
              "        [4.75],\n",
              "        [5.75]]),\n",
              " array([[0],\n",
              "        [0],\n",
              "        [0],\n",
              "        [0],\n",
              "        [1],\n",
              "        [0],\n",
              "        [1],\n",
              "        [1],\n",
              "        [1],\n",
              "        [1],\n",
              "        [0],\n",
              "        [1],\n",
              "        [1],\n",
              "        [1]]))"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.1)\n",
        "x_train.shape,x_test.shape,y_train.shape,y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MZBLN6Y5vnk3",
        "outputId": "83230c0c-e415-47bd-a331-8d2c4f107d1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((12, 1), (2, 1), (12, 1), (2, 1))"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sigmoid(x):\n",
        "      return 1/(1 + np.exp(-x))"
      ],
      "metadata": {
        "id": "JF_3gYpkv_D2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def logistic_regression(x,w):\n",
        "  y_hat=sigmoid(x@w)\n",
        "  return y_hat"
      ],
      "metadata": {
        "id": "4G0QCw7WwDtX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def bce(y,y_hat):\n",
        "  loss=-(np.mean(y*np.log(y_hat)+(1-y_hat)*np.log(1-y_hat)))\n",
        "  return loss"
      ],
      "metadata": {
        "id": "HPIeLtfgwHK-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def gradient(x,y,y_hat):\n",
        "  grads=(x.T@(y_hat-y))/len(y)\n",
        "  return grads"
      ],
      "metadata": {
        "id": "NgV0AMAtwKnO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " def gradient_descent(w,eta,grads):\n",
        "  w-=eta*grads\n",
        "  return w"
      ],
      "metadata": {
        "id": "ms1Pe-sawPM4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def accuracy(y,y_hat):\n",
        "  acc=np.sum(y==np.round(y_hat)/len(y))\n",
        "  return acc"
      ],
      "metadata": {
        "id": "NeNatA0XwTjX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = np.hstack((np.ones((len(x_train), 1)), x_train))\n",
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mfQtjWs1waQr",
        "outputId": "a552b11f-3245-41af-afaa-36ee22c0ed8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m=1\n",
        "w=np.random.randn(m+1,1)\n",
        "print(w.shape)\n",
        "eta=0.01\n",
        "n_epochs=2000"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MgZJCLRGwhWy",
        "outputId": "8e6f984f-c6b3-416e-ab32-c9a76e604287"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error_hist=[]\n",
        "for epoch in range(n_epochs):\n",
        "  y_hat=logistic_regression(x_train,w)\n",
        "  e=bce(y_train,y_hat)\n",
        "  error_hist.append(e)\n",
        "  grads=gradient(x_train,y_train,y_hat)\n",
        "  w=gradient_descent(w,eta,grads)\n",
        "  if(epoch+1)%100==0:\n",
        "    print(f'Epoch={epoch}, \\t E={e:.4},\\t w{w.T[0]}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sWApfh8_wlo-",
        "outputId": "5c94a9fa-2851-4ab9-928d-230e629ee5bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch=99, \t E=0.4949,\t w[-0.74782605  0.40545564]\n",
            "Epoch=199, \t E=0.4871,\t w[-0.85854257  0.43790734]\n",
            "Epoch=299, \t E=0.4811,\t w[-0.9645233   0.46676344]\n",
            "Epoch=399, \t E=0.4754,\t w[-1.0655763   0.49417986]\n",
            "Epoch=499, \t E=0.4699,\t w[-1.16199728  0.52040596]\n",
            "Epoch=599, \t E=0.4646,\t w[-1.25410038  0.54552892]\n",
            "Epoch=699, \t E=0.4595,\t w[-1.3421798   0.56961815]\n",
            "Epoch=799, \t E=0.4546,\t w[-1.42650739  0.59273765]\n",
            "Epoch=899, \t E=0.4499,\t w[-1.50733368  0.61494714]\n",
            "Epoch=999, \t E=0.4454,\t w[-1.58488923  0.63630228]\n",
            "Epoch=1099, \t E=0.4412,\t w[-1.65938607  0.65685482]\n",
            "Epoch=1199, \t E=0.4371,\t w[-1.7310192   0.67665283]\n",
            "Epoch=1299, \t E=0.4331,\t w[-1.79996793  0.6957409 ]\n",
            "Epoch=1399, \t E=0.4294,\t w[-1.86639722  0.71416036]\n",
            "Epoch=1499, \t E=0.4258,\t w[-1.93045896  0.73194953]\n",
            "Epoch=1599, \t E=0.4224,\t w[-1.99229304  0.74914394]\n",
            "Epoch=1699, \t E=0.4191,\t w[-2.0520285   0.76577652]\n",
            "Epoch=1799, \t E=0.4159,\t w[-2.10978443  0.78187784]\n",
            "Epoch=1899, \t E=0.4129,\t w[-2.16567088  0.79747627]\n",
            "Epoch=1999, \t E=0.41,\t w[-2.21978968  0.81259817]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_hat = logistic_regression(np.random.randn(5, 2), np.random.randn(2, 1))\n",
        "y_hat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UzHwYY2Iw-lD",
        "outputId": "63c1ebb1-e9aa-4743-f567-eed840e452a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.28557078],\n",
              "       [0.62574758],\n",
              "       [0.06851756],\n",
              "       [0.19276073],\n",
              "       [0.10112064]])"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Problem 1**"
      ],
      "metadata": {
        "id": "I32BK9Dzx-0P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1-2**"
      ],
      "metadata": {
        "id": "7a4x67JZ_foB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import make_classification\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LogisticRegressionCV, SGDClassifier ,RidgeClassifierCV\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.datasets import make_classification\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.multiclass import OneVsRestClassifier, OneVsOneClassifier\n",
        "\n",
        "X, y = make_classification(n_samples=1000, n_features=3, n_redundant=0, n_clusters_per_class=1, class_sep=1,  n_classes=4, random_state = 94)\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state= 94)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "5ZLeG0h_yIzV",
        "outputId": "edc224c7-381c-47b3-8f66-c0343cc4e08d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1-3**"
      ],
      "metadata": {
        "id": "DZAd3Mk5_a_V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize logistic regression classifier with cross-validation\n",
        "logistic_cv = LogisticRegressionCV(cv=5, max_iter=1000, random_state=94)\n",
        "\n",
        "# Wrap logistic regression model with OneVsRestClassifier\n",
        "model_logistic = OneVsRestClassifier(logistic_cv)\n",
        "\n",
        "# Train the classifier\n",
        "model_logistic.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_logistic.predict(X_test)\n",
        "\n",
        "# Evaluate the classifier\n",
        "logistic_score_train = model_logistic.score(X_train, y_train)\n",
        "logistic_score_test = model_logistic.score(X_test, y_test)\n",
        "\n",
        "print(\"Logistic Regression CV Training Accuracy:\", logistic_score_train)\n",
        "print(\"Logistic Regression CV Testing Accuracy:\", logistic_score_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I1OjWjts0oBS",
        "outputId": "cffaca99-a413-4d98-bd2a-30275ef1d9f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression CV Training Accuracy: 0.84875\n",
            "Logistic Regression CV Testing Accuracy: 0.83\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.multiclass import OneVsRestClassifier, OneVsOneClassifier\n",
        "# Initialize classifiers\n",
        "logistic_cv = LogisticRegressionCV(cv=5, max_iter=1000, random_state=94)\n",
        "\n",
        "\n",
        "model_logistic1 = OneVsOneClassifier(logistic_cv)\n",
        "\n",
        "\n",
        "# Train classifiers\n",
        "model_logistic1.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_logistic1.predict(X_test)\n",
        "\n",
        "\n",
        "\n",
        "# Evaluate classifiers\n",
        "logistic_score11 = model_logistic1.score(X_train,y_train)\n",
        "logistic_score22 = model_logistic1.score(X_test, y_test)\n",
        "\n",
        "print(\"Logistic Regression Train CV Accuracy:\", logistic_score11)\n",
        "print(\"Logistic Regression Test CV Accuracy:\", logistic_score22)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_pTCpqVu9E3h",
        "outputId": "268f083a-0889-4204-f19a-12c55b20485b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Train CV Accuracy: 0.88375\n",
            "Logistic Regression Test CV Accuracy: 0.895\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sgd_clf = SGDClassifier(loss='hinge', penalty='l2', max_iter=1000, tol=1e-3, random_state=94)\n",
        "model_sgd = OneVsRestClassifier(sgd_clf)\n",
        "model_sgd.fit(X_train, y_train)\n",
        "y_pred = model_sgd.predict(X_test)\n",
        "sgd_score1 = model_sgd.score(X_train,y_train)\n",
        "sgd_score2 = model_sgd.score(X_test, y_test)\n",
        "print(\"SGDClassifier Train Accuracy::\", sgd_score1)\n",
        "print(\"SGDClassifier Test Accuracy::\", sgd_score2)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oo0m4nDf9J5N",
        "outputId": "03f00179-f9c7-46bc-ce3f-bb050b408fa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SGDClassifier Train Accuracy:: 0.7575\n",
            "SGDClassifier Test Accuracy:: 0.725\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sgd_clf = SGDClassifier(loss='hinge', penalty='l2', max_iter=1000, tol=1e-3, random_state=94)\n",
        "model_sgd1 = OneVsOneClassifier(sgd_clf)\n",
        "model_sgd1.fit(X_train, y_train)\n",
        "y_pred = model_sgd1.predict(X_test)\n",
        "sgd_score11 = model_sgd1.score(X_train,y_train)\n",
        "sgd_score22 = model_sgd1.score(X_test, y_test)\n",
        "\n",
        "print(\"SGDClassifier Train Accuracy::\", sgd_score11)\n",
        "\n",
        "print(\"SGDClassifier Test Accuracy::\", sgd_score22)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZE1WP9Q39WKg",
        "outputId": "84a3c9ce-c878-4b84-e018-e2bd54c7d2a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SGDClassifier Train Accuracy:: 0.85125\n",
            "SGDClassifier Test Accuracy:: 0.845\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.multiclass import OneVsRestClassifier, OneVsOneClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "colors = np.array(['Green','blue', 'yellow','pink'])\n",
        "plt.scatter(X[:, 0], X[:, 1], c=colors[y])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "O3PNlIsd9lr8",
        "outputId": "f21545c7-c7e6-483c-db7e-9d79fec1ede4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "\n",
        "# Generate synthetic data with four classes and three features\n",
        "X, y = make_classification(n_samples=1000, n_features=3, n_redundant=0,\n",
        "                           n_clusters_per_class=1, class_sep=1,\n",
        "                           n_classes=4, random_state=94)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=94)\n",
        "\n",
        "# Train a logistic regression model\n",
        "logistic_cv = LogisticRegressionCV(cv=5, max_iter=1000, random_state=94)\n",
        "model_logistic1 = OneVsOneClassifier(logistic_cv)\n",
        "model_logistic1.fit(X_train, y_train)  # Fit the model\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_logistic1.predict(X_test)\n",
        "\n",
        "# Calculate accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "# Plot decision boundaries\n",
        "x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x1_min, x1_max, 0.02), np.arange(x2_min, x2_max, 0.02))\n",
        "Z = model_logistic1.predict(np.c_[xx.ravel(), yy.ravel(), np.zeros_like(xx.ravel())])  # Use model_logistic1 instead of model\n",
        "Z = Z.reshape(xx.shape)\n",
        "plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.8)  # Use tab10 color map\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', cmap=plt.cm.tab10, marker='o', s=50)  # Use tab10 color map and change marker style\n",
        "plt.xlabel('Feature 1')\n",
        "plt.ylabel('Feature 2')\n",
        "plt.title('Decision Boundaries for Four Classes')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "6rHcWPrm-myc",
        "outputId": "d3920f82-7d82-456a-afae-3e019ed23c59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.795\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1-4**"
      ],
      "metadata": {
        "id": "TpwTb2ki_SDw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install drawdata"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10JHn8zGBT84",
        "outputId": "6a232212-eddb-455c-ab6d-05010ba84e08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: drawdata in /usr/local/lib/python3.10/dist-packages (0.3.0)\n",
            "Requirement already satisfied: jupyterlab>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from drawdata) (4.1.6)\n",
            "Requirement already satisfied: anywidget>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from drawdata) (0.9.6)\n",
            "Requirement already satisfied: ipython>=7.16.1 in /usr/local/lib/python3.10/dist-packages (from drawdata) (7.34.0)\n",
            "Requirement already satisfied: ipywidgets>=7.6.0 in /usr/local/lib/python3.10/dist-packages (from anywidget>=0.9.2->drawdata) (7.7.1)\n",
            "Requirement already satisfied: psygnal>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from anywidget>=0.9.2->drawdata) (0.11.0)\n",
            "Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from anywidget>=0.9.2->drawdata) (4.10.0)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (67.7.2)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (0.19.1)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (0.7.5)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (5.7.1)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (3.0.43)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (2.16.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (0.1.6)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=7.16.1->drawdata) (4.9.0)\n",
            "Requirement already satisfied: async-lru>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (2.0.4)\n",
            "Requirement already satisfied: httpx>=0.25.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (0.27.0)\n",
            "Requirement already satisfied: ipykernel>=6.5.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (6.29.4)\n",
            "Requirement already satisfied: jinja2>=3.0.3 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (3.1.3)\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (5.7.2)\n",
            "Requirement already satisfied: jupyter-lsp>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (2.2.5)\n",
            "Requirement already satisfied: jupyter-server<3,>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (2.13.0)\n",
            "Requirement already satisfied: jupyterlab-server<3,>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (2.26.0)\n",
            "Requirement already satisfied: notebook-shim>=0.2 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (0.2.4)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (24.0)\n",
            "Requirement already satisfied: tomli>=1.2.2 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (2.0.1)\n",
            "Requirement already satisfied: tornado>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab>=4.0.0->drawdata) (6.3.3)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (3.7.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (2024.2.2)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (1.0.5)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (3.6)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (1.3.1)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (0.14.0)\n",
            "Requirement already satisfied: comm>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (0.2.2)\n",
            "Requirement already satisfied: debugpy>=1.6.5 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (1.6.6)\n",
            "Requirement already satisfied: jupyter-client>=6.1.12 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (7.4.9)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (1.6.0)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (5.9.5)\n",
            "Requirement already satisfied: pyzmq>=24 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (24.0.1)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.0->anywidget>=0.9.2->drawdata) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.0->anywidget>=0.9.2->drawdata) (3.6.6)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.0->anywidget>=0.9.2->drawdata) (3.0.10)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=7.16.1->drawdata) (0.8.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2>=3.0.3->jupyterlab>=4.0.0->drawdata) (2.1.5)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core->jupyterlab>=4.0.0->drawdata) (4.2.0)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (23.1.0)\n",
            "Requirement already satisfied: jupyter-events>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.10.0)\n",
            "Requirement already satisfied: jupyter-server-terminals in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.5.3)\n",
            "Requirement already satisfied: nbconvert>=6.4.4 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (6.5.4)\n",
            "Requirement already satisfied: nbformat>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (5.10.3)\n",
            "Requirement already satisfied: overrides in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (7.7.0)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.20.0)\n",
            "Requirement already satisfied: send2trash>=1.8.2 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (1.8.2)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.18.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (1.7.0)\n",
            "Requirement already satisfied: babel>=2.10 in /usr/local/lib/python3.10/dist-packages (from jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (2.14.0)\n",
            "Requirement already satisfied: json5>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (0.9.24)\n",
            "Requirement already satisfied: jsonschema>=4.18.0 in /usr/local/lib/python3.10/dist-packages (from jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (4.19.2)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.10/dist-packages (from jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (2.31.0)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=7.16.1->drawdata) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=7.16.1->drawdata) (0.2.13)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx>=0.25.0->jupyterlab>=4.0.0->drawdata) (1.2.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (23.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (2023.12.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (0.34.0)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (0.18.0)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from jupyter-client>=6.1.12->ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (0.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from jupyter-client>=6.1.12->ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (2.8.2)\n",
            "Requirement already satisfied: python-json-logger>=2.0.4 in /usr/local/lib/python3.10/dist-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (2.0.7)\n",
            "Requirement already satisfied: pyyaml>=5.3 in /usr/local/lib/python3.10/dist-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (6.0.1)\n",
            "Requirement already satisfied: rfc3339-validator in /usr/local/lib/python3.10/dist-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.1.4)\n",
            "Requirement already satisfied: rfc3986-validator>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from jupyter-events>=0.9.0->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.1.1)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (4.9.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (4.12.3)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (6.1.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.7.1)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.3.0)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.10.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (1.5.1)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (1.2.1)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat>=5.3.0->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (2.19.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (3.3.2)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (2.0.7)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.0->anywidget>=0.9.2->drawdata) (6.5.5)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (21.2.0)\n",
            "Requirement already satisfied: fqdn in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (1.5.1)\n",
            "Requirement already satisfied: isoduration in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (20.11.0)\n",
            "Requirement already satisfied: jsonpointer>1.13 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (2.4)\n",
            "Requirement already satisfied: uri-template in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (1.3.0)\n",
            "Requirement already satisfied: webcolors>=1.11 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (1.13)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.0->anywidget>=0.9.2->drawdata) (1.0.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->jupyter-client>=6.1.12->ipykernel>=6.5.0->jupyterlab>=4.0.0->drawdata) (1.16.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (1.16.0)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (2.5)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=6.4.4->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (0.5.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->jupyter-server<3,>=2.4.0->jupyterlab>=4.0.0->drawdata) (2.22)\n",
            "Requirement already satisfied: arrow>=0.15.0 in /usr/local/lib/python3.10/dist-packages (from isoduration->jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (1.3.0)\n",
            "Requirement already satisfied: types-python-dateutil>=2.8.10 in /usr/local/lib/python3.10/dist-packages (from arrow>=0.15.0->isoduration->jsonschema>=4.18.0->jupyterlab-server<3,>=2.19.0->jupyterlab>=4.0.0->drawdata) (2.9.0.20240316)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.multiclass import OneVsRestClassifier, OneVsOneClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression, SGDClassifier\n",
        "from drawdata import ScatterWidget\n"
      ],
      "metadata": {
        "id": "3VlU7QE8_OfR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " pip install pandas polars"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FY51W5FWB1X7",
        "outputId": "02ff028d-f620-48ae-8af5-222e597d056c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: polars in /usr/local/lib/python3.10/dist-packages (0.20.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from drawdata import ScatterWidget\n",
        "widget = ScatterWidget()\n",
        "widget"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 598,
          "referenced_widgets": [
            "296ce571fe3b4964b0b5e68d3a18d722",
            "9e0cc4cea42f4e788094c4ef2468766f"
          ]
        },
        "id": "wv_kv_z9B47f",
        "outputId": "606571e5-471c-4826-82f9-9ef368be70ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "ScatterWidget()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "296ce571fe3b4964b0b5e68d3a18d722"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"
                }
              }
            }
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the drawn data as a list of dictionaries\n",
        "widget.data\n",
        "pd = widget.data_as_pandas\n",
        "# Get the drawn data as a dataframe\n",
        "widget.data_as_polars"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "B8mNTqElB_gG",
        "outputId": "d4cab175-50ab-4130-ff7b-4c2f52a53c90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "shape: (1_442, 4)\n",
              "┌────────────┬────────────┬─────────┬───────┐\n",
              "│ x          ┆ y          ┆ color   ┆ label │\n",
              "│ ---        ┆ ---        ┆ ---     ┆ ---   │\n",
              "│ f64        ┆ f64        ┆ str     ┆ str   │\n",
              "╞════════════╪════════════╪═════════╪═══════╡\n",
              "│ 190.58156  ┆ 385.543526 ┆ #1f77b4 ┆ a     │\n",
              "│ 181.101726 ┆ 396.280781 ┆ #1f77b4 ┆ a     │\n",
              "│ 187.500884 ┆ 342.757488 ┆ #1f77b4 ┆ a     │\n",
              "│ 210.709655 ┆ 331.912476 ┆ #1f77b4 ┆ a     │\n",
              "│ …          ┆ …          ┆ …       ┆ …     │\n",
              "│ 601.524369 ┆ 163.094492 ┆ #2ca02c ┆ c     │\n",
              "│ 638.51274  ┆ 117.575856 ┆ #2ca02c ┆ c     │\n",
              "│ 628.617672 ┆ 133.157097 ┆ #2ca02c ┆ c     │\n",
              "│ 615.302161 ┆ 107.394393 ┆ #2ca02c ┆ c     │\n",
              "└────────────┴────────────┴─────────┴───────┘"
            ],
            "text/html": [
              "<div><style>\n",
              ".dataframe > thead > tr,\n",
              ".dataframe > tbody > tr {\n",
              "  text-align: right;\n",
              "  white-space: pre-wrap;\n",
              "}\n",
              "</style>\n",
              "<small>shape: (1_442, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>y</th><th>color</th><th>label</th></tr><tr><td>f64</td><td>f64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>190.58156</td><td>385.543526</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>181.101726</td><td>396.280781</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>187.500884</td><td>342.757488</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>210.709655</td><td>331.912476</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>208.098362</td><td>290.958849</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>205.854935</td><td>279.767165</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>204.720673</td><td>270.695935</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>203.604319</td><td>299.563733</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>219.519179</td><td>290.902825</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>225.740454</td><td>280.946375</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>234.873261</td><td>317.714626</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>230.498274</td><td>318.685299</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>556.177688</td><td>141.657297</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>580.592669</td><td>166.110358</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>533.801352</td><td>355.451192</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>536.740255</td><td>313.79992</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>556.054607</td><td>263.133477</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>590.883675</td><td>231.826992</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>586.190807</td><td>177.976373</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>619.602227</td><td>159.112852</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>601.524369</td><td>163.094492</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>638.51274</td><td>117.575856</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>628.617672</td><td>133.157097</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>615.302161</td><td>107.394393</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr></tbody></table></div>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "shape: (1_442, 4)\n",
              "┌────────────┬────────────┬─────────┬───────┐\n",
              "│ x          ┆ y          ┆ color   ┆ label │\n",
              "│ ---        ┆ ---        ┆ ---     ┆ ---   │\n",
              "│ f64        ┆ f64        ┆ str     ┆ str   │\n",
              "╞════════════╪════════════╪═════════╪═══════╡\n",
              "│ 190.58156  ┆ 385.543526 ┆ #1f77b4 ┆ a     │\n",
              "│ 181.101726 ┆ 396.280781 ┆ #1f77b4 ┆ a     │\n",
              "│ 187.500884 ┆ 342.757488 ┆ #1f77b4 ┆ a     │\n",
              "│ 210.709655 ┆ 331.912476 ┆ #1f77b4 ┆ a     │\n",
              "│ …          ┆ …          ┆ …       ┆ …     │\n",
              "│ 601.524369 ┆ 163.094492 ┆ #2ca02c ┆ c     │\n",
              "│ 638.51274  ┆ 117.575856 ┆ #2ca02c ┆ c     │\n",
              "│ 628.617672 ┆ 133.157097 ┆ #2ca02c ┆ c     │\n",
              "│ 615.302161 ┆ 107.394393 ┆ #2ca02c ┆ c     │\n",
              "└────────────┴────────────┴─────────┴───────┘"
            ],
            "text/html": [
              "<div><style>\n",
              ".dataframe > thead > tr,\n",
              ".dataframe > tbody > tr {\n",
              "  text-align: right;\n",
              "  white-space: pre-wrap;\n",
              "}\n",
              "</style>\n",
              "<small>shape: (1_442, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>x</th><th>y</th><th>color</th><th>label</th></tr><tr><td>f64</td><td>f64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>190.58156</td><td>385.543526</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>181.101726</td><td>396.280781</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>187.500884</td><td>342.757488</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>210.709655</td><td>331.912476</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>208.098362</td><td>290.958849</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>205.854935</td><td>279.767165</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>204.720673</td><td>270.695935</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>203.604319</td><td>299.563733</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>219.519179</td><td>290.902825</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>225.740454</td><td>280.946375</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>234.873261</td><td>317.714626</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>230.498274</td><td>318.685299</td><td>&quot;#1f77b4&quot;</td><td>&quot;a&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>556.177688</td><td>141.657297</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>580.592669</td><td>166.110358</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>533.801352</td><td>355.451192</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>536.740255</td><td>313.79992</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>556.054607</td><td>263.133477</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>590.883675</td><td>231.826992</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>586.190807</td><td>177.976373</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>619.602227</td><td>159.112852</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>601.524369</td><td>163.094492</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>638.51274</td><td>117.575856</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>628.617672</td><td>133.157097</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr><tr><td>615.302161</td><td>107.394393</td><td>&quot;#2ca02c&quot;</td><td>&quot;c&quot;</td></tr></tbody></table></div>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = pd[['x', 'y']].values\n",
        "pd['label'] = pd['label'].replace({'a': 0, 'b': 1, 'c': 2,'d':3})\n",
        "y = pd['label'].values\n",
        "X,y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nCqwRny8Cecn",
        "outputId": "ea2e088c-b463-45d9-ae8c-63ec596c3e41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[190.58156038, 385.54352603],\n",
              "        [181.10172608, 396.28078062],\n",
              "        [187.50088418, 342.75748769],\n",
              "        ...,\n",
              "        [638.51273968, 117.57585619],\n",
              "        [628.6176724 , 133.15709684],\n",
              "        [615.30216095, 107.39439278]]),\n",
              " array([0, 0, 0, ..., 2, 2, 2]))"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)"
      ],
      "metadata": {
        "id": "J68YHOTmDFHq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize classifiers\n",
        "logistic_cv = LogisticRegressionCV(cv=5, max_iter=1000, random_state=94)\n",
        "\n",
        "\n",
        "model_logistic = OneVsRestClassifier(logistic_cv)\n",
        "\n",
        "\n",
        "# Train classifiers\n",
        "model_logistic.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_logistic.predict(X_test)\n",
        "\n",
        "\n",
        "\n",
        "# Evaluate classifiers\n",
        "logistic_score1 = model_logistic.score(X_train,y_train)\n",
        "logistic_score2 = model_logistic.score(X_test, y_test)\n",
        "\n",
        "\n",
        "print(\"Logistic Regression CV Accuracy:\", logistic_score1)\n",
        "print(\"Logistic Regression CV Accuracy:\", logistic_score2)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RLJmU0YwDSwi",
        "outputId": "94157785-6c09-4c7f-e6c6-4e281b1bebaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression CV Accuracy: 0.8175\n",
            "Logistic Regression CV Accuracy: 0.78\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize classifiers\n",
        "logistic_cv = LogisticRegressionCV(cv=5, max_iter=1000, random_state=94)\n",
        "\n",
        "\n",
        "model_logistic1 = OneVsOneClassifier(logistic_cv)\n",
        "\n",
        "\n",
        "# Train classifiers\n",
        "model_logistic1.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_logistic1.predict(X_test)\n",
        "\n",
        "\n",
        "\n",
        "# Evaluate classifiers\n",
        "logistic_score11 = model_logistic1.score(X_train,y_train)\n",
        "logistic_score22 = model_logistic1.score(X_test, y_test)\n",
        "\n",
        "print(\"Logistic Regression Train CV Accuracy:\", logistic_score11)\n",
        "print(\"Logistic Regression Test CV Accuracy:\", logistic_score22)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gJVWPGWgIWj-",
        "outputId": "75b7904a-ccb6-4871-9d7d-32401159040d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Train CV Accuracy: 0.83625\n",
            "Logistic Regression Test CV Accuracy: 0.795\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sgd_clf = SGDClassifier(loss='hinge', penalty='l2', max_iter=1000, tol=1e-3, random_state=94)\n",
        "model_sgd = OneVsRestClassifier(sgd_clf)\n",
        "model_sgd.fit(X_train, y_train)\n",
        "y_pred = model_sgd.predict(X_test)\n",
        "sgd_score1 = model_sgd.score(X_train,y_train)\n",
        "sgd_score2 = model_sgd.score(X_test, y_test)\n",
        "print(\"SGDClassifier Train Accuracy::\", sgd_score1)\n",
        "print(\"SGDClassifier Test Accuracy::\", sgd_score2)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7CjRdkUWIx6x",
        "outputId": "f9caa39c-ea9b-448f-c51c-529d60f5160a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SGDClassifier Train Accuracy:: 0.71875\n",
            "SGDClassifier Test Accuracy:: 0.685\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sgd_clf = SGDClassifier(loss='hinge', penalty='l2', max_iter=1000, tol=1e-3, random_state=94)\n",
        "model_sgd1 = OneVsOneClassifier(sgd_clf)\n",
        "model_sgd1.fit(X_train, y_train)\n",
        "y_pred = model_sgd1.predict(X_test)\n",
        "sgd_score11 = model_sgd1.score(X_train,y_train)\n",
        "sgd_score22 = model_sgd1.score(X_test, y_test)\n",
        "\n",
        "print(\"SGDClassifier Train Accuracy::\", sgd_score11)\n",
        "\n",
        "print(\"SGDClassifier Test Accuracy::\", sgd_score22)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gOoJrEaDI9R2",
        "outputId": "9f616318-6d7b-4fa4-92c0-6f8dbb90f15a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SGDClassifier Train Accuracy:: 0.8325\n",
            "SGDClassifier Test Accuracy:: 0.815\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "colors = np.array(['Green','blue', 'red','pink'])\n",
        "plt.scatter(X[:, 0], X[:, 1], c=colors[y])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "eFC3WqJ5JK9j",
        "outputId": "e59a492c-86ba-4f54-9acc-4ed1334bff3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Generate synthetic data with four classes and three features\n",
        "X, y = make_classification(n_samples=1000, n_features=3, n_redundant=0,\n",
        "                           n_clusters_per_class=1, class_sep=1,\n",
        "                           n_classes=4, random_state=94)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=94)\n",
        "\n",
        "# Train a logistic regression model\n",
        "logistic_cv = LogisticRegressionCV(cv=5, max_iter=1000, random_state=94)\n",
        "model_logistic1 = OneVsOneClassifier(logistic_cv)\n",
        "model_logistic1.fit(X_train, y_train)  # Fit the model\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_logistic1.predict(X_test)\n",
        "\n",
        "# Calculate accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "# Plot decision boundaries\n",
        "x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x1_min, x1_max, 0.02), np.arange(x2_min, x2_max, 0.02))\n",
        "Z = model_logistic1.predict(np.c_[xx.ravel(), yy.ravel(), np.zeros_like(xx.ravel())])  # Use model_logistic1 instead of model\n",
        "Z = Z.reshape(xx.shape)\n",
        "plt.contourf(xx, yy, Z, cmap=plt.cm.tab10, alpha=0.8)  # Use tab10 color map\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', cmap=plt.cm.tab10, marker='o', s=50)  # Use tab10 color map and change marker style\n",
        "plt.xlabel('Feature 1')\n",
        "plt.ylabel('Feature 2')\n",
        "plt.title('Decision Boundaries for Four Classes')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "bEO1-3CEJQGU",
        "outputId": "a37fb442-668a-45a3-8ddb-6afc41a5eb02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.895\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Problem 2**"
      ],
      "metadata": {
        "id": "FKaQW38DyWVy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2-2 آ**"
      ],
      "metadata": {
        "id": "2LVUIpLLKNWo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pip install scipy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LRKrREx4ybNv",
        "outputId": "794396c1-cd40-49b1-a8e8-711681ba13b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (1.11.4)\n",
            "Requirement already satisfied: numpy<1.28.0,>=1.21.6 in /usr/local/lib/python3.10/dist-packages (from scipy) (1.25.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gdown\n",
        "!gdown 1hZGdUPSYMvGZv8jXd_JOcWcZTToyELDF\n",
        "!gdown 1KKdrc_tr9PUbzlj_PH5tk8Hxs7AkYQFS"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VLaQ-K4H1nby",
        "outputId": "839b835d-946c-4f8f-95df-fa2fddb8dd5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gdown in /usr/local/lib/python3.10/dist-packages (4.7.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from gdown) (3.13.3)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from gdown) (2.31.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from gdown) (1.16.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from gdown) (4.66.2)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown) (4.12.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown) (2.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2024.2.2)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "Downloading...\n",
            "From (original): https://drive.google.com/uc?id=1hZGdUPSYMvGZv8jXd_JOcWcZTToyELDF\n",
            "From (redirected): https://drive.google.com/uc?id=1hZGdUPSYMvGZv8jXd_JOcWcZTToyELDF&confirm=t&uuid=b912634d-5fe9-4e50-bd31-dd5ac72bbf10\n",
            "To: /content/107.mat\n",
            "100% 2.93M/2.93M [00:00<00:00, 26.3MB/s]\n",
            "Downloading...\n",
            "From (original): https://drive.google.com/uc?id=1KKdrc_tr9PUbzlj_PH5tk8Hxs7AkYQFS\n",
            "From (redirected): https://drive.google.com/uc?id=1KKdrc_tr9PUbzlj_PH5tk8Hxs7AkYQFS&confirm=t&uuid=c4aaae77-2302-4be5-91a3-f90d46829382\n",
            "To: /content/99.mat\n",
            "100% 15.5M/15.5M [00:00<00:00, 86.3MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.io import loadmat\n",
        "mat_data_fault = loadmat('/content/107.mat')\n",
        "mat_data_normal = loadmat('/content/99.mat')\n",
        "#40102094"
      ],
      "metadata": {
        "id": "lRPLCzOTKdhq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "fvvN7J33yu5D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(mat_data_fault.keys())\n",
        "print(mat_data_normal.keys())\n",
        "M = 100\n",
        "N = 200\n",
        "fault_data = mat_data_fault['X107_DE_time']\n",
        "normal_data = mat_data_normal['X099_DE_time']\n",
        "print(\"fault_data\", fault_data.shape)\n",
        "print(\"normal_data\", normal_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K09dWkCAyzlj",
        "outputId": "278e4c06-a8b1-470e-df02-1e731d841471"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['__header__', '__version__', '__globals__', 'X107_DE_time', 'X107_FE_time', 'X107_BA_time', 'X107RPM'])\n",
            "dict_keys(['__header__', '__version__', '__globals__', 'ans', 'X098_DE_time', 'X098_FE_time', 'X099_DE_time', 'X099_FE_time'])\n",
            "fault_data (122136, 1)\n",
            "normal_data (485063, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize an empty dictionary to store samples for the normal class\n",
        "normal_data = {}\n",
        "\n",
        "# Loop through the keys in mat_data_normal\n",
        "for key in mat_data_normal.keys():\n",
        "    # Check if the key ends with 'X097_DE_time'\n",
        "    if key.endswith('X099_DE_time'):\n",
        "        # Set class1 to the current key\n",
        "        class1 = key\n",
        "        normal_data[class1] = []  # Initialize an empty list to store samples for this class\n",
        "\n",
        "        # Generate M samples of length N for this class\n",
        "        sample = []\n",
        "        for i in range(M):\n",
        "            # Randomly select a start index within the valid range of the data associated with the key\n",
        "            start_idx = np.random.randint(0, len(mat_data_normal[key]))\n",
        "\n",
        "            # Extract a single sample of length N starting from the randomly generated start index\n",
        "            single_sample = mat_data_normal[key][start_idx:start_idx + N]\n",
        "\n",
        "            # Append the sample to the sample list\n",
        "            sample.append(single_sample)\n",
        "\n",
        "        # Store the list of samples for this class in the normal_data dictionary under the key class1\n",
        "        normal_data[class1] = sample\n",
        "\n",
        "# Convert the samples stored in normal_data dictionary into a matrix format\n",
        "normal_class = np.vstack([np.array(sample) for sample in normal_data.values()])\n",
        "\n",
        "# Reshape the normal_class matrix to remove any single-dimensional entries from its shape\n",
        "normal_class = np.squeeze(normal_class)\n",
        "\n",
        "# Print the shape of the normal_class matrix\n",
        "print(\"Normal Matrix Shape:\", normal_class.shape)\n",
        "\n",
        "# Print the contents of the normal_class matrix\n",
        "print(\"Normal Matrix:\", normal_class)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6uIhxC4My5fu",
        "outputId": "eda4a1d5-3d91-4379-f099-32ffb0ca5bec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Normal Matrix Shape: (100, 200)\n",
            "Normal Matrix: [[ 0.06821723  0.02023569  0.008136   ... -0.00104308  0.05590892\n",
            "   0.07906523]\n",
            " [-0.111192   -0.08490646 -0.02795446 ...  0.12642092  0.09450277\n",
            "   0.02941477]\n",
            " [-0.00083446  0.01022215 -0.03817662 ...  0.00521538  0.01063938\n",
            "   0.06675692]\n",
            " ...\n",
            " [ 0.04693846  0.05277969  0.04255754 ...  0.14206708  0.09554585\n",
            "   0.08177723]\n",
            " [-0.07197231 -0.03504738 -0.04756431 ...  0.06154154  0.01835815\n",
            "   0.03045785]\n",
            " [-0.043392   -0.01314277  0.024408   ... -0.02586831 -0.09742338\n",
            "  -0.13184492]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2-2 ب**"
      ],
      "metadata": {
        "id": "oo23-MXmqmjE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize an empty dictionary to store samples for the fault class\n",
        "fault_data = {}\n",
        "\n",
        "# Loop through the keys in mat_data_fault\n",
        "for key in mat_data_fault.keys():\n",
        "    # Check if the key ends with 'X105_DE_time'\n",
        "    if key.endswith('X107_DE_time'):\n",
        "        # Set class2 to the current key\n",
        "        class2 = key\n",
        "        fault_data[class2] = []  # Initialize an empty list to store samples for this class\n",
        "         # Generate M samples of length N for this class\n",
        "        sample2 = []\n",
        "        for i in range(M):\n",
        "            # Randomly select a start index within the valid range of the data associated with the key\n",
        "            start_idx = np.random.randint(0, len(mat_data_fault[key])-N)\n",
        "            # Extract a single sample of length N starting from the randomly generated start index\n",
        "            single_sample2 = mat_data_fault[key][start_idx:start_idx + N]\n",
        "            # Append the sample to the sample2 list\n",
        "            sample2.append(single_sample2)\n",
        "\n",
        "        # Store the list of samples for this class in the fault_data dictionary under the key class2\n",
        "        fault_data[class2] = sample2\n",
        "\n",
        "# Convert the samples stored in fault_data dictionary into a matrix format\n",
        "fault_class = np.vstack([np.array(sample2) for sample2 in fault_data.values()])\n",
        "\n",
        "# Reshape the fault_class matrix to remove any single-dimensional entries from its shape\n",
        "fault_class = np.squeeze(fault_class)\n",
        "\n",
        "# Print the shape of the fault_class matrix\n",
        "print(\"fault Matrix Shape:\", fault_class.shape)\n",
        "\n",
        "# Print the contents of the fault_class matrix\n",
        "print(\"fault Matrix:\", fault_class)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NUL0yz7cfnoD",
        "outputId": "9da3d2f7-99a8-4276-8734-89f95e6f63b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fault Matrix Shape: (100, 200)\n",
            "fault Matrix: [[ 7.53699002e-02 -4.19082635e-02 -1.68770100e-01 ...  1.63734611e-01\n",
            "  -5.84766467e-02 -1.84363872e-01]\n",
            " [-1.20851737e-01  4.80807984e-02 -5.40584112e-01 ...  8.73900998e-02\n",
            "   1.23450699e-02 -7.13090220e-02]\n",
            " [-3.94554930e-01  1.21176607e-01  3.06352655e-01 ... -1.09822391e+00\n",
            "   2.24322914e-01  5.77619321e-01]\n",
            " ...\n",
            " [-3.24870259e-03  5.03548902e-03 -9.29128942e-02 ... -6.56237924e-02\n",
            "   3.00017685e-01  1.60810778e-02]\n",
            " [-2.24485349e-01 -1.53826068e-01  5.99385629e-02 ...  3.44362475e-02\n",
            "   2.24160479e-02 -2.75489980e-01]\n",
            " [-1.62435130e-04  1.57562076e-02  6.10756088e-02 ...  4.30453094e-02\n",
            "   1.65034092e-01 -2.35530938e-02]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import kurtosis\n",
        "\n",
        "# Define functions to compute required features\n",
        "def compute_standard_deviation(data):\n",
        "    return np.std(data)\n",
        "\n",
        "def compute_peak(data):\n",
        "    return np.max(data)\n",
        "\n",
        "def compute_peak_to_peak(data):\n",
        "    return np.max(data) - np.min(data)\n",
        "\n",
        "def compute_kurtosis(data):\n",
        "    return kurtosis(data)\n",
        "\n",
        "def compute_mean(data):\n",
        "    return np.mean(data)\n",
        "\n",
        "def compute_root_mean_square(data):\n",
        "    return np.sqrt(np.mean(data**2))\n",
        "\n",
        "def compute_absolute_mean(data):\n",
        "    return np.mean(np.abs(data))\n",
        "\n",
        "def compute_impact_factor(data):\n",
        "    return compute_peak(data) / compute_root_mean_square(data)\n",
        "\n",
        "def compute_crest_factor(data):\n",
        "    return compute_peak(data) / compute_root_mean_square(data)\n",
        "\n",
        "def compute_clearance_factor(data):\n",
        "    return compute_peak_to_peak(data) / (2 * compute_standard_deviation(data))\n",
        "\n",
        "# Define function to extract features for each class\n",
        "def extract_features(samples):\n",
        "    features = []\n",
        "    for sample in samples:\n",
        "        std_dev = compute_standard_deviation(sample)\n",
        "        peak = compute_peak(sample)\n",
        "        peak_to_peak = compute_peak_to_peak(sample)\n",
        "        kurt = compute_kurtosis(sample)\n",
        "        mean = compute_mean(sample)\n",
        "        rms = compute_root_mean_square(sample)\n",
        "        abs_mean = compute_absolute_mean(sample)\n",
        "        impact_factor = compute_impact_factor(sample)\n",
        "        crest_factor = compute_crest_factor(sample)\n",
        "        clearance_factor = compute_clearance_factor(sample)\n",
        "        features.append([std_dev, peak, peak_to_peak, kurt, mean, rms, abs_mean, impact_factor, crest_factor, clearance_factor])\n",
        "    return np.array(features)\n",
        "\n",
        "# Extract features for normal and fault samples\n",
        "normal_features = extract_features(normal_class)\n",
        "fault_features = extract_features(fault_class)\n",
        "print(\"Extracted Features Shape of Noraml class:\", normal_features.shape)\n",
        "print(\"Extracted Features Shape of Fault class:\", fault_features .shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZK3gVZGkzFij",
        "outputId": "5d392c24-abc7-41c9-b2bf-4bce6d13cc93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracted Features Shape of Noraml class: (100, 10)\n",
            "Extracted Features Shape of Fault class: (100, 10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2-2 ج**"
      ],
      "metadata": {
        "id": "Jl493X8zLVbZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Shuffle the normal class data\n",
        "normal_indices = np.arange(normal_class.shape[0])\n",
        "np.random.shuffle(normal_indices)\n",
        "shuffled_normal_class = normal_class[normal_indices]\n",
        "\n",
        "# Shuffle the fault class data\n",
        "fault_indices = np.arange(fault_class.shape[0])\n",
        "np.random.shuffle(fault_indices)\n",
        "shuffled_fault_class = fault_class[fault_indices]\n",
        "\n",
        "# Create labels for normal and fault classes (0 for normal, 1 for fault)\n",
        "normal_labels = np.zeros(shuffled_normal_class.shape[0])\n",
        "fault_labels = np.ones(shuffled_fault_class.shape[0])\n",
        "\n",
        "# Combine the shuffled data matrices and labels\n",
        "X = np.vstack((shuffled_normal_class, shuffled_fault_class))\n",
        "y = np.concatenate((normal_labels, fault_labels))\n",
        "\n",
        "# Split the combined data into training and evaluation sets with a 80-20 ratio\n",
        "x_train, x_test, y_train,  y_test = train_test_split(X, y, test_size=0.2, random_state=94)\n",
        "\n",
        "# Print the shapes of the training and evaluation sets\n",
        "print(\"Training data shape:\", x_train.shape)\n",
        "print(\"Training label shape:\", y_train.shape)\n",
        "print(\"Evaluation data shape:\", x_test.shape)\n",
        "print(\"Evaluation label shape:\", y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UYRtgP36zKl_",
        "outputId": "387f5063-2b1b-42db-cc61-624b48c176d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training data shape: (160, 200)\n",
            "Training label shape: (160,)\n",
            "Evaluation data shape: (40, 200)\n",
            "Evaluation label shape: (40,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2-2 د**"
      ],
      "metadata": {
        "id": "olya1E4DMX_7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "x_train_normalized = scaler.fit_transform(x_train)\n",
        "x_eval_normalized = scaler.transform(x_test)\n",
        "\n",
        "# Print the shapes of the normalized training and evaluation sets\n",
        "print(\"Normalized Training set shape:\", x_train_normalized.shape)\n",
        "print(\"Normalized Evaluation set shape:\", x_eval_normalized.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u7of1jhSzOpl",
        "outputId": "d5e6fbb7-ab27-44f9-f929-4eb02d3229a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Normalized Training set shape: (160, 200)\n",
            "Normalized Evaluation set shape: (40, 200)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from re import A\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "print(x_train.shape)\n",
        "\n",
        "# Define the sigmoid function\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "# Logistic regression model\n",
        "def logistic_regression(x, w):\n",
        "    y_hat = sigmoid(x @ w)\n",
        "    return y_hat\n",
        "\n",
        "# Binary cross-entropy loss\n",
        "def bce(y, y_hat):\n",
        "    loss = -(np.mean(y * np.log(y_hat) + (1 - y) * np.log(1 - y_hat)))\n",
        "    return loss\n",
        "\n",
        "# Gradient calculation\n",
        "def gradient(x, y, y_hat):\n",
        "    grads = (x.T @ (y_hat - y)) / len(y)\n",
        "    return grads\n",
        "\n",
        "# Gradient descent\n",
        "def gradient_descent(w, eta, grads):\n",
        "    w -= eta * grads\n",
        "    return w\n",
        "\n",
        "def accuracy(y,y_hat):\n",
        "  acc=np.sum(y==np.round(y_hat))/len(y)\n",
        "  return acc\n",
        "\n",
        "def evaluate_performance(y_true, y_pred):\n",
        "    tp = np.sum((np.round(y_pred) == 1) & (y_true == 1))\n",
        "    fp = np.sum((np.round(y_pred) == 1) & (y_true == 0))\n",
        "    fn = np.sum((np.round(y_pred) == 0) & (y_true == 1))\n",
        "\n",
        "    accuracy = np.sum(y_true == np.round(y_pred)) / len(y_true)\n",
        "    precision = tp / (tp + fp) if (tp + fp) > 0 else 0\n",
        "    recall = tp / (tp + fn) if (tp + fn) > 0 else 0\n",
        "    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0\n",
        "\n",
        "    return accuracy, precision, recall, f1\n",
        "\n",
        "\n",
        "# Initialize weights\n",
        "m = 199\n",
        "w = np.random.randn(m + 1, 1)\n",
        "\n",
        "\n",
        "# Learning rate and number of epochs\n",
        "eta = 0.01\n",
        "n_epochs = 2000\n",
        "\n",
        "\n",
        "\n",
        "# Initialize weights\n",
        "m = 199\n",
        "w = np.random.randn(m + 1, 1)\n",
        "\n",
        "\n",
        "# Learning rate and number of epochs\n",
        "eta = 0.01\n",
        "n_epochs = 2000\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7_ZCinPIzSRk",
        "outputId": "ecefe2c7-c5bf-4d32-f4ff-f62108d653e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(160, 200)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate_performance(y_true, y_pred):\n",
        "    tp = np.sum((np.round(y_pred) == 1) & (y_true == 1))\n",
        "    fp = np.sum((np.round(y_pred) == 1) & (y_true == 0))\n",
        "    fn = np.sum((np.round(y_pred) == 0) & (y_true == 1))\n",
        "\n",
        "    accuracy = np.sum(y_true == np.round(y_pred)) / len(y_true)\n",
        "    precision = tp / (tp + fp) if (tp + fp) > 0 else 0\n",
        "    recall = tp / (tp + fn) if (tp + fn) > 0 else 0\n",
        "    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0\n",
        "\n",
        "    return accuracy, precision, recall, f1\n",
        "\n",
        "\n",
        "# Initialize weights\n",
        "m = 199\n",
        "w = np.random.randn(m + 1, 1)\n",
        "\n",
        "\n",
        "# Learning rate and number of epochs\n",
        "eta = 0.01\n",
        "n_epochs = 2000"
      ],
      "metadata": {
        "id": "xRdyYTwHzb0M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Training loop\n",
        "error_hist = []\n",
        "y_train = y_train.reshape(-1, 1)\n",
        "y_test = y_test.reshape(-1,1)\n",
        "for epoch in range(n_epochs):\n",
        "    y_hat = logistic_regression(x_train, w)\n",
        "    e = bce(y_train, y_hat)\n",
        "    error_hist.append(e)\n",
        "    grads = gradient(x_train, y_train, y_hat)\n",
        "    w = gradient_descent(w, eta, grads)\n",
        "    if (epoch + 1) % 10 == 0:\n",
        "        print(f'Epoch={epoch}, Loss={e:.4f}, Weights={w.T[0]}')\n"
      ],
      "metadata": {
        "id": "K34nkI8wVDvv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0bb8831c-4e27-4a82-ac16-c0c7cf6a4b44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            " -0.09595714 -1.13442529 -0.65462953 -1.81794226  0.09647571 -1.37440884\n",
            "  2.20674205  0.24839635  0.66701725  0.4720495  -1.44414592  0.02046797\n",
            " -0.72110562  0.32323437  1.43412258 -0.6243009   1.2540917  -0.15301199\n",
            " -1.01095164  0.51310965  0.89215247  1.11850808 -0.33590084  0.21002572\n",
            " -0.50087114  1.16148219 -0.23747737 -0.80501213  0.37037148 -0.67749935\n",
            " -0.84955261 -0.0357473  -0.21712702  1.0244099   0.37672519  1.76022313\n",
            " -0.7088992   1.25983494 -0.39166507  0.8725745   0.6504199   0.09302969\n",
            "  0.02477784 -1.13458158 -3.61121904  1.32747624  0.79686254 -1.14398798\n",
            "  0.45780555  0.05685851 -0.50720262 -1.06108947 -0.68820926  2.21963613\n",
            "  1.14958377 -0.64944589  0.39090968  0.56743285  0.0357763   1.64111981\n",
            " -0.25064211  1.08548904  0.16736703 -0.26730709 -1.69516278 -1.42026732\n",
            " -0.40600302 -0.18725649  1.26073109 -0.50507519 -0.29062328 -0.15110404\n",
            "  0.60302643  0.26928133 -0.37604687 -0.62329891 -0.43733827 -0.27493749\n",
            "  0.91717628  0.77132487]\n",
            "Epoch=679, Loss=1.1524, Weights=[-1.12149254  1.17747715  0.45602041  0.64383084 -1.92095204 -2.74423481\n",
            " -1.69236244  0.04100727 -0.1003198   0.30649974  1.87861961 -0.5925034\n",
            " -0.27049976 -0.36928692  0.27820751 -0.27971013  0.55724499 -0.47388119\n",
            "  0.58825902 -0.93997963 -1.80717004 -0.01228404  1.20859965  0.93015106\n",
            " -0.97852505 -2.43664026  0.21842842 -0.58606385 -1.27613748 -0.90669445\n",
            " -0.91614578 -0.99355836  1.70409291 -0.74536872  1.70158907  0.12214235\n",
            " -1.04353388 -1.59002717 -0.73169924  0.73437302  0.35391518  0.56872931\n",
            " -1.0265928  -0.7842851  -1.08642474  1.42661298  0.72041483  0.52350946\n",
            " -0.49248143  0.28476387 -0.31500945 -0.20975481 -0.74199204  1.14193335\n",
            "  0.60382778 -1.10544081 -1.22415067 -0.0569932   0.04409827 -0.87734114\n",
            " -0.65285203  0.50984341 -1.29351897  1.33737942 -0.82014357 -0.9773203\n",
            " -0.78949675  0.76640788  0.83214489  0.5308727   0.14874685  0.27636706\n",
            " -1.61111562 -0.69653558 -0.99425542  1.13843023 -1.48945472  1.13144552\n",
            " -0.37520535  0.57911172 -0.74601685  1.75032957 -0.78280269 -0.97653449\n",
            " -0.88945761 -0.3860191  -1.23541629 -1.41555224 -1.78938664 -1.50364194\n",
            " -0.80955859  1.65410023  1.43992698 -0.82572646 -0.29419971 -0.6803868\n",
            "  1.34646094 -0.900126    0.37445703  0.40987078  0.63580065  0.92170625\n",
            "  0.87372274 -0.04418092 -0.59861042 -0.68483495  1.19991312 -0.63334183\n",
            " -0.51614936 -0.52134894 -0.75454543 -0.52265516  0.32210368 -1.65317489\n",
            "  0.64060162  0.04520126 -0.58903435 -1.16228675 -2.45490687 -1.6243911\n",
            " -0.09607793 -1.13319057 -0.65297799 -1.81764973  0.09452321 -1.37616603\n",
            "  2.20606954  0.24776329  0.66661832  0.47225201 -1.44338663  0.02156467\n",
            " -0.72087899  0.32248337  1.43367026 -0.62520682  1.25242199 -0.15301327\n",
            " -1.00939251  0.5133132   0.8913339   1.11885341 -0.33528669  0.20834537\n",
            " -0.50310878  1.16201408 -0.2366381  -0.80572803  0.36948576 -0.67888571\n",
            " -0.84995512 -0.03406884 -0.2167159   1.02335869  0.37799641  1.76254141\n",
            " -0.70972308  1.25732459 -0.39281138  0.87123877  0.64884939  0.0931555\n",
            "  0.02569356 -1.13327646 -3.60907744  1.32755471  0.794237   -1.14439818\n",
            "  0.45888536  0.05592016 -0.50865706 -1.06080054 -0.68679679  2.21961474\n",
            "  1.14895656 -0.64946363  0.39044457  0.56675368  0.03507781  1.64062033\n",
            " -0.25066468  1.08415415  0.16512222 -0.26771784 -1.69430719 -1.41923101\n",
            " -0.40491394 -0.18737719  1.2605232  -0.50422238 -0.29146755 -0.15352309\n",
            "  0.60285991  0.27076117 -0.37637946 -0.62418475 -0.43683256 -0.274528\n",
            "  0.91723818  0.77060517]\n",
            "Epoch=689, Loss=1.1494, Weights=[-1.12276292  1.17629983  0.45505006  0.64354151 -1.91802045 -2.74184615\n",
            " -1.69357449  0.04120924 -0.09811625  0.30631501  1.87578819 -0.59484178\n",
            " -0.27102788 -0.36882899  0.27968735 -0.27974246  0.55522924 -0.47338438\n",
            "  0.58944427 -0.94203609 -1.80936217 -0.01223671  1.20827228  0.92916293\n",
            " -0.97814124 -2.43628048  0.21786019 -0.58554311 -1.27471495 -0.90670636\n",
            " -0.91736671 -0.99347247  1.70451812 -0.74697882  1.69985692  0.12227973\n",
            " -1.04328612 -1.58992449 -0.73018662  0.73442362  0.35147838  0.56771358\n",
            " -1.02612292 -0.78538906 -1.08853246  1.42581627  0.72070688  0.52389925\n",
            " -0.4922005   0.28466142 -0.31561534 -0.20985592 -0.74212235  1.14067236\n",
            "  0.60322287 -1.1045082  -1.22304582 -0.05694279  0.0426948  -0.87889527\n",
            " -0.65310823  0.51073218 -1.29372792  1.3353612  -0.82061292 -0.97504647\n",
            " -0.78795775  0.7644682   0.82970267  0.53136306  0.15017548  0.27594135\n",
            " -1.61239382 -0.69714431 -0.99388521  1.1403764  -1.48948867  1.1285484\n",
            " -0.37509379  0.58216057 -0.7452313   1.74783146 -0.78441424 -0.97489359\n",
            " -0.88871315 -0.38746977 -1.23533356 -1.41371142 -1.78798837 -1.50313582\n",
            " -0.80997437  1.65210878  1.43865627 -0.82442114 -0.29391924 -0.68196537\n",
            "  1.34690127 -0.8987267   0.37434555  0.41015946  0.63630458  0.92079977\n",
            "  0.87296513 -0.04310298 -0.59745642 -0.68536706  1.19932589 -0.63317886\n",
            " -0.51525966 -0.52025368 -0.75482158 -0.52308304  0.32366405 -1.65170837\n",
            "  0.63881789  0.04321349 -0.58869496 -1.16132651 -2.45452574 -1.62509086\n",
            " -0.09619568 -1.13196    -0.6513319  -1.81735407  0.09257654 -1.37792532\n",
            "  2.20539492  0.2471338   0.66622098  0.47245232 -1.44262734  0.02266036\n",
            " -0.72065511  0.3217358   1.43322086 -0.62611664  1.25075032 -0.15301245\n",
            " -1.00783423  0.51351519  0.89051696  1.11919787 -0.33467528  0.20666948\n",
            " -0.50534125  1.16254289 -0.23579998 -0.80644061  0.36860079 -0.6802714\n",
            " -0.85035688 -0.03239397 -0.21630645  1.02231163  0.37926581  1.76485077\n",
            " -0.71054734  1.25482148 -0.39395864  0.86989843  0.6472824   0.09328441\n",
            "  0.02660669 -1.13197181 -3.60693575  1.3276311   0.79161465 -1.14480267\n",
            "  0.45996267  0.0549767  -0.51010778 -1.06050833 -0.68539019  2.21959048\n",
            "  1.14833178 -0.6494815   0.38997821  0.56607574  0.03437951  1.64011785\n",
            " -0.25068623  1.08282305  0.16287692 -0.26812995 -1.69344907 -1.41819277\n",
            " -0.40382722 -0.18749913  1.26031597 -0.50337032 -0.29231175 -0.15593985\n",
            "  0.60269333  0.27223872 -0.37670957 -0.6250679  -0.43633006 -0.27412112\n",
            "  0.91730172  0.76988694]\n",
            "Epoch=699, Loss=1.1465, Weights=[-1.12403365  1.17512389  0.45408266  0.64324925 -1.91509406 -2.73945495\n",
            " -1.69478217  0.04140762 -0.09591677  0.30613344  1.8729606  -0.59717932\n",
            " -0.27155628 -0.36837343  0.28116452 -0.27977366  0.55321441 -0.47289115\n",
            "  0.59062838 -0.94408774 -1.81155226 -0.01219189  1.20794493  0.92817723\n",
            " -0.9777581  -2.43592175  0.21729493 -0.58502296 -1.27329601 -0.90671613\n",
            " -0.91858402 -0.99338836  1.70494109 -0.74858627  1.69812766  0.12241742\n",
            " -1.04303917 -1.58982452 -0.72867824  0.7344741   0.34904559  0.56669786\n",
            " -1.02565542 -0.78648951 -1.09063385  1.42501904  0.72099514  0.5242904\n",
            " -0.49191755  0.28455705 -0.31622218 -0.20995484 -0.74225073  1.13941233\n",
            "  0.6026186  -1.10357759 -1.22194441 -0.05689253  0.04129378 -0.8804488\n",
            " -0.65336625  0.5116202  -1.29393592  1.33334558 -0.82107921 -0.97277412\n",
            " -0.78642347  0.76252971  0.82726722  0.53185447  0.15159729  0.27551259\n",
            " -1.61366646 -0.69774968 -0.99351991  1.14231594 -1.48952219  1.12565715\n",
            " -0.37498111  0.58520264 -0.74445038  1.74534034 -0.7860201  -0.97326001\n",
            " -0.88797426 -0.38891553 -1.23524679 -1.41187215 -1.78659207 -1.50263079\n",
            " -0.81038939  1.65012175  1.43738482 -0.82312323 -0.29363943 -0.68353961\n",
            "  1.34734104 -0.89732999  0.37423532  0.41044842  0.63680635  0.91989529\n",
            "  0.87220977 -0.04202857 -0.59630651 -0.68589721  1.19874116 -0.63301766\n",
            " -0.51437206 -0.51915784 -0.75509392 -0.52350974  0.32522    -1.65024513\n",
            "  0.6370351   0.04122721 -0.58835561 -1.16036791 -2.45414507 -1.62578647\n",
            " -0.0963104  -1.13073356 -0.64969124 -1.81705531  0.0906357  -1.37968671\n",
            "  2.2047182   0.24650786  0.66582522  0.47265044 -1.44186807  0.02375504\n",
            " -0.72043398  0.32099165  1.43277435 -0.62703034  1.24907672 -0.15300955\n",
            " -1.00627679  0.51371564  0.88970164  1.11954143 -0.33406664  0.20499808\n",
            " -0.50756857  1.16306862 -0.234963   -0.80714989  0.36771659 -0.6816564\n",
            " -0.85075787 -0.03072274 -0.21589867  1.02126876  0.38053338  1.76715121\n",
            " -0.71137195  1.2523256  -0.39510685  0.86855351  0.64571891  0.09341638\n",
            "  0.02751723 -1.1306676  -3.604794    1.3277054   0.78899554 -1.14520148\n",
            "  0.46103744  0.05402814 -0.51155475 -1.06021284 -0.68398946  2.21956336\n",
            "  1.14770942 -0.64949949  0.38951065  0.56539901  0.03368138  1.6396124\n",
            " -0.25070673  1.08149573  0.16063112 -0.26854342 -1.69258844 -1.41715261\n",
            " -0.40274287 -0.18762233  1.26010939 -0.502519   -0.29315586 -0.15835432\n",
            "  0.6025267   0.27371399 -0.3770372  -0.62594834 -0.43583075 -0.27371683\n",
            "  0.9173669   0.76917016]\n",
            "Epoch=709, Loss=1.1435, Weights=[-1.12530475  1.17394935  0.45311823  0.64295407 -1.91217288 -2.73706119\n",
            " -1.69598546  0.04160243 -0.09372137  0.30595502  1.87013682 -0.59951601\n",
            " -0.27208493 -0.36792021  0.28263902 -0.27980372  0.55120053 -0.47240149\n",
            "  0.59181133 -0.94613457 -1.81374034 -0.01214958  1.20761762  0.92719396\n",
            " -0.97737566 -2.43556408  0.21673265 -0.5845034  -1.27188066 -0.90672376\n",
            " -0.91979772 -0.99330599  1.70536182 -0.75019107  1.69640126  0.12255542\n",
            " -1.042793   -1.58972724 -0.7271741   0.73452447  0.3466168   0.56568216\n",
            " -1.02519028 -0.78758646 -1.09272892  1.42422132  0.72127962  0.5246829\n",
            " -0.49163261  0.28445077 -0.31682994 -0.21005157 -0.74237719  1.13815325\n",
            "  0.60201499 -1.10264898 -1.22084642 -0.05684245  0.03989521 -0.88200171\n",
            " -0.65362608  0.51250745 -1.29414297  1.33133261 -0.82154244 -0.97050328\n",
            " -0.78489394  0.76059242  0.82483857  0.53234694  0.15301232  0.27508075\n",
            " -1.61493357 -0.69835165 -0.99315949  1.1442488  -1.48955528  1.12277181\n",
            " -0.37486732  0.58823788 -0.74367408  1.74285625 -0.78762026 -0.97163373\n",
            " -0.88724095 -0.3903564  -1.23515598 -1.41003442 -1.78519776 -1.50212686\n",
            " -0.81080363  1.64813916  1.43611261 -0.82183272 -0.29336028 -0.68510952\n",
            "  1.34778022 -0.89593588  0.37412636  0.41073769  0.63730595  0.9189928\n",
            "  0.87145665 -0.0409577  -0.59516068 -0.68642539  1.19815892 -0.63285824\n",
            " -0.51348654 -0.51806146 -0.75536247 -0.52393525  0.32677153 -1.64878516\n",
            "  0.63525326  0.03924243 -0.58801631 -1.15941093 -2.45376487 -1.62647791\n",
            " -0.09642209 -1.12951126 -0.64805599 -1.81675347  0.08870067 -1.38145016\n",
            "  2.20403939  0.24588545  0.66543103  0.47284638 -1.44110882  0.0248487\n",
            " -0.72021558  0.32025089  1.43233072 -0.62794787  1.24740121 -0.1530046\n",
            " -1.00472021  0.51391457  0.88888795  1.11988406 -0.33346077  0.20333113\n",
            " -0.50979077  1.16359127 -0.23412714 -0.80785589  0.36683314 -0.68304066\n",
            " -0.8511581  -0.02905517 -0.21549253  1.02023009  0.38179907  1.76944273\n",
            " -0.71219687  1.24983696 -0.39625601  0.86720403  0.64415892  0.09355137\n",
            "  0.02842518 -1.12936384 -3.60265223  1.3277776   0.78637969 -1.14559458\n",
            "  0.46210963  0.05307449 -0.51299797 -1.05991408 -0.6825946   2.21953338\n",
            "  1.14708946 -0.64951757  0.38904191  0.56472349  0.0329834   1.639104\n",
            " -0.25072618  1.08017218  0.15838481 -0.26895824 -1.6917253  -1.41611053\n",
            " -0.40166087 -0.18774678  1.25990347 -0.5016684  -0.29399989 -0.16076651\n",
            "  0.60236001  0.27518698 -0.37736237 -0.62682608 -0.43533463 -0.27331512\n",
            "  0.91743372  0.76845484]\n",
            "Epoch=719, Loss=1.1406, Weights=[-1.12657624  1.17277622  0.45215676  0.64265595 -1.90925694 -2.73466489\n",
            " -1.69718436  0.04179367 -0.09153003  0.30577978  1.86731686 -0.60185185\n",
            " -0.27261383 -0.36746935  0.28411084 -0.27983261  0.5491876  -0.47191542\n",
            "  0.59299313 -0.94817659 -1.81592642 -0.0121098   1.20729036  0.92621311\n",
            " -0.97699395 -2.43520748  0.21617336 -0.58398443 -1.27046889 -0.90672924\n",
            " -0.92100782 -0.99322536  1.70578033 -0.75179323  1.69467772  0.12269376\n",
            " -1.04254761 -1.58963267 -0.72567422  0.73457472  0.34419203  0.56466647\n",
            " -1.02472752 -0.78867994 -1.09481772  1.42342311  0.72156035  0.52507673\n",
            " -0.49134568  0.28434258 -0.31743862 -0.21014611 -0.74250175  1.13689512\n",
            "  0.60141204 -1.10172237 -1.21975186 -0.05679254  0.03849907 -0.88355398\n",
            " -0.65388769  0.51339392 -1.2943491   1.32932228 -0.82200258 -0.96823398\n",
            " -0.78336916  0.75865633  0.82241669  0.53284047  0.15442056  0.27464584\n",
            " -1.61619516 -0.6989502  -0.99280393  1.14617496 -1.48958793  1.1198924\n",
            " -0.37475245  0.59126626 -0.74290237  1.7403792  -0.78921473 -0.97001476\n",
            " -0.88651319 -0.39179238 -1.23506114 -1.40819825 -1.78380547 -1.50162406\n",
            " -0.81121708  1.64616103  1.43483964 -0.82054965 -0.29308175 -0.68667508\n",
            "  1.34821879 -0.89454439  0.37401867  0.41102727  0.6378034   0.91809231\n",
            "  0.87070576 -0.03989038 -0.5940189  -0.6869516   1.19757916 -0.63270058\n",
            " -0.5126031  -0.51696453 -0.75562725 -0.52435955  0.32831866 -1.64732848\n",
            "  0.63347237  0.03725916 -0.58767704 -1.15845558 -2.45338514 -1.6271652\n",
            " -0.09653076 -1.12829308 -0.64642615 -1.81644854  0.08677144 -1.38321567\n",
            "  2.2033585   0.24526655  0.6650384   0.47304016 -1.44034959  0.02594133\n",
            " -0.71999991  0.31951351  1.43188995 -0.6288692   1.24572385 -0.15299759\n",
            " -1.00316448  0.514112    0.88807587  1.12022574 -0.33285769  0.20166865\n",
            " -0.51200785  1.16411084 -0.23329238 -0.80855862  0.36595043 -0.68442413\n",
            " -0.85155756 -0.02739132 -0.21508801  1.01919565  0.38306284  1.7717253\n",
            " -0.71302207  1.24735558 -0.39740611  0.86585001  0.64260244  0.09368936\n",
            "  0.02933054 -1.12806051 -3.60051048  1.32784768  0.78376716 -1.14598198\n",
            "  0.46317923  0.05211574 -0.51443742 -1.05961205 -0.6812056   2.21950055\n",
            "  1.1464719  -0.64953574  0.388572    0.56404916  0.03228556  1.63859264\n",
            " -0.25074457  1.07885237  0.15613799 -0.2693744  -1.69085965 -1.41506654\n",
            " -0.40058124 -0.1878725   1.25969821 -0.5008185  -0.29484382 -0.16317644\n",
            "  0.60219327  0.27665771 -0.37768509 -0.62770113 -0.43484169 -0.27291599\n",
            "  0.91750215  0.76774096]\n",
            "Epoch=729, Loss=1.1377, Weights=[-1.12784813  1.1716045   0.45119825  0.64235488 -1.90634627 -2.73226606\n",
            " -1.69837887  0.04198132 -0.08934279  0.3056077   1.86450071 -0.60418685\n",
            " -0.27314295 -0.36702082  0.28557999 -0.27986034  0.54717565 -0.47143293\n",
            "  0.59417376 -0.95021377 -1.81811051 -0.01207258  1.20696317  0.9252347\n",
            " -0.97661299 -2.43485197  0.21561706 -0.58346607 -1.26906073 -0.90673258\n",
            " -0.92221431 -0.99314646  1.70619665 -0.75339277  1.69295702  0.12283244\n",
            " -1.04230296 -1.58954078 -0.72417858  0.73462488  0.34177129  0.56365079\n",
            " -1.02426713 -0.78976998 -1.09690025  1.42262443  0.72183734  0.52547188\n",
            " -0.49105679  0.28423249 -0.31804822 -0.21023848 -0.74262441  1.13563794\n",
            "  0.60080977 -1.10079774 -1.21866071 -0.05674282  0.03710536 -0.88510561\n",
            " -0.65415106  0.51427958 -1.29455432  1.32731464 -0.82245964 -0.96596625\n",
            " -0.78184917  0.75672145  0.82000159  0.53333505  0.15582205  0.27420784\n",
            " -1.61745124 -0.69954528 -0.99245322  1.14809439 -1.48962016  1.11701898\n",
            " -0.37463652  0.59428775 -0.74213527  1.73790922 -0.79080349 -0.96840308\n",
            " -0.885791   -0.39322349 -1.23496228 -1.40636363 -1.78241521 -1.50112241\n",
            " -0.81162971  1.6441874   1.43356588 -0.81927401 -0.29280384 -0.68823629\n",
            "  1.34865674 -0.89315555  0.37391226  0.41131716  0.6382987   0.91719382\n",
            "  0.8699571  -0.03882662 -0.59288116 -0.68747581  1.19700185 -0.6325447\n",
            " -0.51172173 -0.51586709 -0.75588828 -0.52478266  0.32986139 -1.64587508\n",
            "  0.63169243  0.03527743 -0.5873378  -1.15750186 -2.45300588 -1.62784834\n",
            " -0.09663642 -1.127079   -0.64480171 -1.81614056  0.084848   -1.38498322\n",
            "  2.20267553  0.24465113  0.66464733  0.47323179 -1.43959041  0.02703292\n",
            " -0.71978696  0.31877949  1.43145201 -0.6297943   1.24404465 -0.15298856\n",
            " -1.0016096   0.51430796  0.88726542  1.12056644 -0.33225742  0.20001063\n",
            " -0.51421983  1.16462732 -0.23245872 -0.8092581   0.36506845 -0.68580679\n",
            " -0.85195625 -0.02573122 -0.21468511  1.01816545  0.38432467  1.77399892\n",
            " -0.71384752  1.24488145 -0.39855717  0.86449149  0.64104944  0.09383031\n",
            "  0.0302333  -1.12675761 -3.59836879  1.32791564  0.78115799 -1.14636366\n",
            "  0.46424618  0.05115191 -0.51587308 -1.05930676 -0.67982245  2.21946487\n",
            "  1.14585675 -0.64955397  0.38810095  0.56337601  0.03158785  1.63807836\n",
            " -0.25076189  1.07753628  0.15389065 -0.26979191 -1.68999152 -1.41402064\n",
            " -0.39950395 -0.18799948  1.25949361 -0.49996928 -0.29568766 -0.16558411\n",
            "  0.60202648  0.27812618 -0.37800535 -0.62857351 -0.43435189 -0.2725194\n",
            "  0.91757221  0.76702852]\n",
            "Epoch=739, Loss=1.1348, Weights=[-1.12912045  1.1704342   0.45024271  0.64205086 -1.90344087 -2.72986471\n",
            " -1.69956896  0.04216541 -0.08715963  0.3054388   1.86168838 -0.60652101\n",
            " -0.27367228 -0.36657464  0.28704645 -0.27988689  0.54516469 -0.47095404\n",
            "  0.59535322 -0.95224613 -1.82029262 -0.0120379   1.20663604  0.92425871\n",
            " -0.97623281 -2.43449756  0.21506375 -0.5829483  -1.26765615 -0.90673379\n",
            " -0.9234172  -0.99306925  1.70661079 -0.75498969  1.69123914  0.12297149\n",
            " -1.04205903 -1.58945158 -0.72268719  0.73467495  0.33935458  0.56263513\n",
            " -1.02380912 -0.7908566  -1.09897655  1.42182529  0.72211062  0.52586835\n",
            " -0.49076594  0.28412053 -0.31865872 -0.21032868 -0.74274518  1.13438171\n",
            "  0.60020817 -1.09987509 -1.21757295 -0.05669328  0.03571405 -0.88665658\n",
            " -0.65441617  0.51516444 -1.29475865  1.32530969 -0.8229136  -0.96370012\n",
            " -0.78033398  0.75478779  0.81759327  0.5338307   0.15721679  0.27376674\n",
            " -1.61870183 -0.70013686 -0.99210732  1.15000706 -1.48965195  1.11415155\n",
            " -0.37451955  0.59730231 -0.74137274  1.73544633 -0.79238655 -0.96679871\n",
            " -0.88507435 -0.39464975 -1.23485943 -1.40453055 -1.781027   -1.50062193\n",
            " -0.81204149  1.64221829  1.43229133 -0.81800582 -0.29252652 -0.68979314\n",
            "  1.34909404 -0.89176936  0.37380713  0.41160739  0.63879186  0.91629734\n",
            "  0.86921065 -0.03776641 -0.59174745 -0.68799803  1.19642699 -0.63239058\n",
            " -0.51084242 -0.51476915 -0.75614557 -0.52520455  0.33139971 -1.64442497\n",
            "  0.62991347  0.03329723 -0.58699858 -1.15654978 -2.45262708 -1.62852731\n",
            " -0.09673908 -1.12586903 -0.64318264 -1.81582953  0.08293035 -1.38675277\n",
            "  2.20199049  0.24403917  0.66425781  0.47342128 -1.43883128  0.02812347\n",
            " -0.71957674  0.31804881  1.4310169  -0.63072313  1.24236366 -0.15297753\n",
            " -1.00005559  0.51450247  0.88645658  1.12090615 -0.33165996  0.19835705\n",
            " -0.51642673  1.16514073 -0.23162615 -0.80995434  0.36418719 -0.68718859\n",
            " -0.85235417 -0.02407492 -0.21428381  1.01713952  0.38558452  1.77626358\n",
            " -0.71467318  1.24241459 -0.39970918  0.86312848  0.63949992  0.09397418\n",
            "  0.03113345 -1.12545513 -3.59622718  1.32798145  0.7785522  -1.14673964\n",
            "  0.46531047  0.05018298 -0.51730493 -1.05899822 -0.67844517  2.21942635\n",
            "  1.14524399 -0.64957225  0.38762879  0.56270404  0.03089023  1.63756116\n",
            " -0.25077813  1.0762239   0.15164278 -0.27021076 -1.6891209  -1.41297285\n",
            " -0.39842902 -0.18812775  1.25928967 -0.49912073 -0.29653139 -0.16798953\n",
            "  0.60185966  0.2795924  -0.37832319 -0.6294432  -0.43386524 -0.27212536\n",
            "  0.91764387  0.76631753]\n",
            "Epoch=749, Loss=1.1319, Weights=[-1.13039321  1.16926533  0.44929013  0.64174387 -1.90054077 -2.72746084\n",
            " -1.70075464  0.04234592 -0.08498056  0.30527307  1.85887985 -0.60885434\n",
            " -0.27420179 -0.36613079  0.28851021 -0.27991226  0.54315475 -0.47047876\n",
            "  0.5965315  -0.95427365 -1.82247277 -0.0120058   1.20630899  0.92328515\n",
            " -0.97585345 -2.43414427  0.21451344 -0.58243114 -1.26625518 -0.90673287\n",
            " -0.92461649 -0.99299374  1.70702276 -0.75658401  1.68952408  0.1231109\n",
            " -1.04181581 -1.58936505 -0.72120007  0.73472494  0.33694192  0.56161949\n",
            " -1.02335348 -0.79193981 -1.10104664  1.42102571  0.72238021  0.52626611\n",
            " -0.49047314  0.28400669 -0.31927011 -0.21041672 -0.74286409  1.13312643\n",
            "  0.59960725 -1.09895441 -1.21648859 -0.05664394  0.03432515 -0.88820687\n",
            " -0.65468301  0.51604847 -1.29496211  1.32330746 -0.82336446 -0.96143562\n",
            " -0.77882361  0.75285536  0.81519173  0.53432741  0.15860481  0.27332254\n",
            " -1.61994696 -0.70072492 -0.99176621  1.15191294 -1.4896833   1.11129017\n",
            " -0.37440156  0.60030991 -0.74061478  1.73299056 -0.7939639  -0.96520162\n",
            " -0.88436324 -0.39607116 -1.2347526  -1.40269903 -1.77964085 -1.50012264\n",
            " -0.81245241  1.64025373  1.43101596 -0.81674511 -0.29224978 -0.69134562\n",
            "  1.34953066 -0.89038584  0.37370328  0.41189795  0.63928289  0.91540287\n",
            "  0.86846642 -0.03670977 -0.59061774 -0.68851824  1.19585456 -0.63223823\n",
            " -0.50996517 -0.51367073 -0.75639913 -0.52562521  0.33293364 -1.64297814\n",
            "  0.62813547  0.0313186  -0.58665938 -1.15559934 -2.45224874 -1.62920214\n",
            " -0.09683873 -1.12466315 -0.64156893 -1.81551547  0.08101848 -1.38852432\n",
            "  2.20130338  0.24343064  0.66386984  0.47360865 -1.4380722   0.02921297\n",
            " -0.71936922  0.31732145  1.43058459 -0.63165565  1.24068091 -0.1529645\n",
            " -0.99850245  0.51469556  0.88564936  1.12124483 -0.33106535  0.19670793\n",
            " -0.51862857  1.16565106 -0.23079464 -0.81064738  0.36330666 -0.68856949\n",
            " -0.85275131 -0.02242245 -0.21388409  1.01611789  0.38684236  1.77851928\n",
            " -0.71549902  1.239955   -0.40086213  0.86176101  0.63795389  0.09412094\n",
            "  0.03203101 -1.12415307 -3.5940857   1.3280451   0.77594985 -1.1471099\n",
            "  0.46637205  0.04920897 -0.51873296 -1.05868642 -0.67707375  2.21938499\n",
            "  1.14463361 -0.64959056  0.38715555  0.56203323  0.0301927   1.63704107\n",
            " -0.25079329  1.07491521  0.14939437 -0.27063095 -1.6882478  -1.41192316\n",
            " -0.39735643 -0.18825729  1.25908638 -0.49827283 -0.29737501 -0.17039271\n",
            "  0.60169279  0.28105639 -0.37863859 -0.63031022 -0.43338171 -0.27173385\n",
            "  0.91771713  0.76560797]\n",
            "Epoch=759, Loss=1.1291, Weights=[-1.13166643  1.16809791  0.44834053  0.64143391 -1.89764599 -2.72505448\n",
            " -1.7019359   0.04252286 -0.08280559  0.30511053  1.85607512 -0.61118683\n",
            " -0.27473147 -0.36568926  0.28997127 -0.27993643  0.54114584 -0.47000707\n",
            "  0.59770859 -0.95629632 -1.82465097 -0.01197628  1.20598203  0.92231402\n",
            " -0.97547492 -2.43379211  0.21396613 -0.58191459 -1.26485781 -0.90672982\n",
            " -0.92581217 -0.99291991  1.70743259 -0.75817574  1.68781182  0.1232507\n",
            " -1.04157328 -1.5892812  -0.7197172   0.73477485  0.33453331  0.56060386\n",
            " -1.02290021 -0.79301965 -1.10311055  1.4202257   0.72264612  0.52666517\n",
            " -0.49017843  0.28389099 -0.31988239 -0.2105026  -0.74298113  1.1318721\n",
            "  0.59900703 -1.0980357  -1.2154076  -0.05659481  0.03293862 -0.88975647\n",
            " -0.65495154  0.51693166 -1.29516471  1.32130797 -0.82381221 -0.95917278\n",
            " -0.77731808  0.75092415  0.81279697  0.53482518  0.15998612  0.27287522\n",
            " -1.62118662 -0.70130943 -0.99142988  1.153812   -1.48971422  1.10843487\n",
            " -0.37428256  0.6033105  -0.73986138  1.73054193 -0.79553555 -0.96361183\n",
            " -0.88365766 -0.39748775 -1.2346418  -1.40086905 -1.77825678 -1.49962456\n",
            " -0.81286244  1.63829374  1.42973976 -0.81549187 -0.2919736  -0.69289372\n",
            "  1.3499666  -0.88900502  0.37360073  0.41218886  0.63977179  0.91451042\n",
            "  0.8677244  -0.0356567  -0.58949203 -0.68903644  1.19528455 -0.63208765\n",
            " -0.50908997 -0.51257185 -0.75664899 -0.52604465  0.33446319 -1.64153461\n",
            "  0.62635845  0.02934153 -0.58632018 -1.15465054 -2.45187086 -1.62987281\n",
            " -0.09693539 -1.12346134 -0.63996058 -1.81519839  0.07911238 -1.39029785\n",
            "  2.20061421  0.24282553  0.6634834   0.47379392 -1.43731318  0.0303014\n",
            " -0.71916441  0.3165974   1.43015507 -0.63259182  1.23899644 -0.1529495\n",
            " -0.99695017  0.51488724  0.88484375  1.12158246 -0.33047358  0.19506324\n",
            " -0.52082535  1.16615831 -0.22996419 -0.81133722  0.36242683 -0.68994945\n",
            " -0.85314768 -0.02077385 -0.21348593  1.01510056  0.38809814  1.780766\n",
            " -0.716325    1.23750269 -0.40201604  0.8603891   0.63641133  0.09427056\n",
            "  0.03292596 -1.12285141 -3.59194438  1.32810659  0.77335096 -1.14747443\n",
            "  0.46743091  0.04822988 -0.52015715 -1.05837139 -0.67570818  2.2193408\n",
            "  1.14402562 -0.64960888  0.38668124  0.56136358  0.02949524  1.63651809\n",
            " -0.25080735  1.07361019  0.14714542 -0.27105247 -1.68737224 -1.41087159\n",
            " -0.39628618 -0.18838811  1.25888375 -0.49742556 -0.29821851 -0.17279366\n",
            "  0.6015259   0.28251815 -0.37895158 -0.63117457 -0.43290128 -0.27134485\n",
            "  0.91779198  0.76489984]\n",
            "Epoch=769, Loss=1.1262, Weights=[-1.13294013  1.16693194  0.44739389  0.64112097 -1.89475655 -2.72264563\n",
            " -1.70311272  0.04269624 -0.08063474  0.30495116  1.8532742  -0.61351848\n",
            " -0.2752613  -0.36525006  0.29142962 -0.27995939  0.53913798 -0.469539\n",
            "  0.59888448 -0.95831415 -1.82682722 -0.01194936  1.20565518  0.92134532\n",
            " -0.97509725 -2.4334411   0.21342184 -0.58139865 -1.26346405 -0.90672463\n",
            " -0.92700425 -0.99284773  1.70784028 -0.75976488  1.68610234  0.12339089\n",
            " -1.04133141 -1.58920001 -0.7182386   0.7348247   0.33212876  0.55958824\n",
            " -1.02244933 -0.79409614 -1.1051683   1.41942528  0.72290837  0.52706549\n",
            " -0.4898818   0.28377344 -0.32049555 -0.21058632 -0.74309633  1.13061872\n",
            "  0.59840751 -1.09711894 -1.21432998 -0.05654588  0.03155447 -0.89130537\n",
            " -0.65522176  0.517814   -1.29536647  1.31931123 -0.82425684 -0.95691164\n",
            " -0.7758174   0.74899418  0.81040898  0.53532401  0.16136074  0.27242478\n",
            " -1.62242086 -0.70189035 -0.99109829  1.15570422 -1.48974469  1.10558567\n",
            " -0.37416258  0.60630406 -0.73911253  1.72810047 -0.79710148 -0.96202933\n",
            " -0.88295759 -0.39889952 -1.23452704 -1.39904061 -1.77687482 -1.49912773\n",
            " -0.81327156  1.63633836  1.42846272 -0.81424613 -0.29169796 -0.69443743\n",
            "  1.35040183 -0.88762691  0.37349947  0.41248012  0.64025857  0.91361999\n",
            "  0.86698457 -0.03460721 -0.58837029 -0.68955263  1.19471694 -0.63193883\n",
            " -0.50821681 -0.51147252 -0.75689515 -0.52646286  0.33598835 -1.64009437\n",
            "  0.62458241  0.02736605 -0.58598099 -1.15370338 -2.45149345 -1.63053932\n",
            " -0.09702907 -1.12226361 -0.63835757 -1.81487832  0.07721203 -1.39207332\n",
            "  2.19992299  0.24222381  0.6630985   0.47397709 -1.43655424  0.03138877\n",
            " -0.71896229  0.31587663  1.42972832 -0.63353162  1.23731028 -0.15293255\n",
            " -0.99539877  0.51507754  0.88403974  1.12191902 -0.32988467  0.193423\n",
            " -0.52301709  1.16666248 -0.22913479 -0.81202387  0.3615477  -0.69132845\n",
            " -0.85354327 -0.01912916 -0.21308933  1.01408757  0.38935184  1.78300373\n",
            " -0.7171511   1.23505766 -0.4031709   0.85901278  0.63487223  0.094423\n",
            "  0.0338183  -1.12155016 -3.58980325  1.32816588  0.77075559 -1.14783324\n",
            "  0.468487    0.04724572 -0.52157748 -1.05805311 -0.67434846  2.21929379\n",
            "  1.14342002 -0.6496272   0.38620589  0.56069508  0.02879783  1.63599224\n",
            " -0.25082031  1.07230882  0.14489591 -0.27147532 -1.6864942  -1.40981813\n",
            " -0.39521827 -0.18852022  1.25868178 -0.49657891 -0.29906188 -0.17519238\n",
            "  0.60135897  0.28397769 -0.37926215 -0.63203626 -0.43242396 -0.27095836\n",
            "  0.91786842  0.76419314]\n",
            "Epoch=779, Loss=1.1233, Weights=[-1.13421432  1.16576743  0.44645023  0.64080505 -1.89187246 -2.72023431\n",
            " -1.70428511  0.04286606 -0.07846799  0.30479498  1.85047708 -0.61584929\n",
            " -0.27579125 -0.36481317  0.29288526 -0.27998114  0.53713119 -0.46907453\n",
            "  0.60005915 -0.96032713 -1.82900154 -0.01192504  1.20532843  0.92037905\n",
            " -0.97472048 -2.43309124  0.21288055 -0.58088331 -1.26207389 -0.90671732\n",
            " -0.92819273 -0.9927772   1.70824586 -0.76135145  1.68439563  0.1235315\n",
            " -1.04109018 -1.58912149 -0.71676426  0.7348745   0.32972829  0.55857263\n",
            " -1.02200083 -0.79516929 -1.10721992  1.41862445  0.72316699  0.52746708\n",
            " -0.48958327  0.28365405 -0.32110958 -0.21066791 -0.74320969  1.12936629\n",
            "  0.5978087  -1.09620414 -1.21325572 -0.05649716  0.03017268 -0.89285356\n",
            " -0.65549364  0.51869547 -1.2955674   1.31731728 -0.82469836 -0.95465222\n",
            " -0.7743216   0.74706545  0.80802777  0.5358239   0.16272868  0.27197121\n",
            " -1.62364967 -0.70246765 -0.99077143  1.15758957 -1.48977473  1.10274262\n",
            " -0.37404163  0.60929054 -0.73836822  1.72566621 -0.7986617  -0.96045411\n",
            " -0.88226304 -0.40030648 -1.23440834 -1.39721372 -1.77549496 -1.49863216\n",
            " -0.81367975  1.63438761  1.42718481 -0.81300789 -0.29142284 -0.69597675\n",
            "  1.35083631 -0.88625151  0.37339951  0.41277175  0.64074323  0.91273158\n",
            "  0.86624693 -0.03356131 -0.5872525  -0.69006678  1.19415172 -0.63179177\n",
            " -0.50734569 -0.51037277 -0.75713764 -0.52687982  0.33750913 -1.63865742\n",
            "  0.62280735  0.02539217 -0.58564178 -1.15275787 -2.4511165  -1.63120169\n",
            " -0.09711977 -1.12106993 -0.63675989 -1.81455527  0.07531743 -1.39385073\n",
            "  2.19922973  0.24162545  0.66271512  0.47415817 -1.43579538  0.03247506\n",
            " -0.71876286  0.31515912  1.42930431 -0.634475    1.23562247 -0.15291366\n",
            " -0.99384824  0.51526649  0.88323735  1.12225448 -0.32929863  0.19178719\n",
            " -0.52520381  1.16716358 -0.22830643 -0.81270737  0.36066926 -0.69270644\n",
            " -0.85393808 -0.01748842 -0.21269425  1.01307893  0.39060343  1.78523246\n",
            " -0.71797728  1.23261993 -0.4043267   0.85763206  0.63333661  0.09457824\n",
            "  0.03470803 -1.1202493  -3.58766235  1.32822298  0.76816376 -1.14818632\n",
            "  0.46954029  0.04625648 -0.52299393 -1.0577316  -0.67299459  2.21924395\n",
            "  1.14281678 -0.64964551  0.38572953  0.56002771  0.02810046  1.63546353\n",
            " -0.25083215  1.07101108  0.14264583 -0.2718995  -1.68561372 -1.40876281\n",
            " -0.39415269 -0.18865362  1.25848047 -0.49573286 -0.29990513 -0.17758889\n",
            "  0.60119202  0.28543502 -0.37957033 -0.6328953  -0.4319497  -0.27057436\n",
            "  0.91794643  0.76348786]\n",
            "Epoch=789, Loss=1.1205, Weights=[-1.13548904  1.1646044   0.44550954  0.64048614 -1.88899376 -2.71782053\n",
            " -1.70545305  0.04303233 -0.07630536  0.30464198  1.84768376 -0.61817927\n",
            " -0.27632132 -0.36437859  0.29433816 -0.28000167  0.5351255  -0.46861369\n",
            "  0.6012326  -0.96233525 -1.83117394 -0.01190334  1.20500179  0.91941522\n",
            " -0.97434462 -2.43274257  0.21234228 -0.58036858 -1.26068735 -0.90670789\n",
            " -0.92937759 -0.9927083   1.70864934 -0.76293546  1.68269168  0.12367251\n",
            " -1.04084957 -1.58904561 -0.7152942   0.73492424  0.3273319   0.55755704\n",
            " -1.0215547  -0.79623915 -1.10926543  1.41782325  0.723422    0.52786992\n",
            " -0.48928286  0.28353283 -0.32172447 -0.21074736 -0.74332122  1.12811482\n",
            "  0.5972106  -1.09529128 -1.21218481 -0.05644868  0.02879324 -0.89440102\n",
            " -0.65576716  0.51957606 -1.29576753  1.31532612 -0.82513674 -0.95239455\n",
            " -0.77283069  0.74513798  0.80565333  0.53632485  0.16408998  0.2715145\n",
            " -1.62487309 -0.70304132 -0.99044927  1.15946801 -1.48980433  1.09990575\n",
            " -0.37391974  0.61226992 -0.73762843  1.72323916 -0.80021621 -0.95888617\n",
            " -0.88157398 -0.40170866 -1.23428572 -1.39538837 -1.77411723 -1.49813787\n",
            " -0.814087    1.63244152  1.42590603 -0.81177717 -0.29114823 -0.69751165\n",
            "  1.35127005 -0.88487886  0.37330086  0.41306375  0.64122579  0.91184521\n",
            "  0.86551147 -0.03251899 -0.58613866 -0.6905789   1.19358887 -0.63164647\n",
            " -0.50647659 -0.50927262 -0.75737647 -0.52729554  0.33902554 -1.63722377\n",
            "  0.62103329  0.0234199  -0.58530257 -1.15181401 -2.45074    -1.63185991\n",
            " -0.0972075  -1.11988029 -0.63516752 -1.81422925  0.07342857 -1.39563005\n",
            "  2.19853442  0.24103044  0.66233326  0.47433719 -1.43503662  0.03356026\n",
            " -0.71856612  0.31444487  1.42888303 -0.63542193  1.23393305 -0.15289286\n",
            " -0.9922986   0.51545411  0.88243655  1.12258882 -0.32871548  0.19015581\n",
            " -0.52738552  1.16766161 -0.22747909 -0.81338773  0.35979151 -0.69408339\n",
            " -0.8543321  -0.01585166 -0.21230068  1.01207466  0.39185287  1.78745219\n",
            " -0.71880352  1.23018949 -0.40548345  0.85624698  0.63180444  0.09473624\n",
            "  0.03559515 -1.11894884 -3.58552171  1.32827786  0.76557552 -1.14853365\n",
            "  0.47059076  0.04526217 -0.5244065  -1.05740687 -0.67164658  2.2191913\n",
            "  1.14221592 -0.64966378  0.38525218  0.55936147  0.0274031   1.63493198\n",
            " -0.25084288  1.06971696  0.14039519 -0.272325   -1.68473078 -1.40770562\n",
            " -0.39308945 -0.18878831  1.25827981 -0.49488739 -0.30074825 -0.17998319\n",
            "  0.60102505  0.28689014 -0.37987611 -0.63375168 -0.43147851 -0.27019284\n",
            "  0.91802601  0.762784  ]\n",
            "Epoch=799, Loss=1.1176, Weights=[-1.13676429  1.16344284  0.44457183  0.64016424 -1.88612045 -2.7154043\n",
            " -1.70661653  0.04319504 -0.07414686  0.30449216  1.84489425 -0.62050841\n",
            " -0.27685148 -0.36394631  0.29578832 -0.28002097  0.53312092 -0.46815647\n",
            "  0.60240481 -0.96433851 -1.83334441 -0.01188426  1.20467528  0.91845381\n",
            " -0.97396971 -2.43239509  0.21180704 -0.57985447 -1.25930442 -0.90669634\n",
            " -0.93055885 -0.99264102  1.70905073 -0.76451691  1.68099048  0.12381396\n",
            " -1.04060957 -1.58897237 -0.7138284   0.73497394  0.32493959  0.55654147\n",
            " -1.02111096 -0.79730572 -1.11130486  1.41702167  0.72367342  0.528274\n",
            " -0.48898059  0.28340979 -0.32234021 -0.21082468 -0.74343095  1.12686429\n",
            "  0.59661322 -1.09438036 -1.21111724 -0.05640042  0.02741613 -0.89594773\n",
            " -0.65604229  0.52045576 -1.29596687  1.31333779 -0.825572   -0.95013867\n",
            " -0.77134469  0.74321176  0.80328568  0.53682687  0.16544463  0.27105465\n",
            " -1.62609113 -0.70361132 -0.99013178  1.16133952 -1.48983349  1.0970751\n",
            " -0.37379691  0.61524215 -0.73689315  1.72081935 -0.80176502 -0.9573255\n",
            " -0.88089041 -0.40310607 -1.2341592  -1.39356455 -1.77274165 -1.49764489\n",
            " -0.81449327  1.63050011  1.42462636 -0.81055399 -0.29087411 -0.69904214\n",
            "  1.351703   -0.88350897  0.37320353  0.41335613  0.64170624  0.91096086\n",
            "  0.86477819 -0.03148028 -0.58502875 -0.69108898  1.19302839 -0.63150292\n",
            " -0.50560951 -0.50817207 -0.75761165 -0.52771     0.34053758 -1.63579342\n",
            "  0.61926022  0.02144925 -0.58496333 -1.15087179 -2.45036396 -1.63251399\n",
            " -0.09729226 -1.1186947  -0.63358046 -1.81390027  0.07154543 -1.39741127\n",
            "  2.19783708  0.24043875  0.66195291  0.47451416 -1.43427795  0.03464438\n",
            " -0.71837205  0.31373384  1.42846447 -0.63637237  1.23224204 -0.15287016\n",
            " -0.99074984  0.51564041  0.88163736  1.12292202 -0.32813523  0.18852886\n",
            " -0.52956224  1.16815656 -0.22665276 -0.81406497  0.35891443 -0.69545925\n",
            " -0.85472534 -0.01421892 -0.21190862  1.01107479  0.39310012  1.7896629\n",
            " -0.71962978  1.22776635 -0.40664115  0.85485755  0.63027572  0.09489697\n",
            "  0.03647965 -1.11764876 -3.58338138  1.32833051  0.7629909  -1.14887525\n",
            "  0.47163838  0.04426279 -0.52581515 -1.05707892 -0.67030442  2.21913584\n",
            "  1.14161743 -0.649682    0.38477385  0.55869636  0.02670575  1.63439761\n",
            " -0.25085248  1.06842642  0.13814396 -0.27275181 -1.68384539 -1.40664657\n",
            " -0.39202853 -0.1889243   1.25807981 -0.4940425  -0.30159122 -0.18237529\n",
            "  0.60085805  0.28834308 -0.38017951 -0.63460542 -0.43101037 -0.26981379\n",
            "  0.91810714  0.76208155]\n",
            "Epoch=809, Loss=1.1148, Weights=[-1.1380401   1.16228277  0.4436371   0.63983935 -1.88325255 -2.71298565\n",
            " -1.70777556  0.04335421 -0.07199249  0.30434554  1.84210853 -0.62283672\n",
            " -0.27738171 -0.36351632  0.29723574 -0.28003904  0.53111748 -0.46770287\n",
            "  0.60357578 -0.96633691 -1.83551297 -0.01186782  1.2043489   0.91749484\n",
            " -0.97359577 -2.43204881  0.21127481 -0.57934098 -1.25792511 -0.90668267\n",
            " -0.93173649 -0.99257532  1.70945005 -0.76609582  1.67929201  0.12395584\n",
            " -1.04037015 -1.58890177 -0.71236688  0.7350236   0.32255139  0.55552591\n",
            " -1.02066961 -0.79836903 -1.11333823  1.41621974  0.72392127  0.52867931\n",
            " -0.48867647  0.28328495 -0.32295679 -0.21089987 -0.74353887  1.12561473\n",
            "  0.59601658 -1.09347138 -1.21005299 -0.0563524   0.02604134 -0.89749369\n",
            " -0.65631903  0.52133455 -1.29616544  1.3113523  -0.82600412 -0.9478846\n",
            " -0.76986362  0.7412868   0.8009248   0.53732995  0.16679268  0.27059165\n",
            " -1.62730382 -0.70417762 -0.98981895  1.16320407 -1.48986221  1.09425069\n",
            " -0.37367317  0.61820719 -0.73616237  1.71840681 -0.80330812 -0.95577211\n",
            " -0.88021231 -0.40449871 -1.23402877 -1.39174227 -1.77136823 -1.49715325\n",
            " -0.81489856  1.62856342  1.42334578 -0.80933836 -0.29060045 -0.70056821\n",
            "  1.35213515 -0.88214185  0.37310751  0.41364891  0.64218461  0.91007856\n",
            "  0.86404707 -0.03044518 -0.58392274 -0.69159701  1.19247025 -0.63136111\n",
            " -0.50474444 -0.50707116 -0.75784321 -0.52812321  0.34204526 -1.63436638\n",
            "  0.61748816  0.01948023 -0.58462407 -1.14993122 -2.44998837 -1.63316392\n",
            " -0.09737407 -1.11751312 -0.63199868 -1.81356837  0.06966802 -1.39919435\n",
            "  2.19713772  0.23985036  0.66157407  0.47468908 -1.43351939  0.03572739\n",
            " -0.71818065  0.31302602  1.42804859 -0.63732628  1.23054949 -0.15284559\n",
            " -0.98920198  0.51582542  0.88083976  1.12325404 -0.32755788  0.18690633\n",
            " -0.53173397  1.16864845 -0.22582744 -0.8147391   0.35803802 -0.69683401\n",
            " -0.8551178  -0.01259024 -0.21151803  1.01007933  0.39434516  1.79186458\n",
            " -0.72045603  1.22535052 -0.40779979  0.8534638   0.62875045  0.09506041\n",
            "  0.03736152 -1.11634907 -3.58124137  1.32838092  0.76040993 -1.1492111\n",
            "  0.47268311  0.04325835 -0.52721988 -1.05674775 -0.66896811  2.21907756\n",
            "  1.1410213  -0.64970016  0.38429459  0.55803235  0.02600838  1.63386041\n",
            " -0.25086095  1.06713946  0.13589214 -0.27317994 -1.68295757 -1.40558566\n",
            " -0.39096994 -0.18906159  1.25788046 -0.49319817 -0.30243405 -0.1847652\n",
            "  0.60069105  0.28979383 -0.38048054 -0.63545651 -0.43054525 -0.26943719\n",
            "  0.91818981  0.76138051]\n",
            "Epoch=819, Loss=1.1120, Weights=[-1.13931648  1.1611242   0.44270534  0.63951146 -1.88039009 -2.71056458\n",
            " -1.70893012  0.04350984 -0.06984226  0.3042021   1.83932661 -0.62516419\n",
            " -0.27791199 -0.36308861  0.2986804  -0.28005587  0.52911519 -0.4672529\n",
            "  0.60474548 -0.96833044 -1.83767963 -0.01185403  1.20402265  0.9165383\n",
            " -0.97322283 -2.43170377  0.21074562 -0.5788281  -1.25654943 -0.90666687\n",
            " -0.93291052 -0.99251122  1.70984731 -0.7676722   1.67759625  0.12409817\n",
            " -1.04013129 -1.58883379 -0.71090964  0.73507324  0.3201673   0.55451036\n",
            " -1.02023064 -0.79942912 -1.11536558  1.41541746  0.72416558  0.52908583\n",
            " -0.48837051  0.28315831 -0.3235742  -0.21097296 -0.743645    1.12436611\n",
            "  0.59542067 -1.09256432 -1.20899206 -0.05630462  0.02466885 -0.89903887\n",
            " -0.65659733  0.52221241 -1.29636325  1.30936967 -0.8264331  -0.94563239\n",
            " -0.76838748  0.73936313  0.7985707   0.5378341   0.16813412  0.2701255\n",
            " -1.62851117 -0.70474021 -0.98951075  1.16506164 -1.48989049  1.09143256\n",
            " -0.37354854  0.62116502 -0.73543609  1.71600156 -0.80484551 -0.95422599\n",
            " -0.87953967 -0.40588661 -1.23389448 -1.38992151 -1.76999698 -1.49666296\n",
            " -0.81530284  1.62663148  1.42206428 -0.80813028 -0.29032725 -0.70208985\n",
            "  1.35256648 -0.88077752  0.37301281  0.41394208  0.64266088  0.90919829\n",
            "  0.86331811 -0.02941368 -0.58282062 -0.69210298  1.19191444 -0.63122106\n",
            " -0.50388138 -0.5059699  -0.75807115 -0.52853514  0.34354858 -1.63294263\n",
            "  0.6157171   0.01751287 -0.58428477 -1.1489923  -2.44961324 -1.6338097\n",
            " -0.09745293 -1.11633557 -0.63042218 -1.81323354  0.06779631 -1.40097929\n",
            "  2.19643634  0.23926525  0.66119672  0.47486198 -1.43276095  0.03680929\n",
            " -0.71799191  0.31232139  1.4276354  -0.63828363  1.22885543 -0.15281916\n",
            " -0.98765502  0.51600917  0.88004374  1.12358488 -0.32698346  0.18528821\n",
            " -0.53390074  1.16913727 -0.22500312 -0.81541014  0.35716227 -0.69820762\n",
            " -0.85550946 -0.01096565 -0.2111289   1.0090883   0.39558796  1.79405722\n",
            " -0.72128225  1.22294201 -0.40895937  0.85206576  0.62722862  0.09522651\n",
            "  0.03824078 -1.11504975 -3.57910173  1.32842907  0.75783267 -1.14954119\n",
            "  0.47372492  0.04224885 -0.52862066 -1.05641338 -0.66763766  2.21901649\n",
            "  1.14042754 -0.64971824  0.3838144   0.55736946  0.02531099  1.63332042\n",
            " -0.25086827  1.06585606  0.13363971 -0.27360937 -1.68206731 -1.40452291\n",
            " -0.38991366 -0.18920018  1.25768178 -0.49235438 -0.30327674 -0.18715293\n",
            "  0.60052403  0.29124241 -0.3807792  -0.63630496 -0.43008315 -0.26906303\n",
            "  0.91827402  0.76068087]\n",
            "Epoch=829, Loss=1.1092, Weights=[-1.14059345  1.15996714  0.44177657  0.63918058 -1.87753308 -2.70814111\n",
            " -1.71008021  0.04366194 -0.06769617  0.30406184  1.8365485  -0.62749082\n",
            " -0.27844231 -0.36266319  0.30012229 -0.28007146  0.52711408 -0.46680656\n",
            "  0.6059139  -0.9703191  -1.83984438 -0.01184289  1.20369654  0.91558419\n",
            " -0.97285091 -2.43135996  0.21021946 -0.57831583 -1.25517737 -0.90664897\n",
            " -0.93408094 -0.99244867  1.71024253 -0.76924605  1.6759032   0.12424096\n",
            " -1.03989297 -1.58876843 -0.70945667  0.73512285  0.31778732  0.55349483\n",
            " -1.01979406 -0.80048599 -1.11738693  1.41461486  0.72440636  0.52949355\n",
            " -0.48806273  0.28302988 -0.32419243 -0.21104394 -0.74374936  1.12311845\n",
            "  0.5948255  -1.09165918 -1.20793444 -0.05625709  0.02329866 -0.90058327\n",
            " -0.6568772   0.52308934 -1.29656032  1.30738992 -0.82685894 -0.94338205\n",
            " -0.76691631  0.73744073  0.79622338  0.5383393   0.16946899  0.26965619\n",
            " -1.6297132  -0.70529905 -0.98920715  1.1669122  -1.48991834  1.08862076\n",
            " -0.37342302  0.62411558 -0.73471428  1.71360362 -0.8063772  -0.95268714\n",
            " -0.87887248 -0.40726977 -1.23375632 -1.38810228 -1.76862791 -1.49617405\n",
            " -0.81570608  1.6247043   1.42078184 -0.80692979 -0.29005448 -0.70360704\n",
            "  1.35299696 -0.87941599  0.37291944  0.41423566  0.64313508  0.90832007\n",
            "  0.86259131 -0.0283858  -0.58172237 -0.69260689  1.19136095 -0.63108275\n",
            " -0.50302031 -0.5048683  -0.75829549 -0.52894581  0.34504755 -1.6315222\n",
            "  0.61394704  0.01554716 -0.58394543 -1.14805503 -2.44923857 -1.63445135\n",
            " -0.09752885 -1.11516201 -0.62885094 -1.81289581  0.0659303  -1.40276606\n",
            "  2.19573296  0.23868339  0.66082087  0.47503287 -1.43200264  0.03789008\n",
            " -0.71780583  0.31161994  1.42722486 -0.63924438  1.2271599  -0.15279089\n",
            " -0.98610896  0.51619167  0.87924932  1.12391449 -0.32641196  0.18367452\n",
            " -0.53606255  1.16962303 -0.22417978 -0.81607812  0.35628717 -0.69958005\n",
            " -0.85590033 -0.00934517 -0.21074122  1.00810172  0.39682847  1.79624081\n",
            " -0.72210841  1.22054083 -0.41011989  0.85066343  0.62571023  0.09539526\n",
            "  0.03911741 -1.11375081 -3.5769625   1.32847495  0.75525913 -1.14986552\n",
            "  0.4747638   0.04123429 -0.53001748 -1.0560758  -0.66631306  2.21895262\n",
            "  1.13983613 -0.64973623  0.38333331  0.55670766  0.02461354  1.63277764\n",
            " -0.25087445  1.06457619  0.13138668 -0.27404011 -1.68117462 -1.40345833\n",
            " -0.3888597  -0.18934007  1.25748375 -0.49151113 -0.30411927 -0.18953848\n",
            "  0.60035701  0.29268883 -0.38107551 -0.63715078 -0.42962404 -0.26869131\n",
            "  0.91835975  0.75998264]\n",
            "Epoch=839, Loss=1.1064, Weights=[-1.14187103  1.15881159  0.44085078  0.63884669 -1.87468154 -2.70571527\n",
            " -1.71122583  0.04381051 -0.06555423  0.30392478  1.83377419 -0.62981661\n",
            " -0.27897263 -0.36224003  0.3015614  -0.28008581  0.52511416 -0.46636385\n",
            "  0.60708103 -0.97230289 -1.84200723 -0.01183442  1.20337058  0.91463251\n",
            " -0.97248003 -2.43101742  0.20969633 -0.57780418 -1.25380894 -0.90662894\n",
            " -0.93524772 -0.99238768  1.71063571 -0.77081739  1.67421284  0.12438421\n",
            " -1.03965517 -1.58870567 -0.70800799  0.73517245  0.31541147  0.55247932\n",
            " -1.01935987 -0.80153968 -1.1194023   1.41381195  0.72464363  0.52990246\n",
            " -0.48775315  0.28289969 -0.32481147 -0.21111283 -0.74385196  1.12187175\n",
            "  0.59423109 -1.09075595 -1.20688011 -0.05620983  0.02193075 -0.90212687\n",
            " -0.65715859  0.52396532 -1.29675667  1.30541308 -0.82728163 -0.94113362\n",
            " -0.7654501   0.73551962  0.79388284  0.53884557  0.1707973   0.26918371\n",
            " -1.63090995 -0.70585413 -0.98890813  1.16875573 -1.48994575  1.08581531\n",
            " -0.37329664  0.62705885 -0.73399694  1.71121302 -0.8079032  -0.95115555\n",
            " -0.87821071 -0.40864821 -1.23361431 -1.38628456 -1.76726104 -1.49568655\n",
            " -0.81610828  1.62278192  1.41949845 -0.80573688 -0.28978212 -0.70511979\n",
            "  1.35342657 -0.87805728  0.37282741  0.41452965  0.6436072   0.9074439\n",
            "  0.86186664 -0.02736155 -0.58062798 -0.69310872  1.19080977 -0.63094618\n",
            " -0.50216123 -0.50376639 -0.75851625 -0.5293552   0.34654216 -1.63010507\n",
            "  0.612178    0.01358313 -0.58360605 -1.14711942 -2.44886434 -1.63508886\n",
            " -0.09760183 -1.11399245 -0.62728495 -1.8125552   0.06406997 -1.40455463\n",
            "  2.19502757  0.23810476  0.66044651  0.47520176 -1.43124447  0.03896974\n",
            " -0.71762239  0.31092164  1.42681696 -0.64020848  1.22546293 -0.15276081\n",
            " -0.98456381  0.51637296  0.87845647  1.12424287 -0.32584341  0.18206523\n",
            " -0.53821942  1.17010573 -0.22335741 -0.81674305  0.35541272 -0.70095127\n",
            " -0.85629042 -0.00772885 -0.21035497  1.00711961  0.39806668  1.79841535\n",
            " -0.72293448  1.21814697 -0.41128134  0.84925685  0.62419528  0.09556662\n",
            "  0.0399914  -1.11245225 -3.57482369  1.32851854  0.75268937 -1.15018409\n",
            "  0.4757997   0.04021468 -0.53141031 -1.05573502 -0.66499431  2.21888596\n",
            "  1.13924708 -0.64975411  0.38285135  0.55604695  0.02391603  1.63223208\n",
            " -0.25087946  1.06329983  0.12913302 -0.27447215 -1.68027951 -1.40239191\n",
            " -0.38780805 -0.18948126  1.25728638 -0.49066839 -0.30496164 -0.19192186\n",
            "  0.60018999  0.29413309 -0.38136946 -0.63799397 -0.42916792 -0.26832201\n",
            "  0.918447    0.7592858 ]\n",
            "Epoch=849, Loss=1.1036, Weights=[-1.14314924  1.15765757  0.43992798  0.6385098  -1.87183548 -2.70328707\n",
            " -1.71236696  0.04395556 -0.06341645  0.30379089  1.83100368 -0.63214156\n",
            " -0.27950295 -0.36181913  0.30299771 -0.28009891  0.52311547 -0.46592478\n",
            "  0.60824685 -0.9742818  -1.84416819 -0.01182863  1.20304476  0.91368327\n",
            " -0.97211024 -2.43067616  0.20917624 -0.57729315 -1.25244414 -0.90660681\n",
            " -0.93641089 -0.99232821  1.71102688 -0.77238623  1.67252516  0.12452793\n",
            " -1.03941787 -1.58864551 -0.70656359  0.73522204  0.31303976  0.55146382\n",
            " -1.01892807 -0.80259021 -1.12141172  1.41300875  0.72487743  0.53031255\n",
            " -0.48744178  0.28276773 -0.32543132 -0.21117962 -0.7439528   1.12062601\n",
            "  0.59363744 -1.08985464 -1.20582906 -0.05616283  0.02056511 -0.90366966\n",
            " -0.6574415   0.52484033 -1.29695231  1.30343916 -0.82770117 -0.93888713\n",
            " -0.76398888  0.73359982  0.79154908  0.5393529   0.17211907  0.26870807\n",
            " -1.63210142 -0.70640543 -0.98861366  1.1705922  -1.48997274  1.08301624\n",
            " -0.37316941  0.62999478 -0.73328405  1.70882978 -0.8094235  -0.94963122\n",
            " -0.87755436 -0.41002194 -1.23346848 -1.38446836 -1.76589639 -1.49520049\n",
            " -0.81650942  1.62086437  1.41821408 -0.80455157 -0.28951015 -0.70662808\n",
            "  1.35385529 -0.87670142  0.37273672  0.41482406  0.64407726  0.90656978\n",
            "  0.86114411 -0.02634092 -0.57953743 -0.69360848  1.19026087 -0.63081134\n",
            " -0.50130413 -0.50266417 -0.75873344 -0.5297633   0.34803243 -1.62869126\n",
            "  0.61040998  0.01162078 -0.58326661 -1.14618545 -2.44849056 -1.63572224\n",
            " -0.09767188 -1.11282687 -0.6257242  -1.81221172  0.06221533 -1.406345\n",
            "  2.19432019  0.23752934  0.66007362  0.47536866 -1.43048644  0.04004826\n",
            " -0.71744158  0.31022647  1.42641169 -0.64117591  1.22376455 -0.15272894\n",
            " -0.98301957  0.51655304  0.87766519  1.12456999 -0.3252778   0.18046035\n",
            " -0.54037136  1.17058537 -0.22253602 -0.81740496  0.3545389  -0.70232124\n",
            " -0.85667971 -0.00611672 -0.20997013  1.00614198  0.39930254  1.80058082\n",
            " -0.72376044  1.21576044 -0.41244374  0.84784604  0.62268375  0.09574056\n",
            "  0.04086277 -1.11115405 -3.57268535  1.32855984  0.7501234  -1.15049688\n",
            "  0.47683259  0.03919002 -0.53279915 -1.05539105 -0.66368142  2.2188165\n",
            "  1.13866038 -0.64977186  0.38236853  0.55538734  0.02321845  1.63168376\n",
            " -0.25088331  1.06202697  0.12687873 -0.27490549 -1.67938198 -1.40132367\n",
            " -0.38675871 -0.18962375  1.25708966 -0.48982616 -0.30580385 -0.19430308\n",
            "  0.60002297  0.29557521 -0.38166107 -0.63883454 -0.42871475 -0.26795512\n",
            "  0.91853575  0.75859034]\n",
            "Epoch=859, Loss=1.1008, Weights=[-1.14442809  1.15650508  0.43900817  0.63816991 -1.86899494 -2.70085653\n",
            " -1.7135036   0.04409711 -0.06128283  0.3036602   1.82823697 -0.63446566\n",
            " -0.28003323 -0.36140048  0.30443122 -0.28011076  0.52111802 -0.46548935\n",
            "  0.60941135 -0.97625583 -1.84632725 -0.01182552  1.2027191   0.91273646\n",
            " -0.97174154 -2.4303362   0.20865919 -0.57678274 -1.25108298 -0.90658256\n",
            " -0.93757042 -0.99227027  1.71141604 -0.77395257  1.67084014  0.12467214\n",
            " -1.03918106 -1.58858794 -0.70512348  0.73527163  0.31067219  0.55044833\n",
            " -1.01849867 -0.80363761 -1.12341522  1.41220526  0.72510777  0.5307238\n",
            " -0.48712864  0.28263403 -0.32605196 -0.21124434 -0.74405191  1.11938123\n",
            "  0.59304456 -1.08895522 -1.20478129 -0.0561161   0.01920172 -0.90521161\n",
            " -0.6577259   0.52571436 -1.29714727  1.30146818 -0.82811756 -0.93664261\n",
            " -0.76253267  0.73168133  0.7892221   0.53986129  0.17343432  0.26822926\n",
            " -1.63328766 -0.70695291 -0.98832373  1.17242158 -1.48999929  1.0802236\n",
            " -0.37304135  0.63292335 -0.73257561  1.70645392 -0.81093812 -0.94811414\n",
            " -0.87690341 -0.41139097 -1.23331884 -1.38265366 -1.76453396 -1.49471587\n",
            " -0.81690946  1.61895167  1.41692874 -0.80337388 -0.28923857 -0.70813191\n",
            "  1.35428309 -0.8753484   0.37264737  0.41511891  0.64454526  0.90569773\n",
            "  0.86042371 -0.02532393 -0.57845069 -0.69410614  1.18971425 -0.63067823\n",
            " -0.500449   -0.50156168 -0.75894708 -0.53017012  0.34951836 -1.62728076\n",
            "  0.60864298  0.00966012 -0.58292711 -1.14525314 -2.44811723 -1.63635149\n",
            " -0.09773902 -1.11166526 -0.62416867 -1.81186538  0.06036634 -1.40813713\n",
            "  2.19361082  0.2369571   0.65970221  0.47553359 -1.42972857  0.04112564\n",
            " -0.71726341  0.30953443  1.42600902 -0.64214662  1.22206482 -0.15269529\n",
            " -0.98147626  0.51673195  0.87687548  1.12489581 -0.32471515  0.17885988\n",
            " -0.54251839  1.17106196 -0.22171559 -0.81806385  0.35366571 -0.70368993\n",
            " -0.8570682  -0.0045088  -0.20958668  1.00516886  0.40053602  1.8027372\n",
            " -0.72458626  1.21338125 -0.41360706  0.84643102  0.62117564  0.09591706\n",
            "  0.04173149 -1.10985622 -3.5705475   1.32859881  0.74756128 -1.15080389\n",
            "  0.47786246  0.03816032 -0.53418396 -1.05504389 -0.66237438  2.21874426\n",
            "  1.13807603 -0.64978947  0.38188489  0.5547288   0.02252077  1.63113269\n",
            " -0.25088599  1.06075758  0.12462379 -0.27534011 -1.67848203 -1.40025361\n",
            " -0.38571167 -0.18976754  1.25689361 -0.48898443 -0.30664589 -0.19668215\n",
            "  0.59985595  0.2970152  -0.38195035 -0.63967248 -0.42826454 -0.26759062\n",
            "  0.91862599  0.75789627]\n",
            "Epoch=869, Loss=1.0981, Weights=[-1.14570762e+00  1.15535413e+00  4.38091341e-01  6.37827022e-01\n",
            " -1.86615991e+00 -2.69842368e+00 -1.71463575e+00  4.42351522e-02\n",
            " -5.91533871e-02  3.03532688e-01  1.82547407e+00 -6.36788922e-01\n",
            " -2.80563466e-01 -3.60984073e-01  3.05861915e-01 -2.80121354e-01\n",
            "  5.19121844e-01 -4.65057552e-01  6.10574497e-01 -9.78224973e-01\n",
            " -1.84848441e+00 -1.18251045e-02  1.20239359e+00  9.11792079e-01\n",
            " -9.71373966e-01 -2.42999755e+00  2.08145191e-01 -5.76272954e-01\n",
            " -1.24972547e+00 -9.06556201e-01 -9.38726309e-01 -9.92213824e-01\n",
            "  1.71180321e+00 -7.75516432e-01  1.66915777e+00  1.24816829e-01\n",
            " -1.03894471e+00 -1.58853294e+00 -7.03687647e-01  7.35321216e-01\n",
            "  3.08308769e-01  5.49432868e-01 -1.01807165e+00 -8.04681894e-01\n",
            " -1.12541282e+00  1.41140150e+00  7.25334675e-01  5.31136201e-01\n",
            " -4.86813747e-01  2.82498589e-01 -3.26673376e-01 -2.11306980e-01\n",
            " -7.44149285e-01  1.11813741e+00  5.92452450e-01 -1.08805770e+00\n",
            " -1.20373678e+00 -5.60696495e-02  1.78405693e-02 -9.06752728e-01\n",
            " -6.58011770e-01  5.26587387e-01 -1.29734155e+00  1.29950017e+00\n",
            " -8.28530802e-01 -9.34400100e-01 -7.61081465e-01  7.29764150e-01\n",
            "  7.86901909e-01  5.40370742e-01  1.74743070e-01  2.67747282e-01\n",
            " -1.63446867e+00 -7.07496569e-01 -9.88038293e-01  1.17424385e+00\n",
            " -1.49002542e+00  1.07743742e+00 -3.72912475e-01  6.35844500e-01\n",
            " -7.31871605e-01  1.70408546e+00 -8.12447055e-01 -9.46604320e-01\n",
            " -8.76257847e-01 -4.12755325e-01 -1.23316540e+00 -1.38084046e+00\n",
            " -1.76317377e+00 -1.49423274e+00 -8.17308406e-01  1.61704386e+00\n",
            "  1.41564239e+00 -8.02203825e-01 -2.88967336e-01 -7.09631259e-01\n",
            "  1.35470995e+00 -8.73998257e-01  3.72559380e-01  4.15414189e-01\n",
            "  6.45011200e-01  9.04827731e-01  8.59705425e-01 -2.43105787e-02\n",
            " -5.77367765e-01 -6.94601715e-01  1.18916988e+00 -6.30546840e-01\n",
            " -4.99595830e-01 -5.00458931e-01 -7.59157174e-01 -5.30575648e-01\n",
            "  3.50999955e-01 -1.62587358e+00  6.06876998e-01  7.70117443e-03\n",
            " -5.82587551e-01 -1.14432247e+00 -2.44774435e+00 -1.63697660e+00\n",
            " -9.78032332e-02 -1.11050761e+00 -6.22618351e-01 -1.81151621e+00\n",
            "  5.85230200e-02 -1.40993101e+00  2.19289948e+00  2.36388029e-01\n",
            "  6.59332260e-01  4.75696556e-01 -1.42897086e+00  4.22018672e-02\n",
            " -7.17087865e-01  3.08845487e-01  1.42560893e+00 -6.43120583e-01\n",
            "  1.22036375e+00 -1.52659890e-01 -9.79933868e-01  5.16909695e-01\n",
            "  8.76087336e-01  1.12522033e+00 -3.24155475e-01  1.77263803e-01\n",
            " -5.44660508e-01  1.17153550e+00 -2.20896111e-01 -8.18719759e-01\n",
            "  3.52793149e-01 -7.05057320e-01 -8.57455907e-01 -2.90512934e-03\n",
            " -2.09204597e-01  1.00420027e+00  4.01767102e-01  1.80488450e+00\n",
            " -7.25411915e-01  1.21100941e+00 -4.14771304e-01  8.45011813e-01\n",
            "  6.19670948e-01  9.60960932e-02  4.25975793e-02 -1.10855876e+00\n",
            " -3.56841019e+00  1.32863546e+00  7.45003035e-01 -1.15110512e+00\n",
            "  4.78889270e-01  3.71255686e-02 -5.35564738e-01 -1.05469356e+00\n",
            " -6.61073210e-01  2.21866924e+00  1.13749403e+00 -6.49806936e-01\n",
            "  3.81400437e-01  5.54071334e-01  2.18229754e-02  1.63057888e+00\n",
            " -2.50887484e-01  1.05949165e+00  1.22368206e-01 -2.75776021e-01\n",
            " -1.67757966e+00 -1.39918174e+00 -3.84666930e-01 -1.89912635e-01\n",
            "  1.25669821e+00 -4.88143177e-01 -3.07487769e-01 -1.99059073e-01\n",
            "  5.99688938e-01  2.98453064e-01 -3.82237307e-01 -6.40507812e-01\n",
            " -4.27817250e-01 -2.67228520e-01  9.18717708e-01  7.57203585e-01]\n",
            "Epoch=879, Loss=1.0953, Weights=[-1.14698782e+00  1.15420473e+00  4.37177508e-01  6.37481136e-01\n",
            " -1.86333043e+00 -2.69598853e+00 -1.71576340e+00  4.43697034e-02\n",
            " -5.70281183e-02  3.03408361e-01  1.82271498e+00 -6.39111329e-01\n",
            " -2.81093628e-01 -3.60569894e-01  3.07289777e-01 -2.80130700e-01\n",
            "  5.17126954e-01 -4.64629399e-01  6.11736288e-01 -9.80189231e-01\n",
            " -1.85063968e+00 -1.18273881e-02  1.20206825e+00  9.10850132e-01\n",
            " -9.71007542e-01 -2.42966024e+00  2.07634237e-01 -5.75763783e-01\n",
            " -1.24837159e+00 -9.06527732e-01 -9.39878558e-01 -9.92158863e-01\n",
            "  1.71218840e+00 -7.77077815e-01  1.66747804e+00  1.24962014e-01\n",
            " -1.03870880e+00 -1.58848051e+00 -7.02256107e-01  7.35370815e-01\n",
            "  3.05949511e-01  5.48417420e-01 -1.01764704e+00 -8.05723094e-01\n",
            " -1.12740455e+00  1.41059750e+00  7.25558168e-01  5.31549740e-01\n",
            " -4.86497118e-01  2.82361427e-01 -3.27295567e-01 -2.11367561e-01\n",
            " -7.44244952e-01  1.11689456e+00  5.91861124e-01 -1.08716208e+00\n",
            " -1.20269553e+00 -5.60234887e-02  1.64816462e-02 -9.08292983e-01\n",
            " -6.58299085e-01  5.27459408e-01 -1.29753518e+00  1.29753515e+00\n",
            " -8.28940887e-01 -9.32159621e-01 -7.59635291e-01  7.27848304e-01\n",
            "  7.84588504e-01  5.40881252e-01  1.76045345e-01  2.67262125e-01\n",
            " -1.63564449e+00 -7.08036378e-01 -9.87757337e-01  1.17605898e+00\n",
            " -1.49005113e+00  1.07465773e+00 -3.72782794e-01  6.38758203e-01\n",
            " -7.31172017e-01  1.70172444e+00 -8.13950315e-01 -9.45101746e-01\n",
            " -8.75617645e-01 -4.14115005e-01 -1.23300819e+00 -1.37902875e+00\n",
            " -1.76181582e+00 -1.49375112e+00 -8.17706227e-01  1.61514096e+00\n",
            "  1.41435503e+00 -8.01041409e-01 -2.88696446e-01 -7.11126134e-01\n",
            "  1.35513585e+00 -8.72650996e-01  3.72472743e-01  4.15709914e-01\n",
            "  6.45475099e-01  9.03959802e-01  8.58989250e-01 -2.33008754e-02\n",
            " -5.76288620e-01 -6.95095186e-01  1.18862777e+00 -6.30417173e-01\n",
            " -4.98744617e-01 -4.99355934e-01 -7.59363745e-01 -5.30979877e-01\n",
            "  3.52477216e-01 -1.62446971e+00  6.05112047e-01  5.74394215e-03\n",
            " -5.82247915e-01 -1.14339346e+00 -2.44737191e+00 -1.63759760e+00\n",
            " -9.78645432e-02 -1.10935391e+00 -6.21073231e-01 -1.81116422e+00\n",
            "  5.66853404e-02 -1.41172661e+00  2.19218617e+00  2.35822099e-01\n",
            "  6.58963771e-01  4.75857582e-01 -1.42821332e+00  4.32769311e-02\n",
            " -7.16914932e-01  3.08159626e-01  1.42521141e+00 -6.44097750e-01\n",
            "  1.21866139e+00 -1.52622758e-01 -9.78392413e-01  5.17086310e-01\n",
            "  8.75300744e-01  1.12554351e+00 -3.23598771e-01  1.75672128e-01\n",
            " -5.46797735e-01  1.17200599e+00 -2.20077579e-01 -8.19372697e-01\n",
            "  3.51921199e-01 -7.06423369e-01 -8.57842814e-01 -1.30573314e-03\n",
            " -2.08823872e-01  1.00323622e+00  4.02995745e-01  1.80702270e+00\n",
            " -7.26237382e-01  1.20864492e+00 -4.15936475e-01  8.43588439e-01\n",
            "  6.18169671e-01  9.62776293e-02  4.34610198e-02 -1.10726166e+00\n",
            " -3.56627344e+00  1.32866977e+00  7.42448698e-01 -1.15140055e+00\n",
            "  4.79912995e-01  3.60857843e-02 -5.36941459e-01 -1.05434005e+00\n",
            " -6.59777900e-01  2.21859145e+00  1.13691438e+00 -6.49824233e-01\n",
            "  3.80915199e-01  5.53414940e-01  2.11250578e-02  1.63002234e+00\n",
            " -2.50887793e-01  1.05822916e+00  1.20111952e-01 -2.76213209e-01\n",
            " -1.67667489e+00 -1.39810807e+00 -3.83624481e-01 -1.90059030e-01\n",
            "  1.25650347e+00 -4.87302400e-01 -3.08329472e-01 -2.01433856e-01\n",
            "  5.99521940e-01  2.99888812e-01 -3.82521943e-01 -6.41340525e-01\n",
            " -4.27372877e-01 -2.66868795e-01  9.18810897e-01  7.56512270e-01]\n",
            "Epoch=889, Loss=1.0925, Weights=[-1.14826873e+00  1.15305690e+00  4.36266669e-01  6.37132254e-01\n",
            " -1.86050650e+00 -2.69355111e+00 -1.71688655e+00  4.45007720e-02\n",
            " -5.49070333e-02  3.03287214e-01  1.81995970e+00 -6.41432883e-01\n",
            " -2.81623698e-01 -3.60157935e-01  3.08714794e-01 -2.80138794e-01\n",
            "  5.15133380e-01 -4.64204890e-01  6.12896698e-01 -9.82148601e-01\n",
            " -1.85279304e+00 -1.18323801e-02  1.20174306e+00  9.09910617e-01\n",
            " -9.70642292e-01 -2.42932428e+00  2.07126332e-01 -5.75255230e-01\n",
            " -1.24702137e+00 -9.06497154e-01 -9.41027158e-01 -9.92105369e-01\n",
            "  1.71257161e+00 -7.78636733e-01  1.66580093e+00  1.25107700e-01\n",
            " -1.03847331e+00 -1.58843063e+00 -7.00828857e-01  7.35420430e-01\n",
            "  3.03594422e-01  5.47401990e-01 -1.01722482e+00 -8.06761233e-01\n",
            " -1.12939045e+00  1.40979326e+00  7.25778274e-01  5.31964404e-01\n",
            " -4.86178768e-01  2.82222553e-01 -3.27918519e-01 -2.11426088e-01\n",
            " -7.44338919e-01  1.11565267e+00  5.91270587e-01 -1.08626834e+00\n",
            " -1.20165751e+00 -5.59776222e-02  1.51249358e-02 -9.09832366e-01\n",
            " -6.58587827e-01  5.28330401e-01 -1.29772817e+00  1.29557313e+00\n",
            " -8.29347818e-01 -9.29921207e-01 -7.58194158e-01  7.25933797e-01\n",
            "  7.82281888e-01  5.41392820e-01  1.77341164e-01  2.66773792e-01\n",
            " -1.63681513e+00 -7.08572320e-01 -9.87480833e-01  1.17786696e+00\n",
            " -1.49007641e+00  1.07188457e+00 -3.72652325e-01  6.41664420e-01\n",
            " -7.30476839e-01  1.69937086e+00 -8.15447907e-01 -9.43606417e-01\n",
            " -8.74982792e-01 -4.15470028e-01 -1.23284722e+00 -1.37721852e+00\n",
            " -1.76046013e+00 -1.49327103e+00 -8.18102909e-01  1.61324299e+00\n",
            "  1.41306664e+00 -7.99886649e-01 -2.88425876e-01 -7.12616522e-01\n",
            "  1.35556076e+00 -8.71306634e-01  3.72387469e-01  4.16006092e-01\n",
            "  6.45936960e-01  9.03093944e-01  8.58275177e-01 -2.22948246e-02\n",
            " -5.75213243e-01 -6.95586550e-01  1.18808788e+00 -6.30289219e-01\n",
            " -4.97895350e-01 -4.98252710e-01 -7.59566804e-01 -5.31382804e-01\n",
            "  3.53950150e-01 -1.62306917e+00  6.03348127e-01  3.78843754e-03\n",
            " -5.81908200e-01 -1.14246609e+00 -2.44699991e+00 -1.63821446e+00\n",
            " -9.79229530e-02 -1.10820414e+00 -6.19533296e-01 -1.81080943e+00\n",
            "  5.48532952e-02 -1.41352391e+00  2.19147090e+00  2.35259288e-01\n",
            "  6.58596734e-01  4.76016676e-01 -1.42745597e+00  4.43508235e-02\n",
            " -7.16744607e-01  3.07476830e-01  1.42481644e+00 -6.45078086e-01\n",
            "  1.21695777e+00 -1.52583916e-01 -9.76851897e-01  5.17261812e-01\n",
            "  8.74515700e-01  1.12586534e+00 -3.23045049e-01  1.74084849e-01\n",
            " -5.48930082e-01  1.17247344e+00 -2.19259987e-01 -8.20022686e-01\n",
            "  3.51049856e-01 -7.07788051e-01 -8.58228925e-01  2.89359515e-04\n",
            " -2.08444484e-01  1.00227672e+00  4.04221921e-01  1.80915179e+00\n",
            " -7.27062637e-01  1.20628778e+00 -4.17102564e-01  8.42160920e-01\n",
            "  6.16671801e-01  9.64616435e-02  4.43218118e-02 -1.10596492e+00\n",
            " -3.56413728e+00  1.32870171e+00  7.39898304e-01 -1.15169018e+00\n",
            "  4.80933608e-01  3.50409660e-02 -5.38314104e-01 -1.05398337e+00\n",
            " -6.58488455e-01  2.21851088e+00  1.13633707e+00 -6.49841349e-01\n",
            "  3.80429196e-01  5.52759610e-01  2.04269986e-02  1.62946309e+00\n",
            " -2.50886907e-01  1.05697008e+00  1.17855021e-01 -2.76651672e-01\n",
            " -1.67576771e+00 -1.39703260e+00 -3.82584322e-01 -1.90206725e-01\n",
            "  1.25630939e+00 -4.86462085e-01 -3.09170997e-01 -2.03806508e-01\n",
            "  5.99354958e-01  3.01322455e-01 -3.82804270e-01 -6.42170629e-01\n",
            " -4.26931399e-01 -2.66511437e-01  9.18905541e-01  7.55822324e-01]\n",
            "Epoch=899, Loss=1.0898, Weights=[-1.14955036e+00  1.15191062e+00  4.35358826e-01  6.36780380e-01\n",
            " -1.85768815e+00 -2.69111144e+00 -1.71800520e+00  4.46283681e-02\n",
            " -5.27901389e-02  3.03169248e-01  1.81720823e+00 -6.43753580e-01\n",
            " -2.82153653e-01 -3.59748184e-01  3.10136952e-01 -2.80145637e-01\n",
            "  5.13141144e-01 -4.63784023e-01  6.14055709e-01 -9.84103079e-01\n",
            " -1.85494451e+00 -1.18400879e-02  1.20141803e+00  9.08973534e-01\n",
            " -9.70278241e-01 -2.42898970e+00  2.06621480e-01 -5.74747297e-01\n",
            " -1.24567479e+00 -9.06464467e-01 -9.42172101e-01 -9.92053326e-01\n",
            "  1.71295287e+00 -7.80193193e-01  1.66412643e+00  1.25253892e-01\n",
            " -1.03823823e+00 -1.58838329e+00 -6.99405897e-01  7.35470065e-01\n",
            "  3.01243511e-01  5.46386579e-01 -1.01680499e+00 -8.07796336e-01\n",
            " -1.13137053e+00  1.40898880e+00  7.25995014e-01  5.32380179e-01\n",
            " -4.85858716e-01  2.82081982e-01 -3.28542222e-01 -2.11482570e-01\n",
            " -7.44431199e-01  1.11441175e+00  5.90680847e-01 -1.08537648e+00\n",
            " -1.20062272e+00 -5.59320575e-02  1.37704246e-02 -9.11370862e-01\n",
            " -6.58877973e-01  5.29200354e-01 -1.29792054e+00  1.29361413e+00\n",
            " -8.29751594e-01 -9.27684890e-01 -7.56758078e-01  7.24020640e-01\n",
            "  7.79982062e-01  5.41905445e-01  1.78630546e-01  2.66282281e-01\n",
            " -1.63798064e+00 -7.09104378e-01 -9.87208754e-01  1.17966776e+00\n",
            " -1.49010129e+00  1.06911797e+00 -3.72521082e-01  6.44563110e-01\n",
            " -7.29786059e-01  1.69702476e+00 -8.16939840e-01 -9.42118330e-01\n",
            " -8.74353268e-01 -4.16820405e-01 -1.23268250e+00 -1.37540978e+00\n",
            " -1.75910671e+00 -1.49279250e+00 -8.18498434e-01  1.61134999e+00\n",
            "  1.41177721e+00 -7.98739559e-01 -2.88155608e-01 -7.14102416e-01\n",
            "  1.35598466e+00 -8.69965187e-01  3.72303563e-01  4.16302728e-01\n",
            "  6.46396788e-01  9.02230160e-01  8.57563197e-01 -2.12924317e-02\n",
            " -5.74141617e-01 -6.96075799e-01  1.18755022e+00 -6.30162972e-01\n",
            " -4.97048021e-01 -4.97149276e-01 -7.59766366e-01 -5.31784424e-01\n",
            "  3.55418761e-01 -1.62167195e+00  6.01585240e-01  1.83467109e-03\n",
            " -5.81568400e-01 -1.14154038e+00 -2.44662836e+00 -1.63882721e+00\n",
            " -9.79784698e-02 -1.10705831e+00 -6.17998533e-01 -1.81045185e+00\n",
            "  5.30268732e-02 -1.41532290e+00  2.19075368e+00  2.34699573e-01\n",
            "  6.58231141e-01  4.76173854e-01 -1.42669881e+00  4.54235348e-02\n",
            " -7.16576882e-01  3.06797082e-01  1.42442400e+00 -6.46061553e-01\n",
            "  1.21525293e+00 -1.52543386e-01 -9.75312327e-01  5.17436222e-01\n",
            "  8.73732197e-01  1.12618579e+00 -3.22494318e-01  1.72501962e-01\n",
            " -5.51057560e-01  1.17293786e+00 -2.18443329e-01 -8.20669744e-01\n",
            "  3.50179114e-01 -7.09151335e-01 -8.58614239e-01  1.88012128e-03\n",
            " -2.08066414e-01  1.00132180e+00  4.05445600e-01  1.81127175e+00\n",
            " -7.27887659e-01  1.20393801e+00 -4.18269568e-01  8.40729280e-01\n",
            "  6.15177334e-01  9.66481105e-02  4.51799515e-02 -1.10466854e+00\n",
            " -3.56200175e+00  1.32873129e+00  7.37351888e-01 -1.15197400e+00\n",
            "  4.81951081e-01  3.39911175e-02 -5.39682655e-01 -1.05362352e+00\n",
            " -6.57204878e-01  2.21842754e+00  1.13576210e+00 -6.49858271e-01\n",
            "  3.79942452e-01  5.52105341e-01  1.97287825e-02  1.62890113e+00\n",
            " -2.50884821e-01  1.05571439e+00  1.15597402e-01 -2.77091405e-01\n",
            " -1.67485813e+00 -1.39595535e+00 -3.81546448e-01 -1.90355718e-01\n",
            "  1.25611597e+00 -4.85622224e-01 -3.10012343e-01 -2.06177035e-01\n",
            "  5.99187996e-01  3.02754004e-01 -3.83084295e-01 -6.42998126e-01\n",
            " -4.26492800e-01 -2.66156437e-01  9.19001628e-01  7.55133742e-01]\n",
            "Epoch=909, Loss=1.0871, Weights=[-1.15083272e+00  1.15076593e+00  4.34453981e-01  6.36425517e-01\n",
            " -1.85487539e+00 -2.68866954e+00 -1.71911933e+00  4.47525025e-02\n",
            " -5.06774419e-02  3.03054459e-01  1.81446058e+00 -6.46073417e-01\n",
            " -2.82683473e-01 -3.59340631e-01  3.11556236e-01 -2.80151230e-01\n",
            "  5.11150271e-01 -4.63366800e-01  6.15213299e-01 -9.86052664e-01\n",
            " -1.85709408e+00 -1.18505185e-02  1.20109317e+00  9.08038882e-01\n",
            " -9.69915413e-01 -2.42865651e+00  2.06119684e-01 -5.74239983e-01\n",
            " -1.24433188e+00 -9.06429673e-01 -9.43313381e-01 -9.92002717e-01\n",
            "  1.71333218e+00 -7.81747207e-01  1.66245454e+00  1.25400596e-01\n",
            " -1.03800353e+00 -1.58833848e+00 -6.97987229e-01  7.35519725e-01\n",
            "  2.98896786e-01  5.45371189e-01 -1.01638757e+00 -8.08828428e-01\n",
            " -1.13334482e+00  1.40818414e+00  7.26208413e-01  5.32797053e-01\n",
            " -4.85536978e-01  2.81939725e-01 -3.29166665e-01 -2.11537017e-01\n",
            " -7.44521803e-01  1.11317180e+00  5.90091911e-01 -1.08448649e+00\n",
            " -1.19959116e+00 -5.58868016e-02  1.24180987e-02 -9.12908457e-01\n",
            " -6.59169502e-01  5.30069250e-01 -1.29811230e+00  1.29165818e+00\n",
            " -8.30152216e-01 -9.25450700e-01 -7.55327063e-01  7.22108844e-01\n",
            "  7.77689030e-01  5.42419124e-01  1.79913513e-01  2.65787592e-01\n",
            " -1.63914102e+00 -7.09632536e-01 -9.86941075e-01  1.18146136e+00\n",
            " -1.49012575e+00  1.06635797e+00 -3.72389078e-01  6.47454236e-01\n",
            " -7.29099665e-01  1.69468615e+00 -8.18426121e-01 -9.40637481e-01\n",
            " -8.73729055e-01 -4.18166150e-01 -1.23251406e+00 -1.37360250e+00\n",
            " -1.75775557e+00 -1.49231556e+00 -8.18892786e-01  1.60946198e+00\n",
            "  1.41048672e+00 -7.97600152e-01 -2.87885624e-01 -7.15583810e-01\n",
            "  1.35640753e+00 -8.68626670e-01  3.72221031e-01  4.16599829e-01\n",
            "  6.46854591e-01  9.01368455e-01  8.56853301e-01 -2.02937023e-02\n",
            " -5.73073722e-01 -6.96562926e-01  1.18701475e+00 -6.30038427e-01\n",
            " -4.96202621e-01 -4.96045650e-01 -7.59962444e-01 -5.32184734e-01\n",
            "  3.56883053e-01 -1.62027806e+00  5.99823389e-01 -1.17346907e-04\n",
            " -5.81228508e-01 -1.14061631e+00 -2.44625724e+00 -1.63943585e+00\n",
            " -9.80311006e-02 -1.10591638e+00 -6.16468929e-01 -1.81009150e+00\n",
            "  5.12060636e-02 -1.41712354e+00  2.19003452e+00  2.34142933e-01\n",
            "  6.57866987e-01  4.76329127e-01 -1.42594186e+00  4.64950557e-02\n",
            " -7.16411748e-01  3.06120363e-01  1.42403408e+00 -6.47048111e-01\n",
            "  1.21354690e+00 -1.52501190e-01 -9.73773711e-01  5.17609562e-01\n",
            "  8.72950228e-01  1.12650484e+00 -3.21946583e-01  1.70923465e-01\n",
            " -5.53180181e-01  1.17339924e+00 -2.17627599e-01 -8.21313893e-01\n",
            "  3.49308966e-01 -7.10513194e-01 -8.58998756e-01  3.46652570e-03\n",
            " -2.07689642e-01  1.00037147e+00  4.06666751e-01  1.81338258e+00\n",
            " -7.28712424e-01  1.20159560e+00 -4.19437481e-01  8.39293537e-01\n",
            "  6.13686266e-01  9.68370056e-02  4.60354350e-02 -1.10337252e+00\n",
            " -3.55986688e+00  1.32875847e+00  7.34809483e-01 -1.15225200e+00\n",
            "  4.82965389e-01  3.29362427e-02 -5.41047093e-01 -1.05326051e+00\n",
            " -6.55927173e-01  2.21834144e+00  1.13518948e+00 -6.49874986e-01\n",
            "  3.79454988e-01  5.51452127e-01  1.90303942e-02  1.62833649e+00\n",
            " -2.50881525e-01  1.05446209e+00  1.13339083e-01 -2.77532401e-01\n",
            " -1.67394615e+00 -1.39487632e+00 -3.80510854e-01 -1.90506006e-01\n",
            "  1.25592321e+00 -4.84782806e-01 -3.10853506e-01 -2.08545443e-01\n",
            "  5.99021057e-01  3.04183469e-01 -3.83362025e-01 -6.43823020e-01\n",
            " -4.26057063e-01 -2.65803785e-01  9.19099148e-01  7.54446517e-01]\n",
            "Epoch=919, Loss=1.0844, Weights=[-1.15211584e+00  1.14962281e+00  4.33552135e-01  6.36067670e-01\n",
            " -1.85206824e+00 -2.68622545e+00 -1.72022895e+00  4.48731861e-02\n",
            " -4.85689490e-02  3.02942844e-01  1.81171676e+00 -6.48392389e-01\n",
            " -2.83213136e-01 -3.58935264e-01  3.12972632e-01 -2.80155576e-01\n",
            "  5.09160787e-01 -4.62953222e-01  6.16369449e-01 -9.87997354e-01\n",
            " -1.85924173e+00 -1.18636789e-02  1.20076846e+00  9.07106660e-01\n",
            " -9.69553831e-01 -2.42832474e+00  2.05620945e-01 -5.73733288e-01\n",
            " -1.24299262e+00 -9.06392773e-01 -9.44450990e-01 -9.91953526e-01\n",
            "  1.71370955e+00 -7.83298781e-01  1.66078523e+00  1.25547818e-01\n",
            " -1.03776919e+00 -1.58829619e+00 -6.96572854e-01  7.35569416e-01\n",
            "  2.96554255e-01  5.44355819e-01 -1.01597255e+00 -8.09857534e-01\n",
            " -1.13531335e+00  1.40737928e+00  7.26418494e-01  5.33215011e-01\n",
            " -4.85213571e-01  2.81795795e-01 -3.29791838e-01 -2.11589438e-01\n",
            " -7.44610746e-01  1.11193283e+00  5.89503788e-01 -1.08359837e+00\n",
            " -1.19856280e+00 -5.58418618e-02  1.10679446e-02 -9.14445135e-01\n",
            " -6.59462391e-01  5.30937075e-01 -1.29830348e+00  1.28970530e+00\n",
            " -8.30549685e-01 -9.23218669e-01 -7.53901125e-01  7.20198420e-01\n",
            "  7.75402793e-01  5.42933857e-01  1.81190087e-01  2.65289725e-01\n",
            " -1.64029632e+00 -7.10156778e-01 -9.86677769e-01  1.18324774e+00\n",
            " -1.49014981e+00  1.06360461e+00 -3.72256326e-01  6.50337759e-01\n",
            " -7.28417646e-01  1.69235506e+00 -8.19906760e-01 -9.39163865e-01\n",
            " -8.73110133e-01 -4.19507274e-01 -1.23234192e+00 -1.37179668e+00\n",
            " -1.75640672e+00 -1.49184023e+00 -8.19285948e-01  1.60757900e+00\n",
            "  1.40919515e+00 -7.96468442e-01 -2.87615905e-01 -7.17060695e-01\n",
            "  1.35682934e+00 -8.67291098e-01  3.72139878e-01  4.16897403e-01\n",
            "  6.47310377e-01  9.00508833e-01  8.56145482e-01 -1.92986417e-02\n",
            " -5.72009541e-01 -6.97047925e-01  1.18648148e+00 -6.29915578e-01\n",
            " -4.95359142e-01 -4.94941848e-01 -7.60155054e-01 -5.32583729e-01\n",
            "  3.58343029e-01 -1.61888749e+00  5.98062577e-01 -2.06760638e-03\n",
            " -5.80888518e-01 -1.13969390e+00 -2.44588656e+00 -1.64004037e+00\n",
            " -9.80808526e-02 -1.10477836e+00 -6.14944471e-01 -1.80972841e+00\n",
            "  4.93908550e-02 -1.41892583e+00  2.18931343e+00  2.33589345e-01\n",
            "  6.57504264e-01  4.76482510e-01 -1.42518511e+00  4.75653763e-02\n",
            " -7.16249198e-01  3.05446658e-01  1.42364666e+00 -6.48037723e-01\n",
            "  1.21183972e+00 -1.52457350e-01 -9.72236054e-01  5.17781852e-01\n",
            "  8.72169784e-01  1.12682246e+00 -3.21401850e-01  1.69349355e-01\n",
            " -5.55297956e-01  1.17385759e+00 -2.16812792e-01 -8.21955152e-01\n",
            "  3.48439405e-01 -7.11873600e-01 -8.59382475e-01  5.04854721e-03\n",
            " -2.07314150e-01  9.99425741e-01  4.07885344e-01  1.81548428e+00\n",
            " -7.29536912e-01  1.19926057e+00 -4.20606299e-01  8.37853715e-01\n",
            "  6.12198591e-01  9.70283046e-02  4.68882583e-02 -1.10207686e+00\n",
            " -3.55773269e+00  1.32878326e+00  7.32271122e-01 -1.15252418e+00\n",
            "  4.83976505e-01  3.18763456e-02 -5.42407399e-01 -1.05289436e+00\n",
            " -6.54655343e-01  2.21825257e+00  1.13461919e+00 -6.49891480e-01\n",
            "  3.78966825e-01  5.50799964e-01  1.83318188e-02  1.62776916e+00\n",
            " -2.50877015e-01  1.05321313e+00  1.11080052e-01 -2.77974655e-01\n",
            " -1.67303176e+00 -1.39379551e+00 -3.79477536e-01 -1.90657588e-01\n",
            "  1.25573111e+00 -4.83943823e-01 -3.11694482e-01 -2.10911740e-01\n",
            "  5.98854146e-01  3.05610858e-01 -3.83637468e-01 -6.44645313e-01\n",
            " -4.25624169e-01 -2.65453471e-01  9.19198085e-01  7.53760646e-01]\n",
            "Epoch=929, Loss=1.0817, Weights=[-1.15339974  1.14848129  0.43265329  0.63570684 -1.84926671 -2.68377918\n",
            " -1.72133405  0.04499043 -0.04646467  0.3028344   1.80897676 -0.65071049\n",
            " -0.28374262 -0.35853207  0.31438612 -0.28015868  0.50717272 -0.46254329\n",
            "  0.61752414 -0.98993715 -1.86138748 -0.01187958  1.20044392  0.90617687\n",
            " -0.96919352 -2.4279944   0.20512527 -0.57322721 -1.24165703 -0.90635377\n",
            " -0.94558492 -0.99190574  1.71408499 -0.78484793  1.6591185   0.12569556\n",
            " -1.03753521 -1.58825641 -0.69516277  0.73561914  0.29421593  0.54334047\n",
            " -1.01555993 -0.81088368 -1.13727615  1.40657426  0.72662528  0.53363404\n",
            " -0.48488851  0.28165021 -0.33041773 -0.21163984 -0.74469804  1.11069483\n",
            "  0.58891648 -1.08271212 -1.19753763 -0.05579725  0.00971995 -0.91598088\n",
            " -0.65975662  0.53180381 -1.29849408  1.2877555  -0.830944   -0.92098883\n",
            " -0.75248027  0.71828938  0.77312335  0.54344964  0.18246029  0.26478868\n",
            " -1.64144655 -0.71067709 -0.98641881  1.18502687 -1.49017346  1.0608579\n",
            " -0.37212284  0.65321364 -0.72773999  1.6900315  -0.82138177 -0.93769748\n",
            " -0.87249648 -0.42084379 -1.23216609 -1.3699923  -1.75506017 -1.49136653\n",
            " -0.8196779   1.60570106  1.40790249 -0.79534444 -0.28734643 -0.71853306\n",
            "  1.35725007 -0.86595849  0.37206011  0.41719546  0.64776415  0.8996513\n",
            "  0.85543973 -0.01830726 -0.57094906 -0.69753079  1.18595038 -0.62979442\n",
            " -0.49451757 -0.49383789 -0.76034421 -0.53298141  0.35979869 -1.61750026\n",
            "  0.59630281 -0.0040161  -0.58054842 -1.13877312 -2.44551632 -1.64064078\n",
            " -0.09812773 -1.10364423 -0.61342515 -1.80936258  0.04758124 -1.42072972\n",
            "  2.18859042  0.23303879  0.65714297  0.47663402 -1.42442859  0.04863449\n",
            " -0.71608922  0.30477595  1.42326171 -0.64903035  1.21013143 -0.15241189\n",
            " -0.97069936  0.51795311  0.87139086  1.12713863 -0.32086012  0.16777963\n",
            " -0.5574109   1.17431291 -0.2159989  -0.82259354  0.34757042 -0.71323253\n",
            " -0.8597654   0.00662616 -0.20693992  0.99848464  0.40910135  1.81757681\n",
            " -0.7303611   1.19693291 -0.42177601  0.83640983  0.6107143   0.09722198\n",
            "  0.04773842 -1.10078156 -3.55559923  1.32880563  0.72973684 -1.15279052\n",
            "  0.4849844   0.03081143 -0.54376355 -1.05252505 -0.65338939  2.21816095\n",
            "  1.13405124 -0.64990774  0.37847798  0.55014885  0.01763304  1.62719916\n",
            " -0.25087128  1.05196751  0.1088203  -0.27841816 -1.67211499 -1.39271295\n",
            " -0.37844649 -0.19081046  1.25553967 -0.48310527 -0.31253527 -0.21327593\n",
            "  0.59868726  0.30703618 -0.38391063 -0.64546501 -0.4251941  -0.26510549\n",
            "  0.91929843  0.75307612]\n",
            "Epoch=939, Loss=1.0790, Weights=[-1.15468442  1.14734136  0.43175745  0.63534305 -1.84647083 -2.68133076\n",
            " -1.72243463  0.04510425 -0.0443646   0.30272913  1.80624059 -0.65302772\n",
            " -0.2842719  -0.35813104  0.31579669 -0.28016054  0.50518608 -0.462137\n",
            "  0.61867734 -0.99187204 -1.8635313  -0.01189821  1.20011954  0.90524951\n",
            " -0.9688345  -2.42766552  0.20463265 -0.57272175 -1.24032511 -0.90631265\n",
            " -0.94671516 -0.99185933  1.71445852 -0.78639465  1.65745432  0.12584383\n",
            " -1.03730155 -1.58821912 -0.69375699  0.73566891  0.29188181  0.54232515\n",
            " -1.01514972 -0.81190689 -1.13923325  1.40576907  0.7268288   0.53405413\n",
            " -0.48456182  0.28150297 -0.33104433 -0.21168824 -0.7447837   1.10945781\n",
            "  0.58833    -1.08182772 -1.19651566 -0.05575296  0.0083741  -0.91751568\n",
            " -0.66005217  0.53266945 -1.29868413  1.2858088  -0.83133517 -0.91876121\n",
            " -0.75106452  0.71638173  0.77085071  0.54396647  0.18372414  0.26428446\n",
            " -1.64259175 -0.71119345 -0.98616417  1.18679874 -1.49019672  1.0581179\n",
            " -0.37198863  0.65608184 -0.72706669  1.68771551 -0.82285115 -0.93623832\n",
            " -0.87188808 -0.42217571 -1.23198658 -1.36818938 -1.75371593 -1.4908945\n",
            " -0.82006864  1.6038282   1.40660874 -0.79422816 -0.28707719 -0.72000091\n",
            "  1.3576697  -0.86462885  0.37198173  0.41749399  0.64821592  0.89879585\n",
            "  0.85473604 -0.01731955 -0.56989225 -0.69801151  1.18542144 -0.62967494\n",
            " -0.49367791 -0.49273378 -0.76052992 -0.53337776  0.36125005 -1.61611636\n",
            "  0.59454408 -0.00596281 -0.58020822 -1.13785399 -2.44514651 -1.64123708\n",
            " -0.09817175 -1.10251399 -0.61191094 -1.80899403  0.0457772  -1.42253521\n",
            "  2.1878655   0.23249124  0.65678308  0.47678366 -1.4236723   0.04970238\n",
            " -0.71593182  0.30410822  1.42287923 -0.65002595  1.20842206 -0.15236483\n",
            " -0.96916365  0.51812337  0.87061344  1.12745334 -0.32032141  0.16621429\n",
            " -0.55951901  1.17476522 -0.21518593 -0.82322908  0.34670202 -0.71458995\n",
            " -0.86014752  0.00819934 -0.20656693  0.99754817  0.41031474  1.81966019\n",
            " -0.73118497  1.19461263 -0.42294662  0.83496191  0.6092334   0.09741802\n",
            "  0.04858591 -1.09948662 -3.55346651  1.32882556  0.72720666 -1.15305102\n",
            "  0.48598906  0.0297415  -0.54511554 -1.0521526  -0.65212933  2.21806657\n",
            "  1.13348563 -0.64992375  0.37798849  0.54949878  0.01693405  1.6266265\n",
            " -0.25086432  1.0507252   0.10655981 -0.27886292 -1.67119581 -1.39162862\n",
            " -0.37741771 -0.19096462  1.25534889 -0.48226713 -0.31337587 -0.21563802\n",
            "  0.59852042  0.30845945 -0.38418152 -0.64628211 -0.42476684 -0.26475982\n",
            "  0.91940016  0.75239294]\n",
            "Epoch=949, Loss=1.0763, Weights=[-1.15596992  1.14620305  0.43086462  0.63497628 -1.8436806  -2.67888023\n",
            " -1.72353068  0.04521465 -0.04226876  0.30262702  1.80350825 -0.65534407\n",
            " -0.28480097 -0.35773215  0.31720432 -0.28016117  0.50320092 -0.46173435\n",
            "  0.61982903 -0.99380203 -1.8656732  -0.0119196   1.19979531  0.90432458\n",
            " -0.9684768  -2.42733812  0.20414309 -0.57221691 -1.23899686 -0.90626943\n",
            " -0.94784171 -0.99181429  1.71483013 -0.78793896  1.6557927   0.12599263\n",
            " -1.0370682  -1.58818431 -0.69235549  0.73571872  0.28955191  0.54130985\n",
            " -1.01474191 -0.81292719 -1.14118467  1.40496374  0.72702907  0.53447526\n",
            " -0.48423351  0.2813541  -0.33167163 -0.21173464 -0.74486773  1.10822177\n",
            "  0.58774436 -1.08094518 -1.19549685 -0.05570901  0.00703037 -0.91904952\n",
            " -0.66034901  0.53353396 -1.29887364  1.28386523 -0.83172319 -0.91653583\n",
            " -0.74965387  0.71447549  0.76858488  0.54448435  0.18498167  0.26377706\n",
            " -1.64373194 -0.71170586 -0.98591382  1.18856332 -1.49021959  1.05538464\n",
            " -0.37185372  0.65894232 -0.72639772  1.68540709 -0.82431493 -0.93478638\n",
            " -0.87128491 -0.42350304 -1.23180343 -1.36638788 -1.752374   -1.49042416\n",
            " -0.82045813  1.60196044  1.40531386 -0.79311962 -0.28680816 -0.72146423\n",
            "  1.3580882  -0.8633022   0.37190475  0.41779302  0.6486657   0.8979425\n",
            "  0.85403439 -0.01633553 -0.5688391  -0.69849009  1.18489464 -0.62955714\n",
            " -0.49284014 -0.49162955 -0.7607122  -0.53377279  0.36269711 -1.61473579\n",
            "  0.5927864  -0.00790774 -0.57986789 -1.13693651 -2.44477713 -1.64182929\n",
            " -0.09821291 -1.10138761 -0.61040185 -1.80862279  0.04397872 -1.42434228\n",
            "  2.18713867  0.23194667  0.65642461  0.47693146 -1.42291624  0.05076904\n",
            " -0.71577697  0.30344345  1.42249919 -0.65102449  1.20671165 -0.15231619\n",
            " -0.96762891  0.51829263  0.86983753  1.12776655 -0.31978572  0.16465332\n",
            " -0.56162232  1.17521451 -0.21437386 -0.82386179  0.34583418 -0.71594583\n",
            " -0.86052885  0.00976807 -0.20619516  0.99661635  0.41152548  1.82173439\n",
            " -0.73200851  1.19229975 -0.42411812  0.83350997  0.60775588  0.09761639\n",
            "  0.04943073 -1.09819204 -3.55133457  1.32884305  0.72468063 -1.15330568\n",
            "  0.48699045  0.02866656 -0.54646333 -1.05177701 -0.65087515  2.21796945\n",
            "  1.13292236 -0.64993951  0.37749836  0.54884975  0.01623482  1.62605119\n",
            " -0.25085613  1.04948619  0.10429857 -0.27930891 -1.67027424 -1.39054254\n",
            " -0.37639119 -0.19112006  1.25515876 -0.4814294  -0.31421627 -0.21799802\n",
            "  0.59835361  0.30988068 -0.38445015 -0.64709662 -0.42434238 -0.26441646\n",
            "  0.91950328  0.75171109]\n",
            "Epoch=959, Loss=1.0736, Weights=[-1.15725624  1.14506634  0.4299748   0.63460656 -1.84089605 -2.67642762\n",
            " -1.72462222  0.04532165 -0.04017716  0.30252808  1.80077976 -0.65765954\n",
            " -0.28532978 -0.35733541  0.318609   -0.28016056  0.50121724 -0.46133534\n",
            "  0.6209792  -0.99572712 -1.86781316 -0.01194374  1.19947125  0.90340207\n",
            " -0.96812044 -2.42701222  0.2036566  -0.57171268 -1.23767229 -0.90622411\n",
            " -0.94896455 -0.9917706   1.71519985 -0.78948087  1.65413361  0.12614197\n",
            " -1.03683514 -1.58815197 -0.6909583   0.73576858  0.28722623  0.54029457\n",
            " -1.01433651 -0.8139446  -1.14313045  1.40415829  0.72722612  0.53489742\n",
            " -0.48390361  0.28120361 -0.33229961 -0.21177905 -0.74495016  1.10698671\n",
            "  0.58715955 -1.08006449 -1.19448121 -0.05566541  0.00568877 -0.92058239\n",
            " -0.66064712  0.53439735 -1.29906264  1.28192481 -0.83210806 -0.91431275\n",
            " -0.74824834  0.71257067  0.76632585  0.54500328  0.18623288  0.26326649\n",
            " -1.64486715 -0.7122143  -0.98566773  1.1903206  -1.49024208  1.05265814\n",
            " -0.3717181   0.66179504 -0.72573309  1.68310626 -0.8257731  -0.93334166\n",
            " -0.87068694 -0.42482581 -1.23161664 -1.3645878  -1.7510344  -1.48995554\n",
            " -0.82084637  1.60009782  1.40401786 -0.79201883 -0.28653931 -0.72292302\n",
            "  1.35850555 -0.86197856  0.37182917  0.41809255  0.64911348  0.89709125\n",
            "  0.85333479 -0.01535519 -0.5677896  -0.69896651  1.18436998 -0.62944101\n",
            " -0.49200425 -0.49052522 -0.76089107 -0.53416649  0.36413986 -1.61335856\n",
            "  0.59102976 -0.00985086 -0.57952745 -1.13602066 -2.44440819 -1.6424174\n",
            " -0.09825121 -1.10026509 -0.60889784 -1.80824887  0.0421858  -1.42615089\n",
            "  2.18640995  0.23140507  0.65606754  0.47707742 -1.42216044  0.05183446\n",
            " -0.71562467  0.30278162  1.42212158 -0.65202592  1.20500023 -0.152266\n",
            " -0.96609517  0.51846093  0.8690631   1.12807825 -0.31925304  0.16309674\n",
            " -0.56372082  1.1756608  -0.2135627  -0.82449169  0.34496691 -0.71730016\n",
            " -0.86090938  0.01133232 -0.2058246   0.9956892   0.41273355  1.82379941\n",
            " -0.73283169  1.18999425 -0.4252905   0.83205404  0.60628173  0.09781708\n",
            "  0.05027287 -1.09689782 -3.54920344  1.32885809  0.72215877 -1.15355447\n",
            "  0.48798855  0.02758661 -0.54780692 -1.05139829 -0.64962686  2.21786957\n",
            "  1.13236142 -0.64995499  0.37700761  0.54820176  0.01553535  1.62547324\n",
            " -0.2508467   1.04825044  0.10203657 -0.27975614 -1.66935028 -1.38945473\n",
            " -0.37536693 -0.19127679  1.25496931 -0.48059208 -0.31505647 -0.22035594\n",
            "  0.59818684  0.31129987 -0.38471651 -0.64790854 -0.42392068 -0.26407541\n",
            "  0.91960776  0.75103058]\n",
            "Epoch=969, Loss=1.0709, Weights=[-1.1585434   1.14393126  0.42908799  0.63423389 -1.83811718 -2.67397294\n",
            " -1.72570922  0.04542527 -0.03808979  0.30243229  1.79805511 -0.65997412\n",
            " -0.28585833 -0.35694078  0.32001071 -0.28015873  0.49923509 -0.46093998\n",
            "  0.6221278  -0.99764731 -1.86995118 -0.01197064  1.19914733  0.902482\n",
            " -0.96776544 -2.42668784  0.20317318 -0.57120906 -1.23635141 -0.90617668\n",
            " -0.95008367 -0.99172825  1.71556767 -0.79102038  1.65247705  0.12629184\n",
            " -1.03660235 -1.58812208 -0.68956539  0.73581849  0.28490479  0.53927933\n",
            " -1.01393351 -0.81495915 -1.1450706   1.40335272  0.72741997  0.5353206\n",
            " -0.48357212  0.28105151 -0.33292827 -0.21182149 -0.74503098  1.10575264\n",
            "  0.5865756  -1.07918564 -1.19346873 -0.05562216  0.00434927 -0.92211426\n",
            " -0.66094649  0.53525958 -1.29925112  1.27998755 -0.83248979 -0.91209197\n",
            " -0.74684793  0.71066728  0.76407362  0.54552324  0.18747782  0.26275275\n",
            " -1.64599742 -0.71271876 -0.98542589  1.19207056 -1.49026419  1.04993844\n",
            " -0.3715818   0.66463997 -0.72507277  1.68081306 -0.82722569 -0.93190415\n",
            " -0.87009416 -0.42614401 -1.23142623 -1.36278913 -1.74969713 -1.48948866\n",
            " -0.82123335  1.59824035  1.40272071 -0.7909258  -0.28627065 -0.72437727\n",
            "  1.35892172 -0.86065794  0.371755    0.41839259  0.64955928  0.8962421\n",
            "  0.85263722 -0.01437855 -0.56674372 -0.69944077  1.18384743 -0.62932654\n",
            " -0.49117024 -0.48942079 -0.76106654 -0.53455886  0.36557832 -1.61198467\n",
            "  0.58927417 -0.01179219 -0.57918687 -1.13510646 -2.44403967 -1.64300141\n",
            " -0.09828668 -1.09914642 -0.60739892 -1.80787228  0.04039843 -1.42796102\n",
            "  2.18567935  0.23086641  0.65571187  0.47722156 -1.42140489  0.05289863\n",
            " -0.71547492  0.30212273  1.42174638 -0.65303021  1.20328784 -0.15221428\n",
            " -0.96456242  0.51862828  0.86829016  1.12838841 -0.31872339  0.16154453\n",
            " -0.56581453  1.17610407 -0.21275244 -0.8251188   0.34410019 -0.71865291\n",
            " -0.86128911  0.01289208 -0.20545522  0.99476672  0.41393892  1.82585523\n",
            " -0.73365449  1.18769615 -0.42646375  0.83059412  0.60481095  0.09802005\n",
            "  0.05111233 -1.09560397 -3.54707314  1.32887064  0.71964112 -1.1537974\n",
            "  0.48898333  0.02650166 -0.54914627 -1.05101644 -0.64838447  2.21776695\n",
            "  1.13180282 -0.64997019  0.37651627  0.54755481  0.01483562  1.62489266\n",
            " -0.25083602  1.04701795  0.09977379 -0.2802046  -1.66842393 -1.38836518\n",
            " -0.37434492 -0.19143479  1.25478051 -0.47975515 -0.31589648 -0.22271177\n",
            "  0.59802012  0.31271703 -0.38498063 -0.64871787 -0.42350174 -0.26373665\n",
            "  0.91971359  0.75035139]\n",
            "Epoch=979, Loss=1.0683, Weights=[-1.15983142e+00  1.14279780e+00  4.28204186e-01  6.33858273e-01\n",
            " -1.83534403e+00 -2.67151624e+00 -1.72679169e+00  4.55255076e-02\n",
            " -3.60066618e-02  3.02339659e-01  1.79533432e+00 -6.62287798e-01\n",
            " -2.86386592e-01 -3.56548263e-01  3.21409421e-01 -2.80155684e-01\n",
            "  4.97254476e-01 -4.60548249e-01  6.23274832e-01 -9.99562594e-01\n",
            " -1.87208725e+00 -1.20003083e-02  1.19882357e+00  9.01564353e-01\n",
            " -9.67411833e-01 -2.42636500e+00  2.02692825e-01 -5.70706063e-01\n",
            " -1.23503421e+00 -9.06127139e-01 -9.51199075e-01 -9.91687214e-01\n",
            "  1.71593361e+00 -7.92557509e-01  1.65082300e+00  1.26442249e-01\n",
            " -1.03636981e+00 -1.58809462e+00 -6.88176789e-01  7.35868463e-01\n",
            "  2.82587586e-01  5.38264109e-01 -1.01353292e+00 -8.15970870e-01\n",
            " -1.14700516e+00  1.40254706e+00  7.27610651e-01  5.35744777e-01\n",
            " -4.83239076e-01  2.80897826e-01 -3.33557599e-01 -2.11861958e-01\n",
            " -7.45110226e-01  1.10451957e+00  5.85992497e-01 -1.07830863e+00\n",
            " -1.19245938e+00 -5.55792628e-02  3.01185393e-03 -9.23645134e-01\n",
            " -6.61247092e-01  5.36120653e-01 -1.29943912e+00  1.27805348e+00\n",
            " -8.32868378e-01 -9.09873534e-01 -7.45452655e-01  7.08765329e-01\n",
            "  7.61828212e-01  5.46044242e-01  1.88716494e-01  2.62235841e-01\n",
            " -1.64712276e+00 -7.13219228e-01 -9.85188249e-01  1.19381318e+00\n",
            " -1.49028593e+00  1.04722558e+00 -3.71444830e-01  6.67477060e-01\n",
            " -7.24416758e-01  1.67852749e+00 -8.28672706e-01 -9.30473846e-01\n",
            " -8.69506542e-01 -4.27457660e-01 -1.23123223e+00 -1.36099187e+00\n",
            " -1.74836220e+00 -1.48902355e+00 -8.21619039e-01  1.59638806e+00\n",
            "  1.40142240e+00 -7.89840540e-01 -2.86002135e-01 -7.25826967e-01\n",
            "  1.35933669e+00 -8.59340349e-01  3.71682238e-01  4.18693128e-01\n",
            "  6.50003110e-01  8.95395053e-01  8.51941668e-01 -1.34056147e-02\n",
            " -5.65701451e-01 -6.99912862e-01  1.18332699e+00 -6.29213725e-01\n",
            " -4.90338101e-01 -4.88316278e-01 -7.61238615e-01 -5.34949900e-01\n",
            "  3.67012491e-01 -1.61061412e+00  5.87519636e-01 -1.37316960e-02\n",
            " -5.78846158e-01 -1.13419388e+00 -2.44367158e+00 -1.64358133e+00\n",
            " -9.83193086e-02 -1.09803158e+00 -6.05905071e-01 -1.80749305e+00\n",
            "  3.86165864e-02 -1.42977266e+00  2.18494688e+00  2.30330672e-01\n",
            "  6.55357584e-01  4.77363886e-01 -1.42064962e+00  5.39615367e-02\n",
            " -7.15327699e-01  3.01466744e-01  1.42137358e+00 -6.54037322e-01\n",
            "  1.20157451e+00 -1.52161052e-01 -9.63030675e-01  5.18794702e-01\n",
            "  8.67518695e-01  1.12869702e+00 -3.18196769e-01  1.59996691e-01\n",
            " -5.67903458e-01  1.17654435e+00 -2.11943075e-01 -8.25743147e-01\n",
            "  3.43234016e-01 -7.20004048e-01 -8.61668047e-01  1.44473156e-02\n",
            " -2.05087008e-01  9.93848941e-01  4.15141550e-01  1.82790185e+00\n",
            " -7.34476905e-01  1.18540546e+00 -4.27637866e-01  8.29130252e-01\n",
            "  6.03343539e-01  9.82252963e-02  5.19491013e-02 -1.09431049e+00\n",
            " -3.54494372e+00  1.32888071e+00  7.17127696e-01 -1.15403446e+00\n",
            "  4.89974770e-01  2.54117161e-02 -5.50481381e-01 -1.05063147e+00\n",
            " -6.47147990e-01  2.21766159e+00  1.13124655e+00 -6.49985089e-01\n",
            "  3.76024351e-01  5.46908892e-01  1.41356096e-02  1.62430946e+00\n",
            " -2.50824085e-01  1.04578869e+00  9.75102312e-02 -2.80654282e-01\n",
            " -1.66749519e+00 -1.38727390e+00 -3.73325158e-01 -1.91594058e-01\n",
            "  1.25459237e+00 -4.78918615e-01 -3.16736290e-01 -2.25065526e-01\n",
            "  5.97853448e-01  3.14132184e-01 -3.85242501e-01 -6.49524624e-01\n",
            " -4.23085544e-01 -2.63400170e-01  9.19820761e-01  7.49673517e-01]\n",
            "Epoch=989, Loss=1.0656, Weights=[-1.16112031e+00  1.14166598e+00  4.27323402e-01  6.33479727e-01\n",
            " -1.83257659e+00 -2.66905754e+00 -1.72786963e+00  4.56223893e-02\n",
            " -3.39277899e-02  3.02250178e-01  1.79261738e+00 -6.64600579e-01\n",
            " -2.86914541e-01 -3.56157838e-01  3.22805127e-01 -2.80151426e-01\n",
            "  4.95275438e-01 -4.60160158e-01  6.24420253e-01 -1.00147297e+00\n",
            " -1.87422135e+00 -1.20327421e-02  1.19849995e+00  9.00649134e-01\n",
            " -9.67059628e-01 -2.42604373e+00  2.02215539e-01 -5.70203674e-01\n",
            " -1.23372070e+00 -9.06075497e-01 -9.52310740e-01 -9.91647479e-01\n",
            "  1.71629768e+00 -7.94092256e-01  1.64917145e+00  1.26593202e-01\n",
            " -1.03613751e+00 -1.58806960e+00 -6.86792478e-01  7.35918494e-01\n",
            "  2.80274633e-01  5.37248920e-01 -1.01313475e+00 -8.16979778e-01\n",
            " -1.14893415e+00  1.40174132e+00  7.27798181e-01  5.36169943e-01\n",
            " -4.82904486e-01  2.80742559e-01 -3.34187578e-01 -2.11900472e-01\n",
            " -7.45187896e-01  1.10328749e+00  5.85410259e-01 -1.07743345e+00\n",
            " -1.19145316e+00 -5.55367363e-02  1.67651602e-03 -9.25174984e-01\n",
            " -6.61548900e-01  5.36980544e-01 -1.29962665e+00  1.27612260e+00\n",
            " -8.33243834e-01 -9.07657473e-01 -7.44062519e-01  7.06864838e-01\n",
            "  7.59589613e-01  5.46566278e-01  1.89948931e-01  2.61715768e-01\n",
            " -1.64824323e+00 -7.13715695e-01 -9.84954793e-01  1.19554844e+00\n",
            " -1.49030731e+00  1.04451959e+00 -3.71307194e-01  6.70306276e-01\n",
            " -7.23765041e-01  1.67624957e+00 -8.30114161e-01 -9.29050748e-01\n",
            " -8.68924059e-01 -4.28766776e-01 -1.23103466e+00 -1.35919599e+00\n",
            " -1.74702962e+00 -1.48856024e+00 -8.22003434e-01  1.59454099e+00\n",
            "  1.40012292e+00 -7.88763068e-01 -2.85733761e-01 -7.27272115e-01\n",
            "  1.35975044e+00 -8.58025808e-01  3.71610893e-01  4.18994187e-01\n",
            "  6.50444969e-01  8.94550117e-01  8.51248133e-01 -1.24363795e-02\n",
            " -5.64662769e-01 -7.00382784e-01  1.18280864e+00 -6.29102559e-01\n",
            " -4.89507816e-01 -4.87211708e-01 -7.61407316e-01 -5.35339601e-01\n",
            "  3.68442372e-01 -1.60924692e+00  5.85766151e-01 -1.56693809e-02\n",
            " -5.78505303e-01 -1.13328295e+00 -2.44330391e+00 -1.64415717e+00\n",
            " -9.83491088e-02 -1.09692057e+00 -6.04416276e-01 -1.80711120e+00\n",
            "  3.68402629e-02 -1.43158579e+00  2.18421255e+00  2.29797830e-01\n",
            "  6.55004679e-01  4.77504423e-01 -1.41989462e+00  5.50231734e-02\n",
            " -7.15183006e-01  3.00813658e-01  1.42100315e+00 -6.55047210e-01\n",
            "  1.19986029e+00 -1.52106340e-01 -9.61499942e-01  5.18960218e-01\n",
            "  8.66748692e-01  1.12900405e+00 -3.17673175e-01  1.58453226e-01\n",
            " -5.69987618e-01  1.17698163e+00 -2.11134612e-01 -8.26364741e-01\n",
            "  3.42368391e-01 -7.21353560e-01 -8.62046187e-01  1.59980158e-02\n",
            " -2.04719938e-01  9.92935862e-01  4.16341425e-01  1.82993925e+00\n",
            " -7.35298910e-01  1.18312217e+00 -4.28812842e-01  8.27662444e-01\n",
            "  6.01879488e-01  9.84327926e-02  5.27831852e-02 -1.09301737e+00\n",
            " -3.54281519e+00  1.32888828e+00  7.14618540e-01 -1.15426562e+00\n",
            "  4.90962848e-01  2.43167743e-02 -5.51812222e-01 -1.05024339e+00\n",
            " -6.45917415e-01  2.21755349e+00  1.13069262e+00 -6.49999682e-01\n",
            "  3.75531882e-01  5.46264008e-01  1.34353146e-02  1.62372365e+00\n",
            " -2.50810895e-01  1.04456264e+00  9.52458706e-02 -2.81105180e-01\n",
            " -1.66656405e+00 -1.38618091e+00 -3.72307639e-01 -1.91754595e-01\n",
            "  1.25440490e+00 -4.78082464e-01 -3.17575896e-01 -2.27417213e-01\n",
            "  5.97686828e-01  3.15545330e-01 -3.85502135e-01 -6.50328791e-01\n",
            " -4.22672063e-01 -2.63065969e-01  9.19929254e-01  7.48996960e-01]\n",
            "Epoch=999, Loss=1.0630, Weights=[-1.16241010e+00  1.14053580e+00  4.26445636e-01  6.33098260e-01\n",
            " -1.82981489e+00 -2.66659688e+00 -1.72894303e+00  4.57159272e-02\n",
            " -3.18531772e-02  3.02163842e-01  1.78990432e+00 -6.66912452e-01\n",
            " -2.87442157e-01 -3.55769493e-01  3.24197804e-01 -2.80145966e-01\n",
            "  4.93298001e-01 -4.59775702e-01  6.25564041e-01 -1.00337844e+00\n",
            " -1.87635347e+00 -1.20679495e-02  1.19817647e+00  8.99736341e-01\n",
            " -9.66708853e-01 -2.42572405e+00  2.01741323e-01 -5.69701895e-01\n",
            " -1.23241089e+00 -9.06021748e-01 -9.53418658e-01 -9.91609028e-01\n",
            "  1.71665987e+00 -7.95624632e-01  1.64752239e+00  1.26744701e-01\n",
            " -1.03590543e+00 -1.58804698e+00 -6.85412462e-01  7.35968589e-01\n",
            "  2.77965934e-01  5.36233764e-01 -1.01273898e+00 -8.17985903e-01\n",
            " -1.15085761e+00  1.40093552e+00  7.27982587e-01  5.36596083e-01\n",
            " -4.82568369e-01  2.80585727e-01 -3.34818199e-01 -2.11937039e-01\n",
            " -7.45264008e-01  1.10205641e+00  5.84828890e-01 -1.07656011e+00\n",
            " -1.19045006e+00 -5.54945830e-02  3.43239709e-04 -9.26703800e-01\n",
            " -6.61851895e-01  5.37839239e-01 -1.29981372e+00  1.27419495e+00\n",
            " -8.33616160e-01 -9.05443815e-01 -7.42677530e-01  7.04965816e-01\n",
            "  7.57357830e-01  5.47089345e-01  1.91175154e-01  2.61192536e-01\n",
            " -1.64935883e+00 -7.14208154e-01 -9.84725490e-01  1.19727633e+00\n",
            " -1.49032833e+00  1.04182049e+00 -3.71168906e-01  6.73127579e-01\n",
            " -7.23117607e-01  1.67397933e+00 -8.31550071e-01 -9.27634847e-01\n",
            " -8.68346690e-01 -4.30071365e-01 -1.23083352e+00 -1.35740149e+00\n",
            " -1.74569939e+00 -1.48809875e+00 -8.22386518e-01  1.59269915e+00\n",
            "  1.39882225e+00 -7.87693395e-01 -2.85465508e-01 -7.28712705e-01\n",
            "  1.36016294e+00 -8.56714329e-01  3.71540970e-01  4.19295768e-01\n",
            "  6.50884868e-01  8.93707294e-01  8.50556603e-01 -1.14708530e-02\n",
            " -5.63627657e-01 -7.00850528e-01  1.18229236e+00 -6.28993032e-01\n",
            " -4.88679380e-01 -4.86107093e-01 -7.61572655e-01 -5.35727962e-01\n",
            "  3.69867969e-01 -1.60788306e+00  5.84013717e-01 -1.76052340e-02\n",
            " -5.78164298e-01 -1.13237364e+00 -2.44293666e+00 -1.64472893e+00\n",
            " -9.83760875e-02 -1.09581338e+00 -6.02932524e-01 -1.80672673e+00\n",
            "  3.50694470e-02 -1.43340036e+00  2.18347637e+00  2.29267863e-01\n",
            "  6.54653147e-01  4.77643180e-01 -1.41913991e+00  5.60835274e-02\n",
            " -7.15040831e-01  3.00163453e-01  1.42063508e+00 -6.56059837e-01\n",
            "  1.19814520e+00 -1.52050167e-01 -9.59970230e-01  5.19124847e-01\n",
            "  8.65980143e-01  1.12930948e+00 -3.17152612e-01  1.56914130e-01\n",
            " -5.72067017e-01  1.17741593e+00 -2.10327043e-01 -8.26983606e-01\n",
            "  3.41503306e-01 -7.22701419e-01 -8.62423532e-01  1.75441610e-02\n",
            " -2.04353993e-01  9.92027498e-01  4.17538513e-01  1.83196743e+00\n",
            " -7.36120492e-01  1.18084629e+00 -4.29988670e-01  8.26190718e-01\n",
            "  6.00418794e-01  9.86425195e-02  5.36145742e-02 -1.09172462e+00\n",
            " -3.54068759e+00  1.32889333e+00  7.12113678e-01 -1.15449090e+00\n",
            "  4.91947540e-01  2.32168424e-02 -5.53138777e-01 -1.04985219e+00\n",
            " -6.44692755e-01  2.21744265e+00  1.13014102e+00 -6.50013955e-01\n",
            "  3.75038879e-01  5.45620156e-01  1.27347174e-02  1.62313524e+00\n",
            " -2.50796440e-01  1.04333978e+00  9.29806972e-02 -2.81557288e-01\n",
            " -1.66563052e+00 -1.38508620e+00 -3.71292358e-01 -1.91916393e-01\n",
            "  1.25421809e+00 -4.77246693e-01 -3.18415299e-01 -2.29766836e-01\n",
            "  5.97520265e-01  3.16956482e-01 -3.85759538e-01 -6.51130378e-01\n",
            " -4.22261283e-01 -2.62734035e-01  9.20039056e-01  7.48321712e-01]\n",
            "Epoch=1009, Loss=1.0603, Weights=[-1.16370079e+00  1.13940727e+00  4.25570889e-01  6.32713883e-01\n",
            " -1.82705894e+00 -2.66413429e+00 -1.73001190e+00  4.58061369e-02\n",
            " -2.97828305e-02  3.02080648e-01  1.78719512e+00 -6.69223412e-01\n",
            " -2.87969416e-01 -3.55383212e-01  3.25587434e-01 -2.80139312e-01\n",
            "  4.91322193e-01 -4.59394878e-01  6.26706170e-01 -1.00527901e+00\n",
            " -1.87848361e+00 -1.21059345e-02  1.19785313e+00  8.98825973e-01\n",
            " -9.66359528e-01 -2.42540597e+00  2.01270178e-01 -5.69200725e-01\n",
            " -1.23110478e+00 -9.05965893e-01 -9.54522820e-01 -9.91571845e-01\n",
            "  1.71702021e+00 -7.97154645e-01  1.64587581e+00  1.26896745e-01\n",
            " -1.03567355e+00 -1.58802676e+00 -6.84036741e-01  7.36018751e-01\n",
            "  2.75661498e-01  5.35218641e-01 -1.01234563e+00 -8.18989268e-01\n",
            " -1.15277556e+00  1.40012967e+00  7.28163893e-01  5.37023181e-01\n",
            " -4.82230746e-01  2.80427344e-01 -3.35449452e-01 -2.11971672e-01\n",
            " -7.45338574e-01  1.10082633e+00  5.84248397e-01 -1.07568859e+00\n",
            " -1.18945007e+00 -5.54528099e-02 -9.87988691e-04 -9.28231565e-01\n",
            " -6.62156057e-01  5.38696723e-01 -1.30000035e+00  1.27227055e+00\n",
            " -8.33985359e-01 -9.03232590e-01 -7.41297694e-01  7.03068278e-01\n",
            "  7.55132866e-01  5.47613437e-01  1.92395185e-01  2.60666148e-01\n",
            " -1.65046961e+00 -7.14696597e-01 -9.84500312e-01  1.19899683e+00\n",
            " -1.49034900e+00  1.03912833e+00 -3.71029977e-01  6.75940932e-01\n",
            " -7.22474445e-01  1.67171678e+00 -8.32980449e-01 -9.26226139e-01\n",
            " -8.67774409e-01 -4.31371440e-01 -1.23062885e+00 -1.35560836e+00\n",
            " -1.74437152e+00 -1.48763912e+00 -8.22768278e-01  1.59086258e+00\n",
            "  1.39752039e+00 -7.86631532e-01 -2.85197357e-01 -7.30148731e-01\n",
            "  1.36057418e+00 -8.55405926e-01  3.71472473e-01  4.19597876e-01\n",
            "  6.51322814e-01  8.92866588e-01  8.49867069e-01 -1.05090398e-02\n",
            " -5.62596098e-01 -7.01316088e-01  1.18177814e+00 -6.28885138e-01\n",
            " -4.87852782e-01 -4.85002447e-01 -7.61734642e-01 -5.36114983e-01\n",
            "  3.71289286e-01 -1.60652256e+00  5.82262336e-01 -1.95392468e-02\n",
            " -5.77823138e-01 -1.13146596e+00 -2.44256984e+00 -1.64529661e+00\n",
            " -9.84002519e-02 -1.09470998e+00 -6.01453803e-01 -1.80633967e+00\n",
            "  3.33041262e-02 -1.43521638e+00  2.18273835e+00  2.28740751e-01\n",
            "  6.54302981e-01  4.77780170e-01 -1.41838550e+00  5.71425878e-02\n",
            " -7.14901165e-01  2.99516112e-01  1.42026935e+00 -6.57075165e-01\n",
            "  1.19642929e+00 -1.51992557e-01 -9.58441545e-01  5.19288608e-01\n",
            "  8.65213037e-01  1.12961329e+00 -3.16635081e-01  1.55379403e-01\n",
            " -5.74141668e-01  1.17784724e+00 -2.09520367e-01 -8.27599763e-01\n",
            "  3.40638755e-01 -7.24047605e-01 -8.62800083e-01  1.90857335e-02\n",
            " -2.03989153e-01  9.91123863e-01  4.18732787e-01  1.83398637e+00\n",
            " -7.36941634e-01  1.17857783e+00 -4.31165342e-01  8.24715094e-01\n",
            "  5.98961451e-01  9.88544581e-02  5.44432637e-02 -1.09043225e+00\n",
            " -3.53856093e+00  1.32889585e+00  7.09613142e-01 -1.15471027e+00\n",
            "  4.92928824e-01  2.21119244e-02 -5.54461025e-01 -1.04945788e+00\n",
            " -6.43474016e-01  2.21732908e+00  1.12959176e+00 -6.50027897e-01\n",
            "  3.74545363e-01  5.44977335e-01  1.20338044e-02  1.62254424e+00\n",
            " -2.50780717e-01  1.04212009e+00  9.07146976e-02 -2.82010600e-01\n",
            " -1.66469461e+00 -1.38398980e+00 -3.70279310e-01 -1.92079447e-01\n",
            "  1.25403194e+00 -4.76411297e-01 -3.19254496e-01 -2.32114400e-01\n",
            "  5.97353762e-01  3.18365648e-01 -3.86014717e-01 -6.51929386e-01\n",
            " -4.21853186e-01 -2.62404361e-01  9.20150153e-01  7.47647766e-01]\n",
            "Epoch=1019, Loss=1.0577, Weights=[-1.16499241e+00  1.13828039e+00  4.24699165e-01  6.32326608e-01\n",
            " -1.82430877e+00 -2.66166981e+00 -1.73107624e+00  4.58930345e-02\n",
            " -2.77167569e-02  3.02000590e-01  1.78448981e+00 -6.71533451e-01\n",
            " -2.88496295e-01 -3.54998980e-01  3.26973997e-01 -2.80131474e-01\n",
            "  4.89348042e-01 -4.59017681e-01  6.27846611e-01 -1.00717467e+00\n",
            " -1.88061174e+00 -1.21467012e-02  1.19752991e+00  8.97918031e-01\n",
            " -9.66011676e-01 -2.42508954e+00  2.00802105e-01 -5.68700162e-01\n",
            " -1.22980237e+00 -9.05907932e-01 -9.55623213e-01 -9.91535913e-01\n",
            "  1.71737869e+00 -7.98682303e-01  1.64423170e+00  1.27049337e-01\n",
            " -1.03544185e+00 -1.58800892e+00 -6.82665314e-01  7.36068984e-01\n",
            "  2.73361331e-01  5.34203553e-01 -1.01195469e+00 -8.19989901e-01\n",
            " -1.15468803e+00  1.39932378e+00  7.28342125e-01  5.37451223e-01\n",
            " -4.81891634e-01  2.80267425e-01 -3.36081324e-01 -2.12004380e-01\n",
            " -7.45411606e-01  1.09959726e+00  5.83668789e-01 -1.07481889e+00\n",
            " -1.18845318e+00 -5.54114240e-02 -2.31718282e-03 -9.29758267e-01\n",
            " -6.62461362e-01  5.39552979e-01 -1.30018656e+00  1.27034940e+00\n",
            " -8.34351438e-01 -9.01023829e-01 -7.39923016e-01  7.01172236e-01\n",
            "  7.52914723e-01  5.48138552e-01  1.93609049e-01  2.60136611e-01\n",
            " -1.65157560e+00 -7.15181018e-01 -9.84279231e-01  1.20070992e+00\n",
            " -1.49036932e+00  1.03644314e+00 -3.70890416e-01  6.78746295e-01\n",
            " -7.21835543e-01  1.66946194e+00 -8.34405311e-01 -9.24824619e-01\n",
            " -8.67207192e-01 -4.32667011e-01 -1.23042065e+00 -1.35381658e+00\n",
            " -1.74304601e+00 -1.48718137e+00 -8.23148701e-01  1.58903130e+00\n",
            "  1.39621731e+00 -7.85577492e-01 -2.84929292e-01 -7.31580188e-01\n",
            "  1.36098412e+00 -8.54100613e-01  3.71405407e-01  4.19900517e-01\n",
            "  6.51758815e-01  8.92028002e-01  8.49179521e-01 -9.55094415e-03\n",
            " -5.61568075e-01 -7.01779458e-01  1.18126597e+00 -6.28778869e-01\n",
            " -4.87028015e-01 -4.83897785e-01 -7.61893292e-01 -5.36500662e-01\n",
            "  3.72706326e-01 -1.60516540e+00  5.80512009e-01 -2.14714114e-02\n",
            " -5.77481815e-01 -1.13055991e+00 -2.44220343e+00 -1.64586022e+00\n",
            " -9.84216095e-02 -1.09361038e+00 -5.99980099e-01 -1.80595005e+00\n",
            "  3.15442884e-02 -1.43703380e+00  2.18199851e+00  2.28216469e-01\n",
            "  6.53954174e-01  4.77915409e-01 -1.41763140e+00  5.82003435e-02\n",
            " -7.14764001e-01  2.98871622e-01  1.41990595e+00 -6.58093152e-01\n",
            "  1.19471258e+00 -1.51933534e-01 -9.56913896e-01  5.19451520e-01\n",
            "  8.64447364e-01  1.12991546e+00 -3.16120582e-01  1.53849041e-01\n",
            " -5.76211579e-01  1.17827557e+00 -2.08714584e-01 -8.28213232e-01\n",
            "  3.39774734e-01 -7.25392097e-01 -8.63175842e-01  2.06227168e-02\n",
            " -2.03625398e-01  9.90224966e-01  4.19924219e-01  1.83599607e+00\n",
            " -7.37762322e-01  1.17631679e+00 -4.32342849e-01  8.23235592e-01\n",
            "  5.97507457e-01  9.90685896e-02  5.52692488e-02 -1.08914026e+00\n",
            " -3.53643526e+00  1.32889582e+00  7.07116958e-01 -1.15492373e+00\n",
            "  4.93906677e-01  2.10020245e-02 -5.55778948e-01 -1.04906048e+00\n",
            " -6.42261204e-01  2.21721279e+00  1.12904484e+00 -6.50041495e-01\n",
            "  3.74051352e-01  5.44335545e-01  1.13325624e-02  1.62195065e+00\n",
            " -2.50763718e-01  1.04090355e+00  8.84478586e-02 -2.82465109e-01\n",
            " -1.66375630e+00 -1.38289170e+00 -3.69268489e-01 -1.92243750e-01\n",
            "  1.25384646e+00 -4.75576271e-01 -3.20093488e-01 -2.34459910e-01\n",
            "  5.97187324e-01  3.19772841e-01 -3.86267679e-01 -6.52725818e-01\n",
            " -4.21447753e-01 -2.62076939e-01  9.20262529e-01  7.46975116e-01]\n",
            "Epoch=1029, Loss=1.0551, Weights=[-1.16628497  1.13715517  0.42383047  0.63193645 -1.82156437 -2.65920347\n",
            " -1.73213603  0.04597664 -0.02565496  0.30192366  1.78178838 -0.67384256\n",
            " -0.28902277 -0.35461678  0.32835747 -0.28012246  0.48737558 -0.45864411\n",
            "  0.62898534 -1.00906542 -1.88273785 -0.01219025  1.19720682  0.89701251\n",
            " -0.96566532 -2.42477476  0.2003371  -0.5682002  -1.22850368 -0.90584786\n",
            " -0.95671983 -0.99150122  1.71773533 -0.80020761  1.64259004  0.12720248\n",
            " -1.03521032 -1.58799344 -0.68129818  0.73611929  0.27106544  0.5331885\n",
            " -1.01156616 -0.82098783 -1.15659505  1.39851788  0.72851731  0.53788019\n",
            " -0.48155105  0.28010598 -0.33671381 -0.21203518 -0.74548312  1.09836921\n",
            "  0.58309007 -1.07395101 -1.18745937 -0.05537043 -0.00364436 -0.93128389\n",
            " -0.66276779  0.54040799 -1.30037236  1.26843153 -0.8347144  -0.89881756\n",
            " -0.7385535   0.69927771  0.7507034   0.54866468  0.19481677  0.25960393\n",
            " -1.65267682 -0.71566141 -0.98406222  1.2024156  -1.49038932  1.03376495\n",
            " -0.37075023  0.68154363 -0.72120089  1.66721482 -0.83582467 -0.92343028\n",
            " -0.86664501 -0.43395809 -1.23020896 -1.35202614 -1.74172288 -1.48672552\n",
            " -0.82352777  1.58720534  1.39491301 -0.78453129 -0.28466129 -0.73300707\n",
            "  1.36139274 -0.8527984   0.37133978  0.4202037   0.65219288  0.89119154\n",
            "  0.84849395 -0.00859657 -0.56054357 -0.70224063  1.18075583 -0.62867422\n",
            " -0.48620507 -0.48279312 -0.76204862 -0.536885    0.37411909 -1.6038116\n",
            "  0.57876274 -0.02340172 -0.57714032 -1.12965547 -2.44183744 -1.64641976\n",
            " -0.09844017 -1.09251456 -0.5985114  -1.80555787  0.02978992 -1.43885262\n",
            "  2.18125684  0.227695    0.65360672  0.47804891 -1.41687761  0.05925678\n",
            " -0.71462933  0.29822997  1.41954486 -0.65911376  1.19299511 -0.15187312\n",
            " -0.95538729  0.5196136   0.86368311  1.13021597 -0.31560912  0.15232304\n",
            " -0.57827676  1.17870092 -0.20790969 -0.82882403  0.33891124 -0.72673487\n",
            " -0.86355081  0.0221551  -0.20326271  0.98933082  0.42111278  1.83799651\n",
            " -0.73858254  1.17406318 -0.43352118  0.82175223  0.59605681  0.0992849\n",
            "  0.05609252 -1.08784865 -3.5343106   1.32889323  0.70462516 -1.15513126\n",
            "  0.49488108  0.01988715 -0.55709253 -1.04865997 -0.64105433  2.21709377\n",
            "  1.12850025 -0.65005474  0.37355687  0.54369478  0.01063098  1.62135449\n",
            " -0.25074544  1.03969013  0.08618017 -0.28292081 -1.66281559 -1.38179192\n",
            " -0.36825989 -0.1924093   1.25366163 -0.47474161 -0.32093227 -0.23680337\n",
            "  0.59702095  0.32117807 -0.38651843 -0.65351967 -0.42104497 -0.26175176\n",
            "  0.92037617  0.74630376]\n",
            "Epoch=1039, Loss=1.0525, Weights=[-1.16757848  1.13603163  0.42296479  0.63154341 -1.81882577 -2.6567353\n",
            " -1.73319129  0.04605696 -0.02359746  0.30184986  1.77909086 -0.67615074\n",
            " -0.28954883 -0.3542366   0.32973784 -0.28011229  0.48540483 -0.45827416\n",
            "  0.63012232 -1.01095126 -1.88486193 -0.01223659  1.19688385  0.89610942\n",
            " -0.96532047 -2.42446166  0.19987518 -0.56770085 -1.2272087  -0.90578569\n",
            " -0.95781265 -0.99146774  1.71809013 -0.80173058  1.64095082  0.12735617\n",
            " -1.03497893 -1.58798032 -0.67993534  0.73616968  0.26877383  0.53217349\n",
            " -1.01118004 -0.82198307 -1.15849665  1.39771199  0.72868946  0.53831008\n",
            " -0.48120902  0.27994303 -0.33734688 -0.21206407 -0.74555312  1.09714216\n",
            "  0.58251225 -1.07308494 -1.18646864 -0.05532984 -0.00496952 -0.93280842\n",
            " -0.66307532  0.54126175 -1.30055777  1.26651696 -0.83507426 -0.89661382\n",
            " -0.73718915  0.6973847   0.74849891  0.54919183  0.19601837  0.25906811\n",
            " -1.65377332 -0.71613777 -0.98384924  1.20411384 -1.49040898  1.03109378\n",
            " -0.37060944  0.6843329  -0.72057047  1.66497545 -0.83723855 -0.92204312\n",
            " -0.86608784 -0.43524469 -1.22999378 -1.35023704 -1.74040212 -1.4862716\n",
            " -0.82390548  1.58538472  1.39360748 -0.78349293 -0.28439335 -0.73442938\n",
            "  1.36180002 -0.85149931  0.37127559  0.42050742  0.65262501  0.8903572\n",
            "  0.84781035 -0.00764592 -0.55952256 -0.70269961  1.18024771 -0.62857117\n",
            " -0.48538393 -0.48168848 -0.76220063 -0.53726799  0.37552759 -1.60246115\n",
            "  0.57701452 -0.02533016 -0.57679866 -1.12875266 -2.44147187 -1.64697524\n",
            " -0.09845593 -1.0914225  -0.59704769 -1.80516315  0.02804101 -1.4406728\n",
            "  2.18051338  0.22717631  0.6532606   0.47818068 -1.41612415  0.0603119\n",
            " -0.71449714  0.29759113  1.41918607 -0.66013695  1.19127693 -0.15181134\n",
            " -0.95386174  0.51977488  0.86292028  1.13051479 -0.31510068  0.15080141\n",
            " -0.58033723  1.17912331 -0.20710569 -0.82943218  0.33804826 -0.72807591\n",
            " -0.86392498  0.02368285 -0.20290106  0.98844143  0.42229845  1.83998769\n",
            " -0.73940228  1.17181699 -0.43470033  0.82026503  0.5946095   0.09950336\n",
            "  0.05691309 -1.08655742 -3.53218698  1.32888806  0.70213776 -1.15533286\n",
            "  0.495852    0.0187673  -0.55840174 -1.04825638 -0.63985339  2.21697202\n",
            "  1.127958   -0.65006762  0.37306192  0.54305505  0.00992904  1.62075577\n",
            " -0.25072588  1.03847982  0.08391161 -0.28337769 -1.6618725  -1.38069046\n",
            " -0.36725351 -0.19257608  1.25347748 -0.47390731 -0.32177085 -0.23914479\n",
            "  0.59685465  0.32258134 -0.38676698 -0.65431096 -0.42064481 -0.26142882\n",
            "  0.92049106  0.74563368]\n",
            "Epoch=1049, Loss=1.0499, Weights=[-1.16887297  1.13490975  0.42210215  0.63114752 -1.81609299 -2.65426535\n",
            " -1.73424202  0.04613402 -0.02154424  0.30177918  1.77639724 -0.67845798\n",
            " -0.29007443 -0.35385842  0.33111507 -0.28010096  0.48343583 -0.45790783\n",
            "  0.63125753 -1.0128322  -1.88698396 -0.01228573  1.19656099  0.89520875\n",
            " -0.96497716 -2.42415027  0.19941632 -0.56720209 -1.22591744 -0.9057214\n",
            " -0.95890166 -0.99143546  1.71844309 -0.80325122  1.63931404  0.12751041\n",
            " -1.03474767 -1.58796953 -0.67857679  0.73622014  0.26648651  0.53115852\n",
            " -1.01079634 -0.82297566 -1.16039286  1.3969061   0.72885862  0.53874086\n",
            " -0.48086555  0.27977859 -0.33798055 -0.21209107 -0.74562163  1.09591614\n",
            "  0.58193534 -1.07222069 -1.18548097 -0.05528966 -0.0062927  -0.93433184\n",
            " -0.66338393  0.54211423 -1.30074281  1.26460571 -0.83543101 -0.89441263\n",
            " -0.73582998  0.69549323  0.74630124  0.54971998  0.19721387  0.25852916\n",
            " -1.65486513 -0.71661009 -0.98364028  1.20580464 -1.49042833  1.02842967\n",
            " -0.37046805  0.68711407 -0.71994428  1.66274383 -0.83864696 -0.92066312\n",
            " -0.86553566 -0.43652682 -1.22977514 -1.34844925 -1.73908375 -1.48581964\n",
            " -0.82428182  1.58356946  1.39230069 -0.78246242 -0.28412544 -0.7358471\n",
            "  1.36220595 -0.85020336  0.37121284  0.42081169  0.65305522  0.88952499\n",
            "  0.8471287  -0.00669901 -0.55850504 -0.70315638  1.17974159 -0.62846973\n",
            " -0.4845646  -0.48058386 -0.76234934 -0.53764963  0.37693182 -1.60111406\n",
            "  0.57526735 -0.02725674 -0.57645681 -1.12785146 -2.4411067  -1.64752666\n",
            " -0.09846891 -1.09033421 -0.59558897 -1.80476592  0.02629755 -1.44249432\n",
            "  2.17976812  0.2266604   0.65291582  0.47831075 -1.41537103  0.06136567\n",
            " -0.71436743  0.2969551   1.41882955 -0.66116268  1.18955806 -0.15174822\n",
            " -0.95233725  0.51993536  0.86215884  1.13081191 -0.31459528  0.14928414\n",
            " -0.58239298  1.17954274 -0.20630258 -0.83003771  0.3371858  -0.7294152\n",
            " -0.86429837  0.02520598 -0.20254044  0.98755681  0.4234812   1.8419696\n",
            " -0.74022152  1.16957824 -0.43588029  0.818774    0.59316552  0.09972396\n",
            "  0.05773093 -1.08526659 -3.53006441  1.32888031  0.69965481 -1.15552852\n",
            "  0.49681944  0.01764247 -0.55970657 -1.0478497  -0.6386584   2.21684755\n",
            "  1.12741809 -0.65008012  0.37256655  0.54241636  0.00922673  1.62015448\n",
            " -0.25070502  1.03727259  0.08164217 -0.28383575 -1.660927   -1.37958732\n",
            " -0.36624934 -0.19274409  1.25329398 -0.47307338 -0.32260922 -0.24148417\n",
            "  0.59668843  0.32398267 -0.38701333 -0.65509967 -0.42024726 -0.26110811\n",
            "  0.92060719  0.74496489]\n",
            "Epoch=1059, Loss=1.0473, Weights=[-1.17016844  1.13378956  0.42124253  0.63074879 -1.81336603 -2.65179366\n",
            " -1.7352882   0.04620784 -0.01949533  0.30171162  1.77370754 -0.68076427\n",
            " -0.29059957 -0.35348222  0.33248916 -0.2800885   0.4814686  -0.4575451\n",
            "  0.63239094 -1.01470823 -1.88910392 -0.01233765  1.19623823  0.89431049\n",
            " -0.96463541 -2.42384061  0.19896054 -0.56670394 -1.22462991 -0.90565501\n",
            " -0.95998686 -0.99140436  1.71879422 -0.80476953  1.63767968  0.12766519\n",
            " -1.03451653 -1.58796106 -0.67722253  0.73627068  0.26420349  0.5301436\n",
            " -1.01041506 -0.82396561 -1.1622837   1.39610025  0.7290248   0.53917253\n",
            " -0.48052067  0.27961267 -0.33861479 -0.21211619 -0.74568866  1.09469115\n",
            "  0.58135933 -1.07135824 -1.18449635 -0.05524989 -0.00761389 -0.93585413\n",
            " -0.6636936   0.54296542 -1.30092748  1.2626978  -0.83578467 -0.89221401\n",
            " -0.73447598  0.69360332  0.74411041  0.55024913  0.19840331  0.25798708\n",
            " -1.65595227 -0.71707837 -0.98343529  1.20748798 -1.49044737  1.02577265\n",
            " -0.37032606  0.6898871  -0.71932231  1.66051998 -0.84004992 -0.91929029\n",
            " -0.86498843 -0.43780449 -1.22955307 -1.34666277 -1.73776777 -1.48536967\n",
            " -0.82465677  1.58175961  1.39099265 -0.78143979 -0.28385754 -0.73726023\n",
            "  1.36261048 -0.84891054  0.37115155  0.42111652  0.65348352  0.88869492\n",
            "  0.84644901 -0.00575582 -0.55749098 -0.70361094  1.17923746 -0.62836988\n",
            " -0.48374705 -0.47947928 -0.76249476 -0.53802993  0.37833179 -1.59977033\n",
            "  0.57352124 -0.02918143 -0.57611478 -1.12695188 -2.44074195 -1.64807403\n",
            " -0.09847912 -1.08924966 -0.59413521 -1.80436619  0.02455951 -1.44431716\n",
            "  2.17902109  0.22614722  0.65257237  0.47843912 -1.41461825  0.06241809\n",
            " -0.71424018  0.29632186  1.4184753  -0.66219091  1.18783853 -0.15168379\n",
            " -0.95081383  0.52009507  0.86139879  1.13110731 -0.3140929   0.14777123\n",
            " -0.58444404  1.17995921 -0.20550036 -0.83064063  0.33632385 -0.73075271\n",
            " -0.86467097  0.02672446 -0.20218083  0.98667697  0.424661    1.84394222\n",
            " -0.74104025  1.16734692 -0.43706105  0.81727918  0.59172487  0.09994669\n",
            "  0.05854605 -1.08397615 -3.52794294  1.32886996  0.69717632 -1.15571823\n",
            "  0.49778335  0.01651269 -0.56100699 -1.04743994 -0.63746936  2.21672037\n",
            "  1.12688052 -0.65009224  0.37207075  0.54177869  0.00852404  1.61955065\n",
            " -0.25068287  1.03606842  0.07937183 -0.28429498 -1.65997911 -1.37848253\n",
            " -0.36524738 -0.19291333  1.25311115 -0.4722398  -0.32344737 -0.24382151\n",
            "  0.59652228  0.32538206 -0.38725749 -0.65588581 -0.4198523  -0.26078962\n",
            "  0.92072453  0.74429737]\n",
            "Epoch=1069, Loss=1.0448, Weights=[-1.17146491  1.13267105  0.42038596  0.63034722 -1.81064492 -2.64932026\n",
            " -1.73632985  0.04627844 -0.01745073  0.30164716  1.77102176 -0.6830696\n",
            " -0.29112421 -0.35310799  0.33386007 -0.28007491  0.47950318 -0.45718599\n",
            "  0.63352251 -1.01657935 -1.8912218  -0.01239238  1.19591556  0.89341467\n",
            " -0.96429523 -2.42353271  0.19850783 -0.56620638 -1.22334611 -0.9055865\n",
            " -0.96106823 -0.99137444  1.71914353 -0.80628552  1.63604773  0.12782053\n",
            " -1.03428549 -1.58795489 -0.67587255  0.73632131  0.26192477  0.52912871\n",
            " -1.01003618 -0.82495296 -1.1641692   1.39529445  0.72918802  0.53960506\n",
            " -0.4801744   0.27944529 -0.33924959 -0.21213945 -0.74575422  1.09346719\n",
            "  0.58078425 -1.07049759 -1.18351477 -0.05521054 -0.00893311 -0.93737529\n",
            " -0.6640043   0.54381531 -1.30111182  1.26079323 -0.83613524 -0.89001802\n",
            " -0.73312716  0.69171498  0.74192641  0.55077928  0.19958669  0.25744189\n",
            " -1.65703479 -0.71754261 -0.98323426  1.20916385 -1.49046611  1.02312276\n",
            " -0.37018349  0.69265195 -0.71870454  1.65830392 -0.84144745 -0.91792462\n",
            " -0.86444614 -0.43907771 -1.22932756 -1.34487757 -1.73645417 -1.48492171\n",
            " -0.82503032  1.57995516  1.38968333 -0.78042503 -0.28358965 -0.73866877\n",
            "  1.36301361 -0.84762089  0.3710917   0.42142191  0.65390991  0.88786698\n",
            "  0.84577125 -0.00481638 -0.55648037 -0.70406328  1.1787353  -0.62827162\n",
            " -0.48293129 -0.47837476 -0.7626369  -0.53840888  0.37972751 -1.59842996\n",
            "  0.57177618 -0.03110424 -0.57577255 -1.1260539  -2.44037761 -1.64861734\n",
            " -0.09848655 -1.08816885 -0.5926864  -1.80396398  0.0228269  -1.44614129\n",
            "  2.17827228  0.22563677  0.65223023  0.4785658  -1.41386583  0.06346915\n",
            " -0.7141154   0.29569139  1.41812329 -0.6632216   1.18611839 -0.15161806\n",
            " -0.94929148  0.52025403  0.86064012  1.13140097 -0.31359356  0.14626267\n",
            " -0.58649041  1.18037274 -0.20469903 -0.83124095  0.33546241 -0.73208844\n",
            " -0.86504278  0.02823828 -0.2018222   0.98580192  0.42583783  1.84590555\n",
            " -0.74185847  1.16512305 -0.43824259  0.81578056  0.59028755  0.10017153\n",
            "  0.05935844 -1.08268612 -3.52582258  1.32885699  0.69470232 -1.15590197\n",
            "  0.49874373  0.01537794 -0.562303   -1.04702711 -0.63628629  2.21659047\n",
            "  1.12634529 -0.65010395  0.37157456  0.54114205  0.00782096  1.61894428\n",
            " -0.25065942  1.0348673   0.07710059 -0.28475537 -1.65902883 -1.37737609\n",
            " -0.36424762 -0.19308378  1.25292899 -0.47140657 -0.32428532 -0.24615683\n",
            "  0.59635622  0.32677953 -0.38749946 -0.65666938 -0.41945991 -0.26047335\n",
            "  0.92084308  0.74363112]\n",
            "Epoch=1079, Loss=1.0422, Weights=[-1.17276239  1.13155424  0.41953241  0.62994285 -1.80792966 -2.64684519\n",
            " -1.73736696  0.04634583 -0.01541044  0.30158581  1.76833992 -0.68537396\n",
            " -0.29164834 -0.3527357   0.33522779 -0.28006021  0.47753959 -0.45683048\n",
            "  0.63465222 -1.01844556 -1.89333757 -0.0124499   1.19559298  0.89252126\n",
            " -0.96395664 -2.42322658  0.19805819 -0.56570942 -1.22206605 -0.90551589\n",
            " -0.96214576 -0.99134567  1.71949102 -0.8077992   1.63441818  0.12797642\n",
            " -1.03405453 -1.587951   -0.67452687  0.73637203  0.25965036  0.52811388\n",
            " -1.00965973 -0.82593773 -1.16604939  1.39448871  0.72934833  0.54003844\n",
            " -0.47982674  0.27927646 -0.33988495 -0.21216084 -0.74581832  1.09224426\n",
            "  0.58021009 -1.06963874 -1.18253622 -0.05517162 -0.01025038 -0.93889529\n",
            " -0.66431602  0.54466387 -1.30129582  1.25889204 -0.83648273 -0.88782466\n",
            " -0.73178352  0.68982822  0.73974924  0.55131042  0.20076405  0.2568936\n",
            " -1.65811271 -0.71800281 -0.98303715  1.21083225 -1.49048455  1.02048001\n",
            " -0.37004035  0.69540859 -0.71809096  1.65609566 -0.84283957 -0.9165661\n",
            " -0.86390874 -0.44034649 -1.22909866 -1.34309366 -1.73514297 -1.4844758\n",
            " -0.82540246  1.57815617  1.38837273 -0.77941816 -0.28332174 -0.74007271\n",
            "  1.36341531 -0.84633441  0.37103332  0.42172786  0.65433441  0.88704118\n",
            "  0.84509543 -0.00388068 -0.55547319 -0.7045134   1.17823511 -0.62817493\n",
            " -0.4821173  -0.47727031 -0.76277579 -0.53878648  0.38111897 -1.59709295\n",
            "  0.57003218 -0.03302515 -0.57543012 -1.12515752 -2.44001367 -1.64915662\n",
            " -0.09849122 -1.08709176 -0.59124254 -1.80355931  0.02109969 -1.4479667\n",
            "  2.17752173  0.22512902  0.65188941  0.47869082 -1.41311378  0.06451884\n",
            " -0.71399306  0.29506369  1.41777352 -0.66425472  1.18439767 -0.15155106\n",
            " -0.94777023  0.52041225  0.85988281  1.13169287 -0.31309723  0.14475848\n",
            " -0.5885321   1.18078331 -0.2038986  -0.83183871  0.33460147 -0.73342235\n",
            " -0.86541381  0.02974743 -0.20146454  0.98493166  0.42701166  1.84785958\n",
            " -0.74267615  1.16290662 -0.43942492  0.81427819  0.58885356  0.10039846\n",
            "  0.06016809 -1.08139649 -3.52370336  1.32884138  0.69223284 -1.15607974\n",
            "  0.49970056  0.01423824 -0.56359456 -1.0466112  -0.63510918  2.21645785\n",
            "  1.12581241 -0.65011527  0.37107798  0.54050645  0.00711747  1.61833537\n",
            " -0.25063467  1.03366919  0.07482843 -0.28521692 -1.65807614 -1.376268\n",
            " -0.36325006 -0.19325543  1.25274749 -0.47057369 -0.32512306 -0.24849012\n",
            "  0.59619024  0.32817509 -0.38773926 -0.65745038 -0.41907007 -0.26015929\n",
            "  0.92096281  0.74296612]\n",
            "Epoch=1089, Loss=1.0397, Weights=[-1.17406090e+00  1.13043912e+00  4.18681906e-01  6.29535676e-01\n",
            " -1.80522028e+00 -2.64436850e+00 -1.73839954e+00  4.64100331e-02\n",
            " -1.33744677e-02  3.01527558e-01  1.76566203e+00 -6.87677360e-01\n",
            " -2.92171933e-01 -3.52365348e-01  3.36592283e-01 -2.80044413e-01\n",
            "  4.75577872e-01 -4.56478564e-01  6.35780037e-01 -1.02030687e+00\n",
            " -1.89545122e+00 -1.25102289e-02  1.19527047e+00  8.91630267e-01\n",
            " -9.63619674e-01 -2.42292226e+00  1.97611621e-01 -5.65213045e-01\n",
            " -1.22078973e+00 -9.05443166e-01 -9.63219427e-01 -9.91318036e-01\n",
            "  1.71983670e+00 -8.09310568e-01  1.63279102e+00  1.28132853e-01\n",
            " -1.03382363e+00 -1.58794939e+00 -6.73185467e-01  7.36422838e-01\n",
            "  2.57380260e-01  5.27099102e-01 -1.00928569e+00 -8.26919950e-01\n",
            " -1.16792431e+00  1.39368305e+00  7.29505728e-01  5.40472665e-01\n",
            " -4.79477735e-01  2.79106193e-01 -3.40520842e-01 -2.12180396e-01\n",
            " -7.45880975e-01  1.09102238e+00  5.79636864e-01 -1.06878169e+00\n",
            " -1.18156069e+00 -5.51331357e-02 -1.15657159e-02 -9.40414128e-01\n",
            " -6.64628740e-01  5.45511097e-01 -1.30147952e+00  1.25699424e+00\n",
            " -8.36827155e-01 -8.85633967e-01 -7.30445054e-01  6.87943064e-01\n",
            "  7.37578908e-01  5.51842547e-01  2.01935420e-01  2.56342201e-01\n",
            " -1.65918608e+00 -7.18458960e-01 -9.82843930e-01  1.21249315e+00\n",
            " -1.49050271e+00  1.01784444e+00 -3.69896644e-01  6.98156982e-01\n",
            " -7.17481556e-01  1.65389522e+00 -8.44226296e-01 -9.15214720e-01\n",
            " -8.63376223e-01 -4.41610844e-01 -1.22886637e+00 -1.34131102e+00\n",
            " -1.73383417e+00 -1.48403194e+00 -8.25773185e-01  1.57636264e+00\n",
            "  1.38706083e+00 -7.78419191e-01 -2.83053795e-01 -7.41472055e-01\n",
            "  1.36381555e+00 -8.45051111e-01  3.70976388e-01  4.22034381e-01\n",
            "  6.54757013e-01  8.86217523e-01  8.44421521e-01 -2.94871926e-03\n",
            " -5.54469423e-01 -7.04961299e-01  1.17773686e+00 -6.28079803e-01\n",
            " -4.81305070e-01 -4.76165945e-01 -7.62911414e-01 -5.39162732e-01\n",
            "  3.82506174e-01 -1.59575931e+00  5.68289225e-01 -3.49441628e-02\n",
            " -5.75087478e-01 -1.12426274e+00 -2.43965014e+00 -1.64969186e+00\n",
            " -9.84931336e-02 -1.08601838e+00 -5.89803607e-01 -1.80315220e+00\n",
            "  1.93778748e-02 -1.44979335e+00  2.17676943e+00  2.24623948e-01\n",
            "  6.51549889e-01  4.78814178e-01 -1.41236209e+00  6.55671357e-02\n",
            " -7.13873164e-01  2.94438730e-01  1.41742596e+00 -6.65290219e-01\n",
            "  1.18267640e+00 -1.51482819e-01 -9.46250064e-01  5.20569754e-01\n",
            "  8.59126855e-01  1.13198298e+00 -3.12603931e-01  1.43258636e-01\n",
            " -5.90569131e-01  1.18119095e+00 -2.03099053e-01 -8.32433923e-01\n",
            "  3.33741037e-01 -7.34754440e-01 -8.65784063e-01  3.12519037e-02\n",
            " -2.01107815e-01  9.84066203e-01  4.28182460e-01  1.84980430e+00\n",
            " -7.43493295e-01  1.16069764e+00 -4.40608010e-01  8.12772063e-01\n",
            "  5.87422880e-01  1.00627464e-01  6.09750018e-02 -1.08010728e+00\n",
            " -3.52158531e+00  1.32882314e+00  6.89767899e-01 -1.15625153e+00\n",
            "  5.00653812e-01  1.30935801e-02 -5.64881660e-01 -1.04619223e+00\n",
            " -6.33938057e-01  2.21632253e+00  1.12528186e+00 -6.50126160e-01\n",
            "  3.70581048e-01  5.39871885e-01  6.41356747e-03  1.61772393e+00\n",
            " -2.50608607e-01  1.03247409e+00  7.25553289e-02 -2.85679610e-01\n",
            " -1.65712105e+00 -1.37515827e+00 -3.62254694e-01 -1.93428291e-01\n",
            "  1.25256666e+00 -4.69741168e-01 -3.25960584e-01 -2.50821387e-01\n",
            "  5.96024357e-01  3.29568737e-01 -3.87976879e-01 -6.58228813e-01\n",
            " -4.18682769e-01 -2.59847427e-01  9.21083714e-01  7.42302389e-01]\n",
            "Epoch=1099, Loss=1.0371, Weights=[-1.17536045e+00  1.12932570e+00  4.17834441e-01  6.29125726e-01\n",
            " -1.80251679e+00 -2.64189022e+00 -1.73942758e+00  4.64710716e-02\n",
            " -1.13428270e-02  3.01472394e-01  1.76298809e+00 -6.89979776e-01\n",
            " -2.92694962e-01 -3.51996908e-01  3.37953538e-01 -2.80027533e-01\n",
            "  4.73618051e-01 -4.56130239e-01  6.36905924e-01 -1.02216327e+00\n",
            " -1.89756272e+00 -1.25733591e-02  1.19494802e+00  8.90741695e-01\n",
            " -9.63284336e-01 -2.42261976e+00  1.97168125e-01 -5.64717263e-01\n",
            " -1.21951715e+00 -9.05368329e-01 -9.64289227e-01 -9.91291523e-01\n",
            "  1.72018057e+00 -8.10819640e-01  1.63116624e+00  1.28289833e-01\n",
            " -1.03359278e+00 -1.58795003e+00 -6.71848349e-01  7.36473735e-01\n",
            "  2.55114481e-01  5.26084374e-01 -1.00891406e+00 -8.27899637e-01\n",
            " -1.16979398e+00  1.39287749e+00  7.29660252e-01  5.40907706e-01\n",
            " -4.79127388e-01  2.78934510e-01 -3.41157265e-01 -2.12198115e-01\n",
            " -7.45942199e-01  1.08980154e+00  5.79064577e-01 -1.06792643e+00\n",
            " -1.18058817e+00 -5.50950906e-02 -1.28791195e-02 -9.41931781e-01\n",
            " -6.64942430e-01  5.46356972e-01 -1.30166292e+00  1.25509985e+00\n",
            " -8.37168511e-01 -8.83445975e-01 -7.29111774e-01  6.86059521e-01\n",
            "  7.35415414e-01  5.52375646e-01  2.03100813e-01  2.55787716e-01\n",
            " -1.66025492e+00 -7.18911066e-01 -9.82654573e-01  1.21414656e+00\n",
            " -1.49052060e+00  1.01521608e+00 -3.69752380e-01  7.00897086e-01\n",
            " -7.16876325e-01  1.65170260e+00 -8.45607646e-01 -9.13870475e-01\n",
            " -8.62848546e-01 -4.42870782e-01 -1.22863072e+00 -1.33952963e+00\n",
            " -1.73252777e+00 -1.48359019e+00 -8.26142478e-01  1.57457460e+00\n",
            "  1.38574763e+00 -7.77428131e-01 -2.82785806e-01 -7.42866791e-01\n",
            "  1.36421432e+00 -8.43771014e-01  3.70920924e-01  4.22341477e-01\n",
            "  6.55177736e-01  8.85396009e-01  8.43749527e-01 -2.02051148e-03\n",
            " -5.53469050e-01 -7.05406966e-01  1.17724054e+00 -6.27986240e-01\n",
            " -4.80494593e-01 -4.75061676e-01 -7.63043801e-01 -5.39537639e-01\n",
            "  3.83889135e-01 -1.59442904e+00  5.66547324e-01 -3.68612681e-02\n",
            " -5.74744625e-01 -1.12336956e+00 -2.43928701e+00 -1.65022306e+00\n",
            " -9.84923007e-02 -1.08494871e+00 -5.88369589e-01 -1.80274267e+00\n",
            "  1.76614378e-02 -1.45162122e+00  2.17601540e+00  2.24121531e-01\n",
            "  6.51211662e-01  4.78935898e-01 -1.41161080e+00  6.66140356e-02\n",
            " -7.13755701e-01  2.93816508e-01  1.41708060e+00 -6.66328061e-01\n",
            "  1.18095462e+00 -1.51413358e-01 -9.44731005e-01  5.20726562e-01\n",
            "  8.58372242e-01  1.13227129e+00 -3.12113645e-01  1.41763151e-01\n",
            " -5.92601502e-01  1.18159565e+00 -2.02300407e-01 -8.33026604e-01\n",
            "  3.32881099e-01 -7.36084690e-01 -8.66153532e-01  3.27516863e-02\n",
            " -2.00752019e-01  9.83205555e-01  4.29350217e-01  1.85173970e+00\n",
            " -7.44309884e-01  1.15849611e+00 -4.41791858e-01  8.11262209e-01\n",
            "  5.85995516e-01  1.00858533e-01  6.17791688e-02 -1.07881849e+00\n",
            " -3.51946845e+00  1.32880223e+00  6.87307529e-01 -1.15641732e+00\n",
            "  5.01603470e-01  1.19439746e-02 -5.66164282e-01 -1.04577020e+00\n",
            " -6.32772915e-01  2.21618450e+00  1.12475367e+00 -6.50136627e-01\n",
            "  3.70083768e-01  5.39238357e-01  5.70923384e-03  1.61710998e+00\n",
            " -2.50581231e-01  1.03128196e+00  7.02812782e-02 -2.86143445e-01\n",
            " -1.65616356e+00 -1.37404692e+00 -3.61261511e-01 -1.93602339e-01\n",
            "  1.25238649e+00 -4.68908992e-01 -3.26797900e-01 -2.53150638e-01\n",
            "  5.95858565e-01  3.30960490e-01 -3.88212337e-01 -6.59004680e-01\n",
            " -4.18297980e-01 -2.59537763e-01  9.21205775e-01  7.41639904e-01]\n",
            "Epoch=1109, Loss=1.0346, Weights=[-1.17666106e+00  1.12821398e+00  4.16990018e-01  6.28713017e-01\n",
            " -1.79981919e+00 -2.63941041e+00 -1.74045109e+00  4.65289646e-02\n",
            " -9.31552132e-03  3.01420315e-01  1.76031812e+00 -6.92281204e-01\n",
            " -2.93217408e-01 -3.51630362e-01  3.39311527e-01 -2.80009587e-01\n",
            "  4.71660160e-01 -4.55785498e-01  6.38029850e-01 -1.02401476e+00\n",
            " -1.89967206e+00 -1.26392950e-02  1.19462563e+00  8.89855542e-01\n",
            " -9.62950649e-01 -2.42231912e+00  1.96727700e-01 -5.64222068e-01\n",
            " -1.21824833e+00 -9.05291378e-01 -9.65355143e-01 -9.91266115e-01\n",
            "  1.72052263e+00 -8.12326419e-01  1.62954383e+00  1.28447357e-01\n",
            " -1.03336196e+00 -1.58795291e+00 -6.70515512e-01  7.36524726e-01\n",
            "  2.52853028e-01  5.25069703e-01 -1.00854486e+00 -8.28876822e-01\n",
            " -1.17165842e+00  1.39207204e+00  7.29811925e-01  5.41343551e-01\n",
            " -4.78775721e-01  2.78761426e-01 -3.41794206e-01 -2.12214014e-01\n",
            " -7.46002003e-01  1.08858176e+00  5.78493235e-01 -1.06707296e+00\n",
            " -1.17961865e+00 -5.50574924e-02 -1.41906084e-02 -9.43448238e-01\n",
            " -6.65257074e-01  5.47201478e-01 -1.30184604e+00  1.25320888e+00\n",
            " -8.37506814e-01 -8.81260709e-01 -7.27783677e-01  6.84177609e-01\n",
            "  7.33258758e-01  5.52909714e-01  2.04260260e-01  2.55230151e-01\n",
            " -1.66131928e+00 -7.19359128e-01 -9.82469048e-01  1.21579245e+00\n",
            " -1.49053822e+00  1.01259495e+00 -3.69607568e-01  7.03628868e-01\n",
            " -7.16275251e-01  1.64951782e+00 -8.46983640e-01 -9.12533358e-01\n",
            " -8.62325684e-01 -4.44126315e-01 -1.22839173e+00 -1.33774948e+00\n",
            " -1.73122378e+00 -1.48315055e+00 -8.26510330e-01  1.57279208e+00\n",
            "  1.38443312e+00 -7.76444989e-01 -2.82517754e-01 -7.44256919e-01\n",
            "  1.36461160e+00 -8.42494129e-01  3.70866927e-01  4.22649151e-01\n",
            "  6.55596587e-01  8.84576643e-01  8.43079435e-01 -1.09605629e-03\n",
            " -5.52472056e-01 -7.05850398e-01  1.17674614e+00 -6.27894228e-01\n",
            " -4.79685858e-01 -4.73957517e-01 -7.63172959e-01 -5.39911199e-01\n",
            "  3.85267853e-01 -1.59310214e+00  5.64806474e-01 -3.87764591e-02\n",
            " -5.74401550e-01 -1.12247797e+00 -2.43892428e+00 -1.65075024e+00\n",
            " -9.84887276e-02 -1.08388273e+00 -5.86940476e-01 -1.80233074e+00\n",
            "  1.59503659e-02 -1.45345029e+00  2.17525966e+00  2.23621749e-01\n",
            "  6.50874721e-01  4.79055993e-01 -1.41085989e+00  6.76595241e-02\n",
            " -7.13640662e-01  2.93197008e-01  1.41673742e+00 -6.67368206e-01\n",
            "  1.17923236e+00 -1.51342702e-01 -9.43213058e-01  5.20882690e-01\n",
            "  8.57618958e-01  1.13255779e+00 -3.11626371e-01  1.40272019e-01\n",
            " -5.94629227e-01  1.18199743e+00 -2.01502659e-01 -8.33616775e-01\n",
            "  3.32021656e-01 -7.37413083e-01 -8.66522224e-01  3.42467714e-02\n",
            " -2.00397126e-01  9.82349722e-01  4.30514900e-01  1.85366578e+00\n",
            " -7.45125910e-01  1.15630205e+00 -4.42976452e-01  8.09748643e-01\n",
            "  5.84571462e-01  1.01091652e-01  6.25805843e-02 -1.07753012e+00\n",
            " -3.51735281e+00  1.32877866e+00  6.84851753e-01 -1.15657711e+00\n",
            "  5.02549517e-01  1.07894249e-02 -5.67442404e-01 -1.04534511e+00\n",
            " -6.31613767e-01  2.21604376e+00  1.12422782e+00 -6.50146656e-01\n",
            "  3.69586162e-01  5.38605869e-01  5.00445973e-03  1.61649351e+00\n",
            " -2.50552538e-01  1.03009279e+00  6.80062628e-02 -2.86608415e-01\n",
            " -1.65520366e+00 -1.37293395e+00 -3.60270509e-01 -1.93777570e-01\n",
            "  1.25220699e+00 -4.68077164e-01 -3.27635005e-01 -2.55477876e-01\n",
            "  5.95692870e-01  3.32350358e-01 -3.88445636e-01 -6.59777979e-01\n",
            " -4.17915687e-01 -2.59230288e-01  9.21328975e-01  7.40978664e-01]\n",
            "Epoch=1119, Loss=1.0321, Weights=[-1.17796273e+00  1.12710398e+00  4.16148640e-01  6.28297566e-01\n",
            " -1.79712751e+00 -2.63692909e+00 -1.74147006e+00  4.65837330e-02\n",
            " -7.29255738e-03  3.01371315e-01  1.75765213e+00 -6.94581637e-01\n",
            " -2.93739248e-01 -3.51265691e-01  3.40666226e-01 -2.79990591e-01\n",
            "  4.69704230e-01 -4.55444334e-01  6.39151784e-01 -1.02586136e+00\n",
            " -1.90177921e+00 -1.27080380e-02  1.19430328e+00  8.88971806e-01\n",
            " -9.62618632e-01 -2.42202036e+00  1.96290344e-01 -5.63727457e-01\n",
            " -1.21698327e+00 -9.05212314e-01 -9.66417161e-01 -9.91241796e-01\n",
            "  1.72086290e+00 -8.13830911e-01  1.62792378e+00  1.28605425e-01\n",
            " -1.03313117e+00 -1.58795801e+00 -6.69186953e-01  7.36575811e-01\n",
            "  2.50595906e-01  5.24055091e-01 -1.00817806e+00 -8.29851529e-01\n",
            " -1.17351768e+00  1.39126672e+00  7.29960771e-01  5.41780183e-01\n",
            " -4.78422754e-01  2.78586954e-01 -3.42431652e-01 -2.12228104e-01\n",
            " -7.46060400e-01  1.08736303e+00  5.77922846e-01 -1.06622128e+00\n",
            " -1.17865212e+00 -5.50203475e-02 -1.55001955e-02 -9.44963483e-01\n",
            " -6.65572650e-01  5.48044600e-01 -1.30202889e+00  1.25132135e+00\n",
            " -8.37842071e-01 -8.79078197e-01 -7.26460761e-01  6.82297345e-01\n",
            "  7.31108941e-01  5.53444744e-01  2.05413786e-01  2.54669518e-01\n",
            " -1.66237918e+00 -7.19803148e-01 -9.82287325e-01  1.21743084e+00\n",
            " -1.49055559e+00  1.00998109e+00 -3.69462217e-01  7.06352293e-01\n",
            " -7.15678323e-01  1.64734089e+00 -8.48354301e-01 -9.11203360e-01\n",
            " -8.61807608e-01 -4.45377453e-01 -1.22814942e+00 -1.33597055e+00\n",
            " -1.72992220e+00 -1.48271305e+00 -8.26876733e-01  1.57101510e+00\n",
            "  1.38311728e+00 -7.75469776e-01 -2.82249623e-01 -7.45642435e-01\n",
            "  1.36500735e+00 -8.41220469e-01  3.70814399e-01  4.22957409e-01\n",
            "  6.56013574e-01  8.83759425e-01  8.42411234e-01 -1.75356956e-04\n",
            " -5.51478423e-01 -7.06291592e-01  1.17625365e+00 -6.27803758e-01\n",
            " -4.78878855e-01 -4.72853479e-01 -7.63298900e-01 -5.40283412e-01\n",
            "  3.86642331e-01 -1.59177861e+00  5.63066673e-01 -4.06897295e-02\n",
            " -5.74058247e-01 -1.12158796e+00 -2.43856195e+00 -1.65127340e+00\n",
            " -9.84824221e-02 -1.08282043e+00 -5.85516254e-01 -1.80191642e+00\n",
            "  1.42446455e-02 -1.45528054e+00  2.17450221e+00  2.23124579e-01\n",
            "  6.50539057e-01  4.79174474e-01 -1.41010939e+00  6.87035886e-02\n",
            " -7.13528039e-01  2.92580215e-01  1.41639642e+00 -6.68410615e-01\n",
            "  1.17750966e+00 -1.51270876e-01 -9.41696232e-01  5.21038156e-01\n",
            "  8.56866990e-01  1.13284245e+00 -3.11142103e-01  1.38785239e-01\n",
            " -5.96652318e-01  1.18239628e+00 -2.00705811e-01 -8.34204454e-01\n",
            "  3.31162705e-01 -7.38739606e-01 -8.66890141e-01  3.57371512e-02\n",
            " -2.00043118e-01  9.81498711e-01  4.31676486e-01  1.85558252e+00\n",
            " -7.45941366e-01  1.15411544e+00 -4.44161780e-01  8.08231383e-01\n",
            "  5.83150714e-01  1.01326806e-01  6.33792425e-02 -1.07624219e+00\n",
            " -3.51523842e+00  1.32875239e+00  6.82400594e-01 -1.15673088e+00\n",
            "  5.03491934e-01  9.62993511e-03 -5.68716008e-01 -1.04491697e+00\n",
            " -6.30460619e-01  2.21590032e+00  1.12370432e+00 -6.50156240e-01\n",
            "  3.69088248e-01  5.37974423e-01  4.29923390e-03  1.61587454e+00\n",
            " -2.50522524e-01  1.02890656e+00  6.57302686e-02 -2.87074510e-01\n",
            " -1.65424135e+00 -1.37181936e+00 -3.59281683e-01 -1.93953975e-01\n",
            "  1.25202815e+00 -4.67245684e-01 -3.28471899e-01 -2.57803105e-01\n",
            "  5.95527276e-01  3.33738351e-01 -3.88676782e-01 -6.60548713e-01\n",
            " -4.17535869e-01 -2.58924997e-01  9.21453299e-01  7.40318662e-01]\n",
            "Epoch=1129, Loss=1.0295, Weights=[-1.17926549e+00  1.12599570e+00  4.15310309e-01  6.27879394e-01\n",
            " -1.79444176e+00 -2.63444632e+00 -1.74248451e+00  4.66353980e-02\n",
            " -5.27394197e-03  3.01325386e-01  1.75499014e+00 -6.96881065e-01\n",
            " -2.94260459e-01 -3.50902875e-01  3.42017611e-01 -2.79970563e-01\n",
            "  4.67750294e-01 -4.55106741e-01  6.40271690e-01 -1.02770304e+00\n",
            " -1.90388415e+00 -1.27795895e-02  1.19398096e+00  8.88090485e-01\n",
            " -9.62288303e-01 -2.42172350e+00  1.95856055e-01 -5.63233429e-01\n",
            " -1.21572196e+00 -9.05131134e-01 -9.67475268e-01 -9.91218552e-01\n",
            "  1.72120136e+00 -8.15333121e-01  1.62630608e+00  1.28764033e-01\n",
            " -1.03290037e+00 -1.58796531e+00 -6.67862670e-01  7.36626992e-01\n",
            "  2.48343120e-01  5.23040540e-01 -1.00781368e+00 -8.30823783e-01\n",
            " -1.17537177e+00  1.39046154e+00  7.30106814e-01  5.42217586e-01\n",
            " -4.78068506e-01  2.78411113e-01 -3.43069591e-01 -2.12240397e-01\n",
            " -7.46117401e-01  1.08614537e+00  5.77353417e-01 -1.06537138e+00\n",
            " -1.17768856e+00 -5.49836619e-02 -1.68078935e-02 -9.46477501e-01\n",
            " -6.65889138e-01  5.48886322e-01 -1.30221150e+00  1.24943729e+00\n",
            " -8.38174293e-01 -8.76898467e-01 -7.25143025e-01  6.80418744e-01\n",
            "  7.28965965e-01  5.53980728e-01  2.06561415e-01  2.54105828e-01\n",
            " -1.66343467e+00 -7.20243129e-01 -9.82109374e-01  1.21906170e+00\n",
            " -1.49057271e+00  1.00737451e+00 -3.69316335e-01  7.09067327e-01\n",
            " -7.15085529e-01  1.64517182e+00 -8.49719648e-01 -9.09880473e-01\n",
            " -8.61294286e-01 -4.46624205e-01 -1.22790380e+00 -1.33419284e+00\n",
            " -1.72862303e+00 -1.48227773e+00 -8.27241676e-01  1.56924368e+00\n",
            "  1.38180010e+00 -7.74502499e-01 -2.81981400e-01 -7.47023335e-01\n",
            "  1.36540156e+00 -8.39950047e-01  3.70763343e-01  4.23266255e-01\n",
            "  6.56428706e-01  8.82944360e-01  8.41744916e-01  7.41583337e-04\n",
            " -5.50488135e-01 -7.06730544e-01  1.17576304e+00 -6.27714822e-01\n",
            " -4.78073573e-01 -4.71749576e-01 -7.63421634e-01 -5.40654281e-01\n",
            "  3.88012574e-01 -1.59045845e+00  5.61327919e-01 -4.26010726e-02\n",
            " -5.73714709e-01 -1.12069954e+00 -2.43820001e+00 -1.65179254e+00\n",
            " -9.84733917e-02 -1.08176180e+00 -5.84096910e-01 -1.80149974e+00\n",
            "  1.25442626e-02 -1.45711194e+00  2.17374308e+00  2.22630000e-01\n",
            "  6.50204661e-01  4.79291358e-01 -1.40935931e+00  6.97462165e-02\n",
            " -7.13417822e-01  2.91966118e-01  1.41605757e+00 -6.69455248e-01\n",
            "  1.17578655e+00 -1.51197904e-01 -9.40180535e-01  5.21192979e-01\n",
            "  8.56116325e-01  1.13312525e+00 -3.10660837e-01  1.37302810e-01\n",
            " -5.98670784e-01  1.18279221e+00 -1.99909866e-01 -8.34789662e-01\n",
            "  3.30304244e-01 -7.40064244e-01 -8.67257286e-01  3.72228190e-02\n",
            " -1.99689973e-01  9.80652525e-01  4.32834951e-01  1.85748992e+00\n",
            " -7.46756240e-01  1.15193629e+00 -4.45347830e-01  8.06710447e-01\n",
            "  5.81733268e-01  1.01563983e-01  6.41751374e-02 -1.07495470e+00\n",
            " -3.51312529e+00  1.32872343e+00  6.79954076e-01 -1.15687863e+00\n",
            "  5.04430704e-01  8.46550950e-03 -5.69985076e-01 -1.04448579e+00\n",
            " -6.29313481e-01  2.21575418e+00  1.12318317e+00 -6.50165368e-01\n",
            "  3.68590044e-01  5.37344023e-01  3.59354537e-03  1.61525307e+00\n",
            " -2.50491184e-01  1.02772324e+00  6.34532813e-02 -2.87541724e-01\n",
            " -1.65327663e+00 -1.37070318e+00 -3.58295028e-01 -1.94131545e-01\n",
            "  1.25184997e+00 -4.66414550e-01 -3.29308584e-01 -2.60126329e-01\n",
            "  5.95361788e-01  3.35124477e-01 -3.88905782e-01 -6.61316882e-01\n",
            " -4.17158508e-01 -2.58621884e-01  9.21578728e-01  7.39659893e-01]\n",
            "Epoch=1139, Loss=1.0270, Weights=[-1.18056933e+00  1.12488913e+00  4.14475027e-01  6.27458520e-01\n",
            " -1.79176196e+00 -2.63196215e+00 -1.74349443e+00  4.66839815e-02\n",
            " -3.25968181e-03  3.01282522e-01  1.75233214e+00 -6.99179481e-01\n",
            " -2.94781019e-01 -3.50541896e-01  3.43365657e-01 -2.79949520e-01\n",
            "  4.65798385e-01 -4.54772709e-01  6.41389537e-01 -1.02953983e+00\n",
            " -1.90598685e+00 -1.28539505e-02  1.19365866e+00  8.87211581e-01\n",
            " -9.61959679e-01 -2.42142857e+00  1.95424833e-01 -5.62739979e-01\n",
            " -1.21446443e+00 -9.05047839e-01 -9.68529448e-01 -9.91196365e-01\n",
            "  1.72153804e+00 -8.16833055e-01  1.62469072e+00  1.28923179e-01\n",
            " -1.03266956e+00 -1.58797479e+00 -6.66542659e-01  7.36678272e-01\n",
            "  2.46094675e-01  5.22026055e-01 -1.00745172e+00 -8.31793611e-01\n",
            " -1.17722073e+00  1.38965652e+00  7.30250081e-01  5.42655743e-01\n",
            " -4.77712996e-01  2.78233916e-01 -3.43708014e-01 -2.12250905e-01\n",
            " -7.46173020e-01  1.08492879e+00  5.76784952e-01 -1.06452327e+00\n",
            " -1.17672796e+00 -5.49474417e-02 -1.81137148e-02 -9.47990279e-01\n",
            " -6.66206517e-01  5.49726630e-01 -1.30239386e+00  1.24755670e+00\n",
            " -8.38503489e-01 -8.74721547e-01 -7.23830469e-01  6.78541824e-01\n",
            "  7.26829829e-01  5.54517656e-01  2.07703176e-01  2.53539090e-01\n",
            " -1.66448578e+00 -7.20679073e-01 -9.81935164e-01  1.22068504e+00\n",
            " -1.49058960e+00  1.00477525e+00 -3.69169930e-01  7.11773935e-01\n",
            " -7.14496858e-01  1.64301063e+00 -8.51079702e-01 -9.08564687e-01\n",
            " -8.60785690e-01 -4.47866583e-01 -1.22765490e+00 -1.33241633e+00\n",
            " -1.72732628e+00 -1.48184461e+00 -8.27605150e-01  1.56747784e+00\n",
            "  1.38048158e+00 -7.73543168e-01 -2.81713068e-01 -7.48399616e-01\n",
            "  1.36579422e+00 -8.38682876e-01  3.70713763e-01  4.23575695e-01\n",
            "  6.56841991e-01  8.82131449e-01  8.41080471e-01  1.65476155e-03\n",
            " -5.49501175e-01 -7.07167248e-01  1.17527431e+00 -6.27627410e-01\n",
            " -4.77270003e-01 -4.70645820e-01 -7.63541174e-01 -5.41023806e-01\n",
            "  3.89378584e-01 -1.58914166e+00  5.59590211e-01 -4.45104822e-02\n",
            " -5.73370928e-01 -1.11981270e+00 -2.43783847e+00 -1.65230767e+00\n",
            " -9.84616443e-02 -1.08070683e+00 -5.82682433e-01 -1.80108071e+00\n",
            "  1.08492031e-02 -1.45894446e+00  2.17298228e+00  2.22137989e-01\n",
            "  6.49871526e-01  4.79406657e-01 -1.40860964e+00  7.07873948e-02\n",
            " -7.13310004e-01  2.91354703e-01  1.41572087e+00 -6.70502067e-01\n",
            "  1.17406307e+00 -1.51123812e-01 -9.38665976e-01  5.21347175e-01\n",
            "  8.55366950e-01  1.13340618e+00 -3.10182566e-01  1.35824731e-01\n",
            " -6.00684637e-01  1.18318524e+00 -1.99114827e-01 -8.35372417e-01\n",
            "  3.29446271e-01 -7.41386985e-01 -8.67623661e-01  3.87037690e-02\n",
            " -1.99337672e-01  9.79811169e-01  4.33990270e-01  1.85938797e+00\n",
            " -7.47570525e-01  1.14976462e+00 -4.46534590e-01  8.05185852e-01\n",
            "  5.80319120e-01  1.01803170e-01  6.49682633e-02 -1.07366767e+00\n",
            " -3.51101344e+00  1.32869175e+00  6.77512223e-01 -1.15702034e+00\n",
            "  5.05365810e-01  7.29615233e-03 -5.71249589e-01 -1.04405156e+00\n",
            " -6.28172362e-01  2.21560534e+00  1.12266438e+00 -6.50174030e-01\n",
            "  3.68091567e-01  5.36714672e-01  2.88738340e-03  1.61462911e+00\n",
            " -2.50458515e-01  1.02654282e+00  6.11752865e-02 -2.88010049e-01\n",
            " -1.65230949e+00 -1.36958540e+00 -3.57310537e-01 -1.94310270e-01\n",
            "  1.25167247e+00 -4.65583764e-01 -3.30145059e-01 -2.62447551e-01\n",
            "  5.95196408e-01  3.36508746e-01 -3.89132641e-01 -6.62082485e-01\n",
            " -4.16783584e-01 -2.58320943e-01  9.21705248e-01  7.39002352e-01]\n",
            "Epoch=1149, Loss=1.0245, Weights=[-1.18187428e+00  1.12378429e+00  4.13642796e-01  6.27034965e-01\n",
            " -1.78908811e+00 -2.62947661e+00 -1.74449982e+00  4.67295058e-02\n",
            " -1.24978359e-03  3.01242716e-01  1.74967817e+00 -7.01476876e-01\n",
            " -2.95300906e-01 -3.50182734e-01  3.44710339e-01 -2.79927479e-01\n",
            "  4.63848534e-01 -4.54442232e-01  6.42505288e-01 -1.03137171e+00\n",
            " -1.90808728e+00 -1.29311219e-02  1.19333637e+00  8.86335090e-01\n",
            " -9.61632779e-01 -2.42113559e+00  1.94996675e-01 -5.62247107e-01\n",
            " -1.21321068e+00 -9.04962426e-01 -9.69579687e-01 -9.91175223e-01\n",
            "  1.72187292e+00 -8.18330719e-01  1.62307769e+00  1.29082861e-01\n",
            " -1.03243872e+00 -1.58798645e+00 -6.65226920e-01  7.36729651e-01\n",
            "  2.43850577e-01  5.21011639e-01 -1.00709216e+00 -8.32761038e-01\n",
            " -1.17906458e+00  1.38885168e+00  7.30390594e-01  5.43094636e-01\n",
            " -4.77356243e-01  2.78055380e-01 -3.44346906e-01 -2.12259642e-01\n",
            " -7.46227267e-01  1.08371328e+00  5.76217460e-01 -1.06367693e+00\n",
            " -1.17577032e+00 -5.49116928e-02 -1.94176718e-02 -9.49501802e-01\n",
            " -6.66524767e-01  5.50565508e-01 -1.30257601e+00  1.24567961e+00\n",
            " -8.38829671e-01 -8.72547465e-01 -7.22523089e-01  6.76666599e-01\n",
            "  7.24700534e-01  5.55055522e-01  2.08839092e-01  2.52969319e-01\n",
            " -1.66553255e+00 -7.21110985e-01 -9.81764665e-01  1.22230084e+00\n",
            " -1.49060625e+00  1.00218333e+00 -3.69023009e-01  7.14472083e-01\n",
            " -7.13912298e-01  1.64085732e+00 -8.52434486e-01 -9.07255995e-01\n",
            " -8.60281787e-01 -4.49104596e-01 -1.22740274e+00 -1.33064101e+00\n",
            " -1.72603194e+00 -1.48141371e+00 -8.27967147e-01  1.56571762e+00\n",
            "  1.37916171e+00 -7.72591791e-01 -2.81444614e-01 -7.49771276e-01\n",
            "  1.36618529e+00 -8.37418969e-01  3.70665659e-01  4.23885732e-01\n",
            "  6.57253439e-01  8.81320694e-01  8.40417888e-01  2.56417478e-03\n",
            " -5.48517527e-01 -7.07601702e-01  1.17478744e+00 -6.27541516e-01\n",
            " -4.76468133e-01 -4.69542221e-01 -7.63657532e-01 -5.41391988e-01\n",
            "  3.90740367e-01 -1.58782825e+00  5.57853547e-01 -4.64179520e-02\n",
            " -5.73026899e-01 -1.11892742e+00 -2.43747732e+00 -1.65281879e+00\n",
            " -9.84471875e-02 -1.07965551e+00 -5.81272810e-01 -1.80065936e+00\n",
            "  9.15945276e-03 -1.46077808e+00  2.17221981e+00  2.21648525e-01\n",
            "  6.49539641e-01  4.79520386e-01 -1.40786041e+00  7.18271106e-02\n",
            " -7.13204576e-01  2.90745958e-01  1.41538629e+00 -6.71551031e-01\n",
            "  1.17233924e+00 -1.51048623e-01 -9.37152563e-01  5.21500763e-01\n",
            "  8.54618852e-01  1.13368522e+00 -3.09707283e-01  1.34351000e-01\n",
            " -6.02693888e-01  1.18357535e+00 -1.98320697e-01 -8.35952737e-01\n",
            "  3.28588783e-01 -7.42707814e-01 -8.67989270e-01  4.01799959e-02\n",
            " -1.98986194e-01  9.78974648e-01  4.35142421e-01  1.86127666e+00\n",
            " -7.48384213e-01  1.14760041e+00 -4.47722049e-01  8.03657616e-01\n",
            "  5.78908267e-01  1.02044355e-01  6.57586139e-02 -1.07238109e+00\n",
            " -3.50890292e+00  1.32865735e+00  6.75075058e-01 -1.15715601e+00\n",
            "  5.06297234e-01  6.12186786e-03 -5.72509528e-01 -1.04361430e+00\n",
            " -6.27037268e-01  2.21545380e+00  1.12214794e+00 -6.50182220e-01\n",
            "  3.67592834e-01  5.36086373e-01  2.18073752e-03  1.61400266e+00\n",
            " -2.50424513e-01  1.02536527e+00  5.88962700e-02 -2.88479477e-01\n",
            " -1.65133993e+00 -1.36846603e+00 -3.56328206e-01 -1.94490143e-01\n",
            "  1.25149563e+00 -4.64753326e-01 -3.30981325e-01 -2.64766774e-01\n",
            "  5.95031141e-01  3.37891168e-01 -3.89357366e-01 -6.62845524e-01\n",
            " -4.16411078e-01 -2.58022168e-01  9.21832842e-01  7.38346032e-01]\n",
            "Epoch=1159, Loss=1.0220, Weights=[-1.18318035e+00  1.12268117e+00  4.12813619e-01  6.26608751e-01\n",
            " -1.78642023e+00 -2.62698976e+00 -1.74550069e+00  4.67719934e-02\n",
            "  7.55746014e-04  3.01205960e-01  1.74702822e+00 -7.03773242e-01\n",
            " -2.95820097e-01 -3.49825368e-01  3.46051633e-01 -2.79904462e-01\n",
            "  4.61900775e-01 -4.54115302e-01  6.43618910e-01 -1.03319870e+00\n",
            " -1.91018544e+00 -1.30111044e-02  1.19301407e+00  8.85461014e-01\n",
            " -9.61307618e-01 -2.42084460e+00  1.94571580e-01 -5.61754808e-01\n",
            " -1.21196070e+00 -9.04874895e-01 -9.70625971e-01 -9.91155108e-01\n",
            "  1.72220602e+00 -8.19826118e-01  1.62146699e+00  1.29243074e-01\n",
            " -1.03220785e+00 -1.58800025e+00 -6.63915447e-01  7.36781131e-01\n",
            "  2.41610830e-01  5.19997293e-01 -1.00673502e+00 -8.33726089e-01\n",
            " -1.18090336e+00  1.38804703e+00  7.30528380e-01  5.43534250e-01\n",
            " -4.76998266e-01  2.77875521e-01 -3.44986258e-01 -2.12266619e-01\n",
            " -7.46280156e-01  1.08249886e+00  5.75650946e-01 -1.06283238e+00\n",
            " -1.17481563e+00 -5.48764209e-02 -2.07197768e-02 -9.51012055e-01\n",
            " -6.66843867e-01  5.51402939e-01 -1.30275796e+00  1.24380602e+00\n",
            " -8.39152848e-01 -8.70376248e-01 -7.21220882e-01  6.74793089e-01\n",
            "  7.22578079e-01  5.55594315e-01  2.09969192e-01  2.52396526e-01\n",
            " -1.66657501e+00 -7.21538868e-01 -9.81597845e-01  1.22390911e+00\n",
            " -1.49062269e+00  9.99598777e-01 -3.68875582e-01  7.17161738e-01\n",
            " -7.13331837e-01  1.63871190e+00 -8.53784022e-01 -9.05954385e-01\n",
            " -8.59782547e-01 -4.50338254e-01 -1.22714733e+00 -1.32886685e+00\n",
            " -1.72474003e+00 -1.48098506e+00 -8.28327659e-01  1.56396303e+00\n",
            "  1.37784047e+00 -7.71648376e-01 -2.81176024e-01 -7.51138311e-01\n",
            "  1.36657475e+00 -8.36158337e-01  3.70619034e-01  4.24196371e-01\n",
            "  6.57663059e-01  8.80512098e-01  8.39757159e-01  3.46982023e-03\n",
            " -5.47537174e-01 -7.08033902e-01  1.17430242e+00 -6.27457130e-01\n",
            " -4.75667955e-01 -4.68438791e-01 -7.63770718e-01 -5.41758831e-01\n",
            "  3.92097927e-01 -1.58651822e+00  5.56117926e-01 -4.83234760e-02\n",
            " -5.72682613e-01 -1.11804372e+00 -2.43711657e+00 -1.65332592e+00\n",
            " -9.84300293e-02 -1.07860782e+00 -5.79868028e-01 -1.80023570e+00\n",
            "  7.47499715e-03 -1.46261278e+00  2.17145570e+00  2.21161586e-01\n",
            "  6.49208999e-01  4.79632559e-01 -1.40711162e+00  7.28653508e-02\n",
            " -7.13101528e-01  2.90139871e-01  1.41505382e+00 -6.72602100e-01\n",
            "  1.17061510e+00 -1.50972363e-01 -9.35640306e-01  5.21653760e-01\n",
            "  8.53872017e-01  1.13396234e+00 -3.09234981e-01  1.32881617e-01\n",
            " -6.04698549e-01  1.18396257e+00 -1.97527479e-01 -8.36530641e-01\n",
            "  3.27731780e-01 -7.44026721e-01 -8.68354115e-01  4.16514957e-02\n",
            " -1.98635519e-01  9.78142965e-01  4.36291379e-01  1.86315599e+00\n",
            " -7.49197296e-01  1.14544368e+00 -4.48910192e-01  8.02125755e-01\n",
            "  5.77500703e-01  1.02287526e-01  6.65461832e-02 -1.07109498e+00\n",
            " -3.50679373e+00  1.32862021e+00  6.72642602e-01 -1.15728562e+00\n",
            "  5.07224960e-01  4.94266039e-03 -5.73764875e-01 -1.04317401e+00\n",
            " -6.25908210e-01  2.21529958e+00  1.12163386e+00 -6.50189926e-01\n",
            "  3.67093862e-01  5.35459130e-01  1.47359753e-03  1.61337374e+00\n",
            " -2.50389175e-01  1.02419057e+00  5.66162174e-02 -2.88950002e-01\n",
            " -1.65036796e+00 -1.36734509e+00 -3.55348029e-01 -1.94671152e-01\n",
            "  1.25131945e+00 -4.63923235e-01 -3.31817382e-01 -2.67084003e-01\n",
            "  5.94865990e-01  3.39271753e-01 -3.89579964e-01 -6.63605999e-01\n",
            " -4.16040970e-01 -2.57725553e-01  9.21961492e-01  7.37690928e-01]\n",
            "Epoch=1169, Loss=1.0196, Weights=[-1.18448754e+00  1.12157979e+00  4.11987496e-01  6.26179900e-01\n",
            " -1.78375834e+00 -2.62450165e+00 -1.74649704e+00  4.68114675e-02\n",
            "  2.75690039e-03  3.01172249e-01  1.74438232e+00 -7.06068571e-01\n",
            " -2.96338570e-01 -3.49469777e-01  3.47389511e-01 -2.79880486e-01\n",
            "  4.59955142e-01 -4.53791909e-01  6.44730366e-01 -1.03502078e+00\n",
            " -1.91228128e+00 -1.30938985e-02  1.19269174e+00  8.84589350e-01\n",
            " -9.60984213e-01 -2.42055561e+00  1.94149545e-01 -5.61263079e-01\n",
            " -1.21071451e+00 -9.04785245e-01 -9.71668286e-01 -9.91136006e-01\n",
            "  1.72253733e+00 -8.21319257e-01  1.61985860e+00  1.29403817e-01\n",
            " -1.03197691e+00 -1.58801619e+00 -6.62608238e-01  7.36832714e-01\n",
            "  2.39375439e-01  5.18983023e-01 -1.00638029e+00 -8.34688789e-01\n",
            " -1.18273710e+00  1.38724259e+00  7.30663461e-01  5.43974567e-01\n",
            " -4.76639084e-01  2.77694357e-01 -3.45626057e-01 -2.12271850e-01\n",
            " -7.46331697e-01  1.08128553e+00  5.75085418e-01 -1.06198960e+00\n",
            " -1.17386387e+00 -5.48416319e-02 -2.20200419e-02 -9.52521024e-01\n",
            " -6.67163798e-01  5.52238910e-01 -1.30293971e+00  1.24193597e+00\n",
            " -8.39473032e-01 -8.68207922e-01 -7.19923845e-01  6.72921309e-01\n",
            "  7.20462464e-01  5.56134026e-01  2.11093500e-01  2.51820724e-01\n",
            " -1.66761320e+00 -7.21962730e-01 -9.81434676e-01  1.22550984e+00\n",
            " -1.49063893e+00  9.97021613e-01 -3.68727655e-01  7.19842868e-01\n",
            " -7.12755465e-01  1.63657437e+00 -8.55128331e-01 -9.04659847e-01\n",
            " -8.59287939e-01 -4.51567569e-01 -1.22688871e+00 -1.32709386e+00\n",
            " -1.72345054e+00 -1.48055868e+00 -8.28686677e-01  1.56221409e+00\n",
            "  1.37651787e+00 -7.70712930e-01 -2.80907283e-01 -7.52500720e-01\n",
            "  1.36696260e+00 -8.34900994e-01  3.70573890e-01  4.24507616e-01\n",
            "  6.58070860e-01  8.79705663e-01  8.39098273e-01  4.37169525e-03\n",
            " -5.46560100e-01 -7.08463843e-01  1.17381923e+00 -6.27374244e-01\n",
            " -4.74869457e-01 -4.67335541e-01 -7.63880743e-01 -5.42124335e-01\n",
            "  3.93451266e-01 -1.58521157e+00  5.54383344e-01 -5.02270483e-02\n",
            " -5.72338064e-01 -1.11716157e+00 -2.43675620e+00 -1.65382905e+00\n",
            " -9.84101776e-02 -1.07756376e+00 -5.78468075e-01 -1.79980976e+00\n",
            "  5.79582171e-03 -1.46444853e+00  2.17068996e+00  2.20677149e-01\n",
            "  6.48879589e-01  4.79743191e-01 -1.40636328e+00  7.39021021e-02\n",
            " -7.13000853e-01  2.89536431e-01  1.41472345e+00 -6.73655237e-01\n",
            "  1.16889069e+00 -1.50895057e-01 -9.34129212e-01  5.21806183e-01\n",
            "  8.53126433e-01  1.13423754e+00 -3.08765652e-01  1.31416579e-01\n",
            " -6.06698630e-01  1.18434689e+00 -1.96735179e-01 -8.37106148e-01\n",
            "  3.26875259e-01 -7.45343693e-01 -8.68718200e-01  4.31182650e-02\n",
            " -1.98285628e-01  9.77316122e-01  4.37437123e-01  1.86502595e+00\n",
            " -7.50009767e-01  1.14329443e+00 -4.50099009e-01  8.00590287e-01\n",
            "  5.76096426e-01  1.02532672e-01  6.73309648e-02 -1.06980934e+00\n",
            " -3.50468590e+00  1.32858032e+00  6.70214879e-01 -1.15740915e+00\n",
            "  5.08148973e-01  3.75853422e-03 -5.75015612e-01 -1.04273070e+00\n",
            " -6.24785195e-01  2.21514266e+00  1.12112214e+00 -6.50197142e-01\n",
            "  3.66594668e-01  5.34832948e-01  7.65953484e-04  1.61274235e+00\n",
            " -2.50352498e-01  1.02301870e+00  5.43351146e-02 -2.89421614e-01\n",
            " -1.64939356e+00 -1.36622258e+00 -3.54370001e-01 -1.94853288e-01\n",
            "  1.25114394e+00 -4.63093495e-01 -3.32653232e-01 -2.69399240e-01\n",
            "  5.94700959e-01  3.40650509e-01 -3.89800439e-01 -6.64363909e-01\n",
            " -4.15673241e-01 -2.57431093e-01  9.22091182e-01  7.37037034e-01]\n",
            "Epoch=1179, Loss=1.0171, Weights=[-1.18579587e+00  1.12048015e+00  4.11164431e-01  6.25748434e-01\n",
            " -1.78110246e+00 -2.62201232e+00 -1.74748887e+00  4.68479517e-02\n",
            "  4.75367296e-03  3.01141575e-01  1.74174048e+00 -7.08362853e-01\n",
            " -2.96856304e-01 -3.49115942e-01  3.48723949e-01 -2.79855572e-01\n",
            "  4.58011667e-01 -4.53472044e-01  6.45839623e-01 -1.03683797e+00\n",
            " -1.91437477e+00 -1.31795046e-02  1.19236939e+00  8.83720098e-01\n",
            " -9.60662581e-01 -2.42026865e+00  1.93730569e-01 -5.60771919e-01\n",
            " -1.20947211e+00 -9.04693475e-01 -9.72706615e-01 -9.91117903e-01\n",
            "  1.72286686e+00 -8.22810141e-01  1.61825251e+00  1.29565086e-01\n",
            " -1.03174590e+00 -1.58803425e+00 -6.61305289e-01  7.36884399e-01\n",
            "  2.37144409e-01  5.17968831e-01 -1.00602798e+00 -8.35649163e-01\n",
            " -1.18456581e+00  1.38643838e+00  7.30795864e-01  5.44415568e-01\n",
            " -4.76278717e-01  2.77511902e-01 -3.46266292e-01 -2.12275347e-01\n",
            " -7.46381903e-01  1.08007329e+00  5.74520880e-01 -1.06114859e+00\n",
            " -1.17291504e+00 -5.48073312e-02 -2.33184789e-02 -9.54028696e-01\n",
            " -6.67484539e-01  5.53073405e-01 -1.30312128e+00  1.24006945e+00\n",
            " -8.39790233e-01 -8.66042516e-01 -7.18631974e-01  6.71051276e-01\n",
            "  7.18353688e-01  5.56674645e-01  2.12212045e-01  2.51241926e-01\n",
            " -1.66864716e+00 -7.22382574e-01 -9.81275124e-01  1.22710303e+00\n",
            " -1.49065496e+00  9.94451862e-01 -3.68579236e-01  7.22515439e-01\n",
            " -7.12183168e-01  1.63444476e+00 -8.56467437e-01 -9.03372372e-01\n",
            " -8.58797931e-01 -4.52792550e-01 -1.22662688e+00 -1.32532202e+00\n",
            " -1.72216347e+00 -1.48013460e+00 -8.29044193e-01  1.56047082e+00\n",
            "  1.37519389e+00 -7.69785460e-01 -2.80638378e-01 -7.53858499e-01\n",
            "  1.36734880e+00 -8.33646952e-01  3.70530228e-01  4.24819472e-01\n",
            "  6.58476852e-01  8.78901390e-01  8.38441221e-01  5.26979731e-03\n",
            " -5.45586289e-01 -7.08891524e-01  1.17333786e+00 -6.27292849e-01\n",
            " -4.74072629e-01 -4.66232482e-01 -7.63987620e-01 -5.42488504e-01\n",
            "  3.94800389e-01 -1.58390829e+00  5.52649800e-01 -5.21286629e-02\n",
            " -5.71993244e-01 -1.11628098e+00 -2.43639622e+00 -1.65432819e+00\n",
            " -9.83876402e-02 -1.07652332e+00 -5.77072939e-01 -1.79938155e+00\n",
            "  4.12191171e-03 -1.46628530e+00  2.16992261e+00  2.20195193e-01\n",
            "  6.48551404e-01  4.79852296e-01 -1.40561540e+00  7.49373512e-02\n",
            " -7.12902542e-01  2.88935625e-01  1.41439517e+00 -6.74710401e-01\n",
            "  1.16716604e+00 -1.50816729e-01 -9.32619291e-01  5.21958050e-01\n",
            "  8.52382084e-01  1.13451080e+00 -3.08299288e-01  1.29955887e-01\n",
            " -6.08694143e-01  1.18472832e+00 -1.95943799e-01 -8.37679275e-01\n",
            "  3.26019220e-01 -7.46658720e-01 -8.69081527e-01  4.45803012e-02\n",
            " -1.97936499e-01  9.76494122e-01  4.38579630e-01  1.86688654e+00\n",
            " -7.50821619e-01  1.14115266e+00 -4.51288484e-01  7.99051229e-01\n",
            "  5.74695432e-01  1.02779781e-01  6.81129524e-02 -1.06852419e+00\n",
            " -3.50257946e+00  1.32853766e+00  6.67791908e-01 -1.15752661e+00\n",
            "  5.09069256e-01  2.56949367e-03 -5.76261720e-01 -1.04228437e+00\n",
            " -6.23668232e-01  2.21498305e+00  1.12061279e+00 -6.50203859e-01\n",
            "  3.66095270e-01  5.34207830e-01  5.77957257e-05  1.61210849e+00\n",
            " -2.50314479e-01  1.02184964e+00  5.20529471e-02 -2.89894306e-01\n",
            " -1.64841673e+00 -1.36509850e+00 -3.53394116e-01 -1.95036541e-01\n",
            "  1.25096909e+00 -4.62264105e-01 -3.33488875e-01 -2.71712489e-01\n",
            "  5.94536052e-01  3.42027445e-01 -3.90018800e-01 -6.65119255e-01\n",
            " -4.15307871e-01 -2.57138783e-01  9.22221895e-01  7.36384345e-01]\n",
            "Epoch=1189, Loss=1.0146, Weights=[-1.18710534e+00  1.11938224e+00  4.10344425e-01  6.25314377e-01\n",
            " -1.77845258e+00 -2.61952182e+00 -1.74847619e+00  4.68814700e-02\n",
            "  6.74605719e-03  3.01113930e-01  1.73910271e+00 -7.10656081e-01\n",
            " -2.97373276e-01 -3.48763842e-01  3.50054920e-01 -2.79829740e-01\n",
            "  4.56070385e-01 -4.53155699e-01  6.46946642e-01 -1.03865027e+00\n",
            " -1.91646591e+00 -1.32679227e-02  1.19204698e+00  8.82853258e-01\n",
            " -9.60342738e-01 -2.41998375e+00  1.93314649e-01 -5.60281324e-01\n",
            " -1.20823351e+00 -9.04599584e-01 -9.73740945e-01 -9.91100785e-01\n",
            "  1.72319461e+00 -8.24298774e-01  1.61664872e+00  1.29726876e-01\n",
            " -1.03151481e+00 -1.58805440e+00 -6.60006597e-01  7.36936190e-01\n",
            "  2.34917743e-01  5.16954720e-01 -1.00567807e+00 -8.36607237e-01\n",
            " -1.18638955e+00  1.38563440e+00  7.30925612e-01  5.44857237e-01\n",
            " -4.75917183e-01  2.77328174e-01 -3.46906950e-01 -2.12277123e-01\n",
            " -7.46430785e-01  1.07886217e+00  5.73957340e-01 -1.06030935e+00\n",
            " -1.17196911e+00 -5.47735242e-02 -2.46150996e-02 -9.55535056e-01\n",
            " -6.67806071e-01  5.53906409e-01 -1.30330270e+00  1.23820650e+00\n",
            " -8.40104465e-01 -8.63880054e-01 -7.17345264e-01  6.69183009e-01\n",
            "  7.16251749e-01  5.57216163e-01  2.13324852e-01  2.50660147e-01\n",
            " -1.66967692e+00 -7.22798409e-01 -9.81119159e-01  1.22868867e+00\n",
            " -1.49067081e+00  9.91889547e-01 -3.68430334e-01  7.25179421e-01\n",
            " -7.11614936e-01  1.63232305e+00 -8.57801362e-01 -9.02091949e-01\n",
            " -8.58312490e-01 -4.54013207e-01 -1.22636187e+00 -1.32355131e+00\n",
            " -1.72087882e+00 -1.47971284e+00 -8.29400200e-01  1.55873325e+00\n",
            "  1.37386852e+00 -7.68865974e-01 -2.80369297e-01 -7.55211648e-01\n",
            "  1.36773334e+00 -8.32396224e-01  3.70488050e-01  4.25131942e-01\n",
            "  6.58881044e-01  8.78099282e-01  8.37785993e-01  6.16412404e-03\n",
            " -5.44615726e-01 -7.09316941e-01  1.17285829e+00 -6.27212937e-01\n",
            " -4.73277460e-01 -4.65129624e-01 -7.64091359e-01 -5.42851340e-01\n",
            "  3.96145301e-01 -1.58260840e+00  5.50917291e-01 -5.40283141e-02\n",
            " -5.71648147e-01 -1.11540195e+00 -2.43603662e+00 -1.65482335e+00\n",
            " -9.83624253e-02 -1.07548648e+00 -5.75682606e-01 -1.79895109e+00\n",
            "  2.45325227e-03 -1.46812308e+00  2.16915365e+00  2.19715695e-01\n",
            "  6.48224433e-01  4.79959888e-01 -1.40486799e+00  7.59710845e-02\n",
            " -7.12806586e-01  2.88337443e-01  1.41406896e+00 -6.75767554e-01\n",
            "  1.16544118e+00 -1.50737405e-01 -9.31110550e-01  5.22109378e-01\n",
            "  8.51638958e-01  1.13478210e+00 -3.07835879e-01  1.28499538e-01\n",
            " -6.10685100e-01  1.18510687e+00 -1.95153344e-01 -8.38250041e-01\n",
            "  3.25163662e-01 -7.47971791e-01 -8.69444100e-01  4.60376025e-02\n",
            " -1.97588114e-01  9.75676965e-01  4.39718877e-01  1.86873774e+00\n",
            " -7.51632846e-01  1.13901837e+00 -4.52478606e-01  7.97508597e-01\n",
            "  5.73297716e-01  1.03028844e-01  6.88921395e-02 -1.06723954e+00\n",
            " -3.50047442e+00  1.32849222e+00  6.65373711e-01 -1.15763798e+00\n",
            "  5.09985796e-01  1.37554307e-03 -5.77503182e-01 -1.04183502e+00\n",
            " -6.22557331e-01  2.21482076e+00  1.12010580e+00 -6.50210068e-01\n",
            "  3.65595682e-01  5.33583783e-01 -6.50885124e-04  1.61147217e+00\n",
            " -2.50275114e-01  1.02068337e+00  4.97697007e-02 -2.90368071e-01\n",
            " -1.64743746e+00 -1.36397288e+00 -3.52420369e-01 -1.95220901e-01\n",
            "  1.25079491e+00 -4.61435067e-01 -3.34324312e-01 -2.74023752e-01\n",
            "  5.94371273e-01  3.43402572e-01 -3.90235052e-01 -6.65872036e-01\n",
            " -4.14944839e-01 -2.56848617e-01  9.22353615e-01  7.35732855e-01]\n",
            "Epoch=1199, Loss=1.0122, Weights=[-1.18841597e+00  1.11828607e+00  4.09527480e-01  6.24877752e-01\n",
            " -1.77580873e+00 -2.61703020e+00 -1.74945899e+00  4.69120467e-02\n",
            "  8.73404657e-03  3.01089308e-01  1.73646902e+00 -7.12948245e-01\n",
            " -2.97889465e-01 -3.48413454e-01  3.51382398e-01 -2.79803013e-01\n",
            "  4.54131329e-01 -4.52842862e-01  6.48051389e-01 -1.04045767e+00\n",
            " -1.91855464e+00 -1.33591529e-02  1.19172451e+00  8.81988829e-01\n",
            " -9.60024698e-01 -2.41970094e+00  1.92901781e-01 -5.59791292e-01\n",
            " -1.20699871e+00 -9.04503570e-01 -9.74771260e-01 -9.91084635e-01\n",
            "  1.72352058e+00 -8.25785162e-01  1.61504721e+00  1.29889184e-01\n",
            " -1.03128361e+00 -1.58807663e+00 -6.58712158e-01  7.36988085e-01\n",
            "  2.32695446e-01  5.15940696e-01 -1.00533056e+00 -8.37563036e-01\n",
            " -1.18820832e+00  1.38483067e+00  7.31052729e-01  5.45299556e-01\n",
            " -4.75554502e-01  2.77143189e-01 -3.47548021e-01 -2.12277192e-01\n",
            " -7.46478355e-01  1.07765216e+00  5.73394803e-01 -1.05947189e+00\n",
            " -1.17102610e+00 -5.47402163e-02 -2.59099155e-02 -9.57040089e-01\n",
            " -6.68128374e-01  5.54737907e-01 -1.30348397e+00  1.23634712e+00\n",
            " -8.40415737e-01 -8.61720564e-01 -7.16063709e-01  6.67316524e-01\n",
            "  7.14156646e-01  5.57758567e-01  2.14431949e-01  2.50075402e-01\n",
            " -1.67070253e+00 -7.23210242e-01 -9.80966751e-01  1.23026677e+00\n",
            " -1.49068648e+00  9.89334689e-01 -3.68280956e-01  7.27834783e-01\n",
            " -7.11050756e-01  1.63020926e+00 -8.59130130e-01 -9.00818565e-01\n",
            " -8.57831585e-01 -4.55229551e-01 -1.22609370e+00 -1.32178171e+00\n",
            " -1.71959661e+00 -1.47929344e+00 -8.29754691e-01  1.55700139e+00\n",
            "  1.37254176e+00 -7.67954477e-01 -2.80100026e-01 -7.56560163e-01\n",
            "  1.36811619e+00 -8.31148821e-01  3.70447356e-01  4.25445032e-01\n",
            "  6.59283446e-01  8.77299339e-01  8.37132579e-01  7.05467318e-03\n",
            " -5.43648393e-01 -7.09740090e-01  1.17238051e+00 -6.27134499e-01\n",
            " -4.72483940e-01 -4.64026977e-01 -7.64191972e-01 -5.43212846e-01\n",
            "  3.97486005e-01 -1.58131189e+00  5.49185815e-01 -5.59259963e-02\n",
            " -5.71302764e-01 -1.11452445e+00 -2.43567741e+00 -1.65531454e+00\n",
            " -9.83345410e-02 -1.07445324e+00 -5.74297065e-01 -1.79851841e+00\n",
            "  7.89828332e-04 -1.46996183e+00  2.16838311e+00  2.19238634e-01\n",
            "  6.47898667e-01  4.80065981e-01 -1.40412106e+00  7.70032886e-02\n",
            " -7.12712976e-01  2.87741872e-01  1.41374481e+00 -6.76826655e-01\n",
            "  1.16371615e+00 -1.50657109e-01 -9.29602998e-01  5.22260184e-01\n",
            "  8.50897041e-01  1.13505141e+00 -3.07375415e-01  1.27047532e-01\n",
            " -6.12671514e-01  1.18548253e+00 -1.94363819e-01 -8.38818462e-01\n",
            "  3.24308585e-01 -7.49282896e-01 -8.69805922e-01  4.74901681e-02\n",
            " -1.97240452e-01  9.74864654e-01  4.40854842e-01  1.87057955e+00\n",
            " -7.52443440e-01  1.13689157e+00 -4.53669360e-01  7.95962409e-01\n",
            "  5.71903276e-01  1.03279851e-01  6.96685194e-02 -1.06595540e+00\n",
            " -3.49837081e+00  1.32844399e+00  6.62960309e-01 -1.15774325e+00\n",
            "  5.10898577e-01  1.76686812e-04 -5.78739981e-01 -1.04138266e+00\n",
            " -6.21452500e-01  2.21465578e+00  1.11960119e+00 -6.50215761e-01\n",
            "  3.65095923e-01  5.32960809e-01 -1.36009816e-03  1.61083340e+00\n",
            " -2.50234400e-01  1.01951986e+00  4.74853612e-02 -2.90842901e-01\n",
            " -1.64645577e+00 -1.36284571e+00 -3.51448753e-01 -1.95406357e-01\n",
            "  1.25062139e+00 -4.60606385e-01 -3.35159544e-01 -2.76333033e-01\n",
            "  5.94206624e-01  3.44775898e-01 -3.90449201e-01 -6.66622253e-01\n",
            " -4.14584127e-01 -2.56560590e-01  9.22486324e-01  7.35082559e-01]\n",
            "Epoch=1209, Loss=1.0098, Weights=[-1.18972777e+00  1.11719165e+00  4.08713597e-01  6.24438584e-01\n",
            " -1.77317093e+00 -2.61453752e+00 -1.75043729e+00  4.69397068e-02\n",
            "  1.07176347e-02  3.01067700e-01  1.73383943e+00 -7.15239337e-01\n",
            " -2.98404850e-01 -3.48064757e-01  3.52706356e-01 -2.79775411e-01\n",
            "  4.52194533e-01 -4.52533525e-01  6.49153827e-01 -1.04226018e+00\n",
            " -1.92064095e+00 -1.34531949e-02  1.19140196e+00  8.81126810e-01\n",
            " -9.59708478e-01 -2.41942023e+00  1.92491964e-01 -5.59301819e-01\n",
            " -1.20576772e+00 -9.04405432e-01 -9.75797545e-01 -9.91069442e-01\n",
            "  1.72384478e+00 -8.27269308e-01  1.61344798e+00  1.30052006e-01\n",
            " -1.03105231e+00 -1.58810093e+00 -6.57421967e-01  7.37040088e-01\n",
            "  2.30477521e-01  5.14926761e-01 -1.00498547e+00 -8.38516585e-01\n",
            " -1.19002217e+00  1.38402722e+00  7.31177239e-01  5.45742506e-01\n",
            " -4.75190692e-01  2.76956964e-01 -3.48189492e-01 -2.12275565e-01\n",
            " -7.46524625e-01  1.07644327e+00  5.72833276e-01 -1.05863620e+00\n",
            " -1.17008597e+00 -5.47074125e-02 -2.72029380e-02 -9.58543783e-01\n",
            " -6.68451428e-01  5.55567884e-01 -1.30366510e+00  1.23449133e+00\n",
            " -8.40724064e-01 -8.59564072e-01 -7.14787304e-01  6.65451839e-01\n",
            "  7.12068376e-01  5.58301848e-01  2.15533363e-01  2.49487704e-01\n",
            " -1.67172401e+00 -7.23618080e-01 -9.80817868e-01  1.23183733e+00\n",
            " -1.49070198e+00  9.86787310e-01 -3.68131109e-01  7.30481493e-01\n",
            " -7.10490617e-01  1.62810340e+00 -8.60453765e-01 -8.99552209e-01\n",
            " -8.57355183e-01 -4.56441591e-01 -1.22582239e+00 -1.32001323e+00\n",
            " -1.71831682e+00 -1.47887640e+00 -8.30107658e-01  1.55527528e+00\n",
            "  1.37121360e+00 -7.67050975e-01 -2.79830553e-01 -7.57904044e-01\n",
            "  1.36849735e+00 -8.29904755e-01  3.70408147e-01  4.25758745e-01\n",
            "  6.59684068e-01  8.76501564e-01  8.36480969e-01  7.94144262e-03\n",
            " -5.42684276e-01 -7.10160969e-01  1.17190451e+00 -6.27057528e-01\n",
            " -4.71692058e-01 -4.62924551e-01 -7.64289470e-01 -5.43573025e-01\n",
            "  3.98822506e-01 -1.58001876e+00  5.47455368e-01 -5.78217038e-02\n",
            " -5.70957088e-01 -1.11364850e+00 -2.43531857e+00 -1.65580175e+00\n",
            " -9.83039954e-02 -1.07342358e+00 -5.72916302e-01 -1.79808352e+00\n",
            " -8.68375332e-04 -1.47180153e+00  2.16761099e+00  2.18763986e-01\n",
            "  6.47574097e-01  4.80170590e-01 -1.40337462e+00  7.80339495e-02\n",
            " -7.12621705e-01  2.87148903e-01  1.41342271e+00 -6.77887668e-01\n",
            "  1.16199097e+00 -1.50575866e-01 -9.28096644e-01  5.22410485e-01\n",
            "  8.50156318e-01  1.13531874e+00 -3.06917888e-01  1.25599867e-01\n",
            " -6.14653395e-01  1.18585532e+00 -1.93575229e-01 -8.39384556e-01\n",
            "  3.23453988e-01 -7.50592028e-01 -8.70166997e-01  4.89379978e-02\n",
            " -1.96893493e-01  9.74057188e-01  4.41987504e-01  1.87241197e+00\n",
            " -7.53253398e-01  1.13477226e+00 -4.54860732e-01  7.94412680e-01\n",
            "  5.70512107e-01  1.03532791e-01  7.04420854e-02 -1.06467176e+00\n",
            " -3.49626864e+00  1.32839296e+00  6.60551721e-01 -1.15784241e+00\n",
            "  5.11807584e-01 -1.02707073e-03 -5.79972098e-01 -1.04092730e+00\n",
            " -6.20353747e-01  2.21448812e+00  1.11909894e+00 -6.50220932e-01\n",
            "  3.64596007e-01  5.32338916e-01 -2.06985218e-03  1.61019218e+00\n",
            " -2.50192336e-01  1.01835910e+00  4.51999145e-02 -2.91318787e-01\n",
            " -1.64547163e+00 -1.36171701e+00 -3.50479264e-01 -1.95592900e-01\n",
            "  1.25044854e+00 -4.59778058e-01 -3.35994573e-01 -2.78640335e-01\n",
            "  5.94042110e-01  3.46147432e-01 -3.90661253e-01 -6.67369906e-01\n",
            " -4.14225715e-01 -2.56274698e-01  9.22620005e-01  7.34433451e-01]\n",
            "Epoch=1219, Loss=1.0073, Weights=[-1.19104073e+00  1.11609897e+00  4.07902780e-01  6.23996899e-01\n",
            " -1.77053918e+00 -2.61204383e+00 -1.75141109e+00  4.69644755e-02\n",
            "  1.26968151e-02  3.01049100e-01  1.73121396e+00 -7.17529349e-01\n",
            " -2.98919409e-01 -3.47717730e-01  3.54026767e-01 -2.79746957e-01\n",
            "  4.50260033e-01 -4.52227676e-01  6.50253918e-01 -1.04405779e+00\n",
            " -1.92272481e+00 -1.35500484e-02  1.19107931e+00  8.80267200e-01\n",
            " -9.59394091e-01 -2.41914166e+00  1.92085193e-01 -5.58812902e-01\n",
            " -1.20454055e+00 -9.04305171e-01 -9.76819785e-01 -9.91055190e-01\n",
            "  1.72416720e+00 -8.28751216e-01  1.61185102e+00  1.30215337e-01\n",
            " -1.03082088e+00 -1.58812727e+00 -6.56136021e-01  7.37092198e-01\n",
            "  2.28263973e-01  5.13912919e-01 -1.00464277e+00 -8.39467909e-01\n",
            " -1.19183112e+00  1.38322406e+00  7.31299168e-01  5.46186069e-01\n",
            " -4.74825774e-01  2.76769517e-01 -3.48831353e-01 -2.12272257e-01\n",
            " -7.46569605e-01  1.07523552e+00  5.72272764e-01 -1.05780227e+00\n",
            " -1.16914873e+00 -5.46751180e-02 -2.84941782e-02 -9.60046122e-01\n",
            " -6.68775214e-01  5.56396326e-01 -1.30384611e+00  1.23263915e+00\n",
            " -8.41029456e-01 -8.57410602e-01 -7.13516042e-01  6.63588973e-01\n",
            "  7.09986938e-01  5.58845994e-01  2.16629122e-01  2.48897069e-01\n",
            " -1.67274142e+00 -7.24021932e-01 -9.80672478e-01  1.23340034e+00\n",
            " -1.49071733e+00  9.84247430e-01 -3.67980801e-01  7.33119523e-01\n",
            " -7.09934506e-01  1.62600547e+00 -8.61772291e-01 -8.98292869e-01\n",
            " -8.56883252e-01 -4.57649338e-01 -1.22554795e+00 -1.31824584e+00\n",
            " -1.71703947e+00 -1.47846177e+00 -8.30459096e-01  1.55355492e+00\n",
            "  1.36988404e+00 -7.66155474e-01 -2.79560865e-01 -7.59243288e-01\n",
            "  1.36887678e+00 -8.28664039e-01  3.70370423e-01  4.26073086e-01\n",
            "  6.60082921e-01  8.75705958e-01  8.35831154e-01  8.82443038e-03\n",
            " -5.41723360e-01 -7.10579575e-01  1.17143026e+00 -6.26982016e-01\n",
            " -4.70901804e-01 -4.61822355e-01 -7.64383864e-01 -5.43931881e-01\n",
            "  4.00154808e-01 -1.57872901e+00  5.45725949e-01 -5.97154313e-02\n",
            " -5.70611112e-01 -1.11277409e+00 -2.43496012e+00 -1.65628501e+00\n",
            " -9.82707967e-02 -1.07239750e+00 -5.71540307e-01 -1.79764644e+00\n",
            " -2.52137411e-03 -1.47364216e+00  2.16683733e+00  2.18291731e-01\n",
            "  6.47250713e-01  4.80273729e-01 -1.40262867e+00  7.90630536e-02\n",
            " -7.12532763e-01  2.86558525e-01  1.41310263e+00 -6.78950551e-01\n",
            "  1.16026568e+00 -1.50493700e-01 -9.26591495e-01  5.22560298e-01\n",
            "  8.49416775e-01  1.13558405e+00 -3.06463286e-01  1.24156541e-01\n",
            " -6.16630758e-01  1.18622524e+00 -1.92787578e-01 -8.39948341e-01\n",
            "  3.22599871e-01 -7.51899176e-01 -8.70527330e-01  5.03810923e-02\n",
            " -1.96547219e-01  9.73254566e-01  4.43116840e-01  1.87423499e+00\n",
            " -7.54062712e-01  1.13266045e+00 -4.56052709e-01  7.92859427e-01\n",
            "  5.69124206e-01  1.03787655e-01  7.12128306e-02 -1.06338866e+00\n",
            " -3.49416795e+00  1.32833911e+00  6.58147966e-01 -1.15793545e+00\n",
            "  5.12712805e-01 -2.23572512e-03 -5.81199517e-01 -1.04046894e+00\n",
            " -6.19261082e-01  2.21431778e+00  1.11859907e+00 -6.50225571e-01\n",
            "  3.64095951e-01  5.31718109e-01 -2.78015569e-03  1.60954852e+00\n",
            " -2.50148918e-01  1.01720107e+00  4.29133464e-02 -2.91795721e-01\n",
            " -1.64448505e+00 -1.36058678e+00 -3.49511896e-01 -1.95780518e-01\n",
            "  1.25027635e+00 -4.58950091e-01 -3.36829400e-01 -2.80945661e-01\n",
            "  5.93877735e-01  3.47517183e-01 -3.90871216e-01 -6.68114994e-01\n",
            " -4.13869582e-01 -2.55990934e-01  9.22754641e-01  7.33785525e-01]\n",
            "Epoch=1229, Loss=1.0049, Weights=[-1.19235489e+00  1.11500804e+00  4.07095028e-01  6.23552721e-01\n",
            " -1.76791350e+00 -2.60954917e+00 -1.75238039e+00  4.69863785e-02\n",
            "  1.46715814e-02  3.01033500e-01  1.72859263e+00 -7.19818272e-01\n",
            " -2.99433122e-01 -3.47372351e-01  3.55343604e-01 -2.79717675e-01\n",
            "  4.48327863e-01 -4.51925304e-01  6.51351625e-01 -1.04585053e+00\n",
            " -1.92480618e+00 -1.36497129e-02  1.19075655e+00  8.79409999e-01\n",
            " -9.59081552e-01 -2.41886524e+00  1.91681466e-01 -5.58324539e-01\n",
            " -1.20331720e+00 -9.04202784e-01 -9.77837966e-01 -9.91041866e-01\n",
            "  1.72448785e+00 -8.30230891e-01  1.61025632e+00  1.30379172e-01\n",
            " -1.03058931e+00 -1.58815564e+00 -6.54854316e-01  7.37144416e-01\n",
            "  2.26054805e-01  5.12899175e-01 -1.00430248e+00 -8.40417032e-01\n",
            " -1.19363520e+00  1.38242119e+00  7.31418538e-01  5.46630228e-01\n",
            " -4.74459765e-01  2.76580865e-01 -3.49473591e-01 -2.12267281e-01\n",
            " -7.46613307e-01  1.07402890e+00  5.71713274e-01 -1.05697012e+00\n",
            " -1.16821436e+00 -5.46433375e-02 -2.97836470e-02 -9.61547094e-01\n",
            " -6.69099714e-01  5.57223218e-01 -1.30402702e+00  1.23079059e+00\n",
            " -8.41331928e-01 -8.55260182e-01 -7.12249914e-01  6.61727942e-01\n",
            "  7.07912327e-01  5.59390993e-01  2.17719253e-01  2.48303514e-01\n",
            " -1.67375478e+00 -7.24421809e-01 -9.80530551e-01  1.23495581e+00\n",
            " -1.49073252e+00  9.81715068e-01 -3.67830039e-01  7.35748843e-01\n",
            " -7.09382412e-01  1.62391546e+00 -8.63085733e-01 -8.97040532e-01\n",
            " -8.56415758e-01 -4.58852802e-01 -1.22527042e+00 -1.31647953e+00\n",
            " -1.71576454e+00 -1.47804955e+00 -8.30808997e-01  1.55184033e+00\n",
            "  1.36855307e+00 -7.65267979e-01 -2.79290953e-01 -7.60577895e-01\n",
            "  1.36925448e+00 -8.27426685e-01  3.70334185e-01  4.26388059e-01\n",
            "  6.60480014e-01  8.74912521e-01  8.35183124e-01  9.70363462e-03\n",
            " -5.40765629e-01 -7.10995905e-01  1.17095777e+00 -6.26907953e-01\n",
            " -4.70113166e-01 -4.60720397e-01 -7.64475165e-01 -5.44289418e-01\n",
            "  4.01482915e-01 -1.57744265e+00  5.43997552e-01 -6.16071733e-02\n",
            " -5.70264828e-01 -1.11190120e+00 -2.43460205e+00 -1.65676430e+00\n",
            " -9.82349534e-02 -1.07137498e+00 -5.70169065e-01 -1.79720720e+00\n",
            " -4.16918354e-03 -1.47548368e+00  2.16606212e+00  2.17821846e-01\n",
            "  6.46928505e-01  4.80375412e-01 -1.40188323e+00  8.00905868e-02\n",
            " -7.12446142e-01  2.85970728e-01  1.41278458e+00 -6.80015267e-01\n",
            "  1.15854031e+00 -1.50410638e-01 -9.25087560e-01  5.22709640e-01\n",
            "  8.48678399e-01  1.13584734e+00 -3.06011598e-01  1.22717554e-01\n",
            " -6.18603614e-01  1.18659230e+00 -1.92000873e-01 -8.40509832e-01\n",
            "  3.21746235e-01 -7.53204332e-01 -8.70886922e-01  5.18194530e-02\n",
            " -1.96201608e-01  9.72456788e-01  4.44242831e-01  1.87604861e+00\n",
            " -7.54871378e-01  1.13055613e+00 -4.57245276e-01  7.91302666e-01\n",
            "  5.67739569e-01  1.04044435e-01  7.19807481e-02 -1.06210609e+00\n",
            " -3.49206875e+00  1.32828243e+00  6.55749063e-01 -1.15802235e+00\n",
            "  5.13614225e-01 -3.44927190e-03 -5.82422220e-01 -1.04000758e+00\n",
            " -6.18174514e-01  2.21414476e+00  1.11810159e+00 -6.50229672e-01\n",
            "  3.63595770e-01  5.31098392e-01 -3.49101689e-03  1.60890243e+00\n",
            " -2.50104145e-01  1.01604574e+00  4.06256429e-02 -2.92273697e-01\n",
            " -1.64349602e+00 -1.35945504e+00 -3.48546643e-01 -1.95969201e-01\n",
            "  1.25010482e+00 -4.58122487e-01 -3.37664026e-01 -2.83249012e-01\n",
            "  5.93713502e-01  3.48885159e-01 -3.91079096e-01 -6.68857517e-01\n",
            " -4.13515708e-01 -2.55709295e-01  9.22890215e-01  7.33138777e-01]\n",
            "Epoch=1239, Loss=1.0025, Weights=[-1.19367023  1.11391887  0.40629034  0.62310608 -1.76529391 -2.60705361\n",
            " -1.75334519  0.04700544  0.01664193  0.30102089  1.72597544 -0.7221061\n",
            " -0.29994597 -0.3470286   0.35665684 -0.27968759  0.44639806 -0.4516264\n",
            "  0.65244691 -1.04763837 -1.92688503 -0.01375219  1.19043365  0.87855521\n",
            " -0.95877088 -2.41859102  0.19128078 -0.55783673 -1.20209767 -0.90409827\n",
            " -0.97885207 -0.99102946  1.72480673 -0.83170834  1.60866388  0.13054351\n",
            " -1.03035758 -1.58818601 -0.65357685  0.73719674  0.22385002  0.51188553\n",
            " -1.00396459 -0.84136398 -1.19543444  1.38161865  0.73153537  0.54707496\n",
            " -0.47409268  0.27639102 -0.35011619 -0.21226065 -0.74665574  1.07282343\n",
            "  0.57115481 -1.05613973 -1.16728286 -0.05461208 -0.03107136 -0.96304668\n",
            " -0.66942491  0.55804854 -1.30420784  1.22894566 -0.84163149 -0.85311283\n",
            " -0.71098891  0.65986877  0.70584454  0.55993683  0.21880378  0.24770705\n",
            " -1.67476414 -0.72481772 -0.98039205  1.23650374 -1.49074758  0.97919024\n",
            " -0.36767883  0.73836943 -0.70883432  1.62183339 -0.86439411 -0.89579519\n",
            " -0.85595267 -0.46005199 -1.22498981 -1.31471428 -1.71449205 -1.47763977\n",
            " -0.83115736  1.55013154  1.36722069 -0.76438849 -0.2790208  -0.76190786\n",
            "  1.36963042 -0.8261927   0.37029943  0.42670367  0.66087536  0.87412126\n",
            "  0.83453687  0.01057905 -0.53981107 -0.71140996  1.17048701 -0.62683533\n",
            " -0.46932613 -0.45961869 -0.76456338 -0.54464564  0.40280683 -1.57615968\n",
            "  0.54227018 -0.06349692 -0.56991823 -1.11102984 -2.43424435 -1.65723965\n",
            " -0.09819647 -1.07035602 -0.56880257 -1.79676581 -0.00581182 -1.47732609\n",
            "  2.1652854   0.21735431  0.64660746  0.48047565 -1.40113831  0.08111654\n",
            " -0.71236183  0.2853855   1.41246854 -0.68108178  1.15681489 -0.1503267\n",
            " -0.92358485  0.52285853  0.84794117  1.13610859 -0.30556281  0.1212829\n",
            " -0.62057198  1.18695649 -0.19121512 -0.84106905  0.32089308 -0.75450749\n",
            " -0.87124578  0.05325308 -0.19585664  0.97166385  0.44536545  1.87785283\n",
            " -0.75567939  1.12845931 -0.45843842  0.78974241  0.56635819  0.10430312\n",
            "  0.07274583 -1.06082408 -3.48997106  1.32822291  0.65335503 -1.15810311\n",
            "  0.51451183 -0.00466771 -0.58364019 -1.03954324 -0.61709405  2.21396907\n",
            "  1.11760648 -0.65023323  0.36309548  0.53047977 -0.00420244  1.60825391\n",
            " -0.25005801  1.01489309  0.03833679 -0.2927527  -1.64250454 -1.35832179\n",
            " -0.3475835  -0.19615894  1.24993395 -0.45729525 -0.33849845 -0.28555039\n",
            "  0.59354941  0.35025137 -0.3912849  -0.66959747 -0.41316407 -0.25542977\n",
            "  0.92302671  0.7324932 ]\n",
            "Epoch=1249, Loss=1.0001, Weights=[-1.19498676  1.11283144  0.40548873  0.62265699 -1.76268041 -2.6045572\n",
            " -1.7543055   0.04702169  0.01860785  0.30101127  1.72336241 -0.72439282\n",
            " -0.30045792 -0.34668645  0.35796645 -0.27965672  0.44447065 -0.45133095\n",
            "  0.65353974 -1.04942133 -1.92896133 -0.01385747  1.19011062  0.87770282\n",
            " -0.95846207 -2.41831901  0.19088313 -0.55734946 -1.20088198 -0.90399163\n",
            " -0.97986209 -0.99101795  1.72512384 -0.83318356  1.60707368  0.13070834\n",
            " -1.0301257  -1.58821838 -0.65230361  0.73724918  0.22164962  0.510872\n",
            " -1.00362909 -0.84230878 -1.19722887  1.38081644  0.7316497   0.54752025\n",
            " -0.47372455  0.27620001 -0.35075915 -0.21225238 -0.74669692  1.07161911\n",
            "  0.57059738 -1.0553111  -1.16635421 -0.05458134 -0.03235731 -0.96454488\n",
            " -0.66975078  0.55887229 -1.30438858  1.22710439 -0.84192816 -0.85096859\n",
            " -0.70973303  0.65801146  0.70378357  0.5604835   0.21988274  0.24710771\n",
            " -1.67576952 -0.72520967 -0.98025696  1.23804414 -1.49076251  0.97667297\n",
            " -0.36752719  0.74098124 -0.70829022  1.61975926 -0.86569746 -0.89455681\n",
            " -0.85549395 -0.46124692 -1.22470613 -1.3129501  -1.71322199 -1.47723247\n",
            " -0.83150417  1.54842856  1.36588689 -0.76351702 -0.2787504  -0.76323319\n",
            "  1.37000458 -0.82496211  0.37026616  0.42701991  0.66126896  0.87333216\n",
            "  0.83389238  0.01145069 -0.53885966 -0.71182173  1.17001796 -0.62676415\n",
            " -0.4685407  -0.45851723 -0.76464853 -0.54500055  0.40412657 -1.57488009\n",
            "  0.54054382 -0.06538468 -0.56957131 -1.11016    -2.43388702 -1.65771105\n",
            " -0.09815537 -1.0693406  -0.56744079 -1.79632229 -0.0074493  -1.47916934\n",
            "  2.16450717  0.2168891   0.64628758  0.48057447 -1.40039391  0.08214088\n",
            " -0.71227983  0.28480284  1.41215449 -0.68215004  1.15508946 -0.15024192\n",
            " -0.92208336  0.52300697  0.84720509  1.13636779 -0.30511692  0.11985259\n",
            " -0.62253586  1.18731783 -0.19043032 -0.841626    0.32004041 -0.75580864\n",
            " -0.87160391  0.05468198 -0.1955123   0.97087576  0.44648469  1.87964763\n",
            " -0.75648675  1.12636999 -0.45963212  0.78817869  0.56498007  0.1045637\n",
            "  0.07350807 -1.05954262 -3.4878749   1.32816053  0.65096589 -1.15817771\n",
            "  0.51540561 -0.00589102 -0.58485341 -1.03907592 -0.6160197   2.21379071\n",
            "  1.11711376 -0.65023623  0.3625951   0.52986226 -0.00491444  1.60760296\n",
            " -0.25001052  1.01374311  0.03604677 -0.29323274 -1.64151061 -1.35718703\n",
            " -0.34662246 -0.19634972  1.24976375 -0.45646838 -0.33933268 -0.2878498\n",
            "  0.59338548  0.35161582 -0.39148863 -0.67033487 -0.41281466 -0.25515237\n",
            "  0.92316411  0.73184879]\n",
            "Epoch=1259, Loss=0.9977, Weights=[-1.1963045   1.11174577  0.40469019  0.6222055  -1.76007302 -2.60205998\n",
            " -1.75526132  0.04703516  0.02056933  0.30100462  1.72075356 -0.72667842\n",
            " -0.30096897 -0.34634587  0.3592724  -0.27962509  0.44254568 -0.45103894\n",
            "  0.65463007 -1.05119941 -1.93103505 -0.01396556  1.18978741  0.87685284\n",
            " -0.95815516 -2.41804923  0.19048851 -0.55686274 -1.19967012 -0.90388286\n",
            " -0.980868   -0.99100733  1.72543918 -0.83465655  1.60548572  0.13087365\n",
            " -1.02989363 -1.58825272 -0.65103459  0.73730173  0.21945362  0.50985857\n",
            " -1.00329599 -0.84325145 -1.19901852  1.38001457  0.73176153  0.54796609\n",
            " -0.47335539  0.27600785 -0.35140245 -0.21224248 -0.74673686  1.07041595\n",
            "  0.57004099 -1.05448425 -1.16542841 -0.05455113 -0.03364153 -0.96604167\n",
            " -0.6700773   0.55969445 -1.30456925  1.22526678 -0.84222195 -0.84882746\n",
            " -0.70848226  0.65615605  0.70172942  0.56103098  0.22095616  0.24650549\n",
            " -1.67677098 -0.72559768 -0.98012523  1.23957701 -1.49077733  0.97416327\n",
            " -0.36737511  0.74358427 -0.70775011  1.61769307 -0.8669958  -0.8933254\n",
            " -0.85503957 -0.4624376  -1.22441942 -1.31118695 -1.71195437 -1.47682765\n",
            " -0.83184943  1.54673142  1.36455166 -0.76265357 -0.27847975 -0.76455388\n",
            "  1.37037696 -0.82373491  0.37023438  0.42733681  0.66166084  0.87254524\n",
            "  0.83324964  0.01231853 -0.5379114  -0.71223122  1.16955062 -0.62669439\n",
            " -0.46775684 -0.45741604 -0.76473062 -0.54535416  0.40544212 -1.57360389\n",
            "  0.53881847 -0.06727043 -0.56922405 -1.10929166 -2.43353006 -1.65817852\n",
            " -0.09811164 -1.06832871 -0.56608374 -1.79587667 -0.00908163 -1.48101341\n",
            "  2.16372745  0.21642619  0.64596884  0.48067187 -1.39965004  0.08316362\n",
            " -0.71220012  0.28422272  1.41184243 -0.68322003  1.15336404 -0.15015631\n",
            " -0.92058312  0.523155    0.84647012  1.13662491 -0.3046739   0.11842661\n",
            " -0.62449527  1.18767631 -0.18964649 -0.84218071  0.31918822 -0.75710779\n",
            " -0.8719613   0.05610616 -0.19516857  0.9700925   0.44760052  1.88143302\n",
            " -0.75729344  1.12428817 -0.46082637  0.7866115   0.56360521  0.10482618\n",
            "  0.07426746 -1.05826174 -3.48578029  1.3280953   0.64858165 -1.15824615\n",
            "  0.51629556 -0.00711922 -0.58606187 -1.03860561 -0.61495148  2.21360968\n",
            "  1.11662343 -0.65023868  0.36209464  0.52924585 -0.00562702  1.60694959\n",
            " -0.24996167  1.01259577  0.03375558 -0.29371379 -1.64051422 -1.35605079\n",
            " -0.34566352 -0.19654153  1.2495942  -0.45564188 -0.34016671 -0.29014725\n",
            "  0.59322169  0.35297853 -0.3916903  -0.67106969 -0.41246744 -0.25487707\n",
            "  0.92330239  0.73120554]\n",
            "Epoch=1269, Loss=0.9953, Weights=[-1.19762345  1.11066186  0.40389471  0.62175162 -1.75747176 -2.59956203\n",
            " -1.75621267  0.04704586  0.02252638  0.30100095  1.71814891 -0.7289629\n",
            " -0.30147909 -0.34600686  0.36057466 -0.27959273  0.44062318 -0.45075036\n",
            "  0.65571786 -1.05297262 -1.93310616 -0.01407646  1.18946403  0.87600527\n",
            " -0.95785015 -2.41778172  0.19009691 -0.55637656 -1.19846211 -0.90377196\n",
            " -0.98186979 -0.99099758  1.72575276 -0.83612733  1.60389999  0.13103946\n",
            " -1.02966138 -1.58828902 -0.6497698   0.73735439  0.217262    0.50884526\n",
            " -1.00296528 -0.84419201 -1.20080342  1.37921307  0.73187091  0.54841243\n",
            " -0.47298521  0.27581455 -0.35204608 -0.21223097 -0.74677556  1.06921397\n",
            "  0.56948564 -1.05365916 -1.16450545 -0.05452145 -0.03492402 -0.96753703\n",
            " -0.67040446  0.560515   -1.30474987  1.22343285 -0.84251287 -0.84668948\n",
            " -0.70723659  0.65430254  0.69968208  0.56157927  0.22202406  0.24590042\n",
            " -1.67776855 -0.72598176 -0.97999683  1.24110235 -1.49079203  0.97166116\n",
            " -0.36722262  0.74617847 -0.70721396  1.61563481 -0.86828915 -0.89210094\n",
            " -0.8545895  -0.46362403 -1.22412969 -1.30942484 -1.71068918 -1.47642534\n",
            " -0.83219313  1.54504012  1.363215   -0.76179814 -0.27820882 -0.76586993\n",
            "  1.37074753 -0.82251112  0.37020407  0.42765435  0.662051    0.8717605\n",
            "  0.83260865  0.01318258 -0.53696627 -0.71263843  1.16908497 -0.62662605\n",
            " -0.46697457 -0.45631512 -0.76480966 -0.54570646  0.40675349 -1.57233107\n",
            "  0.53709414 -0.06915418 -0.56887646 -1.10842484 -2.43317348 -1.65864205\n",
            " -0.0980653  -1.06732034 -0.56473139 -1.79542896 -0.01070884 -1.48285828\n",
            "  2.16294626  0.21596556  0.64565124  0.48076788 -1.39890672  0.08418473\n",
            " -0.7121227   0.28364515  1.41153234 -0.68429169  1.15163867 -0.15006991\n",
            " -0.91908412  0.52330262  0.84573626  1.13687995 -0.30423375  0.11700496\n",
            " -0.62645024  1.18803195 -0.18886362 -0.84273319  0.31833651 -0.75840491\n",
            " -0.87231798  0.05752561 -0.19482542  0.96931407  0.44871292  1.883209\n",
            " -0.75809947  1.12221386 -0.46202115  0.78504087  0.56223359  0.10509054\n",
            "  0.075024   -1.05698143 -3.48368726  1.32802718  0.64620233 -1.15830842\n",
            "  0.51718165 -0.00835229 -0.58726555 -1.03813234 -0.61388939  2.21342598\n",
            "  1.11613549 -0.65024055  0.36159411  0.52863057 -0.00634019  1.60629381\n",
            " -0.24991145  1.01145105  0.0314632  -0.29419584 -1.63951536 -1.35491306\n",
            " -0.34470667 -0.19673436  1.24942532 -0.45481575 -0.34100055 -0.29244273\n",
            "  0.59305806  0.3543395  -0.39188991 -0.67180195 -0.41212241 -0.25460388\n",
            "  0.92344155  0.73056345]\n",
            "Epoch=1279, Loss=0.9929, Weights=[-1.19894362  1.1095797   0.40310232  0.62129539 -1.75487663 -2.59706339\n",
            " -1.75715953  0.04705383  0.02447898  0.30100023  1.71554848 -0.73124625\n",
            " -0.30198827 -0.34566938  0.36187321 -0.27955966  0.43870318 -0.4504652\n",
            "  0.65680308 -1.05474094 -1.93517462 -0.01419017  1.18914044  0.8751601\n",
            " -0.95754705 -2.4175165   0.18970834 -0.55589093 -1.19725795 -0.90365893\n",
            " -0.98286745 -0.9909887   1.72606457 -0.83759589  1.60231649  0.13120574\n",
            " -1.02942893 -1.58832725 -0.64850922  0.73740716  0.21507478  0.50783207\n",
            " -1.00263696 -0.84513051 -1.2025836   1.37841195  0.73197784  0.54885928\n",
            " -0.47261403  0.27562013 -0.35269003 -0.21221786 -0.74681303  1.06801317\n",
            "  0.56893135 -1.05283583 -1.16358531 -0.0544923  -0.03620479 -0.96903096\n",
            " -0.67073225  0.56133392 -1.30493045  1.22160261 -0.84280094 -0.84455468\n",
            " -0.70599601  0.65245097  0.69764155  0.56212834  0.22308647  0.24529252\n",
            " -1.67876227 -0.72636191 -0.97987175  1.24262017 -1.49080664  0.96916665\n",
            " -0.3670697   0.74876384 -0.70668176  1.61358449 -0.86957754 -0.89088341\n",
            " -0.85414369 -0.46480623 -1.22383695 -1.30766375 -1.70942643 -1.47602556\n",
            " -0.83253526  1.54335469  1.36187692 -0.76095073 -0.27793762 -0.76718134\n",
            "  1.37111627 -0.82129074  0.37017525  0.42797254  0.66243946  0.87097793\n",
            "  0.8319694   0.01404285 -0.53602424 -0.71304336  1.168621   -0.62655912\n",
            " -0.46619385 -0.45521448 -0.76488567 -0.54605747  0.4080607  -1.57106164\n",
            "  0.53537081 -0.07103592 -0.56852852 -1.10755951 -2.43281726 -1.65910166\n",
            " -0.09801636 -1.06631549 -0.56338373 -1.79497918 -0.01233095 -1.48470392\n",
            "  2.16216361  0.21550719  0.64533476  0.4808625  -1.39816394  0.0852042\n",
            " -0.71204755  0.28307011  1.41122421 -0.68536499  1.14991338 -0.14998273\n",
            " -0.91758637  0.52344985  0.8450035   1.13713288 -0.30379644  0.11558763\n",
            " -0.62840076  1.18838474 -0.18808173 -0.84328346  0.3174853  -0.75970001\n",
            " -0.87267394  0.05894035 -0.19448284  0.96854047  0.44982187  1.88497556\n",
            " -0.75890482  1.12014707 -0.46321644  0.78346681  0.56086523  0.10535677\n",
            "  0.07577767 -1.05570173 -3.48159582  1.32795618  0.64382795 -1.1583645\n",
            "  0.51806388 -0.00959023 -0.58846443 -1.0376561  -0.61283343  2.21323962\n",
            "  1.11564994 -0.65024186  0.36109354  0.5280164  -0.00705395  1.60563562\n",
            " -0.24985987  1.01030893  0.02916961 -0.2946789  -1.63851404 -1.35377386\n",
            " -0.3437519  -0.1969282   1.24925709 -0.45399001 -0.3418342  -0.29473625\n",
            "  0.59289459  0.35569873 -0.39208747 -0.67253164 -0.41177953 -0.25433279\n",
            "  0.92358155  0.72992251]\n",
            "Epoch=1289, Loss=0.9906, Weights=[-1.200265    1.1084993   0.40231299  0.62083683 -1.75228765 -2.59456412\n",
            " -1.75810193  0.04705911  0.02642714  0.30100247  1.71295228 -0.73352846\n",
            " -0.30249647 -0.34533341  0.36316803 -0.27952591  0.43678573 -0.45018344\n",
            "  0.65788569 -1.05650439 -1.9372404  -0.01430668  1.18881664  0.87431734\n",
            " -0.95724588 -2.4172536   0.18932279 -0.55540582 -1.19605764 -0.90354378\n",
            " -0.98386096 -0.99098067  1.72637461 -0.83906223  1.6007352   0.13137249\n",
            " -1.02919626 -1.5883674  -0.64725285  0.73746005  0.21289196  0.506819\n",
            " -1.00231102 -0.84606694 -1.20435909  1.37761122  0.73208235  0.54930662\n",
            " -0.47224188  0.27542461 -0.35333429 -0.21220316 -0.7468493   1.06681356\n",
            "  0.5683781  -1.05201428 -1.16266799 -0.0544637  -0.03748385 -0.97052344\n",
            " -0.67106063  0.56215122 -1.305111    1.21977607 -0.84308616 -0.84242306\n",
            " -0.70476051  0.65060133  0.69560781  0.56267818  0.22414343  0.2446818\n",
            " -1.67975217 -0.72673816 -0.97974993  1.24413048 -1.49082116  0.96667976\n",
            " -0.36691638  0.75134033 -0.70615351  1.6115421  -0.870861   -0.88967279\n",
            " -0.85370212 -0.46598421 -1.22354124 -1.30590366 -1.70816612 -1.47562834\n",
            " -0.83287583  1.54167515  1.3605374  -0.76011135 -0.27766613 -0.76848811\n",
            "  1.37148318 -0.8200738   0.37014791  0.42829138  0.66282622  0.87019753\n",
            "  0.83133187  0.01489932 -0.53508532 -0.71344599  1.16815868 -0.62649359\n",
            " -0.46541468 -0.45411412 -0.76495865 -0.54640719  0.40936374 -1.56979559\n",
            "  0.53364848 -0.07291564 -0.56818022 -1.10669568 -2.43246142 -1.65955736\n",
            " -0.09796483 -1.06531414 -0.56204076 -1.79452736 -0.01394796 -1.48655031\n",
            "  2.16137953  0.21505106  0.6450194   0.48095575 -1.39742173  0.086222\n",
            " -0.71197468  0.28249759  1.41091803 -0.6864399   1.14818819 -0.1498948\n",
            " -0.91608989  0.52359671  0.84427181  1.13738371 -0.30336197  0.11417464\n",
            " -0.63034686  1.18873469 -0.18730082 -0.84383152  0.31663457 -0.76099308\n",
            " -0.87302918  0.06035038 -0.19414082  0.9677717   0.45092736  1.88673269\n",
            " -0.75970951  1.11808778 -0.46441224  0.78188934  0.5595001   0.10562487\n",
            "  0.07652847 -1.05442264 -3.47950598  1.32788228  0.64145853 -1.15841438\n",
            "  0.51894225 -0.01083304 -0.58965849 -1.0371769  -0.61178363  2.21305059\n",
            "  1.1151668  -0.65024259  0.36059293  0.52740337 -0.00776832  1.60497502\n",
            " -0.24980692  1.00916939  0.0268748  -0.29516295 -1.63751025 -1.35263319\n",
            " -0.34279922 -0.19712304  1.24908953 -0.45316465 -0.34266765 -0.29702781\n",
            "  0.59273129  0.35705624 -0.39228298 -0.67325877 -0.41143879 -0.2540638\n",
            "  0.92372239  0.72928272]\n",
            "Epoch=1299, Loss=0.9882, Weights=[-1.20158761  1.10742066  0.40152674  0.62037597 -1.74970484 -2.59206429\n",
            " -1.75903985  0.0470617   0.02837083  0.30100765  1.71036032 -0.73580953\n",
            " -0.30300369 -0.34499893  0.36445907 -0.27949151  0.43487085 -0.44990507\n",
            "  0.65896565 -1.05826298 -1.93930346 -0.014426    1.18849259  0.87347699\n",
            " -0.95694665 -2.41699303  0.18894025 -0.55492125 -1.19486119 -0.90342649\n",
            " -0.9848503  -0.99097348  1.72668288 -0.84052636  1.59915612  0.13153971\n",
            " -1.02896337 -1.58840945 -0.64600068  0.73751305  0.21071354  0.50580606\n",
            " -1.00198746 -0.84700135 -1.20612991  1.37681091  0.73218447  0.54975441\n",
            " -0.47186876  0.27522801 -0.35397884 -0.21218689 -0.74688436  1.06561515\n",
            "  0.56782592 -1.05119449 -1.16175347 -0.05443564 -0.0387612  -0.97201446\n",
            " -0.6713896   0.56296686 -1.30529154  1.21795326 -0.84336857 -0.84029467\n",
            " -0.70353007  0.64875367  0.69358087  0.56322878  0.22519495  0.24406828\n",
            " -1.6807383  -0.72711051 -0.97963135  1.24563328 -1.4908356   0.9642005\n",
            " -0.36676267  0.75390793 -0.70562919  1.60950765 -0.87213955 -0.88846908\n",
            " -0.85326476 -0.46715798 -1.22324257 -1.30414457 -1.70690824 -1.47523369\n",
            " -0.83321483  1.5400015   1.35919645 -0.75928    -0.27739435 -0.76979024\n",
            "  1.37184823 -0.8188603   0.37012204  0.42861089  0.6632113   0.86941931\n",
            "  0.83069605  0.015752   -0.53414948 -0.71384634  1.16769802 -0.62642947\n",
            " -0.46463706 -0.45301406 -0.76502861 -0.54675562  0.41066262 -1.56853293\n",
            "  0.53192715 -0.07479334 -0.56783157 -1.10583333 -2.43210593 -1.66000914\n",
            " -0.09791072 -1.06431628 -0.56070245 -1.79407352 -0.01555989 -1.48839742\n",
            "  2.16059403  0.21459714  0.64470514  0.48104765 -1.39668008  0.08723814\n",
            " -0.71190407  0.28192759  1.41061379 -0.68751637  1.14646313 -0.14980614\n",
            " -0.91459467  0.52374321  0.84354119  1.1376324  -0.30293033  0.11276598\n",
            " -0.63228855  1.18908181 -0.18652089 -0.8443774   0.31578433 -0.76228413\n",
            " -0.87338371  0.06175571 -0.19379932  0.96700775  0.45202936  1.88848041\n",
            " -0.76051351  1.116036   -0.46560852  0.78030847  0.55813822  0.10589483\n",
            "  0.07727638 -1.05314416 -3.47741777  1.32780546  0.63909407 -1.15845807\n",
            "  0.51981673 -0.0120807  -0.59084773 -1.03669474 -0.61073999  2.21285891\n",
            "  1.11468606 -0.65024273  0.36009231  0.52679148 -0.00848328  1.60431203\n",
            " -0.24975261  1.00803241  0.02457877 -0.29564799 -1.63650398 -1.35149107\n",
            " -0.34184861 -0.19731886  1.24892261 -0.45233967 -0.34350091 -0.29931741\n",
            "  0.59256815  0.35841204 -0.39247646 -0.67398333 -0.41110017 -0.2537969\n",
            "  0.92386405  0.72864406]\n",
            "Epoch=1309, Loss=0.9859, Weights=[-1.20291145  1.10634377  0.40074357  0.61991284 -1.74712821 -2.58956394\n",
            " -1.75997332  0.04706165  0.03031006  0.30101577  1.70777264 -0.73808943\n",
            " -0.30350991 -0.34466591  0.36574632 -0.27945648  0.43295858 -0.44963008\n",
            "  0.66004291 -1.06001669 -1.94136377 -0.01454811  1.18816829  0.87263903\n",
            " -0.95664936 -2.41673484  0.18856072 -0.55443722 -1.19366861 -0.90330706\n",
            " -0.98583547 -0.99096711  1.72698939 -0.84198829  1.59757925  0.13170739\n",
            " -1.02873025 -1.58845339 -0.64475271  0.73756616  0.20853952  0.50479325\n",
            " -1.00166628 -0.84793375 -1.20789611  1.37601101  0.73228422  0.55020264\n",
            " -0.47149471  0.27503034 -0.35462368 -0.21216906 -0.74691823  1.06441795\n",
            "  0.56727481 -1.05037647 -1.16084176 -0.05440813 -0.04003687 -0.973504\n",
            " -0.67171914  0.56378085 -1.30547208  1.21613418 -0.84364816 -0.83816952\n",
            " -0.70230469  0.64690799  0.69156071  0.56378013  0.22624108  0.24345199\n",
            " -1.68172068 -0.72747897 -0.97951599  1.24712859 -1.49084997  0.96172887\n",
            " -0.36660856  0.75646662 -0.70510878  1.60748113 -0.87341322 -0.88727224\n",
            " -0.85283156 -0.46832754 -1.22294096 -1.30238646 -1.7056528  -1.47484164\n",
            " -0.83355224  1.53833377  1.35785406 -0.75845667 -0.27712226 -0.77108773\n",
            "  1.37221141 -0.81765026  0.37009765  0.42893106  0.6635947   0.86864326\n",
            "  0.83006195  0.01660089 -0.53321671 -0.7142444   1.16723898 -0.62636673\n",
            " -0.46386096 -0.45191429 -0.76509557 -0.54710278  0.41195734 -1.56727365\n",
            "  0.53020682 -0.07666901 -0.56748254 -1.10497247 -2.43175081 -1.66045702\n",
            " -0.09785403 -1.06332191 -0.55936879 -1.79361767 -0.01716677 -1.49024522\n",
            "  2.15980712  0.21414541  0.64439198  0.48113821 -1.39593901  0.0882526\n",
            " -0.71183571  0.2813601   1.41031148 -0.68859436  1.14473825 -0.14971679\n",
            " -0.91310073  0.52388937  0.84281162  1.13787896 -0.30250149  0.11136164\n",
            " -0.63422585  1.18942609 -0.18574196 -0.84492112  0.31493459 -0.76357314\n",
            " -0.87373754  0.06315634 -0.19345833  0.9662486   0.45312785  1.8902187\n",
            " -0.76131684  1.11399175 -0.46680527  0.77872422  0.55677957  0.10616664\n",
            "  0.07802142 -1.05186633 -3.47533121  1.32772573  0.6367346  -1.15849553\n",
            "  0.52068731 -0.01333322 -0.59203213 -1.03620964 -0.60970251  2.21266457\n",
            "  1.11420772 -0.65024228  0.35959167  0.52618074 -0.00919886  1.60364665\n",
            " -0.24969692  1.00689797  0.02228149 -0.29613399 -1.63549523 -1.3503475\n",
            " -0.34090007 -0.19751567  1.24875636 -0.45151509 -0.34433399 -0.30160506\n",
            "  0.59240518  0.35976612 -0.39266791 -0.67470532 -0.41076364 -0.25353209\n",
            "  0.92400651  0.72800655]\n",
            "Epoch=1319, Loss=0.9835, Weights=[-1.20423652  1.10526864  0.39996348  0.61944748 -1.74455777 -2.58706313\n",
            " -1.76090233  0.04705898  0.03224482  0.30102683  1.70518924 -0.74036818\n",
            " -0.3040151  -0.34433433  0.36702974 -0.27942084  0.43104897 -0.44935844\n",
            "  0.66111745 -1.06176554 -1.9434213  -0.01467303  1.18784371  0.87180349\n",
            " -0.95635403 -2.41647903  0.18818418 -0.5539537  -1.19247991 -0.90318551\n",
            " -0.98681644 -0.99096156  1.72729414 -0.843448    1.59600457  0.13187552\n",
            " -1.02849688 -1.58849919 -0.64350894  0.73761939  0.2063699   0.50378059\n",
            " -1.00134748 -0.84886417 -1.2096577   1.37521155  0.73238161  0.55065129\n",
            " -0.47111974  0.27483164 -0.35526879 -0.21214969 -0.74695091  1.06322197\n",
            "  0.56672476 -1.04956021 -1.15993284 -0.05438117 -0.04131085 -0.97499206\n",
            " -0.67204922  0.56459316 -1.30565262  1.21431884 -0.84392496 -0.83604763\n",
            " -0.70108436  0.64506431  0.68954733  0.5643322   0.22728183  0.24283293\n",
            " -1.68269938 -0.72784357 -0.9794038   1.24861641 -1.49086428  0.95926491\n",
            " -0.36645407  0.75901638 -0.70459228  1.60546253 -0.87468204 -0.88608227\n",
            " -0.8524025  -0.46949292 -1.22263643 -1.30062933 -1.70439981 -1.47445221\n",
            " -0.83388808  1.53667197  1.35651023 -0.75764137 -0.27684985 -0.77238058\n",
            "  1.3725727  -0.81644367  0.37007472  0.4292519   0.66397645  0.86786939\n",
            "  0.82942953  0.01744598 -0.532287   -0.71464018  1.16678157 -0.62630537\n",
            " -0.46308638 -0.45081482 -0.76515954 -0.54744866  0.41324792 -1.56601776\n",
            "  0.52848747 -0.07854266 -0.56713313 -1.10411308 -2.43139605 -1.66090101\n",
            " -0.09779477 -1.06233101 -0.55803978 -1.79315984 -0.0187686  -1.49209368\n",
            "  2.15901884  0.21369585  0.64407989  0.48122745 -1.39519853  0.08926535\n",
            " -0.7117696   0.2807951   1.41001109 -0.68967385  1.14301355 -0.14962676\n",
            " -0.91160807  0.5240352   0.84208308  1.13812336 -0.30207544  0.10996162\n",
            " -0.63615877  1.18976754 -0.18496404 -0.84546267  0.31408534 -0.7648601\n",
            " -0.87409067  0.06455229 -0.19311784  0.96549427  0.45422282  1.89194757\n",
            " -0.76211948  1.111955   -0.46800247  0.7771366   0.55542416  0.10644031\n",
            "  0.07876355 -1.05058914 -3.47324632  1.32764306  0.63438012 -1.15852677\n",
            "  0.521554   -0.01459059 -0.59321167 -1.03572159 -0.6086712   2.21246757\n",
            "  1.1137318  -0.65024124  0.35909105  0.52557115 -0.00991506  1.60297888\n",
            " -0.24963987  1.00576605  0.01998295 -0.29662097 -1.63448401 -1.34920249\n",
            " -0.3399536  -0.19771343  1.24859076 -0.45069091 -0.34516688 -0.30389076\n",
            "  0.59224239  0.36111851 -0.39285733 -0.67542474 -0.41042919 -0.25326936\n",
            "  0.92414975  0.72737016]\n",
            "Epoch=1329, Loss=0.9812, Weights=[-1.20556283  1.10419527  0.39918646  0.61897991 -1.74199354 -2.58456194\n",
            " -1.76182689  0.04705373  0.03417511  0.3010408   1.70261014 -0.74264575\n",
            " -0.30451925 -0.34400417  0.36830931 -0.27938463  0.42914204 -0.44909016\n",
            "  0.66218922 -1.06350952 -1.945476   -0.01480074  1.18751883  0.87097034\n",
            " -0.95606067 -2.41622564  0.18781065 -0.55347072 -1.19129508 -0.90306182\n",
            " -0.98779321 -0.99095682  1.72759712 -0.84490552  1.59443207  0.1320441\n",
            " -1.02826326 -1.58854684 -0.64226934  0.73767273  0.20420469  0.50276806\n",
            " -1.00103104 -0.84979264 -1.21141472  1.37441255  0.73247668  0.55110034\n",
            " -0.47074386  0.2746319  -0.35591416 -0.2121288  -0.74698243  1.06202722\n",
            "  0.5661758  -1.04874573 -1.15902671 -0.05435476 -0.04258316 -0.97647862\n",
            " -0.67237984  0.56540378 -1.30583319  1.21250726 -0.84419898 -0.83392903\n",
            " -0.69986905  0.64322265  0.68754072  0.56488499  0.22831724  0.24221115\n",
            " -1.68367441 -0.72820432 -0.97929475  1.25009675 -1.49087853  0.9568086\n",
            " -0.3662992   0.76155717 -0.70407967  1.60345186 -0.87594603 -0.88489915\n",
            " -0.85197754 -0.47065411 -1.222329   -1.29887316 -1.70314925 -1.47406541\n",
            " -0.83422234  1.53501611  1.35516497 -0.75683411 -0.27657713 -0.77366879\n",
            "  1.3729321  -0.81524057  0.37005327  0.4295734   0.66435655  0.8670977\n",
            "  0.82879881  0.01828728 -0.53136034 -0.71503366  1.16632576 -0.62624539\n",
            " -0.46231331 -0.44971567 -0.76522053 -0.54779328  0.41453435 -1.56476526\n",
            "  0.52676911 -0.08041426 -0.56678333 -1.10325516 -2.43104166 -1.6613411\n",
            " -0.09773296 -1.06134357 -0.55671539 -1.79270004 -0.02036541 -1.49394279\n",
            "  2.15822918  0.21324844  0.64376889  0.48131537 -1.39445864  0.09027639\n",
            " -0.71170572  0.2802326   1.40971261 -0.69075479  1.14128909 -0.14953607\n",
            " -0.91011669  0.52418072  0.84135556  1.1383656  -0.30165216  0.10856592\n",
            " -0.63808732  1.19010617 -0.18418712 -0.84600208  0.31323659 -0.76614503\n",
            " -0.8744431   0.06594355 -0.19277783  0.96474473  0.45531425  1.89366702\n",
            " -0.76292143  1.10992578 -0.4692001   0.77554564  0.55407198  0.10671581\n",
            "  0.07950278 -1.04931261 -3.4711631   1.32755745  0.63203066 -1.15855178\n",
            "  0.52241677 -0.01585281 -0.59438634 -1.03523061 -0.60764608  2.21226792\n",
            "  1.11325829 -0.65023959  0.35859045  0.52496272 -0.01063188  1.60230873\n",
            " -0.24958145  1.00463663  0.01768315 -0.29710891 -1.63347029 -1.34805605\n",
            " -0.33900918 -0.19791215  1.2484258  -0.44986713 -0.34599958 -0.3061745\n",
            "  0.59207977  0.36246921 -0.39304474 -0.67614159 -0.4100968  -0.25300871\n",
            "  0.92429375  0.72673491]\n",
            "Epoch=1339, Loss=0.9789, Weights=[-1.20689037  1.10312366  0.39841253  0.61851017 -1.73943552 -2.58206041\n",
            " -1.762747    0.04704591  0.03610092  0.30105769  1.70003537 -0.74492214\n",
            " -0.30502235 -0.3436754   0.369585   -0.27934788  0.42723783 -0.44882521\n",
            "  0.66325818 -1.06524865 -1.94752784 -0.01493125  1.18719362  0.8701396\n",
            " -0.95576929 -2.41597469  0.1874401  -0.55298826 -1.19011413 -0.902936\n",
            " -0.98876575 -0.99095286  1.72789834 -0.84636082  1.59286177  0.13221312\n",
            " -1.02802936 -1.58859632 -0.64103393  0.73772619  0.20204389  0.50175569\n",
            " -1.00071697 -0.85071916 -1.21316719  1.37361402  0.73256945  0.55154978\n",
            " -0.4703671   0.27443116 -0.35655978 -0.21210638 -0.74701278  1.06083371\n",
            "  0.56562791 -1.04793302 -1.15812334 -0.0543289  -0.0438538  -0.97796367\n",
            " -0.67271097  0.5662127  -1.3060138   1.21069945 -0.84447023 -0.83181373\n",
            " -0.69865875  0.64138303  0.68554086  0.56543847  0.22934734  0.24158664\n",
            " -1.68464581 -0.72856123 -0.97918882  1.25156964 -1.49089275  0.95435997\n",
            " -0.36614397  0.76408899 -0.70357094  1.6014491  -0.87720522 -0.88372285\n",
            " -0.85155665 -0.47181114 -1.22201869 -1.29711794 -1.70190113 -1.47368126\n",
            " -0.83455501  1.53336622  1.35381826 -0.75603487 -0.27630408 -0.77495237\n",
            "  1.37328958 -0.81404094  0.37003328  0.42989559  0.66473502  0.86632817\n",
            "  0.82816976  0.01912479 -0.53043671 -0.71542485  1.16587154 -0.62618678\n",
            " -0.46154173 -0.44861682 -0.76527854 -0.54813664  0.41581664 -1.56351613\n",
            "  0.52505173 -0.08228383 -0.56643313 -1.1023987  -2.43068762 -1.66177732\n",
            " -0.0976686  -1.06035959 -0.55539562 -1.7922383  -0.02195721 -1.49579251\n",
            "  2.15743818  0.21280315  0.64345894  0.481402   -1.39371936  0.09128569\n",
            " -0.71164407  0.27967259  1.40941602 -0.69183714  1.13956487 -0.14944476\n",
            " -0.90862662  0.52432595  0.84062904  1.13860565 -0.30123165  0.10717453\n",
            " -0.64001153  1.19044198 -0.18341121 -0.84653936  0.31238835 -0.76742792\n",
            " -0.87479485  0.06733015 -0.19243827  0.96399998  0.45640212  1.89537705\n",
            " -0.76372269  1.10790409 -0.47039816  0.77395134  0.55272302  0.10699315\n",
            "  0.0802391  -1.04803676 -3.46908158  1.32746889  0.62968622 -1.15857054\n",
            "  0.52327563 -0.01711986 -0.59555613 -1.03473669 -0.60662715  2.21206563\n",
            "  1.1127872  -0.65023733  0.35808989  0.52435547 -0.01134933  1.6016362\n",
            " -0.24952165  1.00350969  0.01538206 -0.2975978  -1.63245408 -1.34690819\n",
            " -0.33806681 -0.1981118   1.24826151 -0.44904375 -0.34683211 -0.3084563\n",
            "  0.59191734  0.36381822 -0.39323014 -0.67685587 -0.40976645 -0.25275013\n",
            "  0.92443851  0.72610077]\n",
            "Epoch=1349, Loss=0.9766, Weights=[-1.20821916  1.1020538   0.39764167  0.61803828 -1.73688373 -2.57955861\n",
            " -1.76366268  0.04703557  0.03802224  0.30107748  1.69746494 -0.74719734\n",
            " -0.30552436 -0.34334799  0.37085678 -0.2793106   0.42533637 -0.44856358\n",
            "  0.66432429 -1.06698292 -1.94957679 -0.01506455  1.18686808  0.86931126\n",
            " -0.9554799  -2.41572621  0.18707254 -0.55250631 -1.18893707 -0.90280805\n",
            " -0.98973406 -0.99094969  1.72819779 -0.84781393  1.59129363  0.13238257\n",
            " -1.0277952  -1.58864761 -0.63980269  0.73777977  0.1998875   0.50074347\n",
            " -1.00040526 -0.85164378 -1.21491515  1.37281596  0.73265993  0.55199957\n",
            " -0.46998947  0.27422942 -0.35720565 -0.21208247 -0.74704198  1.05964144\n",
            "  0.56508111 -1.04712208 -1.15722275 -0.05430361 -0.04512278 -0.97944719\n",
            " -0.6730426   0.56701992 -1.30619444  1.20889543 -0.84473874 -0.82970176\n",
            " -0.69745346  0.63954547  0.68354776  0.56599262  0.23037216  0.24095944\n",
            " -1.68561364 -0.72891432 -0.97908597  1.25303507 -1.49090694  0.95191901\n",
            " -0.36598838  0.76661182 -0.70306607  1.59945425 -0.87845963 -0.88255337\n",
            " -0.85113979 -0.47296401 -1.22170552 -1.29536366 -1.70065546 -1.47329979\n",
            " -0.83488608  1.5317223   1.35247012 -0.75524366 -0.2760307  -0.77623131\n",
            "  1.37364514 -0.81284481  0.37001475  0.43021845  0.66511186  0.86556083\n",
            "  0.82754238  0.0199585  -0.52951611 -0.71581375  1.16541889 -0.62612953\n",
            " -0.46077163 -0.4475183  -0.7653336  -0.54847875  0.41709481 -1.56227039\n",
            "  0.52333533 -0.08415135 -0.56608253 -1.1015437  -2.43033394 -1.66220966\n",
            " -0.0976017  -1.05937905 -0.55408046 -1.79177464 -0.02354402 -1.49764282\n",
            "  2.15664585  0.21235996  0.64315004  0.48148734 -1.39298068  0.09229326\n",
            " -0.71158464  0.27911504  1.40912132 -0.69292088  1.13784094 -0.14935284\n",
            " -0.90713785  0.5244709   0.83990351  1.13884351 -0.30081387  0.10578747\n",
            " -0.64193141  1.19077496 -0.18263633 -0.84707452  0.31154061 -0.76870876\n",
            " -0.87514591  0.06871208 -0.19209916  0.96326002  0.45748641  1.89707765\n",
            " -0.76452326  1.10588991 -0.47159662  0.77235372  0.55137729  0.10727233\n",
            "  0.0809725  -1.0467616  -3.46700178  1.32737737  0.62734681 -1.15858305\n",
            "  0.52413056 -0.01839175 -0.59672101 -1.03423985 -0.60561442  2.21186069\n",
            "  1.11231852 -0.65023447  0.35758938  0.5237494  -0.0120674   1.6009613\n",
            " -0.24946049  1.00238521  0.01307968 -0.29808763 -1.63143538 -1.34575892\n",
            " -0.33712648 -0.19831239  1.24809785 -0.44822079 -0.34766445 -0.31073615\n",
            "  0.59175509  0.36516555 -0.39341353 -0.67756758 -0.40943811 -0.25249362\n",
            "  0.924584    0.72546776]\n",
            "Epoch=1359, Loss=0.9743, Weights=[-1.20954918  1.10098569  0.39687389  0.61756429 -1.73433819 -2.5770566\n",
            " -1.76457392  0.04702274  0.03993907  0.30110017  1.69489888 -0.74947135\n",
            " -0.30602528 -0.34302193  0.37212462 -0.27927284  0.42343771 -0.44830524\n",
            "  0.66538751 -1.06871234 -1.9516228  -0.01520065  1.18654218  0.86848533\n",
            " -0.9551925  -2.41548022  0.18670795 -0.55202489 -1.18776391 -0.90267796\n",
            " -0.99069813 -0.9909473   1.72849547 -0.84926483  1.58972767  0.13255246\n",
            " -1.02756074 -1.58870069 -0.63857561  0.73783346  0.19773551  0.49973141\n",
            " -1.0000959  -0.85256651 -1.21665863  1.37201841  0.73274815  0.5524497\n",
            " -0.469611    0.27402672 -0.35785173 -0.21205707 -0.74707004  1.05845044\n",
            "  0.5645354  -1.04631292 -1.15632492 -0.05427888 -0.04639011 -0.98092917\n",
            " -0.67337472  0.5678254  -1.30637515  1.20709519 -0.84500451 -0.82759315\n",
            " -0.69625316  0.63770999  0.68156139  0.56654744  0.23139172  0.24032957\n",
            " -1.68657792 -0.7292636  -0.97898618  1.25449306 -1.4909211   0.94948575\n",
            " -0.36583244  0.76912563 -0.70256506  1.5974673  -0.87970929 -0.88139067\n",
            " -0.85072693 -0.47411272 -1.22138951 -1.29361032 -1.69941222 -1.47292101\n",
            " -0.83521557  1.53008436  1.35112054 -0.75446047 -0.27575698 -0.77750562\n",
            "  1.37399877 -0.81165219  0.36999767  0.43054199  0.66548709  0.86479566\n",
            "  0.82691665  0.02078842 -0.52859851 -0.71620036  1.16496781 -0.62607364\n",
            " -0.46000301 -0.44642009 -0.76538572 -0.54881962  0.41836884 -1.56102803\n",
            "  0.52161989 -0.08601683 -0.56573152 -1.10069015 -2.42998061 -1.66263814\n",
            " -0.09753227 -1.05840195 -0.55276989 -1.79130908 -0.02512587 -1.49949369\n",
            "  2.15585221  0.21191886  0.64284218  0.48157142 -1.39224262  0.09329906\n",
            " -0.71152743  0.27855997  1.40882851 -0.69400595  1.13611731 -0.14926035\n",
            " -0.90565038  0.52461559  0.83917895  1.13907917 -0.30039881  0.10440471\n",
            " -0.64384698  1.19110513 -0.18186248 -0.84760758  0.31069339 -0.76998756\n",
            " -0.87549628  0.07008937 -0.19176046  0.96252482  0.45856711  1.89876883\n",
            " -0.76532313  1.10388326 -0.47279547  0.77075279  0.55003478  0.10755332\n",
            "  0.08170297 -1.04548714 -3.46492371  1.32728287  0.62501246 -1.1585893\n",
            "  0.52498155 -0.01966847 -0.59788099 -1.0337401  -0.6046079   2.21165311\n",
            "  1.11185228 -0.65023098  0.35708893  0.52314451 -0.01278612  1.60028403\n",
            " -0.24939796  1.00126318  0.010776   -0.29857839 -1.63041419 -1.34460824\n",
            " -0.3361882  -0.19851389  1.24793485 -0.44739825 -0.34849662 -0.31301405\n",
            "  0.59159302  0.36651121 -0.39359493 -0.67827671 -0.40911177 -0.25223918\n",
            "  0.9247302   0.72483586]\n",
            "Epoch=1369, Loss=0.9720, Weights=[-1.21088044  1.09991934  0.39610919  0.61708821 -1.73179891 -2.57455444\n",
            " -1.76548074  0.04700743  0.04185141  0.30112575  1.69233719 -0.75174415\n",
            " -0.3065251  -0.34269719  0.37338849 -0.27923461  0.42154188 -0.4480502\n",
            "  0.66644781 -1.0704369  -1.95366584 -0.01533953  1.18621589  0.86766179\n",
            " -0.9549071  -2.41523674  0.18634633 -0.55154398 -1.18659465 -0.90254574\n",
            " -0.99165793 -0.99094566  1.7287914  -0.85071354  1.58816388  0.13272276\n",
            " -1.027326   -1.58875555 -0.63735269  0.73788728  0.19558794  0.49871952\n",
            " -0.99978889 -0.85348737 -1.21839765  1.37122136  0.73283413  0.55290015\n",
            " -0.46923169  0.27382307 -0.35849804 -0.21203021 -0.74709696  1.05726071\n",
            "  0.56399078 -1.04550553 -1.15542983 -0.05425471 -0.0476558  -0.9824096\n",
            " -0.6737073   0.56862915 -1.30655592  1.20529875 -0.84526756 -0.8254879\n",
            " -0.69505782  0.63587661  0.67958176  0.5671029   0.23240606  0.23969705\n",
            " -1.68753869 -0.72960909 -0.9788894   1.25594362 -1.49093524  0.94706018\n",
            " -0.36567616  0.77163041 -0.70206788  1.59548825 -0.88095424 -0.88023474\n",
            " -0.85031804 -0.4752573  -1.22107069 -1.2918579  -1.69817143 -1.47254493\n",
            " -0.83554345  1.52845242  1.34976952 -0.75368531 -0.27548291 -0.77877529\n",
            "  1.37435044 -0.81046309  0.36998205  0.43086622  0.66586073  0.86403266\n",
            "  0.82629257  0.02161454 -0.52768391 -0.71658468  1.16451827 -0.6260191\n",
            " -0.45923585 -0.44532221 -0.76543489 -0.54915925  0.41963876 -1.55978905\n",
            "  0.51990543 -0.08788024 -0.56538008 -1.09983805 -2.42962764 -1.66306275\n",
            " -0.09746033 -1.05742827 -0.5514639  -1.79084164 -0.02670275 -1.5013451\n",
            "  2.15505728  0.2114798   0.64253534  0.48165424 -1.39150519  0.09430309\n",
            " -0.71147242  0.27800736  1.40853756 -0.69509233  1.13439402 -0.14916729\n",
            " -0.90416424  0.52476003  0.83845536  1.13931262 -0.29998647  0.10302626\n",
            " -0.64575825  1.19143248 -0.18108967 -0.84813854  0.30984668 -0.7712643\n",
            " -0.87584599  0.07146202 -0.19142218  0.96179439  0.45964419  1.9004506\n",
            " -0.76612231  1.10188413 -0.47399469  0.76914857  0.54869549  0.10783614\n",
            "  0.0824305  -1.04421341 -3.46284739  1.3271854   0.62268316 -1.15858928\n",
            "  0.5258286  -0.02095001 -0.59903604 -1.03323743 -0.60360759  2.21144289\n",
            "  1.11138846 -0.65022688  0.35658855  0.52254082 -0.01350547  1.5996044\n",
            " -0.24933405  1.00014356  0.00847099 -0.29907009 -1.62939049 -1.34345616\n",
            " -0.33525195 -0.1987163   1.24777249 -0.44657613 -0.34932861 -0.31529001\n",
            "  0.59143115  0.36785521 -0.39377434 -0.67898328 -0.4087874  -0.25198681\n",
            "  0.9248771   0.72420507]\n",
            "Epoch=1379, Loss=0.9697, Weights=[-1.21221295  1.09885474  0.39534758  0.6166101  -1.7292659  -2.5720522\n",
            " -1.76638314  0.04698969  0.04375924  0.30115422  1.68977991 -0.75401574\n",
            " -0.30702379 -0.34237375  0.37464837 -0.27919595  0.41964891 -0.44779842\n",
            "  0.66750515 -1.07215662 -1.95570587 -0.01548121  1.1858892   0.86684066\n",
            " -0.95462372 -2.41499581  0.18598767 -0.55106358 -1.18542929 -0.90241139\n",
            " -0.99261346 -0.99094478  1.72908556 -0.85216005  1.58660224  0.13289348\n",
            " -1.02709094 -1.58881218 -0.63613392  0.73794121  0.19344478  0.49770779\n",
            " -0.99948423 -0.85440639 -1.22013225  1.37042484  0.73291789  0.5533509\n",
            " -0.46885157  0.27361848 -0.35914455 -0.21200188 -0.74712276  1.05607226\n",
            "  0.56344726 -1.04469992 -1.15453749 -0.0542311  -0.04891985 -0.98388848\n",
            " -0.67404032  0.56943116 -1.30673677  1.20350614 -0.84552791 -0.82338605\n",
            " -0.69386744  0.63404535  0.67760884  0.56765899  0.23341521  0.23906189\n",
            " -1.68849599 -0.72995081 -0.9787956   1.25738678 -1.49094938  0.9446423\n",
            " -0.36551955  0.77412614 -0.70157453  1.59351708 -0.88219449 -0.87908556\n",
            " -0.84991308 -0.47639776 -1.22074906 -1.29010639 -1.69693308 -1.47217159\n",
            " -0.83586974  1.5268265   1.34841707 -0.75291817 -0.27520849 -0.78004034\n",
            "  1.37470015 -0.80927751  0.36996787  0.43119114  0.66623278  0.86327183\n",
            "  0.82567012  0.02243687 -0.52677229 -0.71696671  1.16407026 -0.6259659\n",
            " -0.45847014 -0.44422466 -0.76548115 -0.54949766  0.42090456 -1.55855345\n",
            "  0.51819193 -0.08974161 -0.56502821 -1.09898738 -2.42927502 -1.66348352\n",
            " -0.09738588 -1.05645801 -0.55016248 -1.79037234 -0.02827471 -1.50319702\n",
            "  2.15426108  0.21104278  0.64222953  0.48173583 -1.3907684   0.09530532\n",
            " -0.7114196   0.27745721  1.40824848 -0.69617997  1.1326711  -0.1490737\n",
            " -0.90267941  0.52490423  0.8377327   1.13954383 -0.2995768   0.10165213\n",
            " -0.64766524  1.19175701 -0.1803179  -0.84866742  0.3090005  -0.77253901\n",
            " -0.87619502  0.07283004 -0.19108428  0.96106871  0.46071765  1.90212295\n",
            " -0.76692078  1.09989254 -0.47519426  0.76754108  0.54735942  0.10812077\n",
            "  0.08315509 -1.0429404  -3.46077283  1.32708493  0.62035893 -1.15858298\n",
            "  0.52667171 -0.02223637 -0.60018616 -1.03273185 -0.60261351  2.21123003\n",
            "  1.11092707 -0.65022214  0.35608827  0.52193834 -0.01422546  1.59892242\n",
            " -0.24926878  0.99902634  0.00616466 -0.2995627  -1.62836429 -1.3423027\n",
            " -0.33431772 -0.1989196   1.24761078 -0.44575444 -0.35016042 -0.31756402\n",
            "  0.59126947  0.36919755 -0.39395177 -0.67968728 -0.40846498 -0.25173649\n",
            "  0.92502468  0.72357538]\n",
            "Epoch=1389, Loss=0.9674, Weights=[-1.21354669  1.09779189  0.39458904  0.61612997 -1.72673918 -2.56954993\n",
            " -1.76728112  0.04696955  0.04566256  0.30118555  1.68722704 -0.75628612\n",
            " -0.30752134 -0.34205157  0.37590422 -0.27915689  0.41775885 -0.44754989\n",
            "  0.66855948 -1.0738715  -1.95774285 -0.01562566  1.18556208  0.86602193\n",
            " -0.95434236 -2.41475744  0.18563197 -0.55058369 -1.18426784 -0.9022749\n",
            " -0.9935647  -0.99094464  1.72937795 -0.85360435  1.58504276  0.1330646\n",
            " -1.02685557 -1.58887054 -0.6349193   0.73799526  0.19130603  0.49669625\n",
            " -0.99918191 -0.85532359 -1.22186245  1.36962886  0.73299945  0.55380192\n",
            " -0.46847066  0.27341298 -0.35979125 -0.21197212 -0.74714744  1.0548851\n",
            "  0.56290485 -1.0438961  -1.15364789 -0.05420807 -0.05018227 -0.98536577\n",
            " -0.67437379  0.5702314  -1.30691771  1.20171734 -0.84578558 -0.82128761\n",
            " -0.692682    0.63221622  0.67564263  0.56821568  0.2344192   0.23842413\n",
            " -1.68944986 -0.73028876 -0.97870476  1.25882254 -1.49096352  0.94223214\n",
            " -0.36536262  0.77661281 -0.70108499  1.59155378 -0.88343007 -0.8779431\n",
            " -0.84951201 -0.47753409 -1.22042465 -1.28835579 -1.69569717 -1.47180098\n",
            " -0.83619443  1.5252066   1.34706319 -0.75215904 -0.27493372 -0.78130076\n",
            "  1.37504789 -0.80809547  0.36995513  0.43151675  0.66660325  0.86251317\n",
            "  0.82504931  0.02325541 -0.52586365 -0.71734646  1.16362378 -0.62591405\n",
            " -0.45770587 -0.44312744 -0.76552449 -0.54983484  0.42216625 -1.55732123\n",
            "  0.51647938 -0.0916009  -0.5646759  -1.09813814 -2.42892275 -1.66390044\n",
            " -0.09730893 -1.05549116 -0.54886561 -1.7899012  -0.02984174 -1.50504941\n",
            "  2.15346363  0.21060778  0.64192471  0.4818162  -1.39003225  0.09630576\n",
            " -0.71136897  0.27690951  1.40796125 -0.69726885  1.13094856 -0.14897961\n",
            " -0.90119591  0.52504822  0.83701098  1.13977281 -0.29916981  0.10028229\n",
            " -0.64956798  1.19207874 -0.17954718 -0.84919423  0.30815484 -0.77381166\n",
            " -0.87654339  0.07419344 -0.19074676  0.96034777  0.46178746  1.90378589\n",
            " -0.76771855  1.09790847 -0.47639417  0.76593033  0.54602656  0.10840721\n",
            "  0.08387672 -1.04166815 -3.45870004  1.32698146  0.61803979 -1.1585704\n",
            "  0.52751085 -0.02352754 -0.60133133 -1.03222338 -0.60162565  2.21101454\n",
            "  1.11046813 -0.65021678  0.35558809  0.52133708 -0.0149461   1.59823808\n",
            " -0.24920214  0.9979115   0.00385698 -0.30005622 -1.62733558 -1.34114786\n",
            " -0.33338551 -0.19912378  1.2474497  -0.44493318 -0.35099207 -0.3198361\n",
            "  0.59110799  0.37053825 -0.39412723 -0.6803887  -0.4081445  -0.25148822\n",
            "  0.92517293  0.72294679]\n",
            "Epoch=1399, Loss=0.9651, Weights=[-1.21488168e+00  1.09673078e+00  3.93833582e-01  6.15647857e-01\n",
            " -1.72421875e+00 -2.56704771e+00 -1.76817470e+00  4.69470339e-02\n",
            "  4.75613682e-02  3.01219754e-01  1.68467863e+00 -7.58555270e-01\n",
            " -3.08017728e-01 -3.41730643e-01  3.77156024e-01 -2.79117452e-01\n",
            "  4.15871722e-01 -4.47304600e-01  6.69610759e-01 -1.07558154e+00\n",
            " -1.95977674e+00 -1.57729018e-02  1.18523451e+00  8.65205601e-01\n",
            " -9.54063022e-01 -2.41452165e+00  1.85279213e-01 -5.50104308e-01\n",
            " -1.18311031e+00 -9.02136277e-01 -9.94511635e-01 -9.90945237e-01\n",
            "  1.72966858e+00 -8.55046467e-01  1.58348542e+00  1.33236120e-01\n",
            " -1.02661989e+00 -1.58893063e+00 -6.33708805e-01  7.38049434e-01\n",
            "  1.89171697e-01  4.95684884e-01 -9.98881926e-01 -8.56238996e-01\n",
            " -1.22358828e+00  1.36883343e+00  7.33078838e-01  5.54253193e-01\n",
            " -4.68088964e-01  2.73206583e-01 -3.60438133e-01 -2.11940934e-01\n",
            " -7.47171020e-01  1.05369924e+00  5.62363550e-01 -1.04309405e+00\n",
            " -1.15276101e+00 -5.41856058e-02 -5.14430690e-02 -9.86841489e-01\n",
            " -6.74707672e-01  5.71029874e-01 -1.30709875e+00  1.19993238e+00\n",
            " -8.46040572e-01 -8.19192603e-01 -6.91501479e-01  6.30389247e-01\n",
            "  6.73683106e-01  5.68772954e-01  2.35418050e-01  2.37783789e-01\n",
            " -1.69040034e+00 -7.30622985e-01 -9.78616844e-01  1.26025093e+00\n",
            " -1.49097767e+00  9.39829672e-01 -3.65205374e-01  7.79090399e-01\n",
            " -7.00599243e-01  1.58959835e+00 -8.84661017e-01 -8.76807348e-01\n",
            " -8.49114808e-01 -4.78666327e-01 -1.22009748e+00 -1.28660608e+00\n",
            " -1.69446371e+00 -1.47143314e+00 -8.36517514e-01  1.52359273e+00\n",
            "  1.34570788e+00 -7.51407931e-01 -2.74658583e-01 -7.82556562e-01\n",
            "  1.37539365e+00 -8.06916978e-01  3.69943824e-01  4.31843058e-01\n",
            "  6.66972174e-01  8.61756688e-01  8.24430108e-01  2.40701594e-02\n",
            " -5.24957967e-01 -7.17723910e-01  1.16317879e+00 -6.25863523e-01\n",
            " -4.56943022e-01 -4.42030558e-01 -7.65564929e-01 -5.50170820e-01\n",
            "  4.23423844e-01 -1.55609238e+00  5.14767788e-01 -9.34581325e-02\n",
            " -5.64323141e-01 -1.09729032e+00 -2.42857084e+00 -1.66431353e+00\n",
            " -9.72294887e-02 -1.05452770e+00 -5.47573290e-01 -1.78942824e+00\n",
            " -3.14038774e-02 -1.50690227e+00  2.15266494e+00  2.10174755e-01\n",
            "  6.41620886e-01  4.81895350e-01 -1.38929675e+00  9.73043716e-02\n",
            " -7.11320525e-01  2.76364248e-01  1.40767586e+00 -6.98358928e-01\n",
            "  1.12922644e+00 -1.48885022e-01 -8.99713745e-01  5.25192004e-01\n",
            "  8.36290165e-01  1.13999954e+00 -2.98765459e-01  9.89167524e-02\n",
            " -6.51466471e-01  1.19239766e+00 -1.78777517e-01 -8.49718974e-01\n",
            "  3.07309711e-01 -7.75082270e-01 -8.76891105e-01  7.55522474e-02\n",
            " -1.90409587e-01  9.59631558e-01  4.62853603e-01  1.90543942e+00\n",
            " -7.68515611e-01  1.09593193e+00 -4.77594407e-01  7.64316328e-01\n",
            "  5.44696913e-01  1.08695452e-01  8.45953919e-02 -1.04039666e+00\n",
            " -3.45662905e+00  1.32687499e+00  6.15725733e-01 -1.15855152e+00\n",
            "  5.28346033e-01 -2.48235175e-02 -6.02471539e-01 -1.03171201e+00\n",
            " -6.00644028e-01  2.21079643e+00  1.11001162e+00 -6.50210781e-01\n",
            "  3.55088020e-01  5.20737044e-01 -1.56673792e-02  1.59755140e+00\n",
            " -2.49134127e-01  9.96799026e-01  1.54795848e-03 -3.00550645e-01\n",
            " -1.62630435e+00 -1.33999165e+00 -3.32455323e-01 -1.99328837e-01\n",
            "  1.24728926e+00 -4.44112367e-01 -3.51823541e-01 -3.22106233e-01\n",
            "  5.90946706e-01  3.71877295e-01 -3.94300722e-01 -6.81087544e-01\n",
            " -4.07825933e-01 -2.51242004e-01  9.25321820e-01  7.22319305e-01]\n",
            "Epoch=1409, Loss=0.9629, Weights=[-1.21621790e+00  1.09567142e+00  3.93081205e-01  6.15163806e-01\n",
            " -1.72170464e+00 -2.56454559e+00 -1.76906387e+00  4.69221782e-02\n",
            "  4.94556582e-02  3.01256813e-01  1.68213467e+00 -7.60823188e-01\n",
            " -3.08512949e-01 -3.41410935e-01  3.78403749e-01 -2.79077669e-01\n",
            "  4.13987568e-01 -4.47062527e-01  6.70658960e-01 -1.07728674e+00\n",
            " -1.96180751e+00 -1.59229197e-02  1.18490647e+00  8.64391673e-01\n",
            " -9.53785718e-01 -2.41428848e+00  1.84929394e-01 -5.49625432e-01\n",
            " -1.18195669e+00 -9.01995523e-01 -9.95454263e-01 -9.90946557e-01\n",
            "  1.72995745e+00 -8.56486383e-01  1.58193023e+00  1.33408035e-01\n",
            " -1.02638386e+00 -1.58899242e+00 -6.32502440e-01  7.38103729e-01\n",
            "  1.87041775e-01  4.94673710e-01 -9.98584266e-01 -8.57152625e-01\n",
            " -1.22530978e+00  1.36803857e+00  7.33156067e-01  5.54704701e-01\n",
            " -4.67706513e-01  2.72999313e-01 -3.61085188e-01 -2.11908335e-01\n",
            " -7.47193500e-01  1.05251470e+00  5.61823360e-01 -1.04229380e+00\n",
            " -1.15187686e+00 -5.41637124e-02 -5.27022507e-02 -9.88315607e-01\n",
            " -6.75041958e-01  5.71826565e-01 -1.30727989e+00  1.19815126e+00\n",
            " -8.46292913e-01 -8.17101046e-01 -6.90325862e-01  6.28564449e-01\n",
            "  6.71730263e-01  5.69330799e-01  2.36411801e-01  2.37140885e-01\n",
            " -1.69134746e+00 -7.30953483e-01 -9.78531818e-01  1.26167195e+00\n",
            " -1.49099184e+00  9.37434916e-01 -3.65047826e-01  7.81558901e-01\n",
            " -7.00117282e-01  1.58765076e+00 -8.85887350e-01 -8.75678276e-01\n",
            " -8.48721435e-01 -4.79794465e-01 -1.21976757e+00 -1.28485727e+00\n",
            " -1.69323269e+00 -1.47106807e+00 -8.36838995e-01  1.52198490e+00\n",
            "  1.34435115e+00 -7.50664830e-01 -2.74383087e-01 -7.83807738e-01\n",
            "  1.37573741e+00 -8.05742041e-01  3.69933948e-01  4.32170067e-01\n",
            "  6.67339548e-01  8.61002371e-01  8.23812515e-01  2.48811145e-02\n",
            " -5.24055238e-01 -7.18099077e-01  1.16273530e+00 -6.25814328e-01\n",
            " -4.56181591e-01 -4.40934011e-01 -7.65602481e-01 -5.50505594e-01\n",
            "  4.24677343e-01 -1.55486690e+00  5.13057142e-01 -9.53132902e-02\n",
            " -5.63969924e-01 -1.09644392e+00 -2.42821927e+00 -1.66472279e+00\n",
            " -9.71475719e-02 -1.05356763e+00 -5.46285495e-01 -1.78895349e+00\n",
            " -3.29611340e-02 -1.50875555e+00  2.15186504e+00  2.09743699e-01\n",
            "  6.41318042e-01  4.81973310e-01 -1.38856191e+00  9.83011506e-02\n",
            " -7.11274249e-01  2.75821426e-01  1.40739232e+00 -6.99450164e-01\n",
            "  1.12750477e+00 -1.48789973e-01 -8.98232917e-01  5.25335602e-01\n",
            "  8.35570251e-01  1.14022402e+00 -2.98363739e-01  9.75555129e-02\n",
            " -6.53360743e-01  1.19271377e+00 -1.78008924e-01 -8.50241668e-01\n",
            "  3.06465121e-01 -7.76350835e-01 -8.77238164e-01  7.69064640e-02\n",
            " -1.90072758e-01  9.58920063e-01  4.63916073e-01  1.90708355e+00\n",
            " -7.69311964e-01  1.09396293e+00 -4.78794945e-01  7.62699099e-01\n",
            "  5.43370472e-01  1.08985496e-01  8.53110881e-02 -1.03912595e+00\n",
            " -3.45455987e+00  1.32676549e+00  6.13416778e-01 -1.15852634e+00\n",
            "  5.29177248e-01 -2.61242953e-02 -6.03606777e-01 -1.03119776e+00\n",
            " -5.99668651e-01  2.21057568e+00  1.10955755e+00 -6.50204142e-01\n",
            "  3.54588080e-01  5.20138241e-01 -1.63893117e-02  1.59686237e+00\n",
            " -2.49064748e-01  9.95688894e-01 -7.62429105e-04 -3.01045963e-01\n",
            " -1.62527062e+00 -1.33883408e+00 -3.31527139e-01 -1.99534751e-01\n",
            "  1.24712946e+00 -4.43291998e-01 -3.52654846e-01 -3.24374431e-01\n",
            "  5.90785627e-01  3.73214708e-01 -3.94472256e-01 -6.81783818e-01\n",
            " -4.07509258e-01 -2.50997833e-01  9.25471345e-01  7.21692910e-01]\n",
            "Epoch=1419, Loss=0.9606, Weights=[-1.21755536e+00  1.09461380e+00  3.92331908e-01  6.14677846e-01\n",
            " -1.71919685e+00 -2.56204363e+00 -1.76994865e+00  4.68950145e-02\n",
            "  5.13454239e-02  3.01296720e-01  1.67959519e+00 -7.63089867e-01\n",
            " -3.09006986e-01 -3.41092423e-01  3.79647367e-01 -2.79037572e-01\n",
            "  4.12106423e-01 -4.46823655e-01  6.71704038e-01 -1.07898711e+00\n",
            " -1.96383512e+00 -1.60757142e-02  1.18457793e+00  8.63580146e-01\n",
            " -9.53510453e-01 -2.41405793e+00  1.84582504e-01 -5.49147059e-01\n",
            " -1.18080700e+00 -9.01852638e-01 -9.96392566e-01 -9.90948594e-01\n",
            "  1.73024455e+00 -8.57924103e-01  1.58037717e+00  1.33580335e-01\n",
            " -1.02614750e+00 -1.58905591e+00 -6.31300195e-01  7.38158147e-01\n",
            "  1.84916265e-01  4.93662731e-01 -9.98288929e-01 -8.58064500e-01\n",
            " -1.22702697e+00  1.36724428e+00  7.33231161e-01  5.55156421e-01\n",
            " -4.67323319e-01  2.72791189e-01 -3.61732403e-01 -2.11874341e-01\n",
            " -7.47214892e-01  1.05133149e+00  5.61284288e-01 -1.04149533e+00\n",
            " -1.15099542e+00 -5.41423918e-02 -5.39598215e-02 -9.89788116e-01\n",
            " -6.75376634e-01  5.72621465e-01 -1.30746116e+00  1.19637400e+00\n",
            " -8.46542617e-01 -8.15012959e-01 -6.89155131e-01  6.26741845e-01\n",
            "  6.69784085e-01  5.69889192e-01  2.37400482e-01  2.36495446e-01\n",
            " -1.69229127e+00 -7.31280278e-01 -9.78449651e-01  1.26308563e+00\n",
            " -1.49100604e+00  9.35047869e-01 -3.64889984e-01  7.84018300e-01\n",
            " -6.99639090e-01  1.58571102e+00 -8.87109098e-01 -8.74555863e-01\n",
            " -8.48331858e-01 -4.80918521e-01 -1.21943494e+00 -1.28310933e+00\n",
            " -1.69200412e+00 -1.47070579e+00 -8.37158869e-01  1.52038313e+00\n",
            "  1.34299300e+00 -7.49929733e-01 -2.74107223e-01 -7.85054296e-01\n",
            "  1.37607917e+00 -8.04570670e-01  3.69925494e-01  4.32497780e-01\n",
            "  6.67705390e-01  8.60250221e-01  8.23196520e-01  2.56882796e-02\n",
            " -5.23155450e-01 -7.18471957e-01  1.16229328e+00 -6.25766455e-01\n",
            " -4.55421564e-01 -4.39837803e-01 -7.65637155e-01 -5.50839176e-01\n",
            "  4.25926756e-01 -1.55364479e+00  5.11347438e-01 -9.71663712e-02\n",
            " -5.63616239e-01 -1.09559894e+00 -2.42786805e+00 -1.66512824e+00\n",
            " -9.70631874e-02 -1.05261094e+00 -5.45002217e-01 -1.78847696e+00\n",
            " -3.45135294e-02 -1.51060923e+00  2.15106395e+00  2.09314587e-01\n",
            "  6.41016166e-01  4.82050090e-01 -1.38782774e+00  9.92960800e-02\n",
            " -7.11230136e-01  2.75281036e-01  1.40711060e+00 -7.00542523e-01\n",
            "  1.12578356e+00 -1.48694484e-01 -8.96753432e-01  5.25479028e-01\n",
            "  8.34851219e-01  1.14044622e+00 -2.97964629e-01  9.61985666e-02\n",
            " -6.55250812e-01  1.19302708e+00 -1.77241405e-01 -8.50762321e-01\n",
            "  3.05621074e-01 -7.77617356e-01 -8.77584576e-01  7.82561064e-02\n",
            " -1.89736252e-01  9.58213270e-01  4.64974850e-01  1.90871828e+00\n",
            " -7.70107604e-01  1.09200145e+00 -4.79995771e-01  7.61078653e-01\n",
            "  5.42047236e-01  1.09277336e-01  8.60238026e-02 -1.03785603e+00\n",
            " -3.45249252e+00  1.32665298e+00  6.11112932e-01 -1.15849485e+00\n",
            "  5.30004489e-01 -2.74298669e-02 -6.04737034e-01 -1.03068063e+00\n",
            " -5.98699522e-01  2.21035232e+00  1.10910593e+00 -6.50196860e-01\n",
            "  3.54088280e-01  5.19540684e-01 -1.71118950e-02  1.59617101e+00\n",
            " -2.48994004e-01  9.94581087e-01 -3.07418929e-03 -3.01542168e-01\n",
            " -1.62423437e+00 -1.33767515e+00 -3.30600956e-01 -1.99741514e-01\n",
            "  1.24697030e+00 -4.42472082e-01 -3.53485985e-01 -3.26640694e-01\n",
            "  5.90624754e-01  3.74550491e-01 -3.94641838e-01 -6.82477518e-01\n",
            " -4.07194455e-01 -2.50755703e-01  9.25621484e-01  7.21067605e-01]\n",
            "Epoch=1429, Loss=0.9584, Weights=[-1.21889404  1.09355792  0.39158569  0.61419001 -1.7166954  -2.55954191\n",
            " -1.77082904  0.04686558  0.05323066  0.30133947  1.67706022 -0.7653553\n",
            " -0.30949982 -0.34077508  0.38088685 -0.27899719  0.41022832 -0.44658797\n",
            "  0.67274595 -1.08068265 -1.96585952 -0.01623128  1.18424888  0.86277102\n",
            " -0.95323723 -2.41383005  0.18423854 -0.54866919 -1.17966124 -0.90170762\n",
            " -0.99732653 -0.99095134  1.73052988 -0.85935963  1.57882625  0.13375301\n",
            " -1.0259108  -1.58912107 -0.63010206  0.73821269  0.18279517  0.49265195\n",
            " -0.99799591 -0.85897464 -1.22873987  1.36645059  0.73330414  0.55560833\n",
            " -0.4669394   0.27258223 -0.36237977 -0.21183897 -0.7472352   1.05014961\n",
            "  0.56074634 -1.04069865 -1.15011669 -0.05412164 -0.05521579 -0.99125901\n",
            " -0.67571168  0.57341456 -1.30764256  1.1946006  -0.8467897  -0.81292836\n",
            " -0.68798927  0.62492145  0.66784456  0.57044811  0.23838412  0.23584749\n",
            " -1.69323179 -0.73160339 -0.97837031  1.26449199 -1.49102027  0.93266853\n",
            " -0.36473186  0.78646859 -0.69916465  1.5837791  -0.88832629 -0.87344008\n",
            " -0.84794604 -0.48203851 -1.2190996  -1.28136227 -1.69077799 -1.47034632\n",
            " -0.83747713  1.51878743  1.34163343 -0.74920263 -0.27383099 -0.78629624\n",
            "  1.37641892 -0.80340288  0.36991846  0.4328262   0.66806971  0.85950024\n",
            "  0.82258211  0.02649166 -0.52225859 -0.71884255  1.16185272 -0.6257199\n",
            " -0.45466293 -0.43874194 -0.76566896 -0.55117158  0.42717209 -1.55242605\n",
            "  0.50963867 -0.09901737 -0.56326208 -1.09475535 -2.42751717 -1.66552987\n",
            " -0.09697635 -1.05165762 -0.54372344 -1.78799867 -0.03606108 -1.51246329\n",
            "  2.15026168  0.20888739  0.64071524  0.4821257  -1.38709424  0.10028914\n",
            " -0.71118818  0.27474307  1.4068307  -0.70163597  1.12406285 -0.14859858\n",
            " -0.8952753   0.5256223   0.83413306  1.14066614 -0.29756811  0.09484591\n",
            " -0.6571367   1.19333758 -0.17647497 -0.85128094  0.30477758 -0.77888183\n",
            " -0.87793035  0.07960119 -0.18940006  0.95751117  0.46602992  1.91034362\n",
            " -0.77090253  1.09004751 -0.48119687  0.75945501  0.5407272   0.10957097\n",
            "  0.08673353 -1.03658692 -3.45042699  1.32653743  0.6088142  -1.15845705\n",
            "  0.53082775 -0.02874023 -0.6058623  -1.03016063 -0.59773665  2.21012634\n",
            "  1.10865676 -0.65018893  0.35358863  0.51894438 -0.01783513  1.59547732\n",
            " -0.24892189  0.99347558 -0.00538733 -0.30203925 -1.6231956  -1.33651488\n",
            " -0.32967677 -0.19994911  1.24681176 -0.44165262 -0.35431696 -0.32890502\n",
            "  0.59046409  0.37588465 -0.39480948 -0.68316864 -0.4068815  -0.25051561\n",
            "  0.92577222  0.72044339]\n",
            "Epoch=1439, Loss=0.9561, Weights=[-1.22023396  1.09250377  0.39084255  0.61370034 -1.7142003  -2.55704049\n",
            " -1.77170505  0.04683389  0.05511136  0.30138505  1.67452978 -0.76761948\n",
            " -0.30999145 -0.34045889  0.38212217 -0.27895655  0.40835331 -0.44635544\n",
            "  0.67378467 -1.08237336 -1.96788067 -0.01638962  1.18391928  0.8619643\n",
            " -0.95296606 -2.41360484  0.18389748 -0.54819181 -1.17851941 -0.90156047\n",
            " -0.99825615 -0.99095478  1.73081345 -0.86079296  1.57727745  0.13392606\n",
            " -1.02567373 -1.58918788 -0.62890803  0.73826735  0.18067848  0.49164138\n",
            " -0.99770519 -0.85988308 -1.23044853  1.36565751  0.73337502  0.55606041\n",
            " -0.46655477  0.27237245 -0.36302727 -0.21180223 -0.74725445  1.04896908\n",
            "  0.56020951 -1.03990377 -1.14924066 -0.05410147 -0.05647015 -0.99272827\n",
            " -0.67604709  0.57420584 -1.30782409  1.19283107 -0.84703418 -0.81084727\n",
            " -0.68682825  0.6231033   0.66591166  0.57100754  0.23936275  0.23519705\n",
            " -1.69416906 -0.73192283 -0.97829377  1.26589104 -1.49103454  0.9302969\n",
            " -0.36457346  0.78890975 -0.69869396  1.58185499 -0.88953895 -0.87233091\n",
            " -0.84756396 -0.48315443 -1.21876158 -1.27961607 -1.68955431 -1.46998966\n",
            " -0.83779379  1.51719779  1.34027245 -0.74848353 -0.27355438 -0.78753357\n",
            "  1.37675665 -0.80223867  0.36991282  0.43315533  0.66843253  0.85875242\n",
            "  0.82196928  0.02729124 -0.52136466 -0.71921087  1.16141361 -0.62567466\n",
            " -0.45390567 -0.43764641 -0.76569792 -0.5515028   0.42841335 -1.55121067\n",
            "  0.50793084 -0.10086629 -0.56290743 -1.09391317 -2.42716665 -1.6659277\n",
            " -0.09688706 -1.05070766 -0.54244916 -1.78751865 -0.03760381 -1.5143177\n",
            "  2.14945826  0.2084621   0.64041527  0.48220017 -1.38636143  0.10128033\n",
            " -0.71114837  0.27420753  1.40655262 -0.70273048  1.12234265 -0.14850228\n",
            " -0.89379851  0.52576542  0.83341575  1.14088378 -0.29717415  0.09349754\n",
            " -0.65901842  1.19364528 -0.17570962 -0.85179754  0.30393463 -0.78014427\n",
            " -0.87827548  0.08094173 -0.18906415  0.95681374  0.46708126  1.91195956\n",
            " -0.77169674  1.08810111 -0.48239822  0.75782817  0.53941037  0.10986638\n",
            "  0.08744025 -1.03531864 -3.44836332  1.32641884  0.6065206  -1.15841292\n",
            "  0.53164703 -0.03005537 -0.60698256 -1.02963777 -0.59678004  2.20989774\n",
            "  1.10821005 -0.65018035  0.35308914  0.51834934 -0.01855902  1.59478131\n",
            " -0.24884842  0.99237237 -0.00770187 -0.3025372  -1.6221543  -1.33535328\n",
            " -0.32875457 -0.20015754  1.24665385 -0.44083363 -0.35514777 -0.33116742\n",
            "  0.59030364  0.37721719 -0.39497518 -0.68385719 -0.40657038 -0.25027755\n",
            "  0.92592354  0.71982025]\n",
            "Epoch=1449, Loss=0.9539, Weights=[-1.2215751   1.09145135  0.39010249  0.61320886 -1.71171157 -2.55453944\n",
            " -1.77257668  0.0468      0.05698752  0.30143345  1.67200388 -0.7698824\n",
            " -0.31048185 -0.34014382  0.3833533  -0.27891569  0.4064814  -0.44612606\n",
            "  0.67482015 -1.08405926 -1.96989855 -0.01655073  1.18358912  0.86115997\n",
            " -0.95269694 -2.41338234  0.18355932 -0.54771494 -1.17738152 -0.9014112\n",
            " -0.99918142 -0.99095892  1.73109525 -0.86222409  1.57573077  0.13409947\n",
            " -1.02543631 -1.58925634 -0.62771809  0.73832215  0.17856621  0.49063102\n",
            " -0.99741678 -0.86078983 -1.23215297  1.36486504  0.73344383  0.55651263\n",
            " -0.46616945  0.27216188 -0.36367489 -0.21176414 -0.74727262  1.04778991\n",
            "  0.55967381 -1.03911069 -1.14836733 -0.05408188 -0.05772292 -0.99419589\n",
            " -0.67638285  0.5749953  -1.30800578  1.19106542 -0.84727607 -0.8087697\n",
            " -0.68567206  0.62128739  0.66398539  0.57156746  0.2403364   0.23454415\n",
            " -1.69510313 -0.73223863 -0.97821999  1.26728281 -1.49104886  0.92793298\n",
            " -0.36441479  0.79134178 -0.69822699  1.57993867 -0.89074711 -0.87122833\n",
            " -0.84718557 -0.48426631 -1.2184209  -1.27787074 -1.68833307 -1.46963583\n",
            " -0.83810884  1.51561424  1.33891006 -0.74777241 -0.2732774  -0.78876629\n",
            "  1.37709235 -0.80107805  0.36990859  0.43348518  0.66879386  0.85800676\n",
            "  0.82135802  0.02808705 -0.52047363 -0.7195769   1.16097594 -0.62563073\n",
            " -0.45314979 -0.43655123 -0.76572404 -0.55183286  0.42965054 -1.54999866\n",
            "  0.50622393 -0.10271311 -0.56255229 -1.09307238 -2.42681646 -1.66632174\n",
            " -0.09679533 -1.04976106 -0.54117936 -1.78703691 -0.03914174 -1.51617243\n",
            "  2.14865371  0.20803868  0.64011622  0.48227349 -1.3856293   0.10226962\n",
            " -0.7111107   0.2736744   1.40627634 -0.703826    1.120623   -0.1484056\n",
            " -0.89232309  0.52590842  0.83269927  1.14109912 -0.29678274  0.09215345\n",
            " -0.660896    1.19395017 -0.17494537 -0.85231212  0.30309226 -0.78140468\n",
            " -0.87861998  0.08227774 -0.18872852  0.95612097  0.46812887  1.91356613\n",
            " -0.77249023  1.08616224 -0.48359981  0.75619817  0.53809673  0.11016358\n",
            "  0.08814397 -1.0340512  -3.44630152  1.3262972   0.60423212 -1.15836246\n",
            "  0.53246233 -0.03137528 -0.60809782 -1.02911205 -0.5958297   2.20966654\n",
            "  1.10776579 -0.65017112  0.35258983  0.51775558 -0.01928356  1.59408297\n",
            " -0.24877359  0.99127142 -0.0100178  -0.30303601 -1.62111049 -1.33419035\n",
            " -0.32783435 -0.20036677  1.24649656 -0.44001511 -0.35597842 -0.33342788\n",
            "  0.5901434   0.37854812 -0.39513896 -0.68454317 -0.40626108 -0.25004152\n",
            "  0.92607543  0.71919819]\n",
            "Epoch=1459, Loss=0.9517, Weights=[-1.22291746  1.09040066  0.3893655   0.61271562 -1.70922921 -2.55203881\n",
            " -1.77344395  0.04676393  0.05885914  0.30148468  1.66948255 -0.77214405\n",
            " -0.31097102 -0.33982985  0.38458022 -0.27887464  0.40461265 -0.44589981\n",
            "  0.67585234 -1.08574034 -1.97191309 -0.0167146   1.18325836  0.86035805\n",
            " -0.95242988 -2.41316256  0.18322406 -0.54723856 -1.17624757 -0.90125979\n",
            " -1.00010231 -0.99096374  1.73137529 -0.86365302  1.57418621  0.13427323\n",
            " -1.02519851 -1.58932642 -0.62653224  0.73837706  0.17645835  0.48962089\n",
            " -0.99713066 -0.8616949  -1.23385321  1.36407321  0.73351058  0.55696497\n",
            " -0.46578346  0.27195053 -0.36432264 -0.21172472 -0.74728975  1.04661212\n",
            "  0.55913925 -1.03831941 -1.14749669 -0.05406286 -0.0589741  -0.99566185\n",
            " -0.67671894  0.57578293 -1.30818762  1.18930366 -0.84751539 -0.80669568\n",
            " -0.68452069  0.61947375  0.66206571  0.57212784  0.24130511  0.23388881\n",
            " -1.69603403 -0.73255079 -0.97814895  1.26866732 -1.49106324  0.92557675\n",
            " -0.36425587  0.79376466 -0.69776373  1.57803014 -0.89195079 -0.8701323\n",
            " -0.84681084 -0.48537415 -1.21807757 -1.27612626 -1.68711429 -1.46928485\n",
            " -0.83842228  1.51403678  1.33754628 -0.74706926 -0.27300005 -0.78999441\n",
            "  1.37742602 -0.79992104  0.36990576  0.43381574  0.66915371  0.85726326\n",
            "  0.82074832  0.02887907 -0.5195855  -0.71994065  1.16053968 -0.6255881\n",
            " -0.45239526 -0.43545639 -0.76574732 -0.55216177  0.43088368 -1.54879\n",
            "  0.50451794 -0.10455784 -0.56219664 -1.09223297 -2.42646662 -1.66671199\n",
            " -0.09670118 -1.0488178  -0.53991402 -1.78655348 -0.04067488 -1.51802746\n",
            "  2.14784804  0.20761711  0.63981809  0.4823457  -1.38489787  0.103257\n",
            " -0.71107516  0.27314368  1.40600187 -0.70492251  1.11890392 -0.14830858\n",
            " -0.89084903  0.5260513   0.83198363  1.14131215 -0.29639385  0.09081364\n",
            " -0.66276946  1.19425227 -0.17418222 -0.85282469  0.30225045 -0.78266305\n",
            " -0.87896386  0.08360923 -0.18839316  0.95543285  0.46917272  1.91516332\n",
            " -0.77328299  1.0842309  -0.48480162  0.754565    0.53678629  0.11046256\n",
            "  0.08884466 -1.03278462 -3.44424159  1.32617251  0.60194879 -1.15830567\n",
            "  0.53327363 -0.03269996 -0.60920805 -1.02858348 -0.59488563  2.20943273\n",
            "  1.107324   -0.65016123  0.35209071  0.5171631  -0.02000876  1.59338232\n",
            " -0.24869739  0.99017272 -0.01233515 -0.30353568 -1.62006414 -1.3330261\n",
            " -0.32691611 -0.20057681  1.2463399  -0.43919707 -0.35680891 -0.33568641\n",
            "  0.58998338  0.37987744 -0.39530082 -0.68522656 -0.40595356 -0.24980752\n",
            "  0.92622786  0.71857721]\n",
            "Epoch=1469, Loss=0.9495, Weights=[-1.22426104  1.08935169  0.38863159  0.61222065 -1.70675324 -2.54953868\n",
            " -1.77430686  0.04672572  0.06072621  0.3015387   1.66696582 -0.77440443\n",
            " -0.31145894 -0.33951696  0.38580289 -0.27883342  0.40274709 -0.44567667\n",
            "  0.67688122 -1.0874166  -1.97392428 -0.01688123  1.182927    0.85955852\n",
            " -0.95216488 -2.41294553  0.18289168 -0.54676267 -1.17511757 -0.90110626\n",
            " -1.00101883 -0.99096924  1.73165357 -0.86507976  1.57264377  0.13444735\n",
            " -1.02496034 -1.58939811 -0.62535046  0.73843211  0.1743549   0.48861098\n",
            " -0.99684683 -0.86259834 -1.23554929  1.36328202  0.73357529  0.55741742\n",
            " -0.46539681  0.27173843 -0.36497048 -0.21168398 -0.74730582  1.0454357\n",
            "  0.55860582 -1.03752994 -1.14662873 -0.05404441 -0.0602237  -0.99712616\n",
            " -0.67705534  0.57656872 -1.30836963  1.18754579 -0.84775216 -0.80462522\n",
            " -0.6833741   0.6176624   0.66015263  0.57268866  0.24226889  0.23323106\n",
            " -1.69696179 -0.73285935 -0.97808061  1.27004459 -1.49107768  0.92322823\n",
            " -0.36409671  0.7961784  -0.69730416  1.57612936 -0.89315002 -0.86904281\n",
            " -0.84643974 -0.48647796 -1.21773161 -1.27438262 -1.68589795 -1.46893673\n",
            " -0.8387341   1.51246542  1.3361811  -0.74637409 -0.27272232 -0.79121793\n",
            "  1.37775764 -0.79876764  0.3699043   0.43414703  0.6695121   0.85652191\n",
            "  0.82014016  0.0296673  -0.51870027 -0.72030213  1.16010482 -0.62554677\n",
            " -0.45164207 -0.43436189 -0.76576779 -0.55248954  0.43211277 -1.5475847\n",
            "  0.50281287 -0.10640047 -0.56184048 -1.09139494 -2.42611712 -1.66709847\n",
            " -0.09660462 -1.04787787 -0.53865314 -1.78606838 -0.04220326 -1.51988275\n",
            "  2.14704129  0.20719736  0.63952087  0.48241679 -1.38416715  0.10424246\n",
            " -0.71104175  0.27261537  1.40572919 -0.70601996  1.11718542 -0.14821123\n",
            " -0.88937633  0.52619408  0.83126879  1.14152286 -0.29600747  0.0894781\n",
            " -0.66463883  1.19455156 -0.17342018 -0.85333526  0.30140922 -0.78391939\n",
            " -0.87930713  0.08493623 -0.18805804  0.95474935  0.47021281  1.91675115\n",
            " -0.77407503  1.0823071  -0.48600364  0.75292869  0.53547905  0.11076331\n",
            "  0.08954233 -1.03151891 -3.44218354  1.32604477  0.5996706  -1.15824254\n",
            "  0.53408094 -0.0340294  -0.61031325 -1.02805207 -0.59394784  2.20919632\n",
            "  1.10688467 -0.65015068  0.35159178  0.51657191 -0.02073461  1.59267936\n",
            " -0.24861984  0.98907625 -0.01465392 -0.30403619 -1.61901527 -1.33186054\n",
            " -0.32599983 -0.20078765  1.24618386 -0.43837951 -0.35763925 -0.33794302\n",
            "  0.58982359  0.38120516 -0.39546077 -0.68590739 -0.40564781 -0.24957553\n",
            "  0.92638083  0.7179573 ]\n",
            "Epoch=1479, Loss=0.9473, Weights=[-1.22560582  1.08830444  0.38790076  0.61172398 -1.70428368 -2.54703911\n",
            " -1.77516541  0.0466854   0.06258872  0.30159553  1.66445369 -0.77666353\n",
            " -0.31194559 -0.33920511  0.38702129 -0.27879208  0.40088475 -0.44545662\n",
            "  0.67790675 -1.08908805 -1.97593205 -0.01705062  1.182595    0.8587614\n",
            " -0.95190195 -2.41273126  0.18256218 -0.54628727 -1.17399152 -0.9009506\n",
            " -1.00193096 -0.99097541  1.73193007 -0.86650431  1.57110343  0.1346218\n",
            " -1.02472178 -1.58947139 -0.62417275  0.73848729  0.17225586  0.4876013\n",
            " -0.99656528 -0.86350015 -1.23724124  1.36249149  0.73363799  0.55786994\n",
            " -0.46500952  0.27152559 -0.36561843 -0.21164193 -0.74732086  1.04426069\n",
            "  0.55807354 -1.03674228 -1.14576344 -0.05402654 -0.06147171 -0.99858879\n",
            " -0.67739205  0.57735265 -1.30855181  1.18579183 -0.84798639 -0.80255833\n",
            " -0.68223228  0.61585336  0.6582461   0.5732499   0.24322779  0.23257092\n",
            " -1.69788645 -0.73316432 -0.97801493  1.27141464 -1.49109219  0.92088739\n",
            " -0.36393732  0.79858299 -0.69684828  1.57423633 -0.89434484 -0.86795982\n",
            " -0.84607224 -0.48757776 -1.21738305 -1.27263983 -1.68468406 -1.46859147\n",
            " -0.83904431  1.51090015  1.33481454 -0.74568688 -0.2724442  -0.79243686\n",
            "  1.37808721 -0.79761787  0.36990423  0.43447904  0.66986905  0.85578273\n",
            "  0.81953355  0.03045176 -0.51781792 -0.72066133  1.15967135 -0.62550674\n",
            " -0.45089022 -0.43326774 -0.76578546 -0.55281617  0.43333782 -1.54638276\n",
            "  0.50110871 -0.108241   -0.5614838  -1.09055828 -2.42576796 -1.66748118\n",
            " -0.09650565 -1.04694127 -0.5373967  -1.78558163 -0.04372689 -1.52173829\n",
            "  2.14623346  0.20677943  0.63922454  0.4824868  -1.38343713  0.10522597\n",
            " -0.71101045  0.27208946  1.40545829 -0.70711833  1.11546754 -0.14811357\n",
            " -0.88790501  0.52633678  0.83055474  1.14173125 -0.29562357  0.08814683\n",
            " -0.66650411  1.19484805 -0.17265927 -0.85384384  0.30056857 -0.7851737\n",
            " -0.87964977  0.08625875 -0.18772316  0.95407047  0.47124911  1.91832961\n",
            " -0.77486634  1.08039083 -0.48720584  0.75128926  0.53417499  0.11106584\n",
            "  0.09023696 -1.03025409 -3.4401274   1.32591395  0.59739756 -1.15817307\n",
            "  0.53488425 -0.0353636  -0.61141342 -1.02751783 -0.59301633  2.20895731\n",
            "  1.10644781 -0.65013946  0.35109306  0.51598203 -0.02146112  1.5919741\n",
            " -0.24854094  0.987982   -0.01697412 -0.30453754 -1.61796387 -1.33069369\n",
            " -0.32508552 -0.20099926  1.24602843 -0.43756244 -0.35846943 -0.34019769\n",
            "  0.58966401  0.38253128 -0.39561882 -0.68658563 -0.40534381 -0.24934556\n",
            "  0.92653432  0.71733846]\n",
            "Epoch=1489, Loss=0.9451, Weights=[-1.22695181  1.08725891  0.387173    0.61122565 -1.70182053 -2.54454017\n",
            " -1.77601961  0.046643    0.06444668  0.30165515  1.66194619 -0.77892135\n",
            " -0.31243098 -0.33889429  0.3882354  -0.27875063  0.39902567 -0.44523964\n",
            "  0.67892889 -1.0907547  -1.97793639 -0.01722277  1.18226234  0.85796667\n",
            " -0.95164108 -2.41251978  0.18223553 -0.54581236 -1.17286942 -0.90079282\n",
            " -1.00283869 -0.99098225  1.73220482 -0.86792665  1.56956519  0.13479659\n",
            " -1.02448283 -1.58954624 -0.6229991   0.73854259  0.17016123  0.48659186\n",
            " -0.99628601 -0.86440035 -1.23892908  1.36170163  0.73369868  0.55832252\n",
            " -0.4646216   0.27131203 -0.36626645 -0.2115986  -0.74733487  1.04308708\n",
            "  0.55754239 -1.03595643 -1.14490083 -0.05400925 -0.06271814 -1.00004974\n",
            " -0.67772906  0.57813473 -1.30873417  1.18404177 -0.84821809 -0.80049504\n",
            " -0.6810952   0.61404665  0.65634613  0.57381155  0.24418184  0.23190842\n",
            " -1.69880805 -0.73346571 -0.9779519   1.2727775  -1.49110677  0.91855424\n",
            " -0.3637777   0.80097841 -0.69639607  1.57235103 -0.89553526 -0.86688331\n",
            " -0.8457083  -0.48867356 -1.2170319  -1.27089788 -1.68347262 -1.4682491\n",
            " -0.83935292  1.509341    1.33344661 -0.74500762 -0.27216572 -0.79365119\n",
            "  1.37841472 -0.79647172  0.36990551  0.43481178  0.67022455  0.85504569\n",
            "  0.81892846  0.03123244 -0.51693844 -0.72101826  1.15923926 -0.625468\n",
            " -0.45013969 -0.43217393 -0.76580033 -0.55314169  0.43455883 -1.54518416\n",
            "  0.49940546 -0.11007942 -0.56112658 -1.08972299 -2.42541914 -1.66786013\n",
            " -0.0964043  -1.04600798 -0.53614469 -1.78509325 -0.04524579 -1.52359404\n",
            "  2.14542459  0.20636328  0.63892909  0.48255572 -1.38270784  0.10620754\n",
            " -0.71098126  0.27156595  1.40518918 -0.70821759  1.1137503  -0.14801563\n",
            " -0.88643506  0.52647941  0.82984147  1.14193731 -0.29524212  0.08681982\n",
            " -0.66836534  1.19514174 -0.17189948 -0.85435043  0.29972852 -0.78642599\n",
            " -0.87999182  0.08757681 -0.18738849  0.95339618  0.47228162  1.91989873\n",
            " -0.77565692  1.0784821  -0.48840821  0.74964671  0.53287413  0.11137012\n",
            "  0.09092855 -1.02899018 -3.43807318  1.32578007  0.59512967 -1.15809725\n",
            "  0.53568356 -0.03670253 -0.61250854 -1.02698077 -0.59209111  2.20871571\n",
            "  1.10601342 -0.65012759  0.35059456  0.51539347 -0.02218827  1.59126654\n",
            " -0.24846068  0.98688994 -0.01929575 -0.30503972 -1.61690994 -1.32952554\n",
            " -0.32417317 -0.20121164  1.24587361 -0.43674586 -0.35929945 -0.34245044\n",
            "  0.58950466  0.38385581 -0.39577497 -0.6872613  -0.40504154 -0.24911761\n",
            "  0.92668831  0.71672069]\n",
            "Epoch=1499, Loss=0.9429, Weights=[-1.22829899  1.08621508  0.38644831  0.6107257  -1.69936381 -2.54204192\n",
            " -1.77686947  0.04659856  0.06630006  0.30171755  1.65944336 -0.78117788\n",
            " -0.31291509 -0.33858446  0.38944518 -0.27870911  0.39716988 -0.44502571\n",
            "  0.67994759 -1.09241655 -1.97993723 -0.01739766  1.18192899  0.85717435\n",
            " -0.95138227 -2.41231111  0.18191174 -0.54533794 -1.17175127 -0.90063291\n",
            " -1.00374201 -0.99098974  1.73247779 -0.8693468   1.56802906  0.1349717\n",
            " -1.02424349 -1.58962266 -0.62182949  0.73859803  0.168071    0.48558267\n",
            " -0.99600899 -0.86529897 -1.24061284  1.36091246  0.73375739  0.55877514\n",
            " -0.46423307  0.27109777 -0.36691455 -0.211554   -0.74734785  1.0419149\n",
            "  0.5570124  -1.03517241 -1.14404088 -0.05399254 -0.063963   -1.00150899\n",
            " -0.67806634  0.57891494 -1.30891673  1.18229563 -0.8484473  -0.79843535\n",
            " -0.67996285  0.61224229  0.65445269  0.57437357  0.24513106  0.23124359\n",
            " -1.69972663 -0.73376356 -0.97789148  1.27413319 -1.49112144  0.91622877\n",
            " -0.36361788  0.80336467 -0.6959475   1.57047343 -0.89672131 -0.86581326\n",
            " -0.84534789 -0.48976537 -1.21667818 -1.26915676 -1.68226364 -1.46790961\n",
            " -0.8396599   1.50778796  1.3320773  -0.74433631 -0.27188685 -0.79486094\n",
            "  1.37874018 -0.79532922  0.36990816  0.43514525  0.67057864  0.85431081\n",
            "  0.81832489  0.03200934 -0.51606182 -0.72137292  1.15880853 -0.62543055\n",
            " -0.44939047 -0.43108046 -0.76581242 -0.55346609  0.43577582 -1.5439889\n",
            "  0.49770311 -0.11191573 -0.56076882 -1.08888906 -2.42507066 -1.66823533\n",
            " -0.09630056 -1.04507801 -0.53489709 -1.78460325 -0.04675999 -1.52544998\n",
            "  2.14461469  0.20594888  0.63863451  0.48262358 -1.38197927  0.10718713\n",
            " -0.71095417  0.27104483  1.40492185 -0.70931769  1.11203372 -0.14791743\n",
            " -0.88496648  0.52662198  0.82912897  1.14214103 -0.29486311  0.08549708\n",
            " -0.67022253  1.19543263 -0.17114082 -0.85485504  0.29888907 -0.78767626\n",
            " -0.88033326  0.08889042 -0.18705403  0.95272647  0.47331032  1.92145851\n",
            " -0.77644677  1.0765809  -0.48961074  0.74800105  0.53157645  0.11167618\n",
            "  0.09161708 -1.02772719 -3.43602088  1.3256431   0.59286694 -1.15801507\n",
            "  0.53647888 -0.03804621 -0.61359861 -1.02644089 -0.59117219  2.20847153\n",
            "  1.1055815  -0.65011504  0.35009628  0.51480623 -0.02291608  1.59055668\n",
            " -0.24837908  0.98580006 -0.02161883 -0.30554272 -1.61585348 -1.3283561\n",
            " -0.32326276 -0.20142478  1.24571939 -0.43592979 -0.36012933 -0.34470127\n",
            "  0.58934554  0.38517876 -0.39592924 -0.68793439 -0.40474098 -0.24889166\n",
            "  0.92684279  0.71610398]\n",
            "Epoch=1509, Loss=0.9408, Weights=[-1.22964736  1.08517295  0.38572669  0.61022417 -1.69691354 -2.53954444\n",
            " -1.777715    0.04655212  0.06814888  0.30178272  1.6569452  -0.78343311\n",
            " -0.3133979  -0.33827562  0.39065062 -0.27866755  0.39531742 -0.44481481\n",
            "  0.68096282 -1.0940736  -1.98193456 -0.0175753   1.18159493  0.85638442\n",
            " -0.95112554 -2.41210528  0.18159079 -0.54486401 -1.17063709 -0.90047089\n",
            " -1.00464092 -0.99099789  1.73274901 -0.87076475  1.56649501  0.13514713\n",
            " -1.02400374 -1.58970061 -0.62066393  0.7386536   0.16598518  0.48457373\n",
            " -0.99573423 -0.86619603 -1.24229255  1.36012397  0.73381414  0.55922776\n",
            " -0.46384396  0.27088284 -0.3675627  -0.21150814 -0.74735982  1.04074415\n",
            "  0.55648355 -1.0343902  -1.1431836  -0.05397639 -0.06520629 -1.00296654\n",
            " -0.67840389  0.57969327 -1.30909949  1.18055341 -0.84867402 -0.79637929\n",
            " -0.67883521  0.61044029  0.65256575  0.57493594  0.24607549  0.23057645\n",
            " -1.70064221 -0.73405788 -0.97783364  1.27548173 -1.4911362   0.91391097\n",
            " -0.36345785  0.80574176 -0.69550258  1.56860352 -0.89790302 -0.86474963\n",
            " -0.84499098 -0.4908532  -1.21632191 -1.26741648 -1.6810571  -1.46757303\n",
            " -0.83996528  1.50624104  1.33070664 -0.74367292 -0.27160761 -0.79606611\n",
            "  1.37906356 -0.79419036  0.36991216  0.43547946  0.67093132  0.85357807\n",
            "  0.81772283  0.03278246 -0.51518807 -0.72172532  1.15837915 -0.62539438\n",
            " -0.44864255 -0.42998734 -0.76582175 -0.55378939  0.43698879 -1.54279699\n",
            "  0.49600165 -0.11374992 -0.56041052 -1.08805648 -2.42472251 -1.66860679\n",
            " -0.09619445 -1.04415133 -0.5336539  -1.78411167 -0.04826951 -1.52730608\n",
            "  2.14380378  0.20553623  0.63834078  0.48269038 -1.38125144  0.10816474\n",
            " -0.71092918  0.27052609  1.40465628 -0.71041861  1.11031782 -0.14781898\n",
            " -0.88349929  0.52676451  0.82841721  1.14234241 -0.29448651  0.08417858\n",
            " -0.67207572  1.19572072 -0.1703833  -0.85535767  0.29805022 -0.78892452\n",
            " -0.88067411  0.0901996  -0.18671976  0.95206132  0.4743352   1.92300895\n",
            " -0.77723588  1.07468724 -0.49081341  0.74635232  0.53028195  0.11198399\n",
            "  0.09230254 -1.02646515 -3.43397051  1.32550306  0.59060938 -1.15792653\n",
            "  0.53727019 -0.03939461 -0.61468363 -1.0258982  -0.59025956  2.20822476\n",
            "  1.10515206 -0.65010182  0.34959825  0.51422032 -0.02364455  1.58984454\n",
            " -0.24829613  0.98471234 -0.02394335 -0.30604654 -1.61479448 -1.32718539\n",
            " -0.32235429 -0.20163867  1.24556578 -0.43511424 -0.36095905 -0.34695017\n",
            "  0.58918666  0.38650013 -0.39608163 -0.68860491 -0.40444211 -0.24866772\n",
            "  0.92699774  0.71548833]\n",
            "Epoch=1519, Loss=0.9386, Weights=[-1.23099691  1.08413252  0.38500814  0.60972109 -1.69446972 -2.53704779\n",
            " -1.7785562   0.0465037   0.06999313  0.30185066  1.65445174 -0.78568703\n",
            " -0.31387942 -0.33796773  0.39185168 -0.27862598  0.39346832 -0.44460692\n",
            "  0.68197456 -1.09572586 -1.98392831 -0.01775569  1.18126014  0.8555969\n",
            " -0.95087088 -2.41190228  0.18127266 -0.54439056 -1.16952687 -0.90030675\n",
            " -1.0055354  -0.99100668  1.73301845 -0.8721805   1.56496306  0.13532287\n",
            " -1.02376359 -1.5897801  -0.61950239  0.7387093   0.16390376  0.48356505\n",
            " -0.99546173 -0.86709154 -1.24396825  1.35933619  0.73386895  0.55968038\n",
            " -0.46345426  0.27066726 -0.36821091 -0.21146104 -0.74737078  1.03957484\n",
            "  0.55595586 -1.03360983 -1.14232897 -0.05396083 -0.06644801 -1.00442238\n",
            " -0.67874169  0.58046971 -1.30928245  1.17881512 -0.84889827 -0.79432687\n",
            " -0.67771225  0.60864067  0.6506853   0.57549864  0.24701516  0.22990703\n",
            " -1.70155483 -0.73434869 -0.97777834  1.27682316 -1.49115105  0.91160083\n",
            " -0.36329764  0.80810969 -0.69506127  1.56674127 -0.89908043 -0.86369239\n",
            " -0.84463754 -0.49193707 -1.21596311 -1.26567702 -1.67985302 -1.46723935\n",
            " -0.84026904  1.50470025  1.32933462 -0.74301746 -0.27132799 -0.7972667\n",
            "  1.37938488 -0.79305516  0.36991749  0.4358144   0.67128262  0.85284747\n",
            "  0.81712227  0.03355182 -0.51431716 -0.72207546  1.1579511  -0.6253595\n",
            " -0.44789591 -0.42889456 -0.76582832 -0.55411161  0.43819775 -1.54160842\n",
            "  0.49430109 -0.11558199 -0.56005165 -1.08722524 -2.42437471 -1.66897452\n",
            " -0.09608599 -1.04322795 -0.53241509 -1.78361852 -0.04977436 -1.52916231\n",
            "  2.14299188  0.20512529  0.63804789  0.48275615 -1.38052434  0.10914035\n",
            " -0.71090627  0.27000974  1.40439248 -0.71152031  1.10860262 -0.14772032\n",
            " -0.88203349  0.52690702  0.8277062   1.14254143 -0.29411229  0.08286434\n",
            " -0.67392491  1.19600601 -0.16962694 -0.85585833  0.297212   -0.79017077\n",
            " -0.88101436  0.09150438 -0.18638568  0.95140071  0.47535625  1.92455008\n",
            " -0.77802424  1.07280111 -0.4920162   0.74470051  0.52899064  0.11229356\n",
            "  0.09298493 -1.02520406 -3.4319221   1.32535993  0.58835699 -1.15783164\n",
            "  0.5380575  -0.04074774 -0.61576357 -1.02535272 -0.58935323  2.20797541\n",
            "  1.10472511 -0.65008794  0.34910047  0.51363576 -0.02437365  1.58913012\n",
            " -0.24821184  0.98362675 -0.02626934 -0.30655116 -1.61373295 -1.32601341\n",
            " -0.32144776 -0.2018533   1.24541277 -0.43429919 -0.36178862 -0.34919715\n",
            "  0.589028    0.38781991 -0.39623216 -0.68927284 -0.40414491 -0.24844578\n",
            "  0.92715314  0.71487374]\n",
            "Epoch=1529, Loss=0.9364, Weights=[-1.23234763  1.08309379  0.38429266  0.6092165  -1.69203236 -2.53455203\n",
            " -1.77939308  0.04645334  0.07183279  0.30192135  1.651963   -0.78793965\n",
            " -0.31435962 -0.33766076  0.39304834 -0.27858444  0.39162261 -0.44440202\n",
            "  0.68298274 -1.09737334 -1.98591846 -0.01793882  1.18092459  0.85481177\n",
            " -0.9506183  -2.41170216  0.18095736 -0.54391759 -1.16842061 -0.90014049\n",
            " -1.00642546 -0.99101611  1.73328613 -0.87359404  1.5634332   0.13549892\n",
            " -1.02352302 -1.5898611  -0.61834488  0.73876514  0.16182674  0.48255664\n",
            " -0.99519146 -0.86798553 -1.24563994  1.35854913  0.73392182  0.56013296\n",
            " -0.463064    0.27045104 -0.36885916 -0.21141271 -0.74738074  1.038407\n",
            "  0.55542933 -1.03283129 -1.14147699 -0.05394584 -0.06768817 -1.0058765\n",
            " -0.67907973  0.58124427 -1.30946563  1.17708076 -0.84912007 -0.79227811\n",
            " -0.67659394  0.60684346  0.64881132  0.57606165  0.24795011  0.22923535\n",
            " -1.70246453 -0.73463601 -0.97772556  1.27815749 -1.491166    0.90929834\n",
            " -0.36313725  0.81046844 -0.69462357  1.56488666 -0.90025354 -0.86264152\n",
            " -0.84428754 -0.49301699 -1.21560179 -1.26393838 -1.6786514  -1.4669086\n",
            " -0.8405712   1.50316559  1.32796127 -0.74236991 -0.27104799 -0.79846273\n",
            "  1.37970412 -0.79192362  0.36992415  0.43615009  0.67163253  0.85211901\n",
            "  0.81652321  0.03431741 -0.51344908 -0.72242333  1.15752437 -0.6253259\n",
            " -0.44715055 -0.42780211 -0.76583215 -0.55443275  0.43940272 -1.54042317\n",
            "  0.49260141 -0.11741193 -0.55969221 -1.08639534 -2.42402723 -1.66933853\n",
            " -0.09597518 -1.04230785 -0.53118066 -1.78312383 -0.05127457 -1.53101865\n",
            "  2.14217902  0.20471604  0.63775583  0.4828209  -1.37979799  0.11011395\n",
            " -0.71088544  0.26949577  1.40413044 -0.71262275  1.10688815 -0.14762146\n",
            " -0.88056907  0.52704951  0.8269959   1.14273808 -0.29374044  0.08155434\n",
            " -0.67577015  1.1962885  -0.16887173 -0.85635703  0.2963744  -0.79141502\n",
            " -0.88135404  0.09280477 -0.18605175  0.95074462  0.47637345  1.92608189\n",
            " -0.77881187  1.07092251 -0.4932191   0.74304564  0.5277025   0.11260487\n",
            "  0.09366423 -1.02394394 -3.42987564  1.32521371  0.58610977 -1.15773038\n",
            "  0.5388408  -0.04210557 -0.61683845 -1.02480445 -0.5884532   2.2077235\n",
            "  1.10430064 -0.65007337  0.34860295  0.51305256 -0.02510341  1.58841343\n",
            " -0.24812621  0.9825433  -0.02859679 -0.30705657 -1.61266888 -1.32484018\n",
            " -0.32054316 -0.20206866  1.24526036 -0.43348467 -0.36261805 -0.3514422\n",
            "  0.58886958  0.38913813 -0.39638082 -0.68993821 -0.40384936 -0.24822584\n",
            "  0.92730899  0.7142602 ]\n",
            "Epoch=1539, Loss=0.9343, Weights=[-1.23369952  1.08205673  0.38358024  0.60871044 -1.68960149 -2.53205724\n",
            " -1.78022565  0.04640108  0.07366788  0.30199479  1.649479   -0.79019096\n",
            " -0.31483851 -0.3373547   0.39424058 -0.27854295  0.38978033 -0.4442001\n",
            "  0.68398736 -1.09901603 -1.98790496 -0.01812468  1.18058826  0.85402904\n",
            " -0.95036778 -2.41150493  0.18064485 -0.54344511 -1.16731833 -0.89997212\n",
            " -1.00731107 -0.99102617  1.73355205 -0.87500539  1.56190542  0.13567526\n",
            " -1.02328202 -1.58994359 -0.61719137  0.73882111  0.15975412  0.48154851\n",
            " -0.99492342 -0.86887801 -1.24730768  1.3577628   0.73397279  0.56058548\n",
            " -0.4626732   0.2702342  -0.36950744 -0.21136318 -0.7473897   1.03724062\n",
            "  0.55490395 -1.03205459 -1.14062766 -0.05393142 -0.06892675 -1.00732888\n",
            " -0.67941801  0.58201692 -1.30964903  1.17535034 -0.84933944 -0.79023301\n",
            " -0.67548027  0.60504866  0.64694379  0.57662495  0.24888035  0.22856145\n",
            " -1.70337134 -0.73491987 -0.97767527  1.27948476 -1.49118105  0.90700349\n",
            " -0.3629767   0.81281802 -0.69418946  1.56303968 -0.9014224  -0.86159698\n",
            " -0.84394093 -0.49409296 -1.21523798 -1.26220056 -1.67745222 -1.46658077\n",
            " -0.84087174  1.50163706  1.32658658 -0.74173026 -0.27076762 -0.79965418\n",
            "  1.38002128 -0.79079575  0.36993214  0.43648652  0.67198109  0.85139269\n",
            "  0.81592562  0.03507923 -0.51258385 -0.72276895  1.15709894 -0.62529357\n",
            " -0.44640645 -0.42671    -0.76583325 -0.55475282  0.44060369 -1.53924126\n",
            "  0.49090261 -0.11923974 -0.55933219 -1.08556678 -2.4236801  -1.66969883\n",
            " -0.09586204 -1.04139102 -0.5299506  -1.7826276  -0.05277015 -1.53287508\n",
            "  2.14136522  0.20430846  0.63746459  0.48288464 -1.3790724   0.11108552\n",
            " -0.71086668  0.26898418  1.40387015 -0.71372591  1.10517442 -0.14752242\n",
            " -0.87910604  0.527192    0.82628631  1.14293237 -0.29337093  0.08024857\n",
            " -0.67761145  1.19656818 -0.16811768 -0.85685377  0.29553744 -0.79265728\n",
            " -0.88169314  0.09410079 -0.18571799  0.95009302  0.47738679  1.92760441\n",
            " -0.77959874  1.06905145 -0.49442209  0.74138773  0.52641755  0.11291794\n",
            "  0.09434044 -1.02268482 -3.42783115  1.3250644   0.58386772 -1.15762276\n",
            "  0.5396201  -0.04346811 -0.61790825 -1.0242534  -0.58755948  2.20746902\n",
            "  1.10387865 -0.65005814  0.3481057   0.51247072 -0.02583381  1.58769447\n",
            " -0.24803924  0.98146195 -0.03092571 -0.30756278 -1.61160228 -1.32366569\n",
            " -0.31964047 -0.20228473  1.24510853 -0.43267068 -0.36344733 -0.35368533\n",
            "  0.58871141  0.39045478 -0.39652764 -0.69060099 -0.40355544 -0.24800788\n",
            "  0.92746527  0.71364772]\n",
            "Epoch=1549, Loss=0.9322, Weights=[-1.23505255  1.08102136  0.38287088  0.60820295 -1.68717711 -2.52956348\n",
            " -1.78105391  0.04634695  0.07549837  0.30207097  1.64699978 -0.79244094\n",
            " -0.31531608 -0.33704953  0.39542837 -0.27850155  0.38794152 -0.44400112\n",
            "  0.68498835 -1.10065394 -1.98988777 -0.01831328  1.18025112  0.85324871\n",
            " -0.95011934 -2.4113106   0.18033514 -0.5429731  -1.16622001 -0.89980164\n",
            " -1.00819224 -0.99103687  1.73381621 -0.87641453  1.56037972  0.13585189\n",
            " -1.02304061 -1.59002757 -0.61604186  0.73887723  0.1576859   0.48054065\n",
            " -0.9946576  -0.86976901 -1.24897148  1.35697721  0.73402186  0.56103793\n",
            " -0.46228187  0.27001677 -0.37015574 -0.21131245 -0.74739768  1.03607573\n",
            "  0.55437974 -1.03127973 -1.13978097 -0.05391757 -0.07016378 -1.00877952\n",
            " -0.67975651  0.58278767 -1.30983266  1.17362387 -0.84955638 -0.7881916\n",
            " -0.67437122  0.60325631  0.64508268  0.5771885   0.24980593  0.22788535\n",
            " -1.7042753  -0.73520028 -0.97762743  1.280805   -1.49119622  0.90471627\n",
            " -0.36281599  0.81515844 -0.69375892  1.56120029 -0.90258703 -0.86055875\n",
            " -0.8435977  -0.49516501 -1.21487169 -1.26046356 -1.67625551 -1.46625588\n",
            " -0.84117067  1.50011466  1.32521058 -0.74109849 -0.27048688 -0.80084108\n",
            "  1.38033636 -0.78967156  0.36994142  0.43682369  0.6723283   0.8506685\n",
            "  0.8153295   0.0358373  -0.51172143 -0.72311232  1.15667481 -0.62526252\n",
            " -0.4456636  -0.42561823 -0.76583163 -0.55507184  0.44180068 -1.53806267\n",
            "  0.48920468 -0.12106542 -0.55897158 -1.08473954 -2.42333329 -1.67005543\n",
            " -0.09574657 -1.04047747 -0.52872489 -1.78212987 -0.05426113 -1.53473156\n",
            "  2.1405505   0.20390253  0.63717415  0.48294738 -1.37834757  0.11205505\n",
            " -0.71084998  0.26847496  1.40361162 -0.71482976  1.10346147 -0.14742322\n",
            " -0.8776444   0.5273345   0.82557741  1.14312429 -0.29300374  0.07894704\n",
            " -0.67944883  1.19684506 -0.1673648  -0.85734854  0.29470113 -0.79389754\n",
            " -0.88203167  0.09539246 -0.18538436  0.94944592  0.47839627  1.92911765\n",
            " -0.78038486  1.06718791 -0.49562515  0.7397268   0.52513578  0.11323275\n",
            "  0.09501354 -1.0214267  -3.42578865  1.32491199  0.58163084 -1.15750876\n",
            "  0.54039539 -0.04483534 -0.61897298 -1.02369958 -0.58667207  2.20721198\n",
            "  1.10345915 -0.65004222  0.34760873  0.51189026 -0.02656485  1.58697324\n",
            " -0.24795095  0.98038269 -0.0332561  -0.30806977 -1.61053315 -1.32248996\n",
            " -0.3187397  -0.20250151  1.24495729 -0.43185723 -0.36427646 -0.35592655\n",
            "  0.58855347  0.39176987 -0.39667261 -0.69126119 -0.40326312 -0.24779192\n",
            "  0.92762196  0.71303629]\n",
            "Epoch=1559, Loss=0.9300, Weights=[-1.23640673  1.07998766  0.38216459  0.60769406 -1.68475924 -2.52707082\n",
            " -1.78187787  0.04629098  0.07732427  0.30214988  1.64452534 -0.7946896\n",
            " -0.31579232 -0.33674521  0.39661169 -0.27846026  0.3861062  -0.44380507\n",
            "  0.6859857  -1.10228707 -1.99186685 -0.0185046   1.17991314  0.85247078\n",
            " -0.94987296 -2.4111192   0.18002821 -0.54250158 -1.16512567 -0.89962905\n",
            " -1.00906896 -0.99104819  1.7340786  -0.87782147  1.55885609  0.1360288\n",
            " -1.02279876 -1.59011301 -0.61489634  0.73893348  0.15562207  0.47953309\n",
            " -0.994394   -0.87065853 -1.25063136  1.35619238  0.73406906  0.56149027\n",
            " -0.46189002  0.26979877 -0.37080404 -0.21126054 -0.74740468  1.03491234\n",
            "  0.55385669 -1.03050673 -1.13893691 -0.0539043  -0.07139925 -1.01022841\n",
            " -0.68009521  0.58355651 -1.31001653  1.17190133 -0.84977093 -0.78615388\n",
            " -0.67326675  0.60146642  0.64322798  0.57775228  0.25072687  0.22720708\n",
            " -1.70517644 -0.73547726 -0.97758202  1.28211822 -1.4912115   0.90243665\n",
            " -0.36265515  0.81748968 -0.69333194  1.55936847 -0.90374746 -0.85952679\n",
            " -0.84325781 -0.49623315 -1.21450294 -1.25872738 -1.67506125 -1.46593393\n",
            " -0.84146798  1.4985984   1.32383327 -0.7404746  -0.27020578 -0.80202343\n",
            "  1.38064935 -0.78855106  0.36995201  0.43716162  0.67267418  0.84994645\n",
            "  0.81473485  0.0365916  -0.51086183 -0.72345344  1.15625195 -0.62523274\n",
            " -0.44492199 -0.42452678 -0.76582732 -0.55538982  0.44299369 -1.53688739\n",
            "  0.48750762 -0.12288896 -0.55861037 -1.08391363 -2.42298682 -1.67040834\n",
            " -0.0956288  -1.03956717 -0.52750351 -1.78163066 -0.05574752 -1.53658807\n",
            "  2.13973487  0.20349822  0.6368845   0.48300914 -1.3776235   0.11302252\n",
            " -0.71083533  0.26796811  1.40335483 -0.71593425  1.10174929 -0.14732389\n",
            " -0.87618416  0.52747703  0.82486919  1.14331383 -0.29263884  0.07764974\n",
            " -0.68128232  1.19711914 -0.1666131  -0.85784137  0.29386547 -0.79513582\n",
            " -0.88236964  0.0966798  -0.18505086  0.94880327  0.47940186  1.93062161\n",
            " -0.78117023  1.06533191 -0.49682827  0.73806285  0.52385717  0.1135493\n",
            "  0.09568353 -1.02016961 -3.42374813  1.32475648  0.57939915 -1.1573884\n",
            "  0.54116668 -0.04620726 -0.62003261 -1.02314299 -0.58579097  2.20695238\n",
            "  1.10304215 -0.65002563  0.34711204  0.51131119 -0.02729653  1.58624976\n",
            " -0.24786133  0.9793055  -0.03558798 -0.30857753 -1.60946148 -1.321313\n",
            " -0.31784084 -0.20271899  1.24480663 -0.43104432 -0.36510546 -0.35816584\n",
            "  0.58839577  0.39308339 -0.39681575 -0.69191882 -0.4029724  -0.24757794\n",
            "  0.92777905  0.71242591]\n",
            "Epoch=1569, Loss=0.9279, Weights=[-1.23776203  1.07895562  0.38146135  0.60718381 -1.68234788 -2.52457933\n",
            " -1.78269753  0.04623322  0.07914557  0.30223151  1.64205572 -0.79693693\n",
            " -0.31626722 -0.33644172  0.39779051 -0.27841912  0.38427441 -0.44361193\n",
            "  0.68697936 -1.10391544 -1.99384216 -0.01869865  1.17957431  0.85169525\n",
            " -0.94962866 -2.41093074  0.17972405 -0.54203053 -1.16403531 -0.89945436\n",
            " -1.00994123 -0.99106013  1.73433923 -0.8792262   1.55733453  0.13620598\n",
            " -1.02255648 -1.59019991 -0.6137548   0.73898987  0.15356264  0.47852582\n",
            " -0.9941326  -0.87154662 -1.25228737  1.3554083   0.73411439  0.56194248\n",
            " -0.46149767  0.26958021 -0.37145235 -0.21120748 -0.7474107   1.03375046\n",
            "  0.55333482 -1.02973557 -1.13809549 -0.05389159 -0.07263316 -1.01167554\n",
            " -0.68043411  0.58432342 -1.31020064  1.17018275 -0.8499831  -0.78411987\n",
            " -0.67216685  0.599679    0.64137965  0.57831628  0.25164321  0.22652666\n",
            " -1.70607479 -0.73575084 -0.977539    1.28342446 -1.49122691  0.90016464\n",
            " -0.36249418  0.81981176 -0.69290851  1.5575442  -0.90490371 -0.85850108\n",
            " -0.84292123 -0.49729738 -1.21413175 -1.25699201 -1.67386945 -1.46561492\n",
            " -0.84176369  1.49708829  1.32245466 -0.73985857 -0.26992431 -0.80320123\n",
            "  1.38096026 -0.78743426  0.36996388  0.4375003   0.67301874  0.84922651\n",
            "  0.81414164  0.03734215 -0.51000504 -0.72379232  1.15583035 -0.62520423\n",
            " -0.44418161 -0.42343567 -0.76582031 -0.55570678  0.44418275 -1.53571543\n",
            "  0.48581143 -0.12471036 -0.55824855 -1.08308902 -2.42264068 -1.67075756\n",
            " -0.09550873 -1.03866012 -0.52628646 -1.78112998 -0.05722936 -1.53844458\n",
            "  2.13891837  0.20309551  0.63659563  0.48306994 -1.3769002   0.11398793\n",
            " -0.71082274  0.26746363  1.40309978 -0.71703936  1.10003793 -0.14722445\n",
            " -0.87472532  0.52761961  0.82416163  1.14350098 -0.2922762   0.07635665\n",
            " -0.68311195  1.19739041 -0.16586259 -0.85833224  0.29303048 -0.79637212\n",
            " -0.88270705  0.09796283 -0.18471748  0.94816505  0.48040355  1.93211631\n",
            " -0.78195484  1.06348343 -0.49803143  0.73639589  0.52258175  0.11386759\n",
            "  0.0963504  -1.01891357 -3.42170961  1.32459787  0.57717263 -1.15726167\n",
            "  0.54193396 -0.04758384 -0.62108716 -1.02258366 -0.58491618  2.20669024\n",
            "  1.10262764 -0.65000835  0.34661566  0.51073351 -0.02802885  1.58552403\n",
            " -0.24777039  0.97823037 -0.03792134 -0.30908606 -1.60838728 -1.32013481\n",
            " -0.31694387 -0.20293715  1.24465655 -0.43023196 -0.36593431 -0.36040322\n",
            "  0.58823833  0.39439536 -0.39695707 -0.69257388 -0.40268325 -0.24736594\n",
            "  0.92793652  0.71181658]\n",
            "Epoch=1579, Loss=0.9258, Weights=[-1.23911846  1.07792525  0.38076117  0.60667225 -1.67994306 -2.52208907\n",
            " -1.78351291  0.04617369  0.08096228  0.30231585  1.63959093 -0.79918292\n",
            " -0.31674077 -0.33613904  0.39896481 -0.27837815  0.38244618 -0.44342168\n",
            "  0.6879693  -1.10553904 -1.99581366 -0.01889542  1.17923459  0.85092211\n",
            " -0.94938643 -2.41074525  0.17942264 -0.54155996 -1.16294892 -0.89927756\n",
            " -1.01080903 -0.99107269  1.73459809 -0.88062872  1.55581504  0.13638343\n",
            " -1.02231375 -1.59028825 -0.61261723  0.73904641  0.15150759  0.47751886\n",
            " -0.99387339 -0.87243327 -1.25393952  1.354625    0.73415789  0.56239455\n",
            " -0.46110484  0.26936112 -0.37210064 -0.21115326 -0.74741576  1.03259011\n",
            "  0.55281411 -1.02896628 -1.1372567  -0.05387945 -0.07386551 -1.0131209\n",
            " -0.6807732   0.58508841 -1.310385    1.16846813 -0.85019289 -0.78208959\n",
            " -0.67107149  0.59789408  0.63953768  0.57888045  0.25255498  0.22584413\n",
            " -1.70697039 -0.73602104 -0.97749835  1.28472376 -1.49124243  0.8979002\n",
            " -0.36233309  0.82212468 -0.6924886   1.55572745 -0.9060558  -0.85748158\n",
            " -0.84258793 -0.49835772 -1.21375814 -1.25525746 -1.67268011 -1.46529888\n",
            " -0.8420578   1.49558431  1.32107476 -0.73925038 -0.26964247 -0.80437449\n",
            "  1.38126908 -0.78632115  0.36997702  0.43783974  0.673362    0.8485087\n",
            "  0.81354988  0.03808894 -0.50915106 -0.72412896  1.15541001 -0.62517698\n",
            " -0.44344244 -0.42234489 -0.76581063 -0.55602272  0.44536785 -1.53454678\n",
            "  0.4841161  -0.12652961 -0.55788612 -1.08226572 -2.42229488 -1.67110312\n",
            " -0.09538638 -1.03775631 -0.52507373 -1.78062785 -0.05870665 -1.54030106\n",
            "  2.13810102  0.20269438  0.63630752  0.48312978 -1.37617769  0.11495124\n",
            " -0.71081218  0.2669615   1.40284646 -0.71814506  1.09832739 -0.1471249\n",
            " -0.87326787  0.52776223  0.82345473  1.14368574 -0.2919158   0.07506778\n",
            " -0.68493774  1.19765887 -0.16511326 -0.85882116  0.29219616 -0.79760645\n",
            " -0.8830439   0.09924157 -0.18438421  0.94753126  0.48140135  1.93360176\n",
            " -0.78273868  1.06164249 -0.49923463  0.73472596  0.52130949  0.11418762\n",
            "  0.09701413 -1.01765858 -3.4196731   1.32443615  0.57495129 -1.15712857\n",
            "  0.54269725 -0.0489651  -0.62213662 -1.02202159 -0.5840477   2.20642555\n",
            "  1.10221563 -0.6499904   0.34611958  0.51015724 -0.02876179  1.58479605\n",
            " -0.24767814  0.97715728 -0.04025619 -0.30959534 -1.60731055 -1.3189554\n",
            " -0.3160488  -0.20315599  1.24450703 -0.42942016 -0.36676301 -0.36263868\n",
            "  0.58808112  0.39570578 -0.39709657 -0.69322635 -0.40239565 -0.24715592\n",
            "  0.92809437  0.71120829]\n",
            "Epoch=1589, Loss=0.9237, Weights=[-1.24047599  1.07689652  0.38006404  0.6061594  -1.67754477 -2.51960012\n",
            " -1.78432402  0.04611243  0.08277437  0.30240289  1.637131   -0.80142757\n",
            " -0.31721298 -0.33583716  0.40013457 -0.2783374   0.38062155 -0.44323429\n",
            "  0.68895548 -1.10715789 -1.99778131 -0.0190949   1.17889396  0.85015138\n",
            " -0.94914626 -2.41056273  0.17912398 -0.54108987 -1.16186651 -0.89909867\n",
            " -1.01167236 -0.99108586  1.7348552  -0.88202904  1.55429762  0.13656114\n",
            " -1.02207059 -1.59037801 -0.61148361  0.73910309  0.14945692  0.4765122\n",
            " -0.99361637 -0.87331851 -1.25558785  1.35384249  0.73419955  0.56284645\n",
            " -0.46071154  0.26914151 -0.37274891 -0.21109792 -0.74741986  1.03143129\n",
            "  0.55229458 -1.02819885 -1.13642053 -0.05386787 -0.0750963  -1.01456449\n",
            " -0.68111246  0.58585147 -1.31056961  1.16675746 -0.85040034 -0.78006304\n",
            " -0.66998065  0.59611167  0.63770204  0.57944479  0.25346221  0.22515951\n",
            " -1.70786327 -0.73628787 -0.97746003  1.28601613 -1.49125809  0.89564334\n",
            " -0.3621719   0.82442845 -0.69207219  1.5539182  -0.90720378 -0.85646826\n",
            " -0.84225788 -0.49941418 -1.21338212 -1.25352371 -1.67149323 -1.46498579\n",
            " -0.84235029  1.49408648  1.3196936  -0.73865002 -0.26936028 -0.80554322\n",
            "  1.3815758  -0.78521176  0.36999143  0.43817994  0.67370398  0.84779301\n",
            "  0.81295955  0.03883199 -0.50829987 -0.72446337  1.15499089 -0.625151\n",
            " -0.44270447 -0.42125443 -0.76579828 -0.55633765  0.44654901 -1.53338143\n",
            "  0.48242163 -0.1283467  -0.55752306 -1.08144372 -2.4219494  -1.67144501\n",
            " -0.09526176 -1.03685574 -0.52386529 -1.7801243  -0.06017943 -1.54215749\n",
            "  2.13728283  0.20229481  0.63602016  0.48318868 -1.37545596  0.11591247\n",
            " -0.71080366  0.26646174  1.40259488 -0.71925132  1.09661769 -0.14702529\n",
            " -0.87181182  0.52790493  0.82274846  1.1438681  -0.29155762  0.07378311\n",
            " -0.68675971  1.19792452 -0.16436514 -0.85930814  0.29136253 -0.79883881\n",
            " -0.88338022  0.10051605 -0.18405103  0.94690186  0.48239523  1.93507798\n",
            " -0.78352176  1.05980906 -0.50043783  0.73305305  0.52004041  0.11450937\n",
            "  0.09767472 -1.01640467 -3.41763861  1.32427133  0.57273513 -1.1569891\n",
            "  0.54345653 -0.050351   -0.62318098 -1.02145679 -0.58318554  2.20615833\n",
            "  1.10180611 -0.64997176  0.34562382  0.50958239 -0.02949536  1.58406584\n",
            " -0.24758457  0.97608622 -0.04259253 -0.31010538 -1.60623129 -1.31777479\n",
            " -0.3151556  -0.2033755   1.24435808 -0.42860892 -0.36759158 -0.36487223\n",
            "  0.58792417  0.39701465 -0.39723427 -0.69387625 -0.40210958 -0.24694786\n",
            "  0.92825257  0.71060104]\n",
            "Epoch=1599, Loss=0.9216, Weights=[-1.24183462  1.07586944  0.37936996  0.60564532 -1.67515305 -2.51711254\n",
            " -1.78513085  0.04604948  0.08458185  0.30249263  1.63467595 -0.80367088\n",
            " -0.31768383 -0.33553604  0.40129976 -0.27829688  0.37880054 -0.44304975\n",
            "  0.68993788 -1.10877198 -1.99974507 -0.01929709  1.1785524   0.84938303\n",
            " -0.94890815 -2.41038321  0.17882804 -0.54062025 -1.16078808 -0.89891769\n",
            " -1.01253123 -0.99109964  1.73511055 -0.88342714  1.55278225  0.1367391\n",
            " -1.02182697 -1.59046918 -0.61035394  0.73915992  0.14741064  0.47550587\n",
            " -0.99336152 -0.87420236 -1.25723237  1.35306077  0.7342394   0.56329815\n",
            " -0.46031778  0.26892141 -0.37339714 -0.21104146 -0.74742301  1.03027402\n",
            "  0.55177623 -1.0274333  -1.13558699 -0.05385685 -0.07632554 -1.01600629\n",
            " -0.6814519   0.58661259 -1.31075449  1.16505075 -0.85060546 -0.77804024\n",
            " -0.6688943   0.59433179  0.6358727   0.58000926  0.25436493  0.22447284\n",
            " -1.70875346 -0.73655137 -0.97742402  1.28730161 -1.49127388  0.89339402\n",
            " -0.36201062  0.82672306 -0.69165928  1.55211642 -0.90834765 -0.85546109\n",
            " -0.84193105 -0.50046679 -1.21300372 -1.25179079 -1.67030881 -1.46467566\n",
            " -0.84264118  1.49259479  1.31831118 -0.73805748 -0.26907774 -0.80670743\n",
            "  1.38188044 -0.78410608  0.37000709  0.43852089  0.67404468  0.84707942\n",
            "  0.81237065  0.0395713  -0.50745147 -0.72479554  1.154573   -0.62512628\n",
            " -0.4419677  -0.42016429 -0.76578328 -0.5566516   0.44772623 -1.53221938\n",
            "  0.480728   -0.13016164 -0.55715936 -1.08062302 -2.42160425 -1.67178325\n",
            " -0.09513488 -1.0359584  -0.52266114 -1.77961935 -0.0616477  -1.54401385\n",
            "  2.13646383  0.20189677  0.63573353  0.48324666 -1.37473502  0.11687157\n",
            " -0.71079716  0.26596434  1.40234503 -0.7203581   1.09490886 -0.14692561\n",
            " -0.87035718  0.52804771  0.82204281  1.14404806 -0.29120163  0.07250265\n",
            " -0.6885779   1.19818736 -0.16361822 -0.85979317  0.2905296  -0.80006922\n",
            " -0.88371599  0.10178628 -0.18371794  0.94627683  0.48338518  1.93654499\n",
            " -0.78430407  1.05798316 -0.50164103  0.73137718  0.51877449  0.11483285\n",
            "  0.09833215 -1.01515186 -3.41560614  1.3241034   0.57052416 -1.15684326\n",
            "  0.54421181 -0.05174155 -0.62422025 -1.02088927 -0.5823297   2.20588858\n",
            "  1.1013991  -0.64995245  0.34512839  0.50900897 -0.03022956  1.5833334\n",
            " -0.2474897   0.97501716 -0.04493037 -0.31061616 -1.6051495  -1.31659298\n",
            " -0.31426429 -0.20359567  1.2442097  -0.42779825 -0.36842001 -0.36710386\n",
            "  0.58776748  0.39832197 -0.39737018 -0.69452357 -0.40182502 -0.24674178\n",
            "  0.92841111  0.70999484]\n",
            "Epoch=1609, Loss=0.9195, Weights=[-1.24319434  1.07484399  0.37867893  0.60513003 -1.67276789 -2.51462639\n",
            " -1.78593341  0.04598487  0.08638472  0.30258505  1.6322258  -0.80591284\n",
            " -0.31815332 -0.33523566  0.40246037 -0.27825663  0.37698318 -0.44286803\n",
            "  0.69091645 -1.11038132 -2.0017049  -0.019502    1.17820989  0.84861709\n",
            " -0.9486721  -2.4102067   0.17853481 -0.54015111 -1.15971363 -0.89873461\n",
            " -1.01338562 -0.99111402  1.73536414 -0.88482303  1.55126894  0.13691731\n",
            " -1.0215829  -1.59056174 -0.6092282   0.7392169   0.14536874  0.47449986\n",
            " -0.99310884 -0.87508483 -1.25887313  1.35227985  0.73427746  0.56374964\n",
            " -0.45992357  0.26870084 -0.37404534 -0.21098391 -0.7474252   1.02911831\n",
            "  0.55125906 -1.02666963 -1.13475606 -0.0538464  -0.07755321 -1.0174463\n",
            " -0.68179148  0.58737177 -1.31093963  1.163348   -0.85080827 -0.7760212\n",
            " -0.66781241  0.59255446  0.63404964  0.58057384  0.25526317  0.22378414\n",
            " -1.70964099 -0.73681155 -0.97739029  1.28858024 -1.49128981  0.89115223\n",
            " -0.36184927  0.82900853 -0.69124985  1.55032208 -0.90948746 -0.85446003\n",
            " -0.8416074  -0.50151554 -1.21262295 -1.25005867 -1.66912686 -1.46436851\n",
            " -0.84293047  1.49110924  1.31692751 -0.73747273 -0.26879484 -0.80786711\n",
            "  1.38218298 -0.78300412  0.37002398  0.43886262  0.67438413  0.84636795\n",
            "  0.81178315  0.04030686 -0.50660586 -0.7251255   1.15415632 -0.62510283\n",
            " -0.44123211 -0.41907446 -0.76576565 -0.55696457  0.44889953 -1.53106061\n",
            "  0.47903522 -0.13197442 -0.55679501 -1.07980361 -2.42125944 -1.67211785\n",
            " -0.09500575 -1.03506427 -0.52146125 -1.77911301 -0.0631115  -1.5458701\n",
            "  2.13564404  0.20150024  0.63544762  0.48330372 -1.37401489  0.11782856\n",
            " -0.71079267  0.26546928  1.40209691 -0.72146537  1.09320091 -0.1468259\n",
            " -0.86890394  0.52819059  0.82133777  1.14422562 -0.29084781  0.07122638\n",
            " -0.69039233  1.19844738 -0.16287251 -0.86027625  0.28969737 -0.80129768\n",
            " -0.88405123  0.10305228 -0.18338492  0.94565615  0.4843712   1.9380028\n",
            " -0.78508559  1.05616478 -0.50284422  0.72969837  0.51751175  0.11515806\n",
            "  0.09898643 -1.01390016 -3.41357571  1.32393236  0.56831836 -1.15669105\n",
            "  0.54496309 -0.05313672 -0.62525441 -1.02031905 -0.58148017  2.20561631\n",
            "  1.1009946  -0.64993244  0.34463329  0.50843698 -0.03096437  1.58259873\n",
            " -0.24739353  0.97395009 -0.04726971 -0.31112767 -1.60406518 -1.31540997\n",
            " -0.31337484 -0.20381649  1.24406186 -0.42698815 -0.3692483  -0.36933357\n",
            "  0.58761103  0.39962775 -0.3975043  -0.69516832 -0.40154196 -0.24653766\n",
            "  0.92856999  0.70938968]\n",
            "Epoch=1619, Loss=0.9174, Weights=[-1.24455512  1.07382018  0.37799094  0.60461357 -1.67038931 -2.51214175\n",
            " -1.78673171  0.04591864  0.08818297  0.30268014  1.62978057 -0.80815344\n",
            " -0.31862146 -0.334936    0.40361637 -0.27821668  0.37516952 -0.44268911\n",
            "  0.69189116 -1.11198591 -2.00366077 -0.0197096   1.17786639  0.84785354\n",
            " -0.94843811 -2.41003321  0.17824428 -0.53968243 -1.15864316 -0.89854945\n",
            " -1.01423553 -0.991129    1.73561597 -0.88621671  1.54975769  0.13709576\n",
            " -1.02133837 -1.59065569 -0.60810639  0.73927403  0.14333121  0.47349418\n",
            " -0.99285832 -0.87596594 -1.26051013  1.35149976  0.73431374  0.56420088\n",
            " -0.45952894  0.26847982 -0.37469348 -0.21092527 -0.74742646  1.02796418\n",
            "  0.55074306 -1.02590784 -1.13392775 -0.0538365  -0.07877934 -1.0188845\n",
            " -0.68213122  0.58812901 -1.31112505  1.16164921 -0.85100878 -0.77400593\n",
            " -0.66673497  0.59077969  0.63223284  0.5811385   0.25615697  0.22309343\n",
            " -1.7105259  -0.73706843 -0.9773588   1.28985204 -1.49130587  0.88891796\n",
            " -0.36168785  0.83128487 -0.69084388  1.54853516 -0.91062322 -0.85346506\n",
            " -0.84128691 -0.50256045 -1.21223982 -1.24832737 -1.66794737 -1.46406433\n",
            " -0.84321815  1.48962983  1.31554261 -0.73689577 -0.2685116  -0.80902228\n",
            "  1.38248344 -0.78190589  0.3700421   0.43920511  0.67472234  0.84565858\n",
            "  0.81119707  0.04103869 -0.50576302 -0.72545323  1.15374083 -0.62508063\n",
            " -0.44049768 -0.41798495 -0.7657454  -0.55727657  0.45006891 -1.52990513\n",
            "  0.47734328 -0.13378502 -0.55643001 -1.07898547 -2.42091495 -1.67244883\n",
            " -0.0948744  -1.03417336 -0.52026563 -1.77860532 -0.06457085 -1.54772622\n",
            "  2.13482348  0.2011052   0.63516243  0.48335989 -1.37329555  0.1187834\n",
            " -0.7107902   0.26497658  1.40185051 -0.7225731   1.09149385 -0.14672618\n",
            " -0.8674521   0.52833357  0.82063333  1.14440077 -0.29049612  0.06995429\n",
            " -0.69220303  1.19870459 -0.16212801 -0.8607574   0.28886586 -0.8025242\n",
            " -0.88438594  0.10431408 -0.18305197  0.9450398   0.48535328  1.93945142\n",
            " -0.78586634  1.05435392 -0.50404737  0.72801664  0.51625217  0.11548498\n",
            "  0.09963753 -1.01264959 -3.41154733  1.32375822  0.56611774 -1.15653247\n",
            "  0.54571039 -0.05453652 -0.62628348 -1.01974612 -0.58063695  2.20534152\n",
            "  1.1005926  -0.64991176  0.34413853  0.50786644 -0.03169979  1.58186185\n",
            " -0.24729607  0.972885   -0.04961055 -0.31163991 -1.60297834 -1.31422578\n",
            " -0.31248726 -0.20403794  1.24391458 -0.42617864 -0.37007645 -0.37156137\n",
            "  0.58745484  0.40093199 -0.39763664 -0.69581049 -0.40126037 -0.2463355\n",
            "  0.92872918  0.70878556]\n",
            "Epoch=1629, Loss=0.9153, Weights=[-1.24591696  1.07279798  0.37730599  0.604096   -1.66801732 -2.50965868\n",
            " -1.78752576  0.04585082  0.08997659  0.3027779   1.6273403  -0.81039268\n",
            " -0.31908822 -0.33463704  0.40476774 -0.27817707  0.37335957 -0.44251297\n",
            "  0.69286199 -1.11358577 -2.00561262 -0.0199199   1.17752188  0.84709238\n",
            " -0.94820618 -2.40986277  0.17795643 -0.53921424 -1.15757667 -0.89836221\n",
            " -1.01508096 -0.99114458  1.73586604 -0.88760818  1.54824848  0.13727444\n",
            " -1.02109339 -1.590751   -0.60698849  0.73933131  0.14129806  0.47248885\n",
            " -0.99260994 -0.87684571 -1.26214342  1.35072048  0.73434825  0.56465187\n",
            " -0.4591339   0.26825837 -0.37534156 -0.21086557 -0.74742678  1.02681164\n",
            "  0.55022826 -1.02514794 -1.13310205 -0.05382716 -0.0800039  -1.0203209\n",
            " -0.68247109  0.58888429 -1.31131074  1.15995439 -0.851207   -0.77199444\n",
            " -0.66566195  0.58900751  0.63042227  0.58170321  0.25704635  0.22240076\n",
            " -1.71140821 -0.73732204 -0.97732954  1.29111705 -1.49132208  0.88669117\n",
            " -0.36152639  0.83355208 -0.69044135  1.54675561 -0.91175496 -0.85247613\n",
            " -0.84096956 -0.50360155 -1.21185436 -1.24659688 -1.66677035 -1.46376312\n",
            " -0.84350423  1.48815657  1.31415649 -0.73632658 -0.26822802 -0.81017295\n",
            "  1.3827818  -0.78081139  0.37006144  0.43954837  0.67505932  0.8449513\n",
            "  0.81061237  0.04176678 -0.50492295 -0.72577875  1.15332652 -0.62505969\n",
            " -0.43976441 -0.41689575 -0.76572254 -0.55758762  0.45123439 -1.52875293\n",
            "  0.47565218 -0.13559346 -0.55606434 -1.07816861 -2.42057078 -1.67277618\n",
            " -0.09474082 -1.03328565 -0.51907426 -1.77809628 -0.06602576 -1.54958219\n",
            "  2.13400218  0.20071163  0.63487793  0.48341516 -1.37257703  0.11973609\n",
            " -0.71078973  0.26448622  1.40160582 -0.72368127  1.08978772 -0.14662645\n",
            " -0.86600167  0.52847668  0.81992947  1.1445735  -0.29014655  0.06868638\n",
            " -0.69401002  1.19895898 -0.16138475 -0.8612366   0.28803508 -0.80374878\n",
            " -0.88472014  0.10557171 -0.18271907  0.94442774  0.4863314   1.94089087\n",
            " -0.7866463   1.05255058 -0.50525047  0.72633198  0.51499575  0.11581362\n",
            "  0.10028545 -1.01140017 -3.40952099  1.32358097  0.5639223  -1.15636754\n",
            "  0.54645369 -0.05594092 -0.62730744 -1.01917052 -0.57980005  2.20506422\n",
            "  1.10019311 -0.64989039  0.34364412  0.50729736 -0.03243582  1.58112276\n",
            " -0.24719732  0.97182186 -0.05195289 -0.31215287 -1.60188897 -1.31304041\n",
            " -0.31160152 -0.20426003  1.24376783 -0.42536972 -0.37090447 -0.37378726\n",
            "  0.58729891  0.40223469 -0.39776722 -0.69645009 -0.40098024 -0.24613529\n",
            "  0.92888868  0.70818247]\n",
            "Epoch=1639, Loss=0.9133, Weights=[-1.24727983  1.07177739  0.37662407  0.60357733 -1.66565193 -2.50717726\n",
            " -1.78831557  0.04578145  0.09176558  0.30287832  1.62490499 -0.81263056\n",
            " -0.31955362 -0.33433876  0.40591446 -0.27813781  0.37155337 -0.4423396\n",
            "  0.6938289  -1.11518089 -2.00756043 -0.0201329   1.17717634  0.84633362\n",
            " -0.94797629 -2.40969539  0.17767126 -0.53874651 -1.15651416 -0.8981729\n",
            " -1.01592191 -0.99116076  1.73611437 -0.88899742  1.54674133  0.13745334\n",
            " -1.02084794 -1.59084767 -0.60587449  0.73938874  0.13926927  0.47148386\n",
            " -0.9923637  -0.87772416 -1.26377301  1.34994205  0.73438101  0.56510256\n",
            " -0.45873845  0.2680365  -0.37598957 -0.21080482 -0.74742617  1.0256607\n",
            "  0.54971463 -1.02438994 -1.13227896 -0.05381837 -0.08122691 -1.02175547\n",
            " -0.68281109  0.58963761 -1.31149672  1.15826354 -0.85140297 -0.76998675\n",
            " -0.66459331  0.58723793  0.6286179   0.58226796  0.25793135  0.22170614\n",
            " -1.71228796 -0.73757239 -0.97730246  1.29237529 -1.49133844  0.88447186\n",
            " -0.36136488  0.83581017 -0.69004225  1.54498343 -0.9128827  -0.85149322\n",
            " -0.8406553  -0.50463883 -1.21146659 -1.2448672  -1.66559579 -1.4634649\n",
            " -0.84378871  1.48668945  1.31276917 -0.73576514 -0.26794411 -0.81131911\n",
            "  1.38307807 -0.77972064  0.37008197  0.4398924   0.67539509  0.84424612\n",
            "  0.81002906  0.04249115 -0.50408565 -0.72610206  1.15291338 -0.62504001\n",
            " -0.43903228 -0.41580686 -0.76569709 -0.55789774  0.45239597 -1.527604\n",
            "  0.47396191 -0.13739972 -0.555698   -1.07735302 -2.42022695 -1.67309993\n",
            " -0.09460504 -1.03240113 -0.51788712 -1.77758592 -0.06747625 -1.55143797\n",
            "  2.13318015  0.2003195   0.63459411  0.48346957 -1.37185932  0.12068661\n",
            " -0.71079126  0.26399821  1.40136286 -0.72478984  1.08808252 -0.14652675\n",
            " -0.86455264  0.52861992  0.81922617  1.14474381 -0.28979906  0.06742265\n",
            " -0.69581334  1.19921056 -0.16064271 -0.86171386  0.28720504 -0.80497145\n",
            " -0.88505381  0.10682517 -0.18238621  0.94381997  0.48730556  1.94232117\n",
            " -0.78742547  1.05075474 -0.50645352  0.72464443  0.5137425   0.11614397\n",
            "  0.10093018 -1.01015191 -3.40749672  1.32340061  0.56173203 -1.15619624\n",
            "  0.547193   -0.05734992 -0.62832631 -1.01859224 -0.57896946  2.20478443\n",
            "  1.09979612 -0.64986833  0.34315007  0.50672974 -0.03317245  1.58038147\n",
            " -0.24709729  0.97076068 -0.05429674 -0.31266654 -1.60079709 -1.31185388\n",
            " -0.31071764 -0.20448275  1.24362163 -0.42456139 -0.37173234 -0.37601124\n",
            "  0.58714325  0.40353586 -0.39789604 -0.69708711 -0.40070154 -0.24593704\n",
            "  0.92904847  0.70758042]\n",
            "Epoch=1649, Loss=0.9112, Weights=[-1.24864374  1.07075841  0.3759452   0.60305762 -1.66329316 -2.50469754\n",
            " -1.78910113  0.04571057  0.09354994  0.30298138  1.62247468 -0.81486706\n",
            " -0.32001765 -0.33404113  0.40705651 -0.27809894  0.36975095 -0.44216896\n",
            "  0.69479185 -1.11677128 -2.00950415 -0.02034858  1.17682974  0.84557726\n",
            " -0.94774844 -2.40953108  0.17738873 -0.53827925 -1.15545564 -0.89798151\n",
            " -1.01675838 -0.99117753  1.73636094 -0.89038445  1.54523621  0.13763246\n",
            " -1.02060202 -1.59094568 -0.60476439  0.73944633  0.13724485  0.47047924\n",
            " -0.99211958 -0.8786013  -1.26539894  1.34916445  0.73441203  0.56555295\n",
            " -0.45834262  0.26781425 -0.37663749 -0.21074303 -0.74742464  1.02451138\n",
            "  0.5492022  -1.02363384 -1.13145848 -0.05381013 -0.08244835 -1.02318823\n",
            " -0.68315122  0.59038898 -1.31168299  1.15657665 -0.85159669 -0.76798285\n",
            " -0.66352905  0.58547096  0.6268197   0.5828327   0.25881199  0.22100961\n",
            " -1.71316518 -0.73781952 -0.97727755  1.29362681 -1.49135495  0.88226\n",
            " -0.36120336  0.83805915 -0.68964656  1.54321857 -0.91400648 -0.85051629\n",
            " -0.84034412 -0.50567232 -1.21107651 -1.24313835 -1.6644237  -1.46316965\n",
            " -0.8440716   1.48522846  1.31138067 -0.73521142 -0.26765987 -0.81246079\n",
            "  1.38337226 -0.77863363  0.37010369  0.44023721  0.67572966  0.84354303\n",
            "  0.80944713  0.0432118  -0.50325111 -0.72642317  1.15250139 -0.62502159\n",
            " -0.43830129 -0.41471826 -0.76566905 -0.55820693  0.45355367 -1.52645834\n",
            "  0.47227247 -0.1392038  -0.55533098 -1.07653869 -2.41988344 -1.67342008\n",
            " -0.09446707 -1.0315198  -0.51670419 -1.77707425 -0.06892236 -1.55329355\n",
            "  2.13235743  0.19992879  0.63431096  0.48352312 -1.37114244  0.12163495\n",
            " -0.71079477  0.26351254  1.4011216  -0.72589878  1.08637827 -0.14642709\n",
            " -0.86310502  0.52876331  0.81852344  1.14491171 -0.28945364  0.06616308\n",
            " -0.697613    1.1994593  -0.15990191 -0.86218917  0.28637576 -0.80619219\n",
            " -0.88538698  0.1080745  -0.18205339  0.94321644  0.48827574  1.94374234\n",
            " -0.78820384  1.04896642 -0.50765649  0.72295399  0.51249241  0.11647603\n",
            "  0.10157171 -1.00890484 -3.40547451  1.32321714  0.55954693 -1.15601859\n",
            "  0.54792833 -0.0587635  -0.62934007 -1.01801129 -0.57814519  2.20450214\n",
            "  1.09940165 -0.64984559  0.34265638  0.50616361 -0.03390968  1.57963799\n",
            " -0.24699599  0.96970141 -0.05664209 -0.31318092 -1.59970269 -1.31066618\n",
            " -0.30983559 -0.20470608  1.24347595 -0.42375366 -0.37256008 -0.37823331\n",
            "  0.58698784  0.4048355  -0.39802312 -0.69772156 -0.40042427 -0.24574073\n",
            "  0.92920854  0.70697941]\n",
            "Epoch=1659, Loss=0.9092, Weights=[-1.25000865  1.06974102  0.37526935  0.6025369  -1.66094102 -2.50221959\n",
            " -1.78988246  0.0456382   0.09532967  0.30308707  1.62004938 -0.81710219\n",
            " -0.32048031 -0.33374414  0.40819386 -0.27806049  0.36795233 -0.44200103\n",
            "  0.69575082 -1.11835695 -2.01144374 -0.02056695  1.17648206  0.84482328\n",
            " -0.94752263 -2.40936986  0.17710885 -0.53781247 -1.15440109 -0.89778805\n",
            " -1.01759036 -0.99119489  1.73660576 -0.89176926  1.54373314  0.1378118\n",
            " -1.02035562 -1.59104501 -0.60365816  0.73950407  0.13522478  0.46947497\n",
            " -0.99187757 -0.87947715 -1.26702123  1.34838772  0.73444133  0.56600301\n",
            " -0.45794642  0.26759162 -0.37728533 -0.21068022 -0.74742219  1.02336369\n",
            "  0.54869096 -1.02287965 -1.1306406  -0.05380243 -0.08366824 -1.02461915\n",
            " -0.68349145  0.59113838 -1.31186955  1.15489373 -0.85178818 -0.76598277\n",
            " -0.66246912  0.58370664  0.62502765  0.58339743  0.25968832  0.2203112\n",
            " -1.7140399  -0.73806344 -0.97725476  1.29487164 -1.49137161  0.88005556\n",
            " -0.36104183  0.84029904 -0.68925426  1.541461   -0.91512632 -0.84954531\n",
            " -0.84003597 -0.50670202 -1.21068415 -1.24141031 -1.66325408 -1.46287739\n",
            " -0.84435288  1.48377361  1.30999099 -0.73466542 -0.26737531 -0.81359799\n",
            "  1.38366435 -0.77755038  0.37012659  0.44058279  0.67606305  0.84284202\n",
            "  0.80886656  0.04392873 -0.50241932 -0.72674208  1.15209054 -0.62500442\n",
            " -0.43757141 -0.41362996 -0.76563845 -0.55851521  0.4547075  -1.52531594\n",
            "  0.47058385 -0.1410057  -0.55496326 -1.07572562 -2.41954026 -1.67373665\n",
            " -0.09432692 -1.03064165 -0.51552547 -1.77656131 -0.0703641  -1.55514889\n",
            "  2.13153403  0.19953948  0.63402846  0.48357582 -1.37042638  0.12258111\n",
            " -0.71080026  0.26302922  1.40088206 -0.72700806  1.08467498 -0.14632749\n",
            " -0.8616588   0.52890687  0.81782125  1.14507717 -0.28911025  0.06490766\n",
            " -0.69940904  1.19970523 -0.15916235 -0.86266254  0.28554724 -0.80741103\n",
            " -0.88571965  0.10931972 -0.1817206   0.94261715  0.48924195  1.94515439\n",
            " -0.78898141  1.0471856  -0.50885937  0.72126068  0.51124548  0.1168098\n",
            "  0.10221003 -1.00765897 -3.40345438  1.32303057  0.55736701 -1.15583458\n",
            "  0.54865967 -0.06018164 -0.63034873 -1.0174277  -0.57732722  2.20421737\n",
            "  1.09900969 -0.64982217  0.34216307  0.50559895 -0.03464749  1.57889232\n",
            " -0.24689342  0.96864407 -0.05898895 -0.31369599 -1.59860578 -1.30947733\n",
            " -0.30895536 -0.20493001  1.2433308  -0.42294655 -0.37338769 -0.38045346\n",
            "  0.58683269  0.40613361 -0.39814846 -0.69835344 -0.40014839 -0.24554637\n",
            "  0.92936887  0.70637944]\n",
            "Epoch=1669, Loss=0.9071, Weights=[-1.25137457  1.06872522  0.37459653  0.6020152  -1.65859551 -2.49974348\n",
            " -1.79065957  0.04556438  0.09710475  0.3031954   1.61762912 -0.81933594\n",
            " -0.32094159 -0.33344776  0.40932651 -0.27802249  0.36615755 -0.4418358\n",
            "  0.69670577 -1.1199379  -2.01337917 -0.02078799  1.17613327  0.8440717\n",
            " -0.94729886 -2.40921173  0.17683159 -0.53734615 -1.15335053 -0.89759254\n",
            " -1.01841785 -0.99121283  1.73684883 -0.89315185  1.5422321   0.13799134\n",
            " -1.02010876 -1.59114567 -0.6025558   0.73956198  0.13320908  0.46847108\n",
            " -0.99163767 -0.88035173 -1.2686399   1.34761184  0.73446892  0.56645271\n",
            " -0.45754985  0.26736865 -0.37793306 -0.21061641 -0.74741883  1.02221765\n",
            "  0.54818091 -1.02212738 -1.12982532 -0.05379528 -0.08488656 -1.02604822\n",
            " -0.68383179  0.59188582 -1.31205641  1.15321478 -0.85197747 -0.76398651\n",
            " -0.66141351  0.58194496  0.62324172  0.5839621   0.26056035  0.21961093\n",
            " -1.71491214 -0.73830417 -0.97723409  1.29610981 -1.49138842  0.87785853\n",
            " -0.3608803   0.84252984 -0.68886534  1.53971069 -0.91624224 -0.84858024\n",
            " -0.83973085 -0.50772795 -1.21028953 -1.23968309 -1.66208694 -1.46258811\n",
            " -0.84463258  1.48232489  1.30860015 -0.73412712 -0.26709043 -0.81473072\n",
            "  1.38395436 -0.77647088  0.37015065  0.44092915  0.67639528  0.84214309\n",
            "  0.80828735  0.04464194 -0.50159028 -0.7270588   1.15168081 -0.62498851\n",
            " -0.43684265 -0.41254196 -0.7656053  -0.55882259  0.45585747 -1.52417678\n",
            "  0.46889605 -0.1428054  -0.55459484 -1.0749138  -2.4191974  -1.67404964\n",
            " -0.0941846  -1.02976668 -0.51435095 -1.7760471  -0.07180149 -1.55700397\n",
            "  2.13070997  0.19915155  0.63374661  0.48362769 -1.36971116  0.12352505\n",
            " -0.71080773  0.26254822  1.40064422 -0.72811765  1.08297268 -0.14622796\n",
            " -0.86021399  0.52905059  0.81711958  1.14524021 -0.28876887  0.0636564\n",
            " -0.70120148  1.19994832 -0.15842405 -0.86313397  0.28471949 -0.80862797\n",
            " -0.88605182  0.11056085 -0.18138783  0.94202205  0.49020416  1.94655734\n",
            " -0.78975817  1.04541228 -0.51006215  0.71956452  0.51000172  0.11714527\n",
            "  0.10284513 -1.00641432 -3.40143633  1.3228409   0.55519225 -1.15564423\n",
            "  0.54938705 -0.06160434 -0.63135229 -1.01684148 -0.57651556  2.20393012\n",
            "  1.09862025 -0.64979807  0.34167013  0.5050358  -0.03538589  1.57814447\n",
            " -0.24678959  0.96758862 -0.06133731 -0.31421175 -1.59750636 -1.30828734\n",
            " -0.30807696 -0.20515455  1.24318616 -0.42214005 -0.37421516 -0.38267171\n",
            "  0.58667781  0.40743019 -0.39827207 -0.69898274 -0.3998739  -0.24535395\n",
            "  0.92952946  0.7057805 ]\n",
            "Epoch=1679, Loss=0.9051, Weights=[-1.25274146  1.06771099  0.37392673  0.60149258 -1.65625665 -2.49726928\n",
            " -1.79143245  0.04548916  0.09887518  0.30330633  1.61521392 -0.82156831\n",
            " -0.3214015  -0.33315198  0.41045443 -0.27798496  0.36436664 -0.44167324\n",
            "  0.69765668 -1.12151414 -2.0153104  -0.02101171  1.17578336  0.84332251\n",
            " -0.94707711 -2.40905672  0.17655693 -0.5368803  -1.15230395 -0.89739497\n",
            " -1.01924086 -0.99123136  1.73709015 -0.89453222  1.5407331   0.13817108\n",
            " -1.01986142 -1.59124762 -0.60145729  0.73962005  0.13119772  0.46746757\n",
            " -0.99139987 -0.88122505 -1.27025498  1.34683684  0.73449482  0.56690204\n",
            " -0.45715294  0.26714534 -0.37858068 -0.21055161 -0.74741457  1.02107326\n",
            "  0.54767206 -1.02137703 -1.12901264 -0.05378866 -0.08610332 -1.02747546\n",
            " -0.68417222  0.59263128 -1.31224357  1.15153979 -0.85216455 -0.76199408\n",
            " -0.66036218  0.58018595  0.62146189  0.5845267   0.26142813  0.21890884\n",
            " -1.71578194 -0.73854174 -0.97721549  1.29734135 -1.4914054   0.87566888\n",
            " -0.3607188   0.84475157 -0.68847977  1.53796762 -0.91735427 -0.84762104\n",
            " -0.83942871 -0.50875013 -1.20989266 -1.2379567  -1.66092226 -1.46230181\n",
            " -0.84491069  1.48088229  1.30720818 -0.73359649 -0.26680524 -0.81585898\n",
            "  1.38424229 -0.77539515  0.37017585  0.4412763   0.67672635  0.84144623\n",
            "  0.80770949  0.04535145 -0.50076398 -0.72737333  1.1512722  -0.62497385\n",
            " -0.43611498 -0.41145424 -0.76556961 -0.55912909  0.45700358 -1.52304088\n",
            "  0.46720907 -0.14460291 -0.55422571 -1.07410322 -2.41885486 -1.67435907\n",
            " -0.09404014 -1.02889487 -0.5131806  -1.77553165 -0.07323455 -1.55885877\n",
            "  2.12988527  0.19876498  0.63346538  0.48367874 -1.36899678  0.12446678\n",
            " -0.71081716  0.26206956  1.40040809 -0.72922753  1.08127138 -0.14612853\n",
            " -0.85877059  0.52919451  0.81641844  1.14540082 -0.28842947  0.06240927\n",
            " -0.70299036  1.20018859 -0.15768699 -0.86360345  0.28389253 -0.80984302\n",
            " -0.88638351  0.11179791 -0.18105507  0.94143114  0.49116238  1.94795121\n",
            " -0.79053411  1.04364646 -0.51126482  0.71786551  0.50876111  0.11748243\n",
            "  0.103477   -1.00517091 -3.39942037  1.32264812  0.55302266 -1.15544753\n",
            "  0.55011045 -0.06303158 -0.63235076 -1.01625263 -0.5757102   2.20364041\n",
            "  1.09823332 -0.64977328  0.34117759  0.50447415 -0.03612486  1.57739445\n",
            " -0.24668452  0.96653505 -0.06368718 -0.31472819 -1.59640444 -1.30709621\n",
            " -0.30720037 -0.20537967  1.24304203 -0.42133416 -0.37504249 -0.38488804\n",
            "  0.5865232   0.40872524 -0.39839397 -0.69960948 -0.39960077 -0.24516346\n",
            "  0.9296903   0.70518259]\n",
            "Epoch=1689, Loss=0.9031, Weights=[-1.25410931  1.06669833  0.37325995  0.60096907 -1.65392446 -2.49479706\n",
            " -1.79220112  0.04541256  0.10064096  0.30341988  1.6128038  -0.82379929\n",
            " -0.32186003 -0.33285676  0.41157761 -0.27794795  0.36257962 -0.44151333\n",
            "  0.69860351 -1.12308567 -2.01723739 -0.02123809  1.17543228  0.84257571\n",
            " -0.94685738 -2.40890484  0.17628486 -0.53641493 -1.15126134 -0.89719534\n",
            " -1.02005938 -0.99125047  1.73732974 -0.89591036  1.53923613  0.13835101\n",
            " -1.0196136  -1.59135086 -0.60036263  0.73967828  0.12919071  0.46646445\n",
            " -0.99116414 -0.88209713 -1.27186649  1.34606272  0.73451903  0.56735097\n",
            " -0.45675569  0.26692173 -0.37922818 -0.21048585 -0.7474094   1.01993054\n",
            "  0.5471644  -1.02062862 -1.12820255 -0.05378259 -0.08731852 -1.02890084\n",
            " -0.68451274  0.59337478 -1.31243104  1.14986877 -0.85234946 -0.76000549\n",
            " -0.65931512  0.57842963  0.61968811  0.58509119  0.26229167  0.21820495\n",
            " -1.71664933 -0.73877617 -0.97719893  1.29856631 -1.49142253  0.87348659\n",
            " -0.36055732  0.84696425 -0.68809755  1.53623175 -0.91846244 -0.84666768\n",
            " -0.83912953 -0.50976857 -1.20949355 -1.23623114 -1.65976006 -1.4620185\n",
            " -0.8451872   1.47944583  1.30581508 -0.73307352 -0.26651975 -0.81698278\n",
            "  1.38452814 -0.77432319  0.37020219  0.44162422  0.67705629  0.84075143\n",
            "  0.80713297  0.04605726 -0.49994043 -0.72768569  1.15086469 -0.62496044\n",
            " -0.43538839 -0.41036681 -0.7655314  -0.55943472  0.45814585 -1.52190821\n",
            "  0.4655229  -0.14639822 -0.55385585 -1.07329388 -2.41851265 -1.67466495\n",
            " -0.09389354 -1.02802622 -0.51201442 -1.77501498 -0.07466331 -1.56071325\n",
            "  2.12905997  0.19837974  0.63318477  0.48372898 -1.36828324  0.12540628\n",
            " -0.71082854  0.26159324  1.40017367 -0.73033766  1.0795711  -0.14602921\n",
            " -0.85732859  0.52933862  0.8157178   1.145559   -0.28809202  0.06116628\n",
            " -0.7047757   1.20042602 -0.1569512  -0.86407098  0.28306638 -0.81105619\n",
            " -0.8867147   0.11303093 -0.18072231  0.94084437  0.4921166   1.94933603\n",
            " -0.79130924  1.04188814 -0.51246735  0.71616367  0.50752366  0.11782129\n",
            "  0.10410564 -1.00392875 -3.39740651  1.32245225  0.55085823 -1.1552445\n",
            "  0.55082989 -0.06446335 -0.63334413 -1.01566117 -0.57491114  2.20334823\n",
            "  1.09784891 -0.6497478   0.34068544  0.50391401 -0.0368644   1.57664227\n",
            " -0.2465782   0.96548335 -0.06603855 -0.31524531 -1.59530002 -1.30590395\n",
            " -0.30632559 -0.20560538  1.24289841 -0.42052891 -0.37586968 -0.38710247\n",
            "  0.58636886  0.41001877 -0.39851416 -0.70023364 -0.39932899 -0.2449749\n",
            "  0.92985137  0.70458571]\n",
            "Epoch=1699, Loss=0.9011, Weights=[-1.25547812  1.06568723  0.37259618  0.6004447  -1.65159893 -2.49232687\n",
            " -1.79296558  0.04533461  0.10240209  0.30353602  1.61039879 -0.82602888\n",
            " -0.32231719 -0.3325621   0.41269602 -0.27791146  0.36079652 -0.44135604\n",
            "  0.69954624 -1.1246525  -2.01916011 -0.02146714  1.17508003  0.8418313\n",
            " -0.94663966 -2.40875609  0.17601537 -0.53595002 -1.15022272 -0.89699368\n",
            " -1.02087342 -0.99127016  1.73756758 -0.89728627  1.53774119  0.13853113\n",
            " -1.01936529 -1.59145539 -0.5992718   0.73973667  0.12718804  0.46546173\n",
            " -0.99093049 -0.88296798 -1.27347447  1.34528949  0.73454157  0.56779947\n",
            " -0.45635812  0.26669783 -0.37987554 -0.21041912 -0.74740334  1.0187895\n",
            "  0.54665795 -1.01988214 -1.12739507 -0.05377704 -0.08853214 -1.03032435\n",
            " -0.68485335  0.59411629 -1.31261881  1.14820171 -0.85253221 -0.75802075\n",
            " -0.65827229  0.57667601  0.61792037  0.58565555  0.26315102  0.2174993\n",
            " -1.71751432 -0.73900747 -0.9771844   1.29978471 -1.49143982  0.87131162\n",
            " -0.3603959   0.84916788 -0.68771865  1.53450304 -0.91956677 -0.84572013\n",
            " -0.83883328 -0.51078328 -1.20909224 -1.23450641 -1.65860033 -1.46173816\n",
            " -0.84546213  1.47801548  1.30442087 -0.73255818 -0.26623397 -0.81810213\n",
            "  1.38481191 -0.77325499  0.37022965  0.44197293  0.67738511  0.8400587\n",
            "  0.80655777  0.04675936 -0.4991196  -0.72799587  1.15045826 -0.62494828\n",
            " -0.43466288 -0.40927965 -0.76549069 -0.5597395   0.4592843  -1.52077877\n",
            "  0.46383753 -0.14819133 -0.55348527 -1.07248577 -2.41817077 -1.67496729\n",
            " -0.09374482 -1.02716071 -0.51085239 -1.7744971  -0.07608779 -1.5625674\n",
            "  2.12823407  0.19799582  0.63290475  0.48377842 -1.36757056  0.12634353\n",
            " -0.71084188  0.26111924  1.39994094 -0.73144801  1.07787184 -0.14593003\n",
            " -0.855888    0.52948295  0.81501765  1.14571474 -0.2877565   0.05992741\n",
            " -0.70655753  1.20066061 -0.15621668 -0.86453657  0.28224103 -0.81226748\n",
            " -0.88704543  0.11425994 -0.18038955  0.94026173  0.4930668   1.95071181\n",
            " -0.79208354  1.04013731 -0.51366975  0.71445901  0.50628937  0.11816184\n",
            "  0.10473103 -1.00268787 -3.39539474  1.32225329  0.54869896 -1.15503514\n",
            "  0.55154536 -0.06589963 -0.63433241 -1.01506712 -0.57411838  2.20305361\n",
            "  1.09746701 -0.64972165  0.34019369  0.50335539 -0.03760449  1.57588793\n",
            " -0.24647064  0.9644335  -0.06839142 -0.31576309 -1.59419311 -1.30471057\n",
            " -0.3054526  -0.20583167  1.24275528 -0.41972429 -0.37669675 -0.38931499\n",
            "  0.58621479  0.41131078 -0.39863266 -0.70085523 -0.39905853 -0.24478827\n",
            "  0.93001266  0.70398987]\n",
            "Epoch=1709, Loss=0.8991, Weights=[-1.25684785  1.06467768  0.37193543  0.59991952 -1.64928009 -2.48985879\n",
            " -1.79372584  0.04525537  0.10415856  0.30365474  1.6079989  -0.82825706\n",
            " -0.32277297 -0.33226797  0.41380965 -0.27787554  0.35901736 -0.44120137\n",
            "  0.70048484 -1.12621463 -2.02107851 -0.02169884  1.17472657  0.84108927\n",
            " -0.94642395 -2.40861049  0.17574844 -0.53548558 -1.14918806 -0.89678998\n",
            " -1.02168298 -0.99129043  1.73780368 -0.89865996  1.53624828  0.13871143\n",
            " -1.0191165  -1.59156117 -0.59818479  0.73979523  0.12518971  0.46445941\n",
            " -0.9906989  -0.88383761 -1.27507893  1.34451716  0.73456246  0.56824754\n",
            " -0.45596024  0.26647365 -0.38052277 -0.21035146 -0.74739639  1.01765016\n",
            "  0.54615269 -1.01913761 -1.12659017 -0.05377202 -0.0897442  -1.03174601\n",
            " -0.68519402  0.59485583 -1.3128069   1.14653862 -0.85271282 -0.75603987\n",
            " -0.65723367  0.5749251   0.61615863  0.58621975  0.2640062   0.21679192\n",
            " -1.71837697 -0.73923568 -0.97717186  1.30099659 -1.49145728  0.86914397\n",
            " -0.36023454  0.85136248 -0.68734306  1.53278147 -0.92066728 -0.84477834\n",
            " -0.83853994 -0.51179427 -1.20868872 -1.23278251 -1.65744308 -1.46146082\n",
            " -0.84573548  1.47659125  1.30302557 -0.73205046 -0.26594789 -0.81921704\n",
            "  1.38509361 -0.77219058  0.37025821  0.44232243  0.67771281  0.83936801\n",
            "  0.8059839   0.04745778 -0.49830151 -0.72830389  1.15005291 -0.62493738\n",
            " -0.43393844 -0.40819277 -0.76544747 -0.56004343  0.46041892 -1.51965255\n",
            "  0.46215297 -0.14998222 -0.55311395 -1.07167888 -2.4178292  -1.67526611\n",
            " -0.09359399 -1.02629835 -0.5096945  -1.77397804 -0.07750801 -1.56442118\n",
            "  2.12740761  0.19761318  0.63262533  0.48382709 -1.36685873  0.12727853\n",
            " -0.71085716  0.26064756  1.39970992 -0.73255856  1.07617362 -0.14583099\n",
            " -0.85444881  0.5296275   0.81431798  1.14586804 -0.28742288  0.05869265\n",
            " -0.70833588  1.20089236 -0.15548343 -0.8650002   0.28141651 -0.81347692\n",
            " -0.88737567  0.11548494 -0.18005678  0.93968318  0.49401298  1.95207857\n",
            " -0.79285701  1.03839396 -0.51487199  0.71275156  0.50505823  0.11850408\n",
            "  0.10535316 -1.00144827 -3.39338509  1.32205124  0.54654483 -1.15481946\n",
            "  0.55225689 -0.0673404  -0.63531559 -1.01447048 -0.57333191  2.20275654\n",
            "  1.09708763 -0.64969481  0.33970235  0.50279831 -0.03834515  1.57513145\n",
            " -0.24636186  0.9633855  -0.07074578 -0.31628153 -1.59308371 -1.30351608\n",
            " -0.3045814  -0.20605852  1.24261264 -0.41892031 -0.37752367 -0.3915256\n",
            "  0.58606099  0.41260127 -0.39874947 -0.70147426 -0.39878939 -0.24460357\n",
            "  0.93017416  0.70339507]\n",
            "Epoch=1719, Loss=0.8971, Weights=[-1.25821849  1.06366966  0.37127768  0.59939356 -1.64696795 -2.48739287\n",
            " -1.79448191  0.04517485  0.10591037  0.30377604  1.60560416 -0.83048385\n",
            " -0.32322739 -0.33197436  0.41491848 -0.27784021  0.35724218 -0.44104928\n",
            "  0.70141928 -1.12777208 -2.02299256 -0.02193319  1.17437188  0.84034963\n",
            " -0.94621024 -2.40846806  0.17548405 -0.5350216  -1.14815738 -0.89658424\n",
            " -1.02248805 -0.99131128  1.73803804 -0.90003142  1.53475738  0.13889191\n",
            " -1.01886722 -1.59166821 -0.59710158  0.73985396  0.12319571  0.4634575\n",
            " -0.99046936 -0.88470606 -1.2766799   1.34374574  0.73458171  0.56869513\n",
            " -0.45556206  0.26624923 -0.38116985 -0.21028287 -0.74738855  1.01651253\n",
            "  0.54564864 -1.01839503 -1.12578787 -0.05376752 -0.09095468 -1.03316578\n",
            " -0.68553477  0.59559339 -1.31299531  1.14487949 -0.8528913  -0.75406285\n",
            " -0.65619923  0.57317693  0.61440287  0.58678377  0.26485725  0.21608283\n",
            " -1.71923728 -0.73946082 -0.97716129  1.30220199 -1.4914749   0.86698359\n",
            " -0.36007326  0.85354808 -0.68697076  1.531067   -0.92176399 -0.84384229\n",
            " -0.83824948 -0.51280157 -1.20828302 -1.23105946 -1.6562883  -1.46118645\n",
            " -0.84600725  1.47517312  1.3016292  -0.73155033 -0.26566154 -0.82032753\n",
            "  1.38537324 -0.77112995  0.37028787  0.44267272  0.67803943  0.83867938\n",
            "  0.80541133  0.04815251 -0.49748614 -0.72860975  1.14964862 -0.62492772\n",
            " -0.43321504 -0.40710615 -0.76540178 -0.56034653  0.46154974 -1.51852955\n",
            "  0.46046921 -0.15177091 -0.55274188 -1.07087322 -2.41748796 -1.67556141\n",
            " -0.09344106 -1.02543913 -0.50854074 -1.77345782 -0.078924   -1.56627458\n",
            "  2.12658061  0.19723181  0.63234647  0.48387498 -1.36614776  0.12821127\n",
            " -0.71087438  0.26017821  1.39948059 -0.73366929  1.07447646 -0.14573212\n",
            " -0.85301103  0.52977229  0.81361878  1.1460189  -0.28709114  0.057462\n",
            " -0.71011078  1.20112127 -0.15475145 -0.86546188  0.28059283 -0.8146845\n",
            " -0.88770546  0.11670598 -0.17972398  0.9391087   0.49495514  1.95343633\n",
            " -0.79362963  1.03665809 -0.51607407  0.71104132  0.50383025  0.118848\n",
            "  0.10597203 -1.00020999 -3.39137755  1.3218461   0.54439585 -1.15459747\n",
            "  0.55296446 -0.06878565 -0.6362937  -1.01387127 -0.57255172  2.20245704\n",
            "  1.09671077 -0.64966729  0.33921142  0.50224276 -0.03908634  1.57437283\n",
            " -0.24625186  0.96233932 -0.07310164 -0.31680062 -1.59197183 -1.30232049\n",
            " -0.30371197 -0.20628594  1.24247048 -0.41811698 -0.37835046 -0.39373431\n",
            "  0.58590746  0.41389024 -0.39886461 -0.70209071 -0.39852155 -0.24442078\n",
            "  0.93033586  0.70280129]\n",
            "Epoch=1729, Loss=0.8951, Weights=[-1.25959003  1.06266318  0.37062294  0.59886687 -1.6446625  -2.48492919\n",
            " -1.79523378  0.04509311  0.10765751  0.30389991  1.60321459 -0.83270923\n",
            " -0.32368043 -0.33168124  0.4160225  -0.2778055   0.355471   -0.44089975\n",
            "  0.70234954 -1.12932484 -2.02490223 -0.02217019  1.17401595  0.83961238\n",
            " -0.94599852 -2.40832879  0.17522218 -0.5345581  -1.14713067 -0.89637648\n",
            " -1.02328865 -0.9913327   1.73827068 -0.90140064  1.53326851  0.13907256\n",
            " -1.01861746 -1.59177649 -0.59602218  0.73991287  0.12120603  0.46245602\n",
            " -0.99024186 -0.88557332 -1.27827741  1.34297523  0.73459933  0.56914224\n",
            " -0.4551636   0.26602458 -0.38181677 -0.21021337 -0.74737984  1.01537663\n",
            "  0.54514579 -1.0176544  -1.12498815 -0.05376355 -0.09216358 -1.03458368\n",
            " -0.68587557  0.59632897 -1.31318404  1.14322431 -0.85306767 -0.7520897\n",
            " -0.65516895  0.57143151  0.61265305  0.58734757  0.26570419  0.21537206\n",
            " -1.72009528 -0.7396829  -0.97715266  1.30340095 -1.49149268  0.86483046\n",
            " -0.35991207  0.85572468 -0.68660173  1.52935959 -0.92285695 -0.84291194\n",
            " -0.83796187 -0.51380518 -1.20787516 -1.22933724 -1.65513601 -1.46091506\n",
            " -0.84627744  1.47376111  1.30023178 -0.73105777 -0.26537492 -0.82143359\n",
            "  1.38565081 -0.7700731   0.3703186   0.4430238   0.67836497  0.83799278\n",
            "  0.80484007  0.04884356 -0.4966735  -0.72891346  1.14924538 -0.62491932\n",
            " -0.43249268 -0.4060198  -0.76535363 -0.56064882  0.46267676 -1.51740976\n",
            "  0.45878625 -0.15355737 -0.55236906 -1.07006877 -2.41714703 -1.67585321\n",
            " -0.09328606 -1.02458303 -0.50739108 -1.77293646 -0.08033576 -1.56812757\n",
            "  2.12575308  0.19685169  0.63206818  0.48392211 -1.36543766  0.12914172\n",
            " -0.71089352  0.25971118  1.39925295 -0.73478015  1.07278038 -0.14563343\n",
            " -0.85157465  0.52991733  0.81292004  1.14616732 -0.28676124  0.05623545\n",
            " -0.71188227  1.20134733 -0.15402076 -0.86592159  0.27976999 -0.81589025\n",
            " -0.88803478  0.11792307 -0.17939116  0.93853827  0.49589326  1.95478512\n",
            " -0.79440142  1.0349297  -0.51727597  0.70932832  0.50260543  0.11919359\n",
            "  0.10658764 -0.99897303 -3.38937213  1.32163788  0.54225202 -1.15436917\n",
            "  0.55366809 -0.07023537 -0.63726672 -1.01326951 -0.57177782  2.20215512\n",
            "  1.09633642 -0.64963909  0.33872092  0.50168876 -0.03982807  1.57361208\n",
            " -0.24614066  0.96129495 -0.075459   -0.31732036 -1.59085747 -1.30112379\n",
            " -0.30284432 -0.20651391  1.2423288  -0.41731429 -0.37917711 -0.39594111\n",
            "  0.58575421  0.41517768 -0.39897808 -0.7027046  -0.39825498 -0.24423991\n",
            "  0.93049775  0.70220855]\n",
            "Epoch=1739, Loss=0.8931, Weights=[-1.26096245  1.06165821  0.36997119  0.59833947 -1.64236378 -2.48246781\n",
            " -1.79598147  0.04501016  0.10939997  0.30402632  1.6008302  -0.8349332\n",
            " -0.3241321  -0.3313886   0.4171217  -0.27777144  0.35370384 -0.44075276\n",
            "  0.70327558 -1.13087292 -2.02680747 -0.02240983  1.17365873  0.83887751\n",
            " -0.94578878 -2.40819271  0.17496281 -0.53409506 -1.14610792 -0.89616671\n",
            " -1.02408477 -0.9913547   1.73850158 -0.90276764  1.53178165  0.13925337\n",
            " -1.0183672  -1.591886   -0.59494655  0.73997194  0.11922068  0.46145496\n",
            " -0.99001639 -0.88643941 -1.27987147  1.34220565  0.73461532  0.56958884\n",
            " -0.45476486  0.26579972 -0.38246352 -0.21014298 -0.74737025  1.01424246\n",
            "  0.54464415 -1.01691575 -1.12419103 -0.05376009 -0.0933709  -1.03599969\n",
            " -0.68621643  0.59706257 -1.3133731   1.14157309 -0.85324195 -0.75012043\n",
            " -0.6541428   0.56968886  0.61090915  0.58791114  0.26654705  0.21465965\n",
            " -1.72095102 -0.73990195 -0.97714594  1.3045935  -1.49151064  0.86268455\n",
            " -0.35975098  0.8578923  -0.68623595  1.52765921 -0.92394616 -0.84198725\n",
            " -0.83767709 -0.51480512 -1.20746515 -1.22761588 -1.65398619 -1.46064665\n",
            " -0.84654605  1.47235519  1.29883331 -0.73057277 -0.26508803 -0.82253523\n",
            "  1.38592632 -0.76902004  0.3703504   0.44337567  0.67868944  0.83730822\n",
            "  0.8042701   0.04953093 -0.49586356 -0.72921502  1.14884317 -0.62491217\n",
            " -0.43177135 -0.4049337  -0.76530303 -0.56095031  0.4638     -1.51629316\n",
            "  0.45710408 -0.1553416  -0.55199547 -1.06926552 -2.41680643 -1.67614152\n",
            " -0.093129   -1.02373006 -0.50624553 -1.77241397 -0.08174334 -1.56998012\n",
            "  2.12492505  0.1964728   0.63179043  0.4839685  -1.36472843  0.13006989\n",
            " -0.71091459  0.25924647  1.39902701 -0.73589112  1.07108538 -0.14553494\n",
            " -0.85013967  0.53006263  0.81222174  1.1463133  -0.28643317  0.05501298\n",
            " -0.71365036  1.20157055 -0.15329136 -0.86637935  0.27894802 -0.81709415\n",
            " -0.88836365  0.11913624 -0.17905831  0.93797185  0.49682735  1.95612495\n",
            " -0.79517235  1.03320878 -0.51847768  0.70761255  0.50138376  0.11954086\n",
            "  0.10719996 -0.99773741 -3.38736884  1.32142659  0.54011332 -1.15413458\n",
            "  0.55436779 -0.07168953 -0.63823466 -1.01266521 -0.57101019  2.20185078\n",
            "  1.0959646  -0.64961022  0.33823084  0.50113632 -0.04057033  1.57284921\n",
            " -0.24602825  0.96025237 -0.07781784 -0.31784073 -1.58974065 -1.29992601\n",
            " -0.30197843 -0.20674243  1.24218758 -0.41651227 -0.38000362 -0.398146\n",
            "  0.58560123  0.41646361 -0.3990899  -0.70331592 -0.39798967 -0.24406096\n",
            "  0.93065982  0.70161685]\n",
            "Epoch=1749, Loss=0.8911, Weights=[-1.26233572  1.06065476  0.36932244  0.59781142 -1.64007178 -2.48000879\n",
            " -1.79672498  0.04492604  0.11113776  0.30415528  1.59845103 -0.83715575\n",
            " -0.32458241 -0.33109641  0.41821604 -0.27773805  0.35194073 -0.44060829\n",
            "  0.70419738 -1.13241633 -2.02870826 -0.02265211  1.17330022  0.83814502\n",
            " -0.94558102 -2.40805982  0.17470594 -0.53363249 -1.14508914 -0.89595492\n",
            " -1.02487643 -0.99137726  1.73873076 -0.9041324   1.53029681  0.13943434\n",
            " -1.01811644 -1.59199672 -0.5938747   0.74003119  0.11723965  0.46045434\n",
            " -0.98979293 -0.88730435 -1.28146212  1.341437    0.73462971  0.57003491\n",
            " -0.45436586  0.26557467 -0.3831101  -0.21007171 -0.74735979  1.01311005\n",
            "  0.54414371 -1.01617906 -1.12339649 -0.05375714 -0.09457664 -1.03741381\n",
            " -0.68655734  0.59779418 -1.31356248  1.13992583 -0.85341416 -0.74815505\n",
            " -0.65312075  0.56794898  0.60917113  0.58847443  0.26738587  0.21394563\n",
            " -1.7218045  -0.74011799 -0.97714111  1.30577968 -1.49152876  0.86054584\n",
            " -0.35959002  0.86005097 -0.68587342  1.52596583 -0.92503166 -0.84106818\n",
            " -0.83739511 -0.5158014  -1.20705301 -1.22589537 -1.65283885 -1.4603812\n",
            " -0.84681309  1.47095536  1.29743383 -0.73009529 -0.26480088 -0.82363248\n",
            "  1.38619977 -0.76797078  0.37038324  0.44372833  0.67901286  0.83662569\n",
            "  0.80370141  0.05021464 -0.49505634 -0.72951445  1.14844198 -0.62490627\n",
            " -0.43105103 -0.40384786 -0.76524999 -0.56125101  0.46491946 -1.51517976\n",
            "  0.4554227  -0.15712361 -0.55162111 -1.06846348 -2.41646615 -1.67642636\n",
            " -0.09296989 -1.02288019 -0.50510405 -1.77189038 -0.08314674 -1.5718322\n",
            "  2.12409654  0.19609511  0.63151322  0.48401416 -1.36402008  0.13099575\n",
            " -0.71093757  0.25878408  1.39880276 -0.73700219  1.06939148 -0.14543667\n",
            " -0.84870609  0.53020821  0.81152388  1.14645684 -0.28610689  0.0537946\n",
            " -0.71541509  1.2017909  -0.15256325 -0.86683515  0.27812693 -0.81829624\n",
            " -0.88869207  0.12034551 -0.17872542  0.93740942  0.49775739  1.95745585\n",
            " -0.79594242  1.03149532 -0.51967919  0.70589405  0.50016524  0.1198898\n",
            "  0.10780899 -0.99650316 -3.38536768  1.32121224  0.53797974 -1.15389371\n",
            "  0.55506356 -0.07314812 -0.63919753 -1.01205838 -0.57024883  2.20154404\n",
            "  1.09559529 -0.64958066  0.33774119  0.50058544 -0.04131311  1.57208423\n",
            " -0.24591466  0.95921158 -0.08017816 -0.31836173 -1.58862136 -1.29872714\n",
            " -0.30111428 -0.2069715   1.24204681 -0.41571091 -0.38083    -0.40034898\n",
            "  0.58544853  0.41774803 -0.39920008 -0.70392468 -0.3977256  -0.24388391\n",
            "  0.93082206  0.70102618]\n",
            "Epoch=1759, Loss=0.8891, Weights=[-1.26370984  1.0596528   0.36867667  0.59728274 -1.63778651 -2.4775522\n",
            " -1.79746432  0.0448408   0.11287088  0.30428677  1.59607709 -0.83937688\n",
            " -0.32503135 -0.33080467  0.41930553 -0.27770535  0.35018169 -0.44046632\n",
            "  0.70511492 -1.13395507 -2.03060456 -0.02289701  1.17294039  0.83741491\n",
            " -0.94537521 -2.40793013  0.17445153 -0.53317039 -1.14407432 -0.89574113\n",
            " -1.02566362 -0.9914004   1.73895822 -0.90549493  1.52881398  0.13961546\n",
            " -1.01786519 -1.59210865 -0.59280661  0.74009062  0.11526292  0.45945416\n",
            " -0.98957148 -0.88816816 -1.28304937  1.34066928  0.73464251  0.57048042\n",
            " -0.45396661  0.26534945 -0.38375649 -0.20999958 -0.74734847  1.0119794\n",
            "  0.54364449 -1.01544436 -1.12260455 -0.0537547  -0.09578079 -1.03882603\n",
            " -0.68689828  0.59852381 -1.3137522   1.13828251 -0.8535843  -0.74619356\n",
            " -0.65210277  0.5662119   0.60743897  0.58903743  0.26822067  0.21323002\n",
            " -1.72265576 -0.74033105 -0.97713814  1.30695953 -1.49154705  0.85841429\n",
            " -0.3594292   0.8622007  -0.6855141   1.52427942 -0.92611346 -0.84015469\n",
            " -0.8371159  -0.51679404 -1.20663875 -1.22417571 -1.65169399 -1.46011873\n",
            " -0.84707856  1.46956161  1.29603335 -0.72962532 -0.26451349 -0.82472533\n",
            "  1.38647117 -0.76692531  0.37041713  0.44408179  0.67933524  0.83594518\n",
            "  0.80313399  0.05089468 -0.49425183 -0.72981174  1.14804181 -0.62490161\n",
            " -0.43033172 -0.40276227 -0.76519454 -0.56155094  0.46603516 -1.51406954\n",
            "  0.45374212 -0.15890339 -0.55124596 -1.06766263 -2.41612618 -1.67670773\n",
            " -0.09280875 -1.02203344 -0.50396665 -1.7713657  -0.08454599 -1.5736838\n",
            "  2.12326758  0.19571861  0.63123653  0.48405909 -1.36331262  0.1319193\n",
            " -0.71096245  0.258324    1.3985802  -0.7381133   1.06769869 -0.14533863\n",
            " -0.84727391  0.53035407  0.81082643  1.14659793 -0.28578237  0.05258028\n",
            " -0.71717648  1.2020084  -0.15183644 -0.86728897  0.27730672 -0.81949651\n",
            " -0.88902005  0.12155091 -0.17839249  0.93685095  0.49868338  1.95877784\n",
            " -0.79671162  1.02978932 -0.52088049  0.70417282  0.49894987  0.12024041\n",
            "  0.10841473 -0.99527029 -3.38336866  1.32099482  0.5358513  -1.15364656\n",
            "  0.55575541 -0.07461112 -0.64015534 -1.01144905 -0.56949373  2.2012349\n",
            "  1.0952285  -0.64955043  0.33725198  0.50003613 -0.0420564   1.57131715\n",
            " -0.24579989  0.95817256 -0.08253996 -0.31888335 -1.58749962 -1.2975272\n",
            " -0.30025188 -0.2072011   1.2419065  -0.41491022 -0.38165623 -0.40255006\n",
            "  0.58529611  0.41903093 -0.39930862 -0.70453087 -0.39746277 -0.24370876\n",
            "  0.93098445  0.70043654]\n",
            "Epoch=1769, Loss=0.8872, Weights=[-1.26508477  1.05865233  0.36803389  0.59675349 -1.63550799 -2.47509809\n",
            " -1.79819949  0.04475446  0.1145993   0.30442078  1.59370841 -0.84159658\n",
            " -0.32547894 -0.33051335  0.42039015 -0.27767339  0.34842674 -0.44032683\n",
            "  0.70602817 -1.13548916 -2.03249633 -0.02314453  1.17257921  0.83668718\n",
            " -0.94517137 -2.40780366  0.17419958 -0.53270875 -1.14306346 -0.89552535\n",
            " -1.02644634 -0.99142411  1.73918396 -0.90685522  1.52733316  0.13979673\n",
            " -1.01761345 -1.59222177 -0.59174226  0.74015022  0.1132905   0.45845444\n",
            " -0.98935203 -0.88903084 -1.28463325  1.33990252  0.73465372  0.57092536\n",
            " -0.45356712  0.26512407 -0.38440269 -0.20992661 -0.74733629  1.01085052\n",
            "  0.54314648 -1.01471164 -1.12181518 -0.05375276 -0.09698334 -1.04023634\n",
            " -0.68723927  0.59925145 -1.31394224  1.13664314 -0.8537524  -0.74423596\n",
            " -0.65108885  0.56447763  0.60571263  0.58960011  0.26905148  0.21251286\n",
            " -1.72350482 -0.74054114 -0.977137    1.30813309 -1.4915655   0.85628988\n",
            " -0.35926852  0.86434151 -0.68515799  1.52259992 -0.92719159 -0.83924676\n",
            " -0.83683944 -0.51778304 -1.20622239 -1.22245693 -1.65055162 -1.45985923\n",
            " -0.84734247  1.46817395  1.29463189 -0.72916283 -0.26422585 -0.82581379\n",
            "  1.38674052 -0.76588365  0.37045203  0.44443604  0.6796566   0.83526668\n",
            "  0.80256784  0.05157107 -0.49345002 -0.73010692  1.14764263 -0.62489821\n",
            " -0.4296134  -0.40167691 -0.76513669 -0.56185011  0.46714711 -1.5129625\n",
            "  0.45206231 -0.16068092 -0.55087003 -1.06686297 -2.41578654 -1.67698565\n",
            " -0.09264558 -1.02118978 -0.5028333  -1.77083996 -0.08594112 -1.57553489\n",
            "  2.12243818  0.19534327  0.63096034  0.48410331 -1.36260604  0.13284053\n",
            " -0.71098923  0.25786622  1.39835933 -0.73922446  1.06600702 -0.14524083\n",
            " -0.84584313  0.53050023  0.8101294   1.14673657 -0.2854596   0.05137002\n",
            " -0.71893458  1.20222304 -0.15111093 -0.86774083  0.27648741 -0.82069498\n",
            " -0.88934759  0.12275246 -0.17805951  0.93629641  0.49960531  1.96009095\n",
            " -0.79747994  1.02809077 -0.52208157  0.70244887  0.49773766  0.12059268\n",
            "  0.10901716 -0.99403881 -3.38137179  1.32077434  0.53372797 -1.15339316\n",
            "  0.55644335 -0.07607852 -0.64110808 -1.01083722 -0.56874489  2.20092338\n",
            "  1.09486423 -0.64951952  0.33676322  0.4994884  -0.04280018  1.57054798\n",
            " -0.24568394  0.9571353  -0.08490323 -0.31940558 -1.58637543 -1.29632619\n",
            " -0.29939122 -0.20743123  1.24176663 -0.4141102  -0.38248233 -0.40474923\n",
            "  0.58514397  0.42031231 -0.39941554 -0.70513451 -0.39720114 -0.24353552\n",
            "  0.931147    0.69984793]\n",
            "Epoch=1779, Loss=0.8852, Weights=[-1.2664605   1.05765334  0.36739409  0.59622368 -1.63323623 -2.47264654\n",
            " -1.7989305   0.04466705  0.11632304  0.30455729  1.591345   -0.84381486\n",
            " -0.32592517 -0.33022243  0.42146989 -0.27764217  0.34667592 -0.44018979\n",
            "  0.70693711 -1.13701859 -2.03438354 -0.02339467  1.17221666  0.83596183\n",
            " -0.94496947 -2.4076804   0.17395006 -0.53224758 -1.14205654 -0.89530757\n",
            " -1.02722461 -0.99144838  1.73940798 -0.90821328  1.52585434  0.13997815\n",
            " -1.0173612  -1.59233608 -0.59068165  0.74021001  0.11132238  0.45745519\n",
            " -0.98913456 -0.8898924  -1.28621378  1.3391367   0.73466336  0.57136969\n",
            " -0.4531674   0.26489857 -0.38504868 -0.2098528  -0.74732325  1.00972343\n",
            "  0.54264968 -1.01398092 -1.1210284  -0.05375132 -0.0981843  -1.04164474\n",
            " -0.68758028  0.59997711 -1.31413263  1.13500771 -0.85391848 -0.74228227\n",
            " -0.65007895  0.56274618  0.60399208  0.59016244  0.26987834  0.21179417\n",
            " -1.7243517  -0.74074829 -0.97713768  1.30930038 -1.49158413  0.85417257\n",
            " -0.35910801  0.86647342 -0.68480506  1.52092732 -0.92826608 -0.83834434\n",
            " -0.83656571 -0.51876844 -1.20580395 -1.22073901 -1.64941173 -1.45960268\n",
            " -0.84760482  1.46679235  1.29322946 -0.7287078  -0.26393799 -0.82689788\n",
            "  1.38700784 -0.76484578  0.37048793  0.44479108  0.67997696  0.83459019\n",
            "  0.80200295  0.05224381 -0.49265091 -0.73039997  1.14724444 -0.62489606\n",
            " -0.42889607 -0.4005918  -0.76507644 -0.56214854  0.46825532 -1.51185862\n",
            "  0.4503833  -0.16245621 -0.5504933  -1.0660645  -2.41544721 -1.67726013\n",
            " -0.09248042 -1.02034922 -0.50170399 -1.77031316 -0.08733214 -1.57738545\n",
            "  2.12160837  0.19496908  0.63068465  0.48414684 -1.36190035  0.13375942\n",
            " -0.71101791  0.25741076  1.39814015 -0.74033561  1.06431649 -0.14514331\n",
            " -0.84441374  0.5306467   0.80943277  1.14687277 -0.28513854  0.05016382\n",
            " -0.72068941  1.20243482 -0.15038673 -0.86819071  0.27566902 -0.82189166\n",
            " -0.8896747   0.12395019 -0.17772647  0.93574578  0.50052319  1.9613952\n",
            " -0.79824739  1.02639966 -0.52328241  0.70072223  0.4965286   0.1209466\n",
            "  0.10961628 -0.99280876 -3.37937706  1.32055082  0.53160974 -1.1531335\n",
            "  0.55712739 -0.07755029 -0.64205578 -1.01022291 -0.56800229  2.20060949\n",
            "  1.09450247 -0.64948794  0.3362749   0.49894226 -0.04354446  1.56977672\n",
            " -0.24556684  0.95609978 -0.08726796 -0.31992842 -1.58524881 -1.29512412\n",
            " -0.29853228 -0.20766189  1.24162719 -0.41331087 -0.38330828 -0.4069465\n",
            "  0.58499211  0.42159217 -0.39952085 -0.70573558 -0.39694072 -0.24336417\n",
            "  0.9313097   0.69926037]\n",
            "Epoch=1789, Loss=0.8833, Weights=[-1.26783702  1.05665582  0.36675726  0.59569337 -1.63097123 -2.4701976\n",
            " -1.79965736  0.04457862  0.11804209  0.30469631  1.58898688 -0.84603169\n",
            " -0.32637004 -0.32993191  0.42254473 -0.27761173  0.34492924 -0.44005519\n",
            "  0.70784171 -1.13854337 -2.03626616 -0.02364741  1.17185273  0.83523884\n",
            " -0.9447695  -2.40756036  0.17370296 -0.53178688 -1.14105358 -0.89508782\n",
            " -1.02799844 -0.99147322  1.73963029 -0.90956909  1.52437753  0.1401597\n",
            " -1.01710845 -1.59245155 -0.58962475  0.74026997  0.10935856  0.4564564\n",
            " -0.98891906 -0.89075288 -1.28779099  1.33837185  0.73467143  0.57181341\n",
            " -0.45276747  0.26467295 -0.38569446 -0.20977817 -0.74730937  1.00859815\n",
            "  0.54215409 -1.0132522  -1.12024421 -0.05375037 -0.09938366 -1.04305123\n",
            " -0.68792132  0.60070078 -1.31432335  1.13337621 -0.85408254 -0.74033248\n",
            " -0.64907305  0.56101757  0.60227729  0.59072439  0.27070126  0.21107398\n",
            " -1.72519644 -0.74095252 -0.97714013  1.31046146 -1.49160293  0.85206234\n",
            " -0.35894768  0.86859645 -0.6844553   1.51926157 -0.92933694 -0.83744739\n",
            " -0.83629468 -0.51975023 -1.20538343 -1.21902197 -1.64827432 -1.45934909\n",
            " -0.8478656   1.46541681  1.29182608 -0.72826021 -0.2636499  -0.8279776\n",
            "  1.38727312 -0.76381172  0.37052483  0.44514693  0.68029631  0.83391569\n",
            "  0.8014393   0.0529129  -0.49185449 -0.73069092  1.14684722 -0.62489515\n",
            " -0.4281797  -0.39950691 -0.76501383 -0.56244623  0.46935981 -1.5107579\n",
            "  0.44870506 -0.16422925 -0.55011576 -1.0652672  -2.4151082  -1.67753118\n",
            " -0.09231327 -1.01951174 -0.50057872 -1.76978534 -0.08871908 -1.57923544\n",
            "  2.12077817  0.194596    0.63040943  0.48418968 -1.36119557  0.13467597\n",
            " -0.71104846  0.2569576   1.39792265 -0.74144675  1.06262711 -0.14504607\n",
            " -0.84298575  0.53079349  0.80873652  1.14700653 -0.28481916  0.04896165\n",
            " -0.72244099  1.20264373 -0.14966384 -0.8686386   0.27485156 -0.82308656\n",
            " -0.89000139  0.12514411 -0.17739338  0.93519902  0.501437    1.96269061\n",
            " -0.79901395  1.024716   -0.52448301  0.69899291  0.49532268  0.12130218\n",
            "  0.11021209 -0.99158013 -3.37738448  1.32032426  0.52949662 -1.15286761\n",
            "  0.55780753 -0.07902642 -0.64299843 -1.00960615 -0.56726593  2.20029323\n",
            "  1.09414324 -0.64945569  0.33578704  0.49839771 -0.04428922  1.5690034\n",
            " -0.2454486   0.95506598 -0.08963415 -0.32045186 -1.58411976 -1.293921\n",
            " -0.29767505 -0.20789306  1.24148817 -0.41251222 -0.3841341  -0.40914186\n",
            "  0.58484053  0.42287052 -0.39962456 -0.70633409 -0.39668147 -0.24319472\n",
            "  0.93147252  0.69867383]\n",
            "Epoch=1799, Loss=0.8813, Weights=[-1.2692143   1.05565976  0.36612341  0.59516259 -1.62871301 -2.46775134\n",
            " -1.80038006  0.0444892   0.11975644  0.30483781  1.58663407 -0.84824709\n",
            " -0.32681357 -0.32964176  0.42361466 -0.27758209  0.34318672 -0.43992299\n",
            "  0.70874195 -1.14006351 -2.03814416 -0.02390276  1.17148738  0.83451823\n",
            " -0.94457146 -2.40744356  0.17345825 -0.53132665 -1.14005456 -0.8948661\n",
            " -1.02876781 -0.99149863  1.7398509  -0.91092267  1.52290272  0.14034139\n",
            " -1.0168552  -1.59256819 -0.58857157  0.74033013  0.10739902  0.45545809\n",
            " -0.98870553 -0.89161226 -1.28936489  1.33760797  0.73467796  0.57225649\n",
            " -0.45236733  0.26444724 -0.38634001 -0.20970274 -0.74729464  1.00747469\n",
            "  0.54165973 -1.01252548 -1.1194626  -0.05374991 -0.10058142 -1.0444558\n",
            " -0.68826238  0.60142246 -1.31451441  1.13174865 -0.85424461 -0.73838661\n",
            " -0.64807112  0.55929182  0.60056824  0.59128593  0.27152029  0.21035233\n",
            " -1.72603905 -0.74115386 -0.97714435  1.31161636 -1.49162189  0.84995915\n",
            " -0.35878755  0.87071063 -0.68410868  1.51760263 -0.93040421 -0.83655588\n",
            " -0.83602633 -0.52072844 -1.20496087 -1.21730582 -1.64713939 -1.45909845\n",
            " -0.84812483  1.46404732  1.29042179 -0.72782003 -0.2633616  -0.82905296\n",
            "  1.38753638 -0.76278147  0.37056271  0.44550357  0.68061469  0.83324319\n",
            "  0.80087689  0.05357836 -0.49106077 -0.73097977  1.14645096 -0.6248955\n",
            " -0.42746429 -0.39842226 -0.76494886 -0.56274321  0.47046058 -1.50966033\n",
            "  0.4470276  -0.16600003 -0.54973741 -1.06447108 -2.4147695  -1.67779883\n",
            " -0.09214415 -1.01867734 -0.49945745 -1.76925651 -0.09010196 -1.58108485\n",
            "  2.1199476   0.19422403  0.63013468  0.48423184 -1.36049168  0.13559017\n",
            " -0.7110809   0.25650674  1.39770683 -0.74255783  1.06093889 -0.14494912\n",
            " -0.84155916  0.53094062  0.80804065  1.14713784 -0.28450144  0.04776352\n",
            " -0.72418936  1.20284976 -0.14894227 -0.86908452  0.27403504 -0.82427968\n",
            " -0.89032766  0.12633426 -0.17706022  0.93465611  0.50234673  1.9639772\n",
            " -0.7997796   1.02303976 -0.52568335  0.69726092  0.49411992  0.12165941\n",
            "  0.11080456 -0.99035296 -3.37539407  1.32009467  0.5273886  -1.15259549\n",
            "  0.55848378 -0.08050688 -0.64393603 -1.00898693 -0.5665358   2.19997463\n",
            "  1.09378651 -0.64942277  0.33529964  0.49785475 -0.04503446  1.56822801\n",
            " -0.24532922  0.95403391 -0.09200179 -0.3209759  -1.58298828 -1.29271683\n",
            " -0.29681953 -0.20812476  1.24134957 -0.41171427 -0.38495977 -0.41133532\n",
            "  0.58468924  0.42414735 -0.39972669 -0.70693004 -0.39642339 -0.24302716\n",
            "  0.93163547  0.69808834]\n",
            "Epoch=1809, Loss=0.8794, Weights=[-1.27059231  1.05466514  0.36549251  0.59463137 -1.62646157 -2.46530781\n",
            " -1.80109862  0.04439882  0.1214661   0.30498178  1.5842866  -0.85046105\n",
            " -0.32725576 -0.32935196  0.42467966 -0.27755328  0.34144839 -0.43979319\n",
            "  0.70963782 -1.14157901 -2.04001749 -0.02416071  1.17112059  0.83379999\n",
            " -0.94437534 -2.40733     0.17321592 -0.53086688 -1.13905947 -0.89464241\n",
            " -1.02953276 -0.99152461  1.7400698  -0.91227401  1.52142991  0.14052321\n",
            " -1.01660144 -1.59268598 -0.58752209  0.74039046  0.10544377  0.45446026\n",
            " -0.98849394 -0.89247058 -1.29093551  1.33684506  0.73468294  0.57269891\n",
            " -0.45196699  0.26422146 -0.38698534 -0.20962653 -0.74727907  1.00635305\n",
            "  0.54116657 -1.01180079 -1.11868358 -0.05374994 -0.10177756 -1.04585844\n",
            " -0.68860345  0.60214217 -1.31470581  1.13012502 -0.85440471 -0.73644466\n",
            " -0.64707313  0.55756893  0.59886488  0.59184705  0.27233545  0.20962925\n",
            " -1.72687957 -0.74135231 -0.9771503   1.31276512 -1.49164103  0.84786297\n",
            " -0.35862763  0.87281597 -0.6837652   1.51595048 -0.9314679  -0.83566978\n",
            " -0.83576063 -0.52170307 -1.20453627 -1.21559055 -1.64600696 -1.45885076\n",
            " -0.84838251  1.46268388  1.28901658 -0.72738724 -0.2630731  -0.83012398\n",
            "  1.38779762 -0.76175503  0.37060155  0.44586101  0.6809321   0.83257268\n",
            "  0.80031571  0.05424019 -0.49026973 -0.73126652  1.14605565 -0.62489709\n",
            " -0.42674984 -0.39733782 -0.76488155 -0.56303949  0.47155764 -1.5085659\n",
            "  0.44535092 -0.16776856 -0.54935824 -1.06367612 -2.41443112 -1.67806308\n",
            " -0.09197307 -1.01784601 -0.49834019 -1.76872669 -0.09148081 -1.58293365\n",
            "  2.11911668  0.19385314  0.62986039  0.48427334 -1.35978871  0.136502\n",
            " -0.7111152   0.25605818  1.39749271 -0.74366884  1.05925185 -0.14485248\n",
            " -0.84013395  0.53108809  0.80734515  1.1472667  -0.28418536  0.0465694\n",
            " -0.72593456  1.20305292 -0.14822203 -0.86952844  0.27321947 -0.82547105\n",
            " -0.89065351  0.12752066 -0.17672699  0.93411701  0.5032524   1.96525501\n",
            " -0.80054435  1.02137095 -0.52688344  0.69552628  0.4929203   0.12201827\n",
            "  0.11139371 -0.98912725 -3.37340582  1.31986205  0.52528566 -1.15231717\n",
            "  0.55915615 -0.08199166 -0.64486861 -1.00836529 -0.56581188  2.19965368\n",
            "  1.0934323  -0.64938918  0.33481271  0.49731341 -0.04578015  1.56745057\n",
            " -0.24520871  0.95300354 -0.09437088 -0.32150051 -1.5818544  -1.29151163\n",
            " -0.29596571 -0.20835696  1.24121137 -0.41091701 -0.38578529 -0.41352687\n",
            "  0.58453823  0.42542267 -0.39982723 -0.70752343 -0.39616646 -0.24286148\n",
            "  0.93179854  0.69750388]\n",
            "Epoch=1819, Loss=0.8775, Weights=[-1.27197105  1.05367196  0.36486458  0.59409976 -1.62421693 -2.46286708\n",
            " -1.80181304  0.04430751  0.12317105  0.30512821  1.58194449 -0.85267355\n",
            " -0.32769661 -0.32906251  0.42573974 -0.27752532  0.33971426 -0.43966576\n",
            "  0.71052929 -1.14308988 -2.04188614 -0.02442124  1.17075235  0.83308412\n",
            " -0.94418112 -2.40721969  0.17297595 -0.53040758 -1.13806832 -0.89441677\n",
            " -1.03029327 -0.99155115  1.74028701 -0.91362312  1.51995909  0.14070516\n",
            " -1.01634718 -1.5928049  -0.58647629  0.74045099  0.10349279  0.45346294\n",
            " -0.9882843  -0.89332784 -1.29250288  1.33608313  0.7346864   0.57314065\n",
            " -0.45156646  0.26399561 -0.38763043 -0.20954955 -0.74726266  1.00523325\n",
            "  0.54067464 -1.01107812 -1.11790714 -0.05375044 -0.10297208 -1.04725915\n",
            " -0.68894454  0.60285988 -1.31489756  1.1285053  -0.85456284 -0.73450663\n",
            " -0.64607906  0.55584892  0.59716719  0.5924077   0.27314677  0.20890476\n",
            " -1.72771801 -0.74154792 -0.97715796  1.31390778 -1.49166033  0.84577377\n",
            " -0.35846793  0.87491251 -0.68342484  1.51430507 -0.93252805 -0.83478903\n",
            " -0.83549756 -0.52267415 -1.20410964 -1.21387618 -1.64487701 -1.45860601\n",
            " -0.84863864  1.46132647  1.28761049 -0.72696181 -0.2627844  -0.83119066\n",
            "  1.38805684 -0.7607324   0.37064133  0.44621925  0.68124855  0.83190414\n",
            "  0.79975575  0.0548984  -0.48948138 -0.73155119  1.14566128 -0.62489993\n",
            " -0.42603632 -0.3962536  -0.76481191 -0.56333508  0.47265101 -1.50747461\n",
            "  0.44367502 -0.16953482 -0.54897824 -1.06288232 -2.41409306 -1.67832394\n",
            " -0.09180005 -1.01701774 -0.49722691 -1.76819589 -0.09285563 -1.58478182\n",
            "  2.11828544  0.19348331  0.62958654  0.48431418 -1.35908665  0.13741145\n",
            " -0.71115136  0.25561192  1.39728026 -0.74477976  1.05756599 -0.14475618\n",
            " -0.83871013  0.53123592  0.80665     1.14739311 -0.28387088  0.0453793\n",
            " -0.7276766   1.20325321 -0.1475031  -0.86997037  0.27240487 -0.82666066\n",
            " -0.89097895  0.12870334 -0.17639369  0.93358171  0.50415398  1.96652406\n",
            " -0.80130819  1.01970956 -0.52808325  0.693789    0.49172383  0.12237878\n",
            "  0.11197951 -0.98790304 -3.37141973  1.31962643  0.5231878  -1.15203265\n",
            "  0.55982466 -0.08348074 -0.64579617 -1.00774123 -0.56509418  2.1993304\n",
            "  1.0930806  -0.64935492  0.33432624  0.49677367 -0.04652629  1.56667109\n",
            " -0.24508709  0.95197486 -0.09674139 -0.32202571 -1.58071812 -1.2903054\n",
            " -0.29511358 -0.20858967  1.24107357 -0.41012046 -0.38661067 -0.41571651\n",
            "  0.58438751  0.42669647 -0.3999262  -0.70811427 -0.39591066 -0.24269769\n",
            "  0.93196172  0.69692047]\n",
            "Epoch=1829, Loss=0.8756, Weights=[-1.27335049  1.05268021  0.3642396   0.59356779 -1.62197908 -2.46042921\n",
            " -1.80252333  0.0442153   0.12487129  0.30527709  1.57960774 -0.8548846\n",
            " -0.32813613 -0.32877338  0.42679488 -0.27749823  0.33798436 -0.43954068\n",
            "  0.71141633 -1.14459613 -2.04375007 -0.02468436  1.17038263  0.83237061\n",
            " -0.94398879 -2.40711263  0.17273832 -0.52994874 -1.1370811  -0.89418919\n",
            " -1.03104937 -0.99157825  1.74050253 -0.91496997  1.51849027  0.14088722\n",
            " -1.01609241 -1.59292496 -0.58543416  0.7405117   0.10154608  0.45246611\n",
            " -0.98807659 -0.89418406 -1.294067    1.33532219  0.73468833  0.57358168\n",
            " -0.45116576  0.26376974 -0.38827527 -0.20947181 -0.74724543  1.00411531\n",
            "  0.54018393 -1.01035747 -1.11713328 -0.05375142 -0.10416499 -1.04865792\n",
            " -0.68928563  0.60357562 -1.31508965  1.1268895  -0.85471903 -0.73257252\n",
            " -0.64508888  0.55413181  0.59547513  0.59296787  0.27395428  0.20817889\n",
            " -1.72855439 -0.74174069 -0.9771673   1.31504437 -1.4916798   0.84369152\n",
            " -0.35830848  0.87700026 -0.68308757  1.51266636 -0.93358466 -0.83391361\n",
            " -0.83523709 -0.52364168 -1.20368101 -1.21216272 -1.64374954 -1.45836419\n",
            " -0.84889322  1.45997508  1.28620353 -0.72654372 -0.26249552 -0.83225302\n",
            "  1.38831406 -0.75971359  0.37068205  0.44657829  0.68156406  0.83123757\n",
            "  0.79919699  0.05555299 -0.48869571 -0.73183378  1.14526783 -0.62490402\n",
            " -0.42532372 -0.39516959 -0.76473997 -0.56362999  0.47374071 -1.50638643\n",
            "  0.44199989 -0.17129881 -0.5485974  -1.06208968 -2.41375531 -1.67858143\n",
            " -0.09162511 -1.01619254 -0.4961176  -1.76766414 -0.09422647 -1.58662934\n",
            "  2.11745389  0.19311452  0.62931311  0.48435438 -1.3583855   0.13831852\n",
            " -0.71118938  0.25516795  1.39706949 -0.74589054  1.05588132 -0.14466021\n",
            " -0.8372877   0.53138412  0.8059552   1.14751708 -0.28355797  0.04419319\n",
            " -0.72941552  1.20345061 -0.14678551 -0.87041029  0.27159125 -0.82784853\n",
            " -0.89130399  0.12988231 -0.17606031  0.93305016  0.50505149  1.96778437\n",
            " -0.80207111  1.01805557 -0.52928278  0.69204909  0.49053051  0.12274093\n",
            "  0.11256197 -0.98668032 -3.36943582  1.3193878   0.52109501 -1.15174196\n",
            "  0.56048931 -0.08497408 -0.64671872 -1.00711479 -0.56438268  2.1990048\n",
            "  1.09273142 -0.64932     0.33384025  0.49623556 -0.04727288  1.56588957\n",
            " -0.24496437  0.95094786 -0.09911333 -0.32255147 -1.57957944 -1.28909814\n",
            " -0.29426312 -0.20882288  1.24093616 -0.40932462 -0.3874359  -0.41790424\n",
            "  0.58423708  0.42796876 -0.40002362 -0.70870256 -0.39565599 -0.24253578\n",
            "  0.93212499  0.69633809]\n",
            "Epoch=1839, Loss=0.8736, Weights=[-1.27473061  1.05168987  0.36361758  0.59303551 -1.61974805 -2.45799425\n",
            " -1.80322949  0.04412224  0.12656682  0.3054284   1.57727639 -0.85709419\n",
            " -0.32857433 -0.32848457  0.42784506 -0.27747204  0.3362587  -0.43941793\n",
            "  0.71229894 -1.14609777 -2.04560926 -0.02495005  1.17001142  0.83165946\n",
            " -0.94379834 -2.40700882  0.17250302 -0.52949037 -1.13609779 -0.89395967\n",
            " -1.03180105 -0.99160592  1.74071635 -0.91631459  1.51702343  0.14106941\n",
            " -1.01583714 -1.59304612 -0.58439569  0.74057261  0.09960363  0.4514698\n",
            " -0.98787079 -0.89503924 -1.29562791  1.33456224  0.73468875  0.574022\n",
            " -0.45076489  0.26354384 -0.38891986 -0.20939332 -0.74722736  1.00299924\n",
            "  0.53969444 -1.00963887 -1.11636201 -0.05375286 -0.10535626 -1.05005475\n",
            " -0.68962673  0.60428937 -1.31528209  1.12527761 -0.85487329 -0.73064235\n",
            " -0.64410256  0.55241761  0.59378868  0.59352753  0.27475799  0.20745168\n",
            " -1.72938874 -0.74193066 -0.9771783   1.31617495 -1.49169944  0.84161618\n",
            " -0.35814928  0.87907924 -0.68275338  1.51103432 -0.93463777 -0.83304348\n",
            " -0.83497921 -0.52460569 -1.20325039 -1.21045017 -1.64262456 -1.45812529\n",
            " -0.84914627  1.45862971  1.28479572 -0.72613293 -0.26220646 -0.83331105\n",
            "  1.38856928 -0.75869858  0.37072369  0.44693813  0.68187864  0.83057296\n",
            "  0.79863944  0.05620397 -0.48791272 -0.73211431  1.1448753  -0.62490936\n",
            " -0.42461205 -0.39408579 -0.76466574 -0.56392425  0.47482673 -1.50530138\n",
            "  0.44032553 -0.17306052 -0.54821572 -1.06129819 -2.41341787 -1.67883557\n",
            " -0.09144826 -1.01537038 -0.49501225 -1.76713145 -0.09559333 -1.58847618\n",
            "  2.11662206  0.19274675  0.6290401   0.48439395 -1.35768529  0.1392232\n",
            " -0.71122924  0.25472627  1.39686041 -0.74700118  1.05419786 -0.14456461\n",
            " -0.83586665  0.53153269  0.80526074  1.14763861 -0.28324663  0.04301107\n",
            " -0.73115136  1.20364512 -0.14606926 -0.87084822  0.27077863 -0.82903467\n",
            " -0.89162864  0.13105762 -0.17572685  0.93252234  0.50594491  1.96903597\n",
            " -0.80283309  1.01640898 -0.53048201  0.69030659  0.48934034  0.1231047\n",
            "  0.11314107 -0.98545913 -3.36745409  1.31914618  0.51900728 -1.15144511\n",
            "  0.56115011 -0.08647168 -0.64763626 -1.00648596 -0.56367736  2.1986769\n",
            "  1.09238474 -0.64928442  0.33335474  0.49569906 -0.04801989  1.56510604\n",
            " -0.24484055  0.94992252 -0.10148668 -0.3230778  -1.57843839 -1.28788987\n",
            " -0.29341433 -0.20905659  1.24079913 -0.40852949 -0.38826099 -0.42009007\n",
            "  0.58408693  0.42923952 -0.40011949 -0.70928829 -0.39540242 -0.24237574\n",
            "  0.93228836  0.69575676]\n",
            "Epoch=1849, Loss=0.8717, Weights=[-1.27611139  1.05070094  0.36299849  0.59250293 -1.61752384 -2.45556227\n",
            " -1.80393153  0.04402835  0.12825764  0.30558214  1.57495045 -0.85930232\n",
            " -0.32901121 -0.32819605  0.42889029 -0.27744677  0.3345373  -0.43929748\n",
            "  0.71317709 -1.14759479 -2.04746366 -0.02521831  1.16963868  0.83095067\n",
            " -0.94360977 -2.40690829  0.17227001 -0.52903247 -1.1351184  -0.89372822\n",
            " -1.03254833 -0.99163415  1.7409285  -0.91765697  1.51555859  0.14125171\n",
            " -1.01558135 -1.5931684  -0.58336087  0.74063371  0.09766545  0.45047401\n",
            " -0.9876669  -0.8958934  -1.29718563  1.3338033   0.73468766  0.57446156\n",
            " -0.45036387  0.26331794 -0.38956419 -0.20931411 -0.74720848  1.00188505\n",
            "  0.53920618 -1.00892231 -1.11559332 -0.05375477 -0.10654591 -1.05144964\n",
            " -0.68996782  0.60500114 -1.31547488  1.12366963 -0.85502564 -0.72871611\n",
            " -0.64312009  0.55070633  0.5921078   0.59408664  0.27555796  0.20672315\n",
            " -1.73022109 -0.74211784 -0.97719095  1.31729953 -1.49171925  0.83954773\n",
            " -0.35799035  0.88114949 -0.68242225  1.50940891 -0.93568739 -0.8321786\n",
            " -0.83472389 -0.52556617 -1.20281779 -1.20873854 -1.64150207 -1.45788932\n",
            " -0.84939777  1.45729034  1.28338709 -0.72572944 -0.26191724 -0.83436479\n",
            "  1.38882251 -0.7576874   0.37076623  0.44729877  0.6821923   0.8299103\n",
            "  0.79808309  0.05685135 -0.4871324  -0.73239277  1.14448366 -0.62491595\n",
            " -0.42390127 -0.39300219 -0.76458922 -0.56421785  0.4759091  -1.50421942\n",
            "  0.43865194 -0.17481995 -0.54783319 -1.06050784 -2.41308075 -1.67908636\n",
            " -0.09126951 -1.01455126 -0.49391084 -1.76659785 -0.09695624 -1.59032232\n",
            "  2.11578997  0.19237998  0.6287675   0.4844329  -1.35698599  0.14012547\n",
            " -0.71127094  0.25428688  1.396653   -0.74811164  1.05251562 -0.14446937\n",
            " -0.83444699  0.53168166  0.8045666   1.14775769 -0.2829368   0.04183294\n",
            " -0.73288413  1.20383674 -0.14535434 -0.87128413  0.26996701 -0.8302191\n",
            " -0.89195288  0.13222927 -0.17539331  0.93199822  0.50683424  1.97027888\n",
            " -0.80359414  1.01476978 -0.53168095  0.68856149  0.4881533   0.1234701\n",
            "  0.11371682 -0.98423948 -3.36547454  1.31890158  0.51692461 -1.15114211\n",
            "  0.56180706 -0.08797352 -0.64854881 -1.00585477 -0.56297822  2.19834671\n",
            "  1.09204057 -0.64924817  0.33286971  0.4951642  -0.04876733  1.5643205\n",
            " -0.24471567  0.94889884 -0.10386144 -0.32360469 -1.57729497 -1.28668059\n",
            " -0.2925672  -0.20929079  1.24066246 -0.40773509 -0.38908592 -0.422274\n",
            "  0.58393707  0.43050877 -0.40021382 -0.70987147 -0.39514995 -0.24221758\n",
            "  0.93245182  0.69517647]\n",
            "Epoch=1859, Loss=0.8698, Weights=[-1.27749281  1.0497134   0.36238235  0.59197011 -1.61530646 -2.45313332\n",
            " -1.80462945  0.04393366  0.12994373  0.3057383   1.57262994 -0.86150897\n",
            " -0.32944677 -0.32790783  0.42993054 -0.27742244  0.33282019 -0.43917932\n",
            "  0.71405076 -1.14908721 -2.04931325 -0.02548914  1.1692644   0.83024423\n",
            " -0.94342305 -2.40681101  0.17203928 -0.52857504 -1.13414292 -0.89349486\n",
            " -1.03329122 -0.99166294  1.74113896 -0.9189971   1.51409573  0.14143411\n",
            " -1.01532505 -1.59329177 -0.58232968  0.740695    0.09573151  0.44947875\n",
            " -0.9874649  -0.89674655 -1.29874017  1.33304536  0.73468509  0.57490037\n",
            " -0.4499627   0.26309206 -0.39020824 -0.20923419 -0.74718878  1.00077274\n",
            "  0.53871914 -1.0082078  -1.11482722 -0.05375714 -0.10773391 -1.05284257\n",
            " -0.69030891  0.60571094 -1.31566801  1.12206553 -0.85517609 -0.7267938\n",
            " -0.64214142  0.54899798  0.59043246  0.59464519  0.27635419  0.20599333\n",
            " -1.73105144 -0.74230225 -0.9772052   1.31841818 -1.49173922  0.83748612\n",
            " -0.35783171  0.88321103 -0.68209417  1.50779009 -0.93673355 -0.83131894\n",
            " -0.8344711  -0.52652316 -1.20238323 -1.20702783 -1.64038207 -1.45765625\n",
            " -0.84964775  1.45595696  1.28197765 -0.7253332  -0.26162785 -0.83541422\n",
            "  1.38907376 -0.75668003  0.37080966  0.4476602   0.68250505  0.82924959\n",
            "  0.79752792  0.05749514 -0.48635475 -0.73266919  1.14409292 -0.62492379\n",
            " -0.4231914  -0.39191878 -0.76451045 -0.56451083  0.47698783 -1.50314057\n",
            "  0.43697913 -0.1765771  -0.5474498  -1.05971863 -2.41274393 -1.67933382\n",
            " -0.0910889  -1.01373519 -0.49281337 -1.76606334 -0.09831523 -1.59216773\n",
            "  2.11495763  0.1920142   0.62849528  0.48447123 -1.35628764  0.14102533\n",
            " -0.71131447  0.25384976  1.39644727 -0.74922189  1.0508346  -0.14437453\n",
            " -0.83302871  0.53183103  0.80387278  1.14787434 -0.28262848  0.04065877\n",
            " -0.73461388  1.20402548 -0.14464077 -0.87171803  0.26915641 -0.83140181\n",
            " -0.89227675  0.13339729 -0.17505968  0.93147778  0.50771948  1.97151314\n",
            " -0.80435424  1.01313797 -0.53287958  0.68681381  0.48696942  0.12383712\n",
            "  0.11428921 -0.98302138 -3.36349718  1.31865401  0.51484697 -1.15083299\n",
            "  0.5624602  -0.08947955 -0.64945638 -1.00522125 -0.56228525  2.19801423\n",
            "  1.0916989  -0.64921127  0.33238516  0.49463096 -0.04951517  1.56353295\n",
            " -0.24458972  0.9478768  -0.10623759 -0.32413212 -1.57614919 -1.2854703\n",
            " -0.29172171 -0.20952548  1.24052616 -0.40694141 -0.3899107  -0.42445601\n",
            "  0.5837875   0.4317765  -0.40030664 -0.7104521  -0.39489855 -0.24206128\n",
            "  0.93261536  0.69459722]\n",
            "Epoch=1869, Loss=0.8680, Weights=[-1.27887484  1.04872724  0.36176914  0.59143708 -1.61309592 -2.45070745\n",
            " -1.80532326  0.04383821  0.13162511  0.30589684  1.57031487 -0.86371415\n",
            " -0.32988103 -0.32761987  0.43096582 -0.27739907  0.33110738 -0.43906343\n",
            "  0.71491993 -1.15057504 -2.051158   -0.02576251  1.16888856  0.82954015\n",
            " -0.94323818 -2.40671701  0.17181082 -0.52811807 -1.13317134 -0.8932596\n",
            " -1.03402973 -0.99169229  1.74134776 -0.920335    1.51263485  0.14161663\n",
            " -1.01506825 -1.59341623 -0.58130211  0.74075649  0.09380182  0.44848402\n",
            " -0.98726479 -0.89759871 -1.30029156  1.33228843  0.73468103  0.57533839\n",
            " -0.4495614   0.26286621 -0.39085201 -0.20915357 -0.74716826  0.99966235\n",
            "  0.53823332 -1.00749535 -1.1140637  -0.05375996 -0.10892027 -1.05423354\n",
            " -0.69064999  0.60641875 -1.3158615   1.12046533 -0.85532466 -0.72487544\n",
            " -0.64116655  0.54729257  0.58876262  0.59520314  0.27714672  0.20526226\n",
            " -1.73187984 -0.74248392 -0.97722104  1.31953091 -1.49175935  0.83543133\n",
            " -0.35767336  0.88526388 -0.68176911  1.50617782 -0.93777627 -0.83046445\n",
            " -0.83422083 -0.52747666 -1.20194673 -1.20531807 -1.63926456 -1.45742609\n",
            " -0.84989619  1.45462956  1.28056742 -0.7249442  -0.26133832 -0.83645937\n",
            "  1.38932303 -0.75567648  0.37085397  0.44802244  0.68281691  0.82859082\n",
            "  0.79697392  0.05813534 -0.48557976 -0.73294356  1.14370306 -0.62493288\n",
            " -0.4224824  -0.39083557 -0.76442943 -0.56480318  0.47806292 -1.5020648\n",
            "  0.43530708 -0.17833195 -0.54706554 -1.05893055 -2.41240743 -1.67957797\n",
            " -0.09090642 -1.01292214 -0.4917198  -1.76552795 -0.09967031 -1.59401239\n",
            "  2.11412508  0.19164938  0.62822344  0.48450897 -1.35559022  0.14192278\n",
            " -0.71135983  0.25341493  1.39624322 -0.75033193  1.04915482 -0.14428008\n",
            " -0.8316118   0.53198081  0.80317927  1.14798854 -0.28232163  0.03948855\n",
            " -0.73634063  1.20421131 -0.14392854 -0.8721499   0.26834685 -0.83258282\n",
            " -0.89260023  0.13456172 -0.17472596  0.93096098  0.50860062  1.97273877\n",
            " -0.80511338  1.01151352 -0.5340779   0.68506358  0.48578867  0.12420575\n",
            "  0.11485822 -0.98180486 -3.36152201  1.31840348  0.51277437 -1.15051777\n",
            "  0.56310951 -0.09098978 -0.65035898 -1.0045854  -0.56159842  2.19767948\n",
            "  1.09135973 -0.6491737   0.33190111  0.49409937 -0.05026341  1.56274343\n",
            " -0.24446272  0.94685639 -0.10861512 -0.32466009 -1.57500106 -1.28425903\n",
            " -0.29087787 -0.20976066  1.2403902  -0.40614846 -0.39073533 -0.42663612\n",
            "  0.58363823  0.43304271 -0.40039793 -0.71103018 -0.39464822 -0.24190686\n",
            "  0.93277897  0.69401902]\n",
            "Epoch=1879, Loss=0.8661, Weights=[-1.28025747  1.04774246  0.36115886  0.59090387 -1.61089222 -2.44828474\n",
            " -1.80601295  0.04374203  0.13330176  0.30605778  1.56800527 -0.86591785\n",
            " -0.330314   -0.32733217  0.43199612 -0.27737669  0.32939888 -0.43894979\n",
            "  0.7157846  -1.15205827 -2.05299789 -0.02603843  1.16851114  0.82883841\n",
            " -0.94305514 -2.40662629  0.17158459 -0.52766157 -1.13220365 -0.89302243\n",
            " -1.03476387 -0.99172221  1.74155488 -0.92167065  1.51117596  0.14179924\n",
            " -1.01481093 -1.59354176 -0.58027815  0.74081817  0.09187637  0.44748984\n",
            " -0.98706656 -0.89844988 -1.30183981  1.33153252  0.73467549  0.57577561\n",
            " -0.44915996  0.26264042 -0.3914955  -0.20907227 -0.74714694  0.99855387\n",
            "  0.53774874 -1.00678497 -1.11330277 -0.05376323 -0.11010497 -1.05562256\n",
            " -0.69099106  0.6071246  -1.31605534  1.11886901 -0.85547137 -0.72296102\n",
            " -0.64019544  0.54559013  0.58709827  0.59576047  0.27793558  0.20452996\n",
            " -1.73270628 -0.74266287 -0.97723846  1.32063779 -1.49177965  0.83338331\n",
            " -0.35751533  0.88730807 -0.68144706  1.50457207 -0.93881558 -0.82961509\n",
            " -0.83397306 -0.52842669 -1.20150829 -1.20360924 -1.63814953 -1.45719883\n",
            " -0.85014312  1.45330813  1.27915643 -0.72456241 -0.26104865 -0.83750025\n",
            "  1.38957034 -0.75467674  0.37089913  0.44838547  0.68312789  0.82793397\n",
            "  0.79642109  0.05877197 -0.48480744 -0.73321589  1.14331407 -0.62494321\n",
            " -0.42177428 -0.38975254 -0.76434619 -0.56509493  0.4791344  -1.50099211\n",
            "  0.43363581 -0.18008451 -0.54668042 -1.05814359 -2.41207124 -1.67981882\n",
            " -0.0907221  -1.01211211 -0.49063014 -1.7649917  -0.1010215  -1.59585629\n",
            "  2.11329233  0.1912855   0.62795196  0.48454611 -1.35489374  0.14281779\n",
            " -0.711407    0.25298238  1.39604085 -0.75144171  1.04747629 -0.14418606\n",
            " -0.83019627  0.53213102  0.80248605  1.1481003  -0.28201622  0.03832229\n",
            " -0.73806441  1.20439425 -0.14321766 -0.87257975  0.26753833 -0.83376215\n",
            " -0.89292333  0.13572257 -0.17439215  0.93044779  0.50947767  1.97395579\n",
            " -0.80587156  1.00989644 -0.53527589  0.6833108   0.48461107  0.124576\n",
            "  0.11542386 -0.98058993 -3.35954903  1.31815     0.51070679 -1.15019645\n",
            "  0.56375502 -0.09250416 -0.65125662 -1.00394725 -0.56091774  2.19734247\n",
            "  1.09102307 -0.64913549  0.33141756  0.49356942 -0.05101203  1.56195192\n",
            " -0.24433468  0.9458376  -0.11099401 -0.3251886  -1.5738506  -1.28304676\n",
            " -0.29003565 -0.20999632  1.24025459 -0.40535624 -0.3915598  -0.42881431\n",
            "  0.58348924  0.4343074  -0.40048773 -0.71160571 -0.39439894 -0.24175429\n",
            "  0.93294265  0.69344187]\n",
            "Epoch=1889, Loss=0.8642, Weights=[-1.28164068  1.04675904  0.36055151  0.59037052 -1.60869537 -2.44586523\n",
            " -1.80669855  0.04364515  0.13497368  0.30622108  1.56570115 -0.86812007\n",
            " -0.33074567 -0.32704472  0.43302142 -0.27735531  0.32769471 -0.43883838\n",
            "  0.71664474 -1.15353692 -2.05483289 -0.02631689  1.16813212  0.82813902\n",
            " -0.94287393 -2.40653884  0.17136059 -0.52720554 -1.13123984 -0.89278338\n",
            " -1.03549365 -0.99175268  1.74176035 -0.92300406  1.50971904  0.14198196\n",
            " -1.01455309 -1.59366836 -0.57925779  0.74088005  0.08995514  0.44649622\n",
            " -0.98687019 -0.89930008 -1.30338494  1.33077763  0.73466849  0.576212\n",
            " -0.44875841  0.2624147  -0.39213869 -0.20899029 -0.74712481  0.99744732\n",
            "  0.53726538 -1.00607666 -1.11254443 -0.05376694 -0.11128802 -1.05700961\n",
            " -0.69133211  0.60782847 -1.31624954  1.11727656 -0.85561623 -0.72105054\n",
            " -0.63922806  0.54389066  0.58543936  0.59631715  0.27872079  0.20379646\n",
            " -1.73353081 -0.74283911 -0.97725741  1.32173883 -1.49180011  0.83134204\n",
            " -0.35735763  0.88934363 -0.681128    1.5029728  -0.93985149 -0.82877084\n",
            " -0.83372776 -0.52937327 -1.20106794 -1.20190137 -1.637037   -1.45697445\n",
            " -0.85038852  1.45199265  1.27774469 -0.72418779 -0.26075886 -0.83853686\n",
            "  1.38981569 -0.75368082  0.37094515  0.44874931  0.683438    0.82727905\n",
            "  0.79586942  0.05940502 -0.48403778 -0.7334862   1.14292594 -0.62495479\n",
            " -0.42106702 -0.38866969 -0.76426073 -0.56538608  0.48020226 -1.49992248\n",
            "  0.4319653  -0.18183477 -0.54629441 -1.05735776 -2.41173535 -1.68005638\n",
            " -0.09053596 -1.0113051  -0.48954437 -1.7644546  -0.10236884 -1.59769939\n",
            "  2.1124594   0.19092254  0.62768084  0.48458267 -1.35419822  0.14371036\n",
            " -0.71145598  0.2525521   1.39584015 -0.75255122  1.04579901 -0.14409246\n",
            " -0.82878211  0.53228166  0.80179312  1.14820962 -0.28171224  0.03715996\n",
            " -0.73978525  1.20457428 -0.14250814 -0.87300757  0.26673088 -0.8349398\n",
            " -0.89324606  0.13687987 -0.17405824  0.92993818  0.51035063  1.97516424\n",
            " -0.80662876  1.00828671 -0.53647355  0.68155549  0.48343661  0.12494785\n",
            "  0.11598612 -0.97937661 -3.35757826  1.3178936   0.50864423 -1.14986907\n",
            "  0.56439673 -0.09402269 -0.65214931 -1.00330681 -0.56024318  2.19700321\n",
            "  1.0906889  -0.64909662  0.3309345   0.49304111 -0.05176103  1.56115845\n",
            " -0.24420562  0.94482042 -0.11337427 -0.32571763 -1.57269782 -1.28183352\n",
            " -0.28919506 -0.21023245  1.2401193  -0.40456477 -0.39238411 -0.4309906\n",
            "  0.58334055  0.43557056 -0.40057603 -0.7121787  -0.39415071 -0.24160359\n",
            "  0.93310638  0.69286577]\n",
            "Epoch=1899, Loss=0.8623, Weights=[-1.28302443  1.04577697  0.35994707  0.58983706 -1.60650538 -2.44344897\n",
            " -1.80738005  0.04354761  0.13664087  0.30638675  1.56340253 -0.87032079\n",
            " -0.33117606 -0.3267575   0.43404173 -0.27733496  0.3259949  -0.43872917\n",
            "  0.71750034 -1.15501099 -2.05666297 -0.02659788  1.16775148  0.82744197\n",
            " -0.94269452 -2.40645467  0.17113879 -0.52674998 -1.13027992 -0.89254246\n",
            " -1.03621908 -0.99178372  1.74196416 -0.92433522  1.5082641   0.14216477\n",
            " -1.01429474 -1.59379601 -0.578241    0.74094213  0.08803815  0.44550315\n",
            " -0.98667567 -0.90014931 -1.30492699  1.33002377  0.73466003  0.57664756\n",
            " -0.44835674  0.26218907 -0.39278158 -0.20890766 -0.74710188  0.9963427\n",
            "  0.53678325 -1.00537043 -1.11178867 -0.05377109 -0.1124694  -1.05839468\n",
            " -0.69167315  0.60853037 -1.31644408  1.11568797 -0.85575925 -0.71914401\n",
            " -0.63826439  0.54219417  0.58378586  0.59687316  0.27950238  0.20306179\n",
            " -1.73435343 -0.74301268 -0.97727789  1.3228341  -1.49182073  0.82930748\n",
            " -0.35720028  0.89137057 -0.68081192  1.50137996 -0.94088403 -0.82793166\n",
            " -0.83348491 -0.5303164  -1.20062568 -1.20019446 -1.63592695 -1.45675295\n",
            " -0.85063241  1.45068312  1.27633222 -0.72382033 -0.26046894 -0.83956922\n",
            "  1.39005909 -0.75268872  0.37099199  0.44911393  0.68374725  0.82662603\n",
            "  0.7953189   0.06003451 -0.48327078 -0.7337545   1.14253865 -0.62496762\n",
            " -0.42036062 -0.38758702 -0.76417308 -0.56567666  0.48126653 -1.49885592\n",
            "  0.43029556 -0.18358271 -0.54590753 -1.05657305 -2.41139978 -1.68029067\n",
            " -0.090348   -1.01050111 -0.48846246 -1.76391667 -0.10371234 -1.59954168\n",
            "  2.11162631  0.19056049  0.62741006  0.48461867 -1.35350364  0.14460049\n",
            " -0.71150676  0.25212409  1.39564112 -0.75366043  1.044123   -0.1439993\n",
            " -0.82736932  0.53243274  0.80110047  1.1483165  -0.28140965  0.03600155\n",
            " -0.74150319  1.20475141 -0.14179997 -0.87343335  0.2659245  -0.83611578\n",
            " -0.89356842  0.13803365 -0.17372424  0.92943212  0.51121948  1.97636415\n",
            " -0.80738498  1.00668433 -0.53767087  0.67979766  0.48226529  0.12532129\n",
            "  0.11654499 -0.97816492 -3.35560968  1.31763427  0.50658667 -1.14953564\n",
            "  0.56503466 -0.09554532 -0.65303707 -1.00266411 -0.55957473  2.19666173\n",
            "  1.09035722 -0.64905709  0.33045194  0.49251446 -0.05251038  1.56036303\n",
            " -0.24407555  0.94380484 -0.11575586 -0.32624719 -1.57154274 -1.2806193\n",
            " -0.28835607 -0.21046907  1.23998433 -0.40377405 -0.39320826 -0.43316497\n",
            "  0.58319215  0.4368322  -0.40066286 -0.71274914 -0.39390349 -0.24145475\n",
            "  0.93327018  0.69229073]\n",
            "Epoch=1909, Loss=0.8605, Weights=[-1.28440872  1.04479624  0.35934555  0.58930354 -1.60432225 -2.44103603\n",
            " -1.80805746  0.04344943  0.13830332  0.30655476  1.56110943 -0.87252001\n",
            " -0.33160518 -0.32647051  0.43505703 -0.27731566  0.32429945 -0.43862215\n",
            "  0.71835138 -1.15648049 -2.0584881  -0.0268814   1.16736921  0.82674725\n",
            " -0.94251692 -2.40637379  0.17091917 -0.52629488 -1.12932386 -0.89229967\n",
            " -1.03694017 -0.99181531  1.74216633 -0.92566415  1.50681114  0.14234768\n",
            " -1.01403588 -1.59392471 -0.57722779  0.74100442  0.08612537  0.44451066\n",
            " -0.986483   -0.9009976  -1.30646595  1.32927094  0.73465011  0.57708225\n",
            " -0.44795498  0.26196354 -0.39342415 -0.20882439 -0.74707815  0.99524005\n",
            "  0.53630235 -1.00466628 -1.1110355  -0.05377567 -0.1136491  -1.05977779\n",
            " -0.69201416  0.6092303  -1.31663898  1.11410324 -0.85590046 -0.71724143\n",
            " -0.63730441  0.54050067  0.58213774  0.59742847  0.28028037  0.20232598\n",
            " -1.73517417 -0.7431836  -0.97729987  1.32392361 -1.49184151  0.8272796\n",
            " -0.35704328  0.89338894 -0.68049879  1.49979352 -0.94191322 -0.82709749\n",
            " -0.83324449 -0.53125609 -1.20018154 -1.19848852 -1.63481939 -1.45653432\n",
            " -0.85087478  1.44937952  1.27491905 -0.72346    -0.26017891 -0.84059733\n",
            "  1.39030055 -0.75170043  0.37103965  0.44947936  0.68405566  0.82597492\n",
            "  0.79476952  0.06066044 -0.48250643 -0.73402078  1.1421522  -0.6249817\n",
            " -0.41965506 -0.38650453 -0.76408325 -0.56596667  0.48232722 -1.49779241\n",
            "  0.4286266  -0.18532835 -0.54551975 -1.05578945 -2.41106451 -1.68052171\n",
            " -0.09015826 -1.00970011 -0.48738442 -1.76337793 -0.10505201 -1.60138313\n",
            "  2.11079309  0.19019933  0.6271396   0.48465409 -1.35281002  0.14548817\n",
            " -0.71155934  0.25169834  1.39544377 -0.75476931  1.04244826 -0.1439066\n",
            " -0.8259579   0.53258428  0.8004081   1.14842096 -0.28110843  0.03484706\n",
            " -0.74321824  1.20492562 -0.14109316 -0.87385708  0.2651192  -0.83729011\n",
            " -0.89389042  0.13918392 -0.17339013  0.92892959  0.51208424  1.97755554\n",
            " -0.80814021  1.00508927 -0.53886784  0.67803735  0.48109711  0.12569634\n",
            "  0.11710048 -0.97695487 -3.35364332  1.31737204  0.5045341  -1.14919619\n",
            "  0.56566881 -0.09707205 -0.6539199  -1.00201916 -0.55891238  2.19631802\n",
            "  1.09002804 -0.64901693  0.32996989  0.49198946 -0.05326009  1.55956567\n",
            " -0.24394448  0.94279083 -0.11813878 -0.32677726 -1.57038536 -1.27940412\n",
            " -0.28751868 -0.21070616  1.23984968 -0.40298407 -0.39403224 -0.43533744\n",
            "  0.58304405  0.43809232 -0.40074821 -0.71331704 -0.3936573  -0.24130776\n",
            "  0.93343402  0.69171673]\n",
            "Epoch=1919, Loss=0.8586, Weights=[-1.28579352  1.04381684  0.35874693  0.58876998 -1.602146   -2.43862645\n",
            " -1.80873078  0.04335064  0.13996103  0.3067251   1.55882185 -0.87471773\n",
            " -0.33203304 -0.32618373  0.43606733 -0.27729742  0.32260837 -0.43851731\n",
            "  0.71919785 -1.15794542 -2.06030826 -0.02716743  1.16698527  0.82605487\n",
            " -0.94234109 -2.40629619  0.17070172 -0.52584025 -1.12837166 -0.89205503\n",
            " -1.03765694 -0.99184746  1.74236685 -0.92699083  1.50536014  0.14253067\n",
            " -1.0137765  -1.59405444 -0.57621814  0.7410669   0.0842168   0.44351875\n",
            " -0.98629215 -0.90184494 -1.30800186  1.32851915  0.73463876  0.57751606\n",
            " -0.44755312  0.26173813 -0.39406641 -0.20874049 -0.74705364  0.99413935\n",
            "  0.53582269 -1.00396423 -1.11028492 -0.05378068 -0.11482713 -1.06115891\n",
            " -0.69235515  0.60992827 -1.31683423  1.11252236 -0.85603986 -0.71534279\n",
            " -0.63634809  0.53881018  0.58049497  0.59798306  0.2810548   0.20158906\n",
            " -1.73599304 -0.74335188 -0.97732333  1.32500742 -1.49186244  0.82525835\n",
            " -0.35688666  0.89539876 -0.6801886   1.49821344 -0.94293908 -0.82626832\n",
            " -0.83300647 -0.53219238 -1.19973552 -1.19678355 -1.63371432 -1.45631855\n",
            " -0.85111566  1.44808184  1.27350519 -0.72310676 -0.25988879 -0.84162121\n",
            "  1.39054007 -0.75071596  0.37108811  0.44984558  0.68436322  0.82532571\n",
            "  0.79422128  0.06128283 -0.48174472 -0.73428506  1.14176658 -0.62499702\n",
            " -0.41895033 -0.3854222  -0.76399125 -0.56625613  0.48338433 -1.49673193\n",
            "  0.4269584  -0.18707166 -0.54513108 -1.05500695 -2.41072954 -1.6807495\n",
            " -0.08996674 -1.00890211 -0.48631021 -1.7628384  -0.1063879  -1.60322372\n",
            "  2.10995975  0.18983904  0.62686946  0.48468897 -1.35211737  0.14637339\n",
            " -0.7116137   0.25127485  1.39524809 -0.75587785  1.04077481 -0.14381438\n",
            " -0.82454784  0.53273629  0.79971598  1.14852298 -0.28080855  0.03369647\n",
            " -0.74493045  1.20509693 -0.14038772 -0.87427876  0.26431501 -0.83846279\n",
            " -0.89421206  0.14033072 -0.17305593  0.92843056  0.51294489  1.97873843\n",
            " -0.80889443  1.00350153 -0.54006446  0.67627455  0.47993206  0.12607297\n",
            "  0.11765258 -0.97574648 -3.35167917  1.31710692  0.50248651 -1.14885073\n",
            "  0.56629921 -0.09860283 -0.65479783 -1.00137199 -0.55825611  2.1959721\n",
            "  1.08970134 -0.64897611  0.32948835  0.49146611 -0.05401014  1.55876638\n",
            " -0.24381243  0.94177841 -0.12052302 -0.32730783 -1.5692257  -1.27818798\n",
            " -0.28668288 -0.21094373  1.23971532 -0.40219485 -0.39485607 -0.43750799\n",
            "  0.58289624  0.4393509  -0.40083211 -0.7138824  -0.3934121  -0.24116262\n",
            "  0.93359791  0.6911438 ]\n",
            "Epoch=1929, Loss=0.8568, Weights=[-1.2871788   1.04283876  0.35815122  0.58823641 -1.59997664 -2.4362203\n",
            " -1.80940002  0.04325127  0.141614    0.30689776  1.55653983 -0.87691394\n",
            " -0.33245963 -0.32589715  0.43707262 -0.27728026  0.32092169 -0.43841461\n",
            "  0.72003973 -1.1594058  -2.06212342 -0.02745596  1.16659966  0.82536482\n",
            " -0.94216704 -2.40622188  0.1704864  -0.52538609 -1.12742331 -0.89180854\n",
            " -1.0383694  -0.99188018  1.74256573 -0.92831528  1.50391112  0.14271376\n",
            " -1.01351661 -1.5941852  -0.57521203  0.74112958  0.08231244  0.44252743\n",
            " -0.98610313 -0.90269135 -1.30953473  1.32776841  0.73462597  0.57794897\n",
            " -0.44715118  0.26151286 -0.39470834 -0.20865598 -0.74702834  0.99304063\n",
            "  0.53534426 -1.00326428 -1.10953693 -0.05378611 -0.11600347 -1.06253805\n",
            " -0.69269612  0.61062428 -1.31702984  1.11094532 -0.85617748 -0.71344811\n",
            " -0.63539541  0.5371227   0.57885752  0.59853689  0.28182568  0.20085106\n",
            " -1.73681007 -0.74351755 -0.97734825  1.32608557 -1.49188353  0.82324372\n",
            " -0.35673042  0.89740006 -0.67988134  1.49663968 -0.94396163 -0.8254441\n",
            " -0.83277085 -0.53312526 -1.19928765 -1.19507958 -1.63261174 -1.45610562\n",
            " -0.85135502  1.44679007  1.27209066 -0.72276059 -0.25959857 -0.84264087\n",
            "  1.39077767 -0.74973531  0.37113736  0.45021259  0.68466996  0.82467838\n",
            "  0.79367416  0.06190168 -0.48098567 -0.73454736  1.14138177 -0.62501359\n",
            " -0.41824643 -0.38434005 -0.76389712 -0.56654505  0.48443789 -1.49567449\n",
            "  0.42529097 -0.18881265 -0.5447415  -1.05422555 -2.41039489 -1.68097407\n",
            " -0.08977346 -1.0081071  -0.48523984 -1.76229809 -0.10772001 -1.60506344\n",
            "  2.10912631  0.1894796   0.62659963  0.4847233  -1.35142568  0.14725614\n",
            " -0.71166983  0.25085362  1.39505408 -0.75698602  1.03910266 -0.14372263\n",
            " -0.82313914  0.53288878  0.79902412  1.14862256 -0.28050999  0.03254976\n",
            " -0.74663985  1.20526532 -0.13968365 -0.87469839  0.26351193 -0.83963383\n",
            " -0.89453335  0.14147407 -0.17272162  0.92793498  0.51380144  1.97991287\n",
            " -0.80964765  1.00192111 -0.54126073  0.67450928  0.47877015  0.12645119\n",
            "  0.11820128 -0.97453977 -3.34971724  1.31683892  0.50044389 -1.14849929\n",
            "  0.56692586 -0.10013766 -0.65567086 -1.00072261 -0.55760591  2.195624\n",
            "  1.08937712 -0.64893465  0.32900732  0.49094443 -0.05476051  1.55796518\n",
            " -0.24367942  0.94076754 -0.12290855 -0.32783891 -1.56806377 -1.27697089\n",
            " -0.28584866 -0.21118176  1.23958125 -0.4014064  -0.39567972 -0.43967663\n",
            "  0.58274873  0.44060796 -0.40091455 -0.71444522 -0.3931679  -0.24101933\n",
            "  0.93376184  0.69057192]\n",
            "Epoch=1939, Loss=0.8550, Weights=[-1.28856455  1.04186198  0.3575584   0.58770288 -1.59781415 -2.43381761\n",
            " -1.81006518  0.04315136  0.14326223  0.30707272  1.55426337 -0.87910863\n",
            " -0.33288498 -0.32561077  0.43807288 -0.27726421  0.31923941 -0.43831404\n",
            "  0.72087703 -1.16086163 -2.06393357 -0.027747    1.16621236  0.82467709\n",
            " -0.94199474 -2.40615085  0.1702732  -0.5249324  -1.12647881 -0.89156023\n",
            " -1.03907757 -0.99191345  1.74276299 -0.92963748  1.50246407  0.14289693\n",
            " -1.0132562  -1.59431697 -0.57420945  0.74119247  0.08041227  0.44153671\n",
            " -0.98591592 -0.90353685 -1.31106458  1.32701871  0.73461174  0.57838097\n",
            " -0.44674917  0.26128775 -0.39534993 -0.20857087 -0.74700225  0.9919439\n",
            "  0.53486707 -1.00256644 -1.10879153 -0.05379196 -0.11717811 -1.06391521\n",
            " -0.69303706  0.61131833 -1.3172258   1.10937211 -0.85631332 -0.71155738\n",
            " -0.63444633  0.53543825  0.57722536  0.59908994  0.28259304  0.200112\n",
            " -1.73762527 -0.74368062 -0.9773746   1.32715808 -1.49190478  0.82123565\n",
            " -0.35657459  0.89939286 -0.67957698  1.4950722  -0.94498089 -0.82462479\n",
            " -0.8325376  -0.53405475 -1.19883793 -1.1933766  -1.63151164 -1.45589554\n",
            " -0.8515929   1.44550418  1.27067549 -0.72242146 -0.25930827 -0.84365632\n",
            "  1.39101336 -0.74875846  0.37118739  0.4505804   0.68497589  0.82403292\n",
            "  0.79312815  0.062517   -0.48022926 -0.73480767  1.14099776 -0.6250314\n",
            " -0.41754333 -0.38325805 -0.76380085 -0.56683345  0.48548789 -1.49462007\n",
            "  0.42362432 -0.19055132 -0.54435102 -1.05344525 -2.41006053 -1.68119542\n",
            " -0.08957843 -1.00731507 -0.48417328 -1.76175702 -0.10904837 -1.60690225\n",
            "  2.10829279  0.18912098  0.62633008  0.4847571  -1.35073496  0.14813642\n",
            " -0.71172774  0.25043465  1.39486175 -0.7580938   1.03743181 -0.14363138\n",
            " -0.82173181  0.53304175  0.7983325   1.14871973 -0.28021272  0.03140694\n",
            " -0.74834645  1.20543079 -0.13898095 -0.87511596  0.26270998 -0.84080325\n",
            " -0.89485429  0.142614   -0.17238721  0.92744284  0.51465389  1.98107888\n",
            " -0.81039985  1.00034797 -0.54245662  0.67274157  0.47761138  0.12683098\n",
            "  0.11874658 -0.97333476 -3.34775752  1.31656806  0.49840623 -1.1481419\n",
            "  0.56754877 -0.10167649 -0.65653901 -1.00007104 -0.55696175  2.19527371\n",
            "  1.08905538 -0.64889255  0.32852681  0.49042441 -0.0555112   1.55716207\n",
            " -0.24354545  0.93975823 -0.12529537 -0.32837047 -1.56689959 -1.27575285\n",
            " -0.285016   -0.21142026  1.23944746 -0.40061871 -0.3965032  -0.44184335\n",
            "  0.58260152  0.44186348 -0.40099557 -0.7150055  -0.39292467 -0.24087789\n",
            "  0.9339258   0.6900011 ]\n",
            "Epoch=1949, Loss=0.8531, Weights=[-1.28995075  1.04088651  0.35696848  0.58716942 -1.59565857 -2.43141845\n",
            " -1.81072627  0.04305094  0.1449057   0.30724997  1.55199248 -0.88130181\n",
            " -0.3333091  -0.32532457  0.43906813 -0.27724928  0.31756155 -0.43821559\n",
            "  0.72170971 -1.16231291 -2.06573867 -0.02804053  1.16582334  0.82399168\n",
            " -0.94182419 -2.40608311  0.1700621  -0.52447918 -1.12553814 -0.8913101\n",
            " -1.03978145 -0.99194727  1.74295862 -0.93095744  1.50101898  0.14308019\n",
            " -1.01299527 -1.59444975 -0.5732104   0.74125556  0.0785163   0.44054659\n",
            " -0.98573051 -0.90438143 -1.31259142  1.32627007  0.7345961   0.57881203\n",
            " -0.44634708  0.2610628  -0.39599119 -0.20848517 -0.74697539  0.99084917\n",
            "  0.53439111 -1.00187071 -1.10804872 -0.05379822 -0.11835105 -1.06529037\n",
            " -0.69337796  0.61201042 -1.31742211  1.10780272 -0.85644741 -0.70967061\n",
            " -0.63350085  0.53375684  0.57559845  0.59964219  0.28335692  0.19937191\n",
            " -1.73843866 -0.74384113 -0.97740236  1.32822502 -1.49192617  0.81923411\n",
            " -0.35641917  0.9013772  -0.6792755   1.49351096 -0.94599688 -0.82381037\n",
            " -0.83230669 -0.53498087 -1.19838638 -1.19167463 -1.63041403 -1.45568829\n",
            " -0.85182928  1.44422417  1.26925969 -0.72208934 -0.2590179  -0.84466757\n",
            "  1.39124715 -0.74778543  0.37123818  0.450949    0.685281    0.82338934\n",
            "  0.79258326  0.0631288  -0.47947548 -0.735066    1.14061455 -0.62505046\n",
            " -0.41684105 -0.38217621 -0.76370247 -0.56712133  0.48653437 -1.49356866\n",
            "  0.42195843 -0.19228764 -0.54395962 -1.05266603 -2.40972648 -1.68141358\n",
            " -0.08938169 -1.00652601 -0.48311052 -1.7612152  -0.11037299 -1.60874014\n",
            "  2.10745922  0.18876319  0.62606082  0.48479037 -1.35004522  0.14901421\n",
            " -0.71178741  0.25001792  1.39467108 -0.75920116  1.03576227 -0.14354065\n",
            " -0.82032583  0.53319522  0.79764112  1.14881446 -0.27991672  0.03026799\n",
            " -0.7500503   1.20559334 -0.13827961 -0.87553146  0.26190916 -0.84197105\n",
            " -0.89517489  0.14375052 -0.17205269  0.92695411  0.51550223  1.98223649\n",
            " -0.81115101  0.99878213 -0.54365214  0.67097143  0.47645574  0.12721235\n",
            "  0.11928848 -0.97213145 -3.34580003  1.31629435  0.49637352 -1.14777857\n",
            "  0.56816797 -0.1032193  -0.6574023  -0.99941731 -0.55632363  2.19492125\n",
            "  1.08873612 -0.64884981  0.32804682  0.48990605 -0.05626219  1.55635708\n",
            " -0.24341055  0.93875046 -0.12768345 -0.32890252 -1.56573317 -1.27453387\n",
            " -0.28418491 -0.21165923  1.23931393 -0.39983179 -0.39732651 -0.44400816\n",
            "  0.5824546   0.44311747 -0.40107515 -0.71556325 -0.39268241 -0.2407383\n",
            "  0.9340898   0.68943134]\n",
            "Epoch=1959, Loss=0.8513, Weights=[-1.29133736  1.03991232  0.35638144  0.58663606 -1.59350988 -2.42902286\n",
            " -1.8113833   0.04295003  0.14654443  0.30742949  1.54972719 -0.88349345\n",
            " -0.33373198 -0.32503854  0.44005836 -0.27723548  0.31588813 -0.43811923\n",
            "  0.72253778 -1.16375965 -2.06753871 -0.02833653  1.1654326   0.82330859\n",
            " -0.94165538 -2.40601866  0.16985308 -0.52402642 -1.12460129 -0.89105816\n",
            " -1.04048107 -0.99198166  1.74315263 -0.93227517  1.49957585  0.14326352\n",
            " -1.01273382 -1.59458352 -0.57221484  0.74131886  0.07662451  0.43955708\n",
            " -0.9855469  -0.90522512 -1.31411528  1.32552249  0.73457904  0.57924214\n",
            " -0.44594494  0.26083805 -0.3966321  -0.20839889 -0.74694775  0.98975644\n",
            "  0.53391639 -1.00117709 -1.10730851 -0.05380489 -0.11952228 -1.06666354\n",
            " -0.69371883  0.61270057 -1.31761878  1.10623714 -0.85657976 -0.70778778\n",
            " -0.63255892  0.53207848  0.57397676  0.60019361  0.28411732  0.19863083\n",
            " -1.73925027 -0.74399909 -0.97743153  1.3292864  -1.49194771  0.81723908\n",
            " -0.35626418  0.9033531  -0.6789769   1.49195593 -0.94700963 -0.82300078\n",
            " -0.83207812 -0.53590364 -1.19793301 -1.18997367 -1.62931891 -1.45548385\n",
            " -0.85206418  1.44295002  1.26784329 -0.72176421 -0.25872747 -0.84567463\n",
            "  1.39147904 -0.7468162   0.37128971  0.45131838  0.68558533  0.82274761\n",
            "  0.79203946  0.06373709 -0.47872435 -0.73532238  1.14023213 -0.62507076\n",
            " -0.41613955 -0.38109452 -0.763602   -0.56740871  0.48757731 -1.49252026\n",
            "  0.42029332 -0.19402163 -0.54356731 -1.0518879  -2.40939273 -1.68162855\n",
            " -0.08918324 -1.00573993 -0.48205154 -1.76067266 -0.11169391 -1.61057708\n",
            "  2.10662562  0.18840619  0.62579183  0.48482313 -1.34935647  0.14988952\n",
            " -0.71184883  0.24960344  1.39448208 -0.76030808  1.03409404 -0.14345043\n",
            " -0.8189212   0.5333492   0.79694997  1.14890678 -0.27962196  0.02913289\n",
            " -0.75175141  1.20575296 -0.13757966 -0.87594489  0.2611095  -0.84313725\n",
            " -0.89549515  0.14488367 -0.17171807  0.92646875  0.51634648  1.98338573\n",
            " -0.81190114  0.99722355 -0.54484728  0.66919887  0.47530323  0.12759528\n",
            "  0.11982698 -0.97092988 -3.34384477  1.31601781  0.49434575 -1.14740934\n",
            "  0.56878345 -0.10476608 -0.65826073 -0.99876144 -0.55569153  2.19456664\n",
            "  1.08841933 -0.64880643  0.32756735  0.48938936 -0.05701346  1.5555502\n",
            " -0.24327472  0.93774422 -0.13007279 -0.32943505 -1.56456453 -1.27331396\n",
            " -0.28335536 -0.21189867  1.23918067 -0.39904565 -0.39814965 -0.44617104\n",
            "  0.58230799  0.44436992 -0.40115332 -0.71611846 -0.39244111 -0.24060054\n",
            "  0.93425382  0.68886266]\n",
            "Epoch=1969, Loss=0.8495, Weights=[-1.29272438  1.03893941  0.35579728  0.58610283 -1.59136809 -2.4266309\n",
            " -1.81203626  0.04284866  0.1481784   0.30761128  1.54746751 -0.88568356\n",
            " -0.33415364 -0.32475268  0.44104356 -0.27722284  0.31421914 -0.43802494\n",
            "  0.72336123 -1.16520187 -2.06933366 -0.02863502  1.16504011  0.8226278\n",
            " -0.94148828 -2.40595749  0.16964612 -0.52357414 -1.12366826 -0.89080443\n",
            " -1.04117644 -0.9920166   1.74334504 -0.93359066  1.49813468  0.14344694\n",
            " -1.01247186 -1.59471828 -0.57122279  0.74138236  0.0747369   0.4385682\n",
            " -0.98536506 -0.90606792 -1.31563617  1.32477596  0.73456057  0.57967127\n",
            " -0.44554274  0.26061349 -0.39727265 -0.20831206 -0.74691934  0.98866574\n",
            "  0.53344291 -1.00048561 -1.1065709  -0.05381196 -0.12069179 -1.0680347\n",
            " -0.69405967  0.61338877 -1.3178158   1.10467536 -0.85671038 -0.70590891\n",
            " -0.63162054  0.53040317  0.57236027  0.60074418  0.28487429  0.19788878\n",
            " -1.7400601  -0.74415453 -0.97746206  1.33034228 -1.4919694   0.81525051\n",
            " -0.35610963  0.9053206  -0.67868115  1.49040706 -0.94801915 -0.82219599\n",
            " -0.83185186 -0.53682305 -1.19747784 -1.18827374 -1.62822628 -1.45528222\n",
            " -0.85229759  1.44168172  1.26642631 -0.72144604 -0.25843699 -0.84667751\n",
            "  1.39170904 -0.74585079  0.37134198  0.45168856  0.68588886  0.82210773\n",
            "  0.79149676  0.06434187 -0.47797584 -0.7355768   1.13985048 -0.62509231\n",
            " -0.41543884 -0.38001299 -0.76349945 -0.5676956   0.48861675 -1.49147485\n",
            "  0.41862899 -0.19575327 -0.54317408 -1.05111085 -2.40905928 -1.68184036\n",
            " -0.0889831  -1.0049568  -0.48099633 -1.76012941 -0.11301114 -1.61241306\n",
            "  2.10579199  0.18804996  0.62552309  0.48485538 -1.34866869  0.15076233\n",
            " -0.71191201  0.24919119  1.39429475 -0.76141454  1.03242715 -0.14336075\n",
            " -0.81751792  0.53350369  0.79625904  1.14899668 -0.27932842  0.02800163\n",
            " -0.75344983  1.20590966 -0.13688109 -0.87635624  0.260311   -0.84430186\n",
            " -0.89581507  0.14601346 -0.17138334  0.92598673  0.51718662  1.98452662\n",
            " -0.81265023  0.99567224 -0.54604204  0.66742391  0.47415385  0.12797978\n",
            "  0.12036207 -0.96973005 -3.34189175  1.31573846  0.4923229  -1.14703422\n",
            "  0.56939524 -0.10631678 -0.65911433 -0.99810344 -0.55506543  2.19420989\n",
            "  1.088105   -0.64876241  0.3270884   0.48887434 -0.05776502  1.55474147\n",
            " -0.243138    0.9367395  -0.13246336 -0.32996805 -1.56339368 -1.27209313\n",
            " -0.28252735 -0.21213857  1.23904765 -0.39826029 -0.39897261 -0.44833201\n",
            "  0.58216167  0.44562084 -0.40123009 -0.71667114 -0.39220076 -0.24046463\n",
            "  0.93441787  0.68829503]\n",
            "Epoch=1979, Loss=0.8477, Weights=[-1.29411177  1.03796777  0.355216    0.58556977 -1.58923322 -2.42424261\n",
            " -1.81268517  0.04274686  0.14980761  0.30779531  1.54521345 -0.88787213\n",
            " -0.3345741  -0.32446698  0.44202373 -0.27721136  0.31255461 -0.43793272\n",
            "  0.72418003 -1.16663956 -2.0711235  -0.02893596  1.16464587  0.82194932\n",
            " -0.94132288 -2.40589961  0.16944119 -0.52312232 -1.12273903 -0.89054891\n",
            " -1.04186757 -0.9920521   1.74353584 -0.93490391  1.49669548  0.14363043\n",
            " -1.01220937 -1.59485401 -0.57023421  0.74144607  0.07285346  0.43757995\n",
            " -0.985185   -0.90690984 -1.3171541   1.3240305   0.73454071  0.58009942\n",
            " -0.4451405   0.26038916 -0.39791284 -0.20822467 -0.74689016  0.98757706\n",
            "  0.53297067 -0.99979625 -1.10583588 -0.05381942 -0.12185958 -1.06940386\n",
            " -0.69440048  0.61407503 -1.31801317  1.10311737 -0.85683929 -0.70403399\n",
            " -0.63068567  0.52873093  0.57074894  0.60129387  0.28562783  0.19714578\n",
            " -1.74086817 -0.74430745 -0.97749395  1.33139269 -1.49199123  0.81326836\n",
            " -0.35595555  0.90727972 -0.67838823  1.48886431 -0.94902547 -0.82139598\n",
            " -0.83162788 -0.53773914 -1.19702087 -1.18657484 -1.62713613 -1.45508339\n",
            " -0.85252953  1.44041926  1.26500876 -0.72113479 -0.25814646 -0.84767622\n",
            "  1.39193717 -0.74488917  0.37139497  0.45205952  0.68619162  0.82146969\n",
            "  0.79095514  0.06494315 -0.47722997 -0.73582927  1.1394696  -0.6251151\n",
            " -0.41473891 -0.3789316  -0.76339484 -0.56798202  0.48965268 -1.49043242\n",
            "  0.41696543 -0.19748255 -0.54277991 -1.05033488 -2.40872612 -1.68204902\n",
            " -0.08878128 -1.00417664 -0.47994488 -1.75958546 -0.11432471 -1.61424805\n",
            "  2.10495837  0.1876945   0.6252546   0.48488712 -1.34798191  0.15163265\n",
            " -0.71197692  0.24878119  1.39410908 -0.76252051  1.03076159 -0.14327162\n",
            " -0.816116    0.53365871  0.79556832  1.14908416 -0.27903607  0.02687421\n",
            " -0.75514558  1.20606343 -0.1361839  -0.8767655   0.25951368 -0.84546487\n",
            " -0.89613466  0.14713993 -0.1710485   0.92550803  0.51802265  1.98565921\n",
            " -0.81339825  0.99412817 -0.54723641  0.66564658  0.4730076   0.12836583\n",
            "  0.12089375 -0.96853198 -3.33994096  1.31545632  0.49030496 -1.14665324\n",
            "  0.57000335 -0.10787138 -0.65996311 -0.99744335 -0.5544453   2.19385102\n",
            "  1.08779313 -0.64871776  0.32660998  0.48836099 -0.05851683  1.55393088\n",
            " -0.24300038  0.93573629 -0.13485514 -0.33050152 -1.56222065 -1.27087138\n",
            " -0.28170086 -0.21237893  1.23891486 -0.39747572 -0.39979538 -0.45049106\n",
            "  0.58201565  0.44687021 -0.40130546 -0.71722129 -0.39196134 -0.24033055\n",
            "  0.93458193  0.68772848]\n",
            "Epoch=1989, Loss=0.8459, Weights=[-1.29549952  1.03699738  0.35463759  0.58503691 -1.58710526 -2.42185804\n",
            " -1.81333002  0.04264466  0.15143206  0.30798157  1.54296502 -0.89005915\n",
            " -0.33499335 -0.32418142  0.44299887 -0.27720108  0.31089453 -0.43784253\n",
            "  0.7249942  -1.16807273 -2.07290821 -0.02923937  1.16424984  0.82127314\n",
            " -0.94115918 -2.40584501  0.16923828 -0.52267097 -1.12181359 -0.89029163\n",
            " -1.04255448 -0.99208815  1.74372505 -0.93621493  1.49525823  0.143814\n",
            " -1.01194637 -1.59499071 -0.5692491   0.74150998  0.07097418  0.43659234\n",
            " -0.9850067  -0.90775089 -1.3186691   1.32328612  0.73451944  0.58052656\n",
            " -0.44473823  0.26016506 -0.39855265 -0.20813676 -0.74686023  0.98649043\n",
            "  0.53249967 -0.99910904 -1.10510346 -0.05382727 -0.12302562 -1.07077102\n",
            " -0.69474124  0.61475935 -1.3182109   1.10156316 -0.85696651 -0.70216303\n",
            " -0.62975429  0.52706177  0.56914273  0.60184265  0.28637798  0.19640187\n",
            " -1.74167451 -0.7444579  -0.97752717  1.33243768 -1.4920132   0.81129261\n",
            " -0.35580193  0.9092305  -0.67809814  1.48732766 -0.9500286  -0.82060069\n",
            " -0.83140618 -0.5386519  -1.19656213 -1.18487698 -1.62604846 -1.45488735\n",
            " -0.85276     1.4391626   1.26359067 -0.72083044 -0.2578559  -0.84867078\n",
            "  1.39216344 -0.74393136  0.37144867  0.45243126  0.68649361  0.82083348\n",
            "  0.7904146   0.06554095 -0.47648672 -0.73607981  1.13908948 -0.62513914\n",
            " -0.41403974 -0.37785036 -0.76328818 -0.56826798  0.49068513 -1.48939296\n",
            "  0.41530265 -0.19920948 -0.54238482 -1.04955997 -2.40839327 -1.68225455\n",
            " -0.08857781 -1.00339942 -0.47889717 -1.75904084 -0.11563462 -1.61608204\n",
            "  2.10412476  0.18733979  0.62498635  0.48491838 -1.34729613  0.15250045\n",
            " -0.71204356  0.24837341  1.39392508 -0.76362597  1.02909738 -0.14318305\n",
            " -0.81471542  0.53381427  0.79487781  1.14916922 -0.27874489  0.02575061\n",
            " -0.75683868  1.20621427 -0.13548809 -0.87717268  0.25871755 -0.84662632\n",
            " -0.89645393  0.14826309 -0.17071355  0.92503262  0.51885459  1.98678352\n",
            " -0.81414521  0.99259133 -0.54843038  0.66386687  0.47186448  0.12875342\n",
            "  0.12142202 -0.96733569 -3.33799242  1.31517139  0.48829192 -1.14626644\n",
            "  0.57060779 -0.10942985 -0.66080709 -0.99678117 -0.55383114  2.19349003\n",
            "  1.08748372 -0.64867248  0.32613209  0.4878493  -0.0592689   1.55311845\n",
            " -0.24286189  0.93473458 -0.13724812 -0.33103544 -1.56104544 -1.26964872\n",
            " -0.2808759  -0.21261976  1.2387823  -0.39669194 -0.40061798 -0.45264818\n",
            "  0.58186994  0.44811803 -0.40137945 -0.71776891 -0.39172285 -0.24019831\n",
            "  0.93474601  0.68716301]\n",
            "Epoch=1999, Loss=0.8441, Weights=[-1.29688761  1.03602823  0.35406204  0.58450427 -1.58498422 -2.41947724\n",
            " -1.81397083  0.04254208  0.15305175  0.30817005  1.54072224 -0.89224462\n",
            " -0.33541141 -0.32389601  0.44396899 -0.27719199  0.30923894 -0.43775437\n",
            "  0.72580371 -1.16950139 -2.07468777 -0.02954522  1.16385203  0.82059926\n",
            " -0.94099715 -2.40579369  0.16903736 -0.52222009 -1.12089193 -0.89003259\n",
            " -1.04323719 -0.99212476  1.74391267 -0.93752372  1.49382294  0.14399765\n",
            " -1.01168284 -1.59512836 -0.56826745  0.7415741   0.06909906  0.43560538\n",
            " -0.98483015 -0.90859108 -1.32018118  1.3225428   0.73449678  0.58095268\n",
            " -0.44433592  0.2599412  -0.3991921  -0.20804832 -0.74682953  0.98540585\n",
            "  0.53202991 -0.99842397 -1.10437365 -0.05383551 -0.12418992 -1.07213616\n",
            " -0.69508197  0.61544173 -1.31840897  1.10001272 -0.85709204 -0.70029601\n",
            " -0.62882638  0.52539569  0.56754163  0.60239051  0.28712476  0.19565707\n",
            " -1.74247913 -0.74460588 -0.97756171  1.33347727 -1.4920353   0.80932321\n",
            " -0.3556488   0.91117296 -0.67781084  1.48579704 -0.95102857 -0.81981011\n",
            " -0.83118673 -0.53956136 -1.19610163 -1.18318018 -1.62496328 -1.45469408\n",
            " -0.852989    1.43791176  1.26217206 -0.72053295 -0.25756531 -0.84966119\n",
            "  1.39238784 -0.74297734  0.37150306  0.45280378  0.68679484  0.82019909\n",
            "  0.78987512  0.06613527 -0.4757461  -0.73632842  1.1387101  -0.62516441\n",
            " -0.41334133 -0.37676926 -0.7631795  -0.56855348  0.4917141  -1.48835647\n",
            "  0.41364065 -0.20093405 -0.54198879 -1.04878613 -2.40806071 -1.68245695\n",
            " -0.08837271 -1.00262514 -0.47785319 -1.75849555 -0.11694092 -1.617915\n",
            "  2.1032912   0.1869858   0.62471831  0.48494914 -1.34661135  0.15336575\n",
            " -0.71211192  0.24796785  1.39374274 -0.76473091  1.02743452 -0.14309505\n",
            " -0.81331618  0.53397038  0.7941875   1.14925188 -0.27845486  0.02463082\n",
            " -0.75852917  1.20636217 -0.13479367 -0.87757776  0.25792263 -0.8477862\n",
            " -0.89677287  0.14938298 -0.17037849  0.92456046  0.51968243  1.98789958\n",
            " -0.8148911   0.99106172 -0.54962394  0.66208483  0.47072448  0.12914257\n",
            "  0.12194688 -0.9661412  -3.33604612  1.3148837   0.48628377 -1.14587383\n",
            "  0.57120857 -0.11099216 -0.66164628 -0.99611693 -0.55322292  2.19312695\n",
            "  1.08717676 -0.64862658  0.32565474  0.48733929 -0.0600212   1.55230421\n",
            " -0.24272254  0.93373437 -0.13964227 -0.33156981 -1.55986807 -1.26842515\n",
            " -0.28005244 -0.21286104  1.23864995 -0.39590895 -0.40144038 -0.45480338\n",
            "  0.58172453  0.44936431 -0.40145207 -0.718314   -0.39148528 -0.2400679\n",
            "  0.9349101   0.68659861]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "y_pred_test = np.round(logistic_regression(x_test, w))\n",
        "accuracy_test, precision_test, recall_test, f1_test = evaluate_performance(y_test, y_pred_test)\n",
        "print(f'Test Accuracy: {accuracy_test:.4f}')\n",
        "print(f'Test Precision: {precision_test:.4f}')\n",
        "print(f'Test Recall: {recall_test:.4f}')\n",
        "print(f'Test F1 Score: {f1_test:.4f}')\n",
        "\n",
        "# Plot the loss function\n",
        "plt.plot(range(n_epochs), error_hist)\n",
        "plt.title('Loss Function over Epochs')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "vnJBZyToVGZZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 861
        },
        "outputId": "f5d0f0cf-252e-4885-99a2-408f6ebdf652"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 0.6000\n",
            "Test Precision: 0.6190\n",
            "Test Recall: 0.6190\n",
            "Test F1 Score: 0.6190\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "id": "S6P3B0MIz0Oj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a014e3d2-218f-4bca-92c5-f3bf01fb6bf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(160, 200)"
            ]
          },
          "metadata": {},
          "execution_count": 213
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "qbkWiKV8z6WJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model=LogisticRegression(solver='sag', max_iter=2000, random_state=94)\n",
        "model.fit(x_train,y_train)\n",
        "model.predict(x_test),y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cL_6L59qz700",
        "outputId": "272838cd-63f9-4a99-b309-2ffb8fbaf732"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 1.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,\n",
              "        0., 0., 0., 0., 0., 0.]),\n",
              " array([[1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.]]))"
            ]
          },
          "metadata": {},
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.predict_log_proba(x_test),y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t0TS_zp8z_4n",
        "outputId": "23f72924-c6f0-4965-b694-e53c4c4a8ce0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[-6.34813629e-02, -2.78858169e+00],\n",
              "        [-3.21620764e-01, -1.29088627e+00],\n",
              "        [-3.55960638e-02, -3.35326545e+00],\n",
              "        [-1.17958353e+00, -3.67312375e-01],\n",
              "        [-1.86243513e-01, -1.77237715e+00],\n",
              "        [-1.87910758e-01, -1.76427266e+00],\n",
              "        [-3.72966864e-01, -1.16695982e+00],\n",
              "        [-3.29374477e-01, -1.27073095e+00],\n",
              "        [-3.32808097e+00, -3.65206947e-02],\n",
              "        [-3.84956659e-01, -1.14093581e+00],\n",
              "        [-1.05710482e+00, -4.26883321e-01],\n",
              "        [-3.90195657e-01, -1.12986898e+00],\n",
              "        [-3.66066920e-01, -1.18239526e+00],\n",
              "        [-1.72455871e-01, -1.84260293e+00],\n",
              "        [-7.53179444e-01, -6.36515602e-01],\n",
              "        [-1.76989366e-01, -1.81885543e+00],\n",
              "        [-9.28913225e-01, -5.02498283e-01],\n",
              "        [-1.86358332e-01, -1.77181647e+00],\n",
              "        [-2.71443762e-01, -1.43665399e+00],\n",
              "        [-3.87675875e-01, -1.13516923e+00],\n",
              "        [-3.35688641e-01, -1.25472465e+00],\n",
              "        [-5.13194272e-01, -9.12748246e-01],\n",
              "        [-3.68434381e-01, -1.17706023e+00],\n",
              "        [-2.77004192e-01, -1.41902964e+00],\n",
              "        [-2.02581503e-01, -1.69619436e+00],\n",
              "        [-3.70461308e-01, -1.17252505e+00],\n",
              "        [-5.32230220e+00, -4.89345604e-03],\n",
              "        [-8.94274724e-01, -5.25776939e-01],\n",
              "        [-2.41071805e-01, -1.54077603e+00],\n",
              "        [-3.20733408e-01, -1.29322913e+00],\n",
              "        [-6.21138645e-01, -7.70746104e-01],\n",
              "        [-2.09433397e-01, -1.66623927e+00],\n",
              "        [-1.56035443e+00, -2.35800318e-01],\n",
              "        [-2.20414008e-01, -1.62043120e+00],\n",
              "        [-2.86864216e-01, -1.38875195e+00],\n",
              "        [-6.19863667e-02, -2.81167390e+00],\n",
              "        [-4.20919255e-01, -1.06840254e+00],\n",
              "        [-1.60842576e-01, -1.90667277e+00],\n",
              "        [-2.48206215e-01, -1.51503286e+00],\n",
              "        [-4.02573562e-01, -1.10442059e+00]]),\n",
              " array([[1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.]]))"
            ]
          },
          "metadata": {},
          "execution_count": 216
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.predict_proba(x_test),y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ifHPUN1w0Dnw",
        "outputId": "6621aff0-3806-4c97-9cd2-6cfce16e73ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[0.93849161, 0.06150839],\n",
              "        [0.72497307, 0.27502693],\n",
              "        [0.96503003, 0.03496997],\n",
              "        [0.30740674, 0.69259326],\n",
              "        [0.83007144, 0.16992856],\n",
              "        [0.82868866, 0.17131134],\n",
              "        [0.68868805, 0.31131195],\n",
              "        [0.71937358, 0.28062642],\n",
              "        [0.03586186, 0.96413814],\n",
              "        [0.68048013, 0.31951987],\n",
              "        [0.34746031, 0.65253969],\n",
              "        [0.67692442, 0.32307558],\n",
              "        [0.69345639, 0.30654361],\n",
              "        [0.84159543, 0.15840457],\n",
              "        [0.47086707, 0.52913293],\n",
              "        [0.83778869, 0.16221131],\n",
              "        [0.39498273, 0.60501727],\n",
              "        [0.82997613, 0.17002387],\n",
              "        [0.76227815, 0.23772185],\n",
              "        [0.67863227, 0.32136773],\n",
              "        [0.71484564, 0.28515436],\n",
              "        [0.59858049, 0.40141951],\n",
              "        [0.6918166 , 0.3081834 ],\n",
              "        [0.75805132, 0.24194868],\n",
              "        [0.81661992, 0.18338008],\n",
              "        [0.69041576, 0.30958424],\n",
              "        [0.0048815 , 0.9951185 ],\n",
              "        [0.40890406, 0.59109594],\n",
              "        [0.7857852 , 0.2142148 ],\n",
              "        [0.72561667, 0.27438333],\n",
              "        [0.53733226, 0.46266774],\n",
              "        [0.81104366, 0.18895634],\n",
              "        [0.21006161, 0.78993839],\n",
              "        [0.80218662, 0.19781338],\n",
              "        [0.75061364, 0.24938636],\n",
              "        [0.9398957 , 0.0601043 ],\n",
              "        [0.6564431 , 0.3435569 ],\n",
              "        [0.8514261 , 0.1485739 ],\n",
              "        [0.78019904, 0.21980096],\n",
              "        [0.66859715, 0.33140285]]),\n",
              " array([[1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.]]))"
            ]
          },
          "metadata": {},
          "execution_count": 217
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kqzYbene0MgI",
        "outputId": "efa4701d-e3ce-4424-c9f4-e1ba9f0aba2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9625"
            ]
          },
          "metadata": {},
          "execution_count": 218
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(x_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QDJFVvlb0SW7",
        "outputId": "ab5302af-b55d-4a26-8ca7-174f120512b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.675"
            ]
          },
          "metadata": {},
          "execution_count": 219
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import SGDClassifier\n",
        "model1=SGDClassifier(loss='log_loss',random_state=50)\n",
        "model1.fit(x_train,y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "id": "PsiOLST-0UFL",
        "outputId": "e857ffc7-e343-4bce-e4a1-229444b253d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SGDClassifier(loss='log_loss', random_state=50)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, random_state=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, random_state=50)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.fit(x_train,y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 131
        },
        "id": "LueJOAt_718h",
        "outputId": "9262870b-6aeb-4924-a656-9e56a36e0c9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SGDClassifier(loss='log_loss', random_state=50)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, random_state=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(loss=&#x27;log_loss&#x27;, random_state=50)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 221
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.predict(x_test),y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n_TF7ywI78YX",
        "outputId": "39d3d462-48a2-4f1e-dc20-b6986917a97e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 1.,\n",
              "        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,\n",
              "        0., 0., 0., 0., 0., 0.]),\n",
              " array([[1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [0.],\n",
              "        [1.],\n",
              "        [1.],\n",
              "        [0.]]))"
            ]
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.score(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r2DIVdzv8ABu",
        "outputId": "0f0c3d7d-198b-41d4-a24b-3a6d0149e770"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 223
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.score(x_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tulQhyLz8OFk",
        "outputId": "2d020a22-cdc2-4ad2-8086-9f490a0b5777"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7"
            ]
          },
          "metadata": {},
          "execution_count": 224
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.metrics import log_loss\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Flatten y_train into a 1D array\n",
        "y_train_flat = np.ravel(y_train)\n",
        "\n",
        "# Define lists to store training loss values and iterations\n",
        "error_hist = []\n",
        "\n",
        "# Initialize the SGDClassifier model\n",
        "model = SGDClassifier(loss='log', random_state=94)\n",
        "\n",
        "# Training loop\n",
        "num_iter = 2000\n",
        "for epoch in range(num_iter):\n",
        "    # Fit the model on the training data for one iteration\n",
        "    model.partial_fit(x_train, y_train_flat, classes=np.unique(y_train_flat))\n",
        "\n",
        "    # Predict probabilities for the training data\n",
        "    y_hat = model.predict_proba(x_train)\n",
        "\n",
        "    # Calculate the log loss (binary cross-entropy) for this iteration\n",
        "    e = log_loss(y_train_flat, y_hat)\n",
        "    error_hist.append(e)\n",
        "\n",
        "    if (epoch + 1) % 100 == 0:\n",
        "        print(f'Epoch = {epoch}, \\t E = {np.array2string(e, precision=4)}')\n",
        "\n",
        "# Plot the loss function\n",
        "plt.plot(error_hist)\n",
        "plt.xlabel('Iteration')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Loss Function')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "A3fgl4Z3VRuY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "175616c3-8a13-4d4e-e0c1-4035abc5482b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_stochastic_gradient.py:163: FutureWarning: The loss 'log' was deprecated in v1.1 and will be removed in version 1.3. Use `loss='log_loss'` which is equivalent.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch = 99, \t E = 0.0184\n",
            "Epoch = 199, \t E = 0.0227\n",
            "Epoch = 299, \t E = 0.0233\n",
            "Epoch = 399, \t E = 0.0236\n",
            "Epoch = 499, \t E = 0.0237\n",
            "Epoch = 599, \t E = 0.0238\n",
            "Epoch = 699, \t E = 0.0239\n",
            "Epoch = 799, \t E = 0.0239\n",
            "Epoch = 899, \t E = 0.024\n",
            "Epoch = 999, \t E = 0.024\n",
            "Epoch = 1099, \t E = 0.0241\n",
            "Epoch = 1199, \t E = 0.0241\n",
            "Epoch = 1299, \t E = 0.0241\n",
            "Epoch = 1399, \t E = 0.0241\n",
            "Epoch = 1499, \t E = 0.0241\n",
            "Epoch = 1599, \t E = 0.0241\n",
            "Epoch = 1699, \t E = 0.0242\n",
            "Epoch = 1799, \t E = 0.0242\n",
            "Epoch = 1899, \t E = 0.0242\n",
            "Epoch = 1999, \t E = 0.0242\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Problem 3**"
      ],
      "metadata": {
        "id": "kwSAS3xZ8sFv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "csVfcVnv_Fe0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gdown\n",
        "!gdown 1hc50YvZyHc2tU3vOHjbNBncvaSBgCFuP"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CMp32-mR3tkF",
        "outputId": "5f2e0ffd-4e72-4a17-e1a0-573dbd426669"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gdown in /usr/local/lib/python3.10/dist-packages (4.7.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from gdown) (3.13.3)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from gdown) (2.31.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from gdown) (1.16.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from gdown) (4.66.2)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown) (4.12.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown) (2.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2024.2.2)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1hc50YvZyHc2tU3vOHjbNBncvaSBgCFuP\n",
            "To: /content/weatherHistory.csv\n",
            "100% 16.3M/16.3M [00:00<00:00, 61.4MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('/content/weatherHistory.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "QgDOIWd2SDOE",
        "outputId": "1400bdf7-0ea3-4d51-c5c1-5e12a6cb845a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      Formatted Date        Summary Precip Type  \\\n",
              "0      2006-04-01 00:00:00.000 +0200  Partly Cloudy        rain   \n",
              "1      2006-04-01 01:00:00.000 +0200  Partly Cloudy        rain   \n",
              "2      2006-04-01 02:00:00.000 +0200  Mostly Cloudy        rain   \n",
              "3      2006-04-01 03:00:00.000 +0200  Partly Cloudy        rain   \n",
              "4      2006-04-01 04:00:00.000 +0200  Mostly Cloudy        rain   \n",
              "...                              ...            ...         ...   \n",
              "96448  2016-09-09 19:00:00.000 +0200  Partly Cloudy        rain   \n",
              "96449  2016-09-09 20:00:00.000 +0200  Partly Cloudy        rain   \n",
              "96450  2016-09-09 21:00:00.000 +0200  Partly Cloudy        rain   \n",
              "96451  2016-09-09 22:00:00.000 +0200  Partly Cloudy        rain   \n",
              "96452  2016-09-09 23:00:00.000 +0200  Partly Cloudy        rain   \n",
              "\n",
              "       Temperature (C)  Apparent Temperature (C)  Humidity  Wind Speed (km/h)  \\\n",
              "0             9.472222                  7.388889      0.89            14.1197   \n",
              "1             9.355556                  7.227778      0.86            14.2646   \n",
              "2             9.377778                  9.377778      0.89             3.9284   \n",
              "3             8.288889                  5.944444      0.83            14.1036   \n",
              "4             8.755556                  6.977778      0.83            11.0446   \n",
              "...                ...                       ...       ...                ...   \n",
              "96448        26.016667                 26.016667      0.43            10.9963   \n",
              "96449        24.583333                 24.583333      0.48            10.0947   \n",
              "96450        22.038889                 22.038889      0.56             8.9838   \n",
              "96451        21.522222                 21.522222      0.60            10.5294   \n",
              "96452        20.438889                 20.438889      0.61             5.8765   \n",
              "\n",
              "       Wind Bearing (degrees)  Visibility (km)  Loud Cover  \\\n",
              "0                       251.0          15.8263         0.0   \n",
              "1                       259.0          15.8263         0.0   \n",
              "2                       204.0          14.9569         0.0   \n",
              "3                       269.0          15.8263         0.0   \n",
              "4                       259.0          15.8263         0.0   \n",
              "...                       ...              ...         ...   \n",
              "96448                    31.0          16.1000         0.0   \n",
              "96449                    20.0          15.5526         0.0   \n",
              "96450                    30.0          16.1000         0.0   \n",
              "96451                    20.0          16.1000         0.0   \n",
              "96452                    39.0          15.5204         0.0   \n",
              "\n",
              "       Pressure (millibars)                           Daily Summary  \n",
              "0                   1015.13       Partly cloudy throughout the day.  \n",
              "1                   1015.63       Partly cloudy throughout the day.  \n",
              "2                   1015.94       Partly cloudy throughout the day.  \n",
              "3                   1016.41       Partly cloudy throughout the day.  \n",
              "4                   1016.51       Partly cloudy throughout the day.  \n",
              "...                     ...                                     ...  \n",
              "96448               1014.36  Partly cloudy starting in the morning.  \n",
              "96449               1015.16  Partly cloudy starting in the morning.  \n",
              "96450               1015.66  Partly cloudy starting in the morning.  \n",
              "96451               1015.95  Partly cloudy starting in the morning.  \n",
              "96452               1016.16  Partly cloudy starting in the morning.  \n",
              "\n",
              "[96453 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fb771ceb-f74a-42f1-a670-d345bb2cc6d4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Formatted Date</th>\n",
              "      <th>Summary</th>\n",
              "      <th>Precip Type</th>\n",
              "      <th>Temperature (C)</th>\n",
              "      <th>Apparent Temperature (C)</th>\n",
              "      <th>Humidity</th>\n",
              "      <th>Wind Speed (km/h)</th>\n",
              "      <th>Wind Bearing (degrees)</th>\n",
              "      <th>Visibility (km)</th>\n",
              "      <th>Loud Cover</th>\n",
              "      <th>Pressure (millibars)</th>\n",
              "      <th>Daily Summary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2006-04-01 00:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>9.472222</td>\n",
              "      <td>7.388889</td>\n",
              "      <td>0.89</td>\n",
              "      <td>14.1197</td>\n",
              "      <td>251.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.13</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2006-04-01 01:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>9.355556</td>\n",
              "      <td>7.227778</td>\n",
              "      <td>0.86</td>\n",
              "      <td>14.2646</td>\n",
              "      <td>259.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.63</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2006-04-01 02:00:00.000 +0200</td>\n",
              "      <td>Mostly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>9.377778</td>\n",
              "      <td>9.377778</td>\n",
              "      <td>0.89</td>\n",
              "      <td>3.9284</td>\n",
              "      <td>204.0</td>\n",
              "      <td>14.9569</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.94</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2006-04-01 03:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>8.288889</td>\n",
              "      <td>5.944444</td>\n",
              "      <td>0.83</td>\n",
              "      <td>14.1036</td>\n",
              "      <td>269.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1016.41</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2006-04-01 04:00:00.000 +0200</td>\n",
              "      <td>Mostly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>8.755556</td>\n",
              "      <td>6.977778</td>\n",
              "      <td>0.83</td>\n",
              "      <td>11.0446</td>\n",
              "      <td>259.0</td>\n",
              "      <td>15.8263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1016.51</td>\n",
              "      <td>Partly cloudy throughout the day.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96448</th>\n",
              "      <td>2016-09-09 19:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>26.016667</td>\n",
              "      <td>26.016667</td>\n",
              "      <td>0.43</td>\n",
              "      <td>10.9963</td>\n",
              "      <td>31.0</td>\n",
              "      <td>16.1000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1014.36</td>\n",
              "      <td>Partly cloudy starting in the morning.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96449</th>\n",
              "      <td>2016-09-09 20:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>24.583333</td>\n",
              "      <td>24.583333</td>\n",
              "      <td>0.48</td>\n",
              "      <td>10.0947</td>\n",
              "      <td>20.0</td>\n",
              "      <td>15.5526</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.16</td>\n",
              "      <td>Partly cloudy starting in the morning.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96450</th>\n",
              "      <td>2016-09-09 21:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>22.038889</td>\n",
              "      <td>22.038889</td>\n",
              "      <td>0.56</td>\n",
              "      <td>8.9838</td>\n",
              "      <td>30.0</td>\n",
              "      <td>16.1000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.66</td>\n",
              "      <td>Partly cloudy starting in the morning.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96451</th>\n",
              "      <td>2016-09-09 22:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>21.522222</td>\n",
              "      <td>21.522222</td>\n",
              "      <td>0.60</td>\n",
              "      <td>10.5294</td>\n",
              "      <td>20.0</td>\n",
              "      <td>16.1000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1015.95</td>\n",
              "      <td>Partly cloudy starting in the morning.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96452</th>\n",
              "      <td>2016-09-09 23:00:00.000 +0200</td>\n",
              "      <td>Partly Cloudy</td>\n",
              "      <td>rain</td>\n",
              "      <td>20.438889</td>\n",
              "      <td>20.438889</td>\n",
              "      <td>0.61</td>\n",
              "      <td>5.8765</td>\n",
              "      <td>39.0</td>\n",
              "      <td>15.5204</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1016.16</td>\n",
              "      <td>Partly cloudy starting in the morning.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>96453 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb771ceb-f74a-42f1-a670-d345bb2cc6d4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fb771ceb-f74a-42f1-a670-d345bb2cc6d4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fb771ceb-f74a-42f1-a670-d345bb2cc6d4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4d14ad5c-417a-46e1-a00c-dfd21ef4bbe8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d14ad5c-417a-46e1-a00c-dfd21ef4bbe8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4d14ad5c-417a-46e1-a00c-dfd21ef4bbe8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 96453,\n  \"fields\": [\n    {\n      \"column\": \"Formatted Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 96429,\n        \"samples\": [\n          \"2008-10-17 17:00:00.000 +0200\",\n          \"2014-11-02 03:00:00.000 +0100\",\n          \"2008-06-18 01:00:00.000 +0200\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Summary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Humid and Mostly Cloudy\",\n          \"Windy and Partly Cloudy\",\n          \"Humid and Partly Cloudy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precip Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"snow\",\n          \"rain\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature (C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551546320657026,\n        \"min\": -21.822222222222223,\n        \"max\": 39.90555555555555,\n        \"num_unique_values\": 7574,\n        \"samples\": [\n          34.8111111111111,\n          14.955555555555556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Apparent Temperature (C)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.696847392119196,\n        \"min\": -27.716666666666665,\n        \"max\": 39.34444444444444,\n        \"num_unique_values\": 8984,\n        \"samples\": [\n          32.01111111111111,\n          3.1611111111111097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1954727390672154,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          0.81,\n          0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Speed (km/h)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.913571012591992,\n        \"min\": 0.0,\n        \"max\": 63.8526,\n        \"num_unique_values\": 2484,\n        \"samples\": [\n          23.3611,\n          33.1016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wind Bearing (degrees)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.38342838070584,\n        \"min\": 0.0,\n        \"max\": 359.0,\n        \"num_unique_values\": 360,\n        \"samples\": [\n          128.0,\n          15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Visibility (km)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.192123191422782,\n        \"min\": 0.0,\n        \"max\": 16.1,\n        \"num_unique_values\": 949,\n        \"samples\": [\n          4.395300000000001,\n          6.6332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loud Cover\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure (millibars)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.96990568258018,\n        \"min\": 0.0,\n        \"max\": 1046.38,\n        \"num_unique_values\": 4979,\n        \"samples\": [\n          987.38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Daily Summary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 214,\n        \"samples\": [\n          \"Partly cloudy until evening.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test = train_test_split(df, test_size=0.2, random_state=94)\n",
        "x_train = x_train.reset_index(drop=True)"
      ],
      "metadata": {
        "id": "XzW2zKGj_qWM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rcParams[\"figure.figsize\"] = (15, 10)\n",
        "x_train[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity', 'Wind Speed (km/h)','Wind Bearing (degrees)', 'Visibility (km)','Loud Cover' ,'Pressure (millibars)']].hist()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 933
        },
        "id": "wH_wPAIH_xqy",
        "outputId": "de3baf7f-e56d-4340-9365-02893e83e8a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'Temperature (C)'}>,\n",
              "        <Axes: title={'center': 'Apparent Temperature (C)'}>,\n",
              "        <Axes: title={'center': 'Humidity'}>],\n",
              "       [<Axes: title={'center': 'Wind Speed (km/h)'}>,\n",
              "        <Axes: title={'center': 'Wind Bearing (degrees)'}>,\n",
              "        <Axes: title={'center': 'Visibility (km)'}>],\n",
              "       [<Axes: title={'center': 'Loud Cover'}>,\n",
              "        <Axes: title={'center': 'Pressure (millibars)'}>, <Axes: >]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 111
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "# Calculate the correlation matrix\n",
        "corr_matrix = x_train[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity', 'Wind Speed (km/h)', 'Visibility (km)', 'Pressure (millibars)']].corr()\n",
        "\n",
        "# Plot the heatmap of the correlation matrix\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", annot_kws={\"size\": 10})\n",
        "plt.title('Correlation Matrix Heatmap')\n",
        "plt.show()\n",
        "from sklearn.preprocessing import StandardScaler\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 866
        },
        "id": "pPVyEyNR__M0",
        "outputId": "5f68bc63-b52b-47c8-8dfa-58cfee89fb94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Least square**"
      ],
      "metadata": {
        "id": "5l96uZjESZDP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "ynSU_9D4AO3L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LinearRegressionLS:\n",
        "    def __init__(self):\n",
        "        self.coefficients = None\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        # Add a column of ones to account for the intercept term\n",
        "        X = np.column_stack((np.ones(len(X)), X))\n",
        "\n",
        "        # Compute the coefficients using the least squares method\n",
        "        self.coefficients = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n",
        "\n",
        "    def predict(self, X):\n",
        "        # Add a column of ones to account for the intercept term\n",
        "        X = np.column_stack((np.ones(len(X)), X))\n",
        "\n",
        "        # Predict the target variable\n",
        "        return X.dot(self.coefficients)"
      ],
      "metadata": {
        "id": "fSZkCRdyAXiJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Assuming you have a DataFrame called df with 'Humidity' and 'Temperature (C)' columns\n",
        "# Initialize StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Fit and transform the training data\n",
        "x_train_scaled = scaler.fit_transform(df[['Humidity']])\n",
        "\n",
        "# Transform the test data\n",
        "x_test_scaled = scaler.transform(df[['Humidity']])\n",
        "\n",
        "# Assign target variables\n",
        "y_train_scaled = df['Temperature (C)']\n",
        "y_test_scaled = df['Temperature (C)']\n",
        "\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "model = LinearRegressionLS()\n",
        "model.fit(x_train_scaled, y_train_scaled)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model.predict(x_test_scaled)\n",
        "# Calculate Mean Squared Error\n",
        "mse = mean_squared_error(y_test_scaled,model.predict(x_test_scaled))\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot actual vs predicted values\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(y_test_scaled, y_pred, color='blue')\n",
        "plt.plot([y_test_scaled.min(), y_test_scaled.max()], [y_test_scaled.min(), y_test_scaled.max()], color='red', linestyle='--')\n",
        "plt.xlabel('Actual Values')\n",
        "plt.ylabel('Predicted Values')\n",
        "plt.title('Actual vs Predicted Values')\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "FXbiE5qdAchS",
        "outputId": "b93aa4f4-6c24-4397-a532-b9c0840c8572"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 54.761829807719856\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Recursive Least Squares**"
      ],
      "metadata": {
        "id": "HHZ5vtxbS3--"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class RLS:\n",
        "    def __init__(self, num_vars, lam, delta):\n",
        "        '''\n",
        "        num_vars: number of variables including constant\n",
        "        lam: forgetting factor, usually very close to 1.\n",
        "        '''\n",
        "        self.num_vars = num_vars\n",
        "\n",
        "        # delta controls the initial state.\n",
        "        self.A = delta*np.matrix(np.identity(self.num_vars))\n",
        "        self.w = np.matrix(np.zeros(self.num_vars))\n",
        "        self.w = self.w.reshape(self.w.shape[1],1)\n",
        "\n",
        "        # Variables needed for add_obs\n",
        "        self.lam_inv = lam**(-1)\n",
        "        self.sqrt_lam_inv = math.sqrt(self.lam_inv)\n",
        "\n",
        "        # A priori error\n",
        "        self.a_priori_error = 0\n",
        "\n",
        "        # Count of number of observations added\n",
        "        self.num_obs = 0\n",
        "\n",
        "    def add_obs(self, x, t):\n",
        "        '''\n",
        "        Add the observation x with label t.\n",
        "        x is a column vector as a numpy matrix\n",
        "        t is a real scalar\n",
        "        '''\n",
        "        z = self.lam_inv*self.A*x\n",
        "        alpha = float((1 + x.T*z)**(-1))\n",
        "        self.a_priori_error = float(t - self.w.T*x)\n",
        "        self.w = self.w + (t-alpha*float(x.T*(self.w+t*z)))*z\n",
        "        self.A -= alpha*z*z.T\n",
        "        self.num_obs += 1\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        '''\n",
        "        Fit a model to X,y.\n",
        "        X and y are numpy arrays.\n",
        "        Individual observations in X should have a prepended 1 for constant coefficient.\n",
        "        '''\n",
        "        for i in range(len(X)):\n",
        "            x = np.transpose(np.matrix(X[i]))\n",
        "            self.add_obs(x,y[i])\n",
        "\n",
        "\n",
        "    def get_error(self):\n",
        "        '''\n",
        "        Finds the a priori (instantaneous) error.\n",
        "        Does not calculate the cumulative effect\n",
        "        of round-off errors.\n",
        "        '''\n",
        "        return self.a_priori_error\n",
        "\n",
        "    def predict(self, x):\n",
        "        '''\n",
        "        Predict the value of observation x. x should be a numpy matrix (col vector)\n",
        "        '''\n",
        "        return float(self.w.T*x)"
      ],
      "metadata": {
        "id": "mP2YA5VuApXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class RecursiveLeastSquares:\n",
        "    def __init__(self, n_features, forgetting_factor=0.99):\n",
        "        self.n_features = n_features\n",
        "        self.forgetting_factor = forgetting_factor\n",
        "        self.theta = np.zeros((n_features, 1))  # Initialize model parameters\n",
        "        self.P = np.eye(n_features)  # Initialize covariance matrix\n",
        "\n",
        "    def fit(self, X, y):\n",
        "        errors = []\n",
        "        for i in range(len(X)):\n",
        "            x_i = X[i].reshape(-1, 1)\n",
        "            y_i = y[i]\n",
        "\n",
        "            # Predict\n",
        "            y_pred = np.dot(x_i.T, self.theta)\n",
        "\n",
        "            # Update\n",
        "            error = y_i - y_pred\n",
        "            errors.append(error)\n",
        "            K = np.dot(self.P, x_i) / (self.forgetting_factor + np.dot(np.dot(x_i.T, self.P), x_i))\n",
        "            self.theta = self.theta + np.dot(K, error)\n",
        "            self.P = (1 / self.forgetting_factor) * (self.P - np.dot(K, np.dot(x_i.T, self.P)))\n",
        "\n",
        "        return errors\n",
        "\n",
        "    def predict(self, X):\n",
        "        return np.dot(X, self.theta)\n",
        "\n",
        "x_train_scaled = np.array(x_train_scaled).reshape(-1, 1)\n",
        "x_test_scaled = np.array(x_test_scaled).reshape(-1,1)\n",
        "y_train_scaled = np.array(y_train_scaled).reshape(-1,1)\n",
        "y_test_scaled = np.array(y_test_scaled).reshape(-1,1)\n",
        "rls = RecursiveLeastSquares(n_features=x_train_scaled.shape[1])\n",
        "errors = rls.fit(x_train_scaled, y_train_scaled)\n",
        "y_pred = rls.predict(x_test_scaled)\n",
        "mse = np.mean(np.array(errors)**2)\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(y_test_scaled, y_pred, color='blue')\n",
        "plt.plot([y_test_scaled.min(), y_test_scaled.max()], [y_test_scaled.min(), y_test_scaled.max()], color='red', linestyle='--')\n",
        "plt.xlabel('Actual Values')\n",
        "plt.ylabel('Predicted Values')\n",
        "plt.title('Actual vs Predicted Values')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "U03ZpBu5AsWA",
        "outputId": "2deb9165-a056-4624-d9e1-f1a58f449a34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 162.7798425687377\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**WLS**"
      ],
      "metadata": {
        "id": "RdPWnYCpA1OR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "\n",
        "error_variance = 2  # Modify this value based on your estimation\n",
        "\n",
        "# Calculate weights based on the estimated variance\n",
        "weights = 1 / error_variance\n",
        "\n",
        "# Fit the weighted least squares model\n",
        "X_with_intercept = sm.add_constant(x_train_scaled)  # Add intercept term\n",
        "model = sm.WLS(y_train_scaled, X_with_intercept, weights=weights)\n",
        "result = model.fit()\n",
        "\n",
        "# Print the model summary\n",
        "print(result.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3jhh7ix-A2-a",
        "outputId": "272609ff-695c-4c4d-e217-553e78dc43de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            WLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                      y   R-squared:                       0.400\n",
            "Model:                            WLS   Adj. R-squared:                  0.400\n",
            "Method:                 Least Squares   F-statistic:                 6.423e+04\n",
            "Date:                Tue, 09 Apr 2024   Prob (F-statistic):               0.00\n",
            "Time:                        19:19:20   Log-Likelihood:            -3.2991e+05\n",
            "No. Observations:               96453   AIC:                         6.598e+05\n",
            "Df Residuals:                   96451   BIC:                         6.598e+05\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const         11.9327      0.024    500.786      0.000      11.886      11.979\n",
            "x1            -6.0390      0.024   -253.442      0.000      -6.086      -5.992\n",
            "==============================================================================\n",
            "Omnibus:                     2385.781   Durbin-Watson:                   0.043\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2566.298\n",
            "Skew:                          -0.394   Prob(JB):                         0.00\n",
            "Kurtosis:                       3.131   Cond. No.                         1.00\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "FKaQW38DyWVy"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "296ce571fe3b4964b0b5e68d3a18d722": {
          "model_module": "anywidget",
          "model_name": "AnyModel",
          "model_module_version": "0.9.6",
          "state": {
            "_anywidget_id": "drawdata.ScatterWidget",
            "_css": "fieldset{\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: medium;\n}\n\nbutton{\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: medium;\n}\n\nspan.count{\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: medium;\n    margin-right: 4px; \n    padding-right: 7px; \n    padding-left: 7px;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    border-radius: 8px;\n}",
            "_dom_classes": [],
            "_esm": "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// js/d3.v7.js\nvar require_d3_v7 = __commonJS({\n  \"js/d3.v7.js\"(exports, module) {\n    !function(t, n) {\n      \"object\" == typeof exports && \"undefined\" != typeof module ? n(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], n) : n((t = \"undefined\" != typeof globalThis ? globalThis : t || self).d3 = t.d3 || {});\n    }(exports, function(t) {\n      \"use strict\";\n      function n(t2, n2) {\n        return null == t2 || null == n2 ? NaN : t2 < n2 ? -1 : t2 > n2 ? 1 : t2 >= n2 ? 0 : NaN;\n      }\n      function e(t2, n2) {\n        return null == t2 || null == n2 ? NaN : n2 < t2 ? -1 : n2 > t2 ? 1 : n2 >= t2 ? 0 : NaN;\n      }\n      function r(t2) {\n        let r2, o2, a2;\n        function u2(t3, n2, e2 = 0, i2 = t3.length) {\n          if (e2 < i2) {\n            if (0 !== r2(n2, n2))\n              return i2;\n            do {\n              const r3 = e2 + i2 >>> 1;\n              o2(t3[r3], n2) < 0 ? e2 = r3 + 1 : i2 = r3;\n            } while (e2 < i2);\n          }\n          return e2;\n        }\n        return 2 !== t2.length ? (r2 = n, o2 = (e2, r3) => n(t2(e2), r3), a2 = (n2, e2) => t2(n2) - e2) : (r2 = t2 === n || t2 === e ? t2 : i, o2 = t2, a2 = t2), { left: u2, center: function(t3, n2, e2 = 0, r3 = t3.length) {\n          const i2 = u2(t3, n2, e2, r3 - 1);\n          return i2 > e2 && a2(t3[i2 - 1], n2) > -a2(t3[i2], n2) ? i2 - 1 : i2;\n        }, right: function(t3, n2, e2 = 0, i2 = t3.length) {\n          if (e2 < i2) {\n            if (0 !== r2(n2, n2))\n              return i2;\n            do {\n              const r3 = e2 + i2 >>> 1;\n              o2(t3[r3], n2) <= 0 ? e2 = r3 + 1 : i2 = r3;\n            } while (e2 < i2);\n          }\n          return e2;\n        } };\n      }\n      function i() {\n        return 0;\n      }\n      function o(t2) {\n        return null === t2 ? NaN : +t2;\n      }\n      const a = r(n), u = a.right, c = a.left, f = r(o).center;\n      var s = u;\n      const l = d(y), h = d(function(t2) {\n        const n2 = y(t2);\n        return (t3, e2, r2, i2, o2) => {\n          n2(t3, e2, (r2 <<= 2) + 0, (i2 <<= 2) + 0, o2 <<= 2), n2(t3, e2, r2 + 1, i2 + 1, o2), n2(t3, e2, r2 + 2, i2 + 2, o2), n2(t3, e2, r2 + 3, i2 + 3, o2);\n        };\n      });\n      function d(t2) {\n        return function(n2, e2, r2 = e2) {\n          if (!((e2 = +e2) >= 0))\n            throw new RangeError(\"invalid rx\");\n          if (!((r2 = +r2) >= 0))\n            throw new RangeError(\"invalid ry\");\n          let { data: i2, width: o2, height: a2 } = n2;\n          if (!((o2 = Math.floor(o2)) >= 0))\n            throw new RangeError(\"invalid width\");\n          if (!((a2 = Math.floor(void 0 !== a2 ? a2 : i2.length / o2)) >= 0))\n            throw new RangeError(\"invalid height\");\n          if (!o2 || !a2 || !e2 && !r2)\n            return n2;\n          const u2 = e2 && t2(e2), c2 = r2 && t2(r2), f2 = i2.slice();\n          return u2 && c2 ? (p(u2, f2, i2, o2, a2), p(u2, i2, f2, o2, a2), p(u2, f2, i2, o2, a2), g(c2, i2, f2, o2, a2), g(c2, f2, i2, o2, a2), g(c2, i2, f2, o2, a2)) : u2 ? (p(u2, i2, f2, o2, a2), p(u2, f2, i2, o2, a2), p(u2, i2, f2, o2, a2)) : c2 && (g(c2, i2, f2, o2, a2), g(c2, f2, i2, o2, a2), g(c2, i2, f2, o2, a2)), n2;\n        };\n      }\n      function p(t2, n2, e2, r2, i2) {\n        for (let o2 = 0, a2 = r2 * i2; o2 < a2; )\n          t2(n2, e2, o2, o2 += r2, 1);\n      }\n      function g(t2, n2, e2, r2, i2) {\n        for (let o2 = 0, a2 = r2 * i2; o2 < r2; ++o2)\n          t2(n2, e2, o2, o2 + a2, r2);\n      }\n      function y(t2) {\n        const n2 = Math.floor(t2);\n        if (n2 === t2)\n          return function(t3) {\n            const n3 = 2 * t3 + 1;\n            return (e3, r3, i2, o2, a2) => {\n              if (!((o2 -= a2) >= i2))\n                return;\n              let u2 = t3 * r3[i2];\n              const c2 = a2 * t3;\n              for (let t4 = i2, n4 = i2 + c2; t4 < n4; t4 += a2)\n                u2 += r3[Math.min(o2, t4)];\n              for (let t4 = i2, f2 = o2; t4 <= f2; t4 += a2)\n                u2 += r3[Math.min(o2, t4 + c2)], e3[t4] = u2 / n3, u2 -= r3[Math.max(i2, t4 - c2)];\n            };\n          }(t2);\n        const e2 = t2 - n2, r2 = 2 * t2 + 1;\n        return (t3, i2, o2, a2, u2) => {\n          if (!((a2 -= u2) >= o2))\n            return;\n          let c2 = n2 * i2[o2];\n          const f2 = u2 * n2, s2 = f2 + u2;\n          for (let t4 = o2, n3 = o2 + f2; t4 < n3; t4 += u2)\n            c2 += i2[Math.min(a2, t4)];\n          for (let n3 = o2, l2 = a2; n3 <= l2; n3 += u2)\n            c2 += i2[Math.min(a2, n3 + f2)], t3[n3] = (c2 + e2 * (i2[Math.max(o2, n3 - s2)] + i2[Math.min(a2, n3 + s2)])) / r2, c2 -= i2[Math.max(o2, n3 - f2)];\n        };\n      }\n      function v(t2, n2) {\n        let e2 = 0;\n        if (void 0 === n2)\n          for (let n3 of t2)\n            null != n3 && (n3 = +n3) >= n3 && ++e2;\n        else {\n          let r2 = -1;\n          for (let i2 of t2)\n            null != (i2 = n2(i2, ++r2, t2)) && (i2 = +i2) >= i2 && ++e2;\n        }\n        return e2;\n      }\n      function _(t2) {\n        return 0 | t2.length;\n      }\n      function b(t2) {\n        return !(t2 > 0);\n      }\n      function m(t2) {\n        return \"object\" != typeof t2 || \"length\" in t2 ? t2 : Array.from(t2);\n      }\n      function x(t2, n2) {\n        let e2, r2 = 0, i2 = 0, o2 = 0;\n        if (void 0 === n2)\n          for (let n3 of t2)\n            null != n3 && (n3 = +n3) >= n3 && (e2 = n3 - i2, i2 += e2 / ++r2, o2 += e2 * (n3 - i2));\n        else {\n          let a2 = -1;\n          for (let u2 of t2)\n            null != (u2 = n2(u2, ++a2, t2)) && (u2 = +u2) >= u2 && (e2 = u2 - i2, i2 += e2 / ++r2, o2 += e2 * (u2 - i2));\n        }\n        if (r2 > 1)\n          return o2 / (r2 - 1);\n      }\n      function w(t2, n2) {\n        const e2 = x(t2, n2);\n        return e2 ? Math.sqrt(e2) : e2;\n      }\n      function M(t2, n2) {\n        let e2, r2;\n        if (void 0 === n2)\n          for (const n3 of t2)\n            null != n3 && (void 0 === e2 ? n3 >= n3 && (e2 = r2 = n3) : (e2 > n3 && (e2 = n3), r2 < n3 && (r2 = n3)));\n        else {\n          let i2 = -1;\n          for (let o2 of t2)\n            null != (o2 = n2(o2, ++i2, t2)) && (void 0 === e2 ? o2 >= o2 && (e2 = r2 = o2) : (e2 > o2 && (e2 = o2), r2 < o2 && (r2 = o2)));\n        }\n        return [e2, r2];\n      }\n      class T {\n        constructor() {\n          this._partials = new Float64Array(32), this._n = 0;\n        }\n        add(t2) {\n          const n2 = this._partials;\n          let e2 = 0;\n          for (let r2 = 0; r2 < this._n && r2 < 32; r2++) {\n            const i2 = n2[r2], o2 = t2 + i2, a2 = Math.abs(t2) < Math.abs(i2) ? t2 - (o2 - i2) : i2 - (o2 - t2);\n            a2 && (n2[e2++] = a2), t2 = o2;\n          }\n          return n2[e2] = t2, this._n = e2 + 1, this;\n        }\n        valueOf() {\n          const t2 = this._partials;\n          let n2, e2, r2, i2 = this._n, o2 = 0;\n          if (i2 > 0) {\n            for (o2 = t2[--i2]; i2 > 0 && (n2 = o2, e2 = t2[--i2], o2 = n2 + e2, r2 = e2 - (o2 - n2), !r2); )\n              ;\n            i2 > 0 && (r2 < 0 && t2[i2 - 1] < 0 || r2 > 0 && t2[i2 - 1] > 0) && (e2 = 2 * r2, n2 = o2 + e2, e2 == n2 - o2 && (o2 = n2));\n          }\n          return o2;\n        }\n      }\n      class InternMap extends Map {\n        constructor(t2, n2 = N) {\n          if (super(), Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: n2 } }), null != t2)\n            for (const [n3, e2] of t2)\n              this.set(n3, e2);\n        }\n        get(t2) {\n          return super.get(A(this, t2));\n        }\n        has(t2) {\n          return super.has(A(this, t2));\n        }\n        set(t2, n2) {\n          return super.set(S(this, t2), n2);\n        }\n        delete(t2) {\n          return super.delete(E(this, t2));\n        }\n      }\n      class InternSet extends Set {\n        constructor(t2, n2 = N) {\n          if (super(), Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: n2 } }), null != t2)\n            for (const n3 of t2)\n              this.add(n3);\n        }\n        has(t2) {\n          return super.has(A(this, t2));\n        }\n        add(t2) {\n          return super.add(S(this, t2));\n        }\n        delete(t2) {\n          return super.delete(E(this, t2));\n        }\n      }\n      function A({ _intern: t2, _key: n2 }, e2) {\n        const r2 = n2(e2);\n        return t2.has(r2) ? t2.get(r2) : e2;\n      }\n      function S({ _intern: t2, _key: n2 }, e2) {\n        const r2 = n2(e2);\n        return t2.has(r2) ? t2.get(r2) : (t2.set(r2, e2), e2);\n      }\n      function E({ _intern: t2, _key: n2 }, e2) {\n        const r2 = n2(e2);\n        return t2.has(r2) && (e2 = t2.get(r2), t2.delete(r2)), e2;\n      }\n      function N(t2) {\n        return null !== t2 && \"object\" == typeof t2 ? t2.valueOf() : t2;\n      }\n      function k(t2) {\n        return t2;\n      }\n      function C(t2, ...n2) {\n        return F(t2, k, k, n2);\n      }\n      function P(t2, ...n2) {\n        return F(t2, Array.from, k, n2);\n      }\n      function z(t2, n2) {\n        for (let e2 = 1, r2 = n2.length; e2 < r2; ++e2)\n          t2 = t2.flatMap((t3) => t3.pop().map(([n3, e3]) => [...t3, n3, e3]));\n        return t2;\n      }\n      function $(t2, n2, ...e2) {\n        return F(t2, k, n2, e2);\n      }\n      function D(t2, n2, ...e2) {\n        return F(t2, Array.from, n2, e2);\n      }\n      function R(t2) {\n        if (1 !== t2.length)\n          throw new Error(\"duplicate key\");\n        return t2[0];\n      }\n      function F(t2, n2, e2, r2) {\n        return function t3(i2, o2) {\n          if (o2 >= r2.length)\n            return e2(i2);\n          const a2 = new InternMap(), u2 = r2[o2++];\n          let c2 = -1;\n          for (const t4 of i2) {\n            const n3 = u2(t4, ++c2, i2), e3 = a2.get(n3);\n            e3 ? e3.push(t4) : a2.set(n3, [t4]);\n          }\n          for (const [n3, e3] of a2)\n            a2.set(n3, t3(e3, o2));\n          return n2(a2);\n        }(t2, 0);\n      }\n      function q(t2, n2) {\n        return Array.from(n2, (n3) => t2[n3]);\n      }\n      function U(t2, ...n2) {\n        if (\"function\" != typeof t2[Symbol.iterator])\n          throw new TypeError(\"values is not iterable\");\n        t2 = Array.from(t2);\n        let [e2] = n2;\n        if (e2 && 2 !== e2.length || n2.length > 1) {\n          const r2 = Uint32Array.from(t2, (t3, n3) => n3);\n          return n2.length > 1 ? (n2 = n2.map((n3) => t2.map(n3)), r2.sort((t3, e3) => {\n            for (const r3 of n2) {\n              const n3 = O(r3[t3], r3[e3]);\n              if (n3)\n                return n3;\n            }\n          })) : (e2 = t2.map(e2), r2.sort((t3, n3) => O(e2[t3], e2[n3]))), q(t2, r2);\n        }\n        return t2.sort(I(e2));\n      }\n      function I(t2 = n) {\n        if (t2 === n)\n          return O;\n        if (\"function\" != typeof t2)\n          throw new TypeError(\"compare is not a function\");\n        return (n2, e2) => {\n          const r2 = t2(n2, e2);\n          return r2 || 0 === r2 ? r2 : (0 === t2(e2, e2)) - (0 === t2(n2, n2));\n        };\n      }\n      function O(t2, n2) {\n        return (null == t2 || !(t2 >= t2)) - (null == n2 || !(n2 >= n2)) || (t2 < n2 ? -1 : t2 > n2 ? 1 : 0);\n      }\n      var B = Array.prototype.slice;\n      function Y(t2) {\n        return () => t2;\n      }\n      const L = Math.sqrt(50), j = Math.sqrt(10), H = Math.sqrt(2);\n      function X(t2, n2, e2) {\n        const r2 = (n2 - t2) / Math.max(0, e2), i2 = Math.floor(Math.log10(r2)), o2 = r2 / Math.pow(10, i2), a2 = o2 >= L ? 10 : o2 >= j ? 5 : o2 >= H ? 2 : 1;\n        let u2, c2, f2;\n        return i2 < 0 ? (f2 = Math.pow(10, -i2) / a2, u2 = Math.round(t2 * f2), c2 = Math.round(n2 * f2), u2 / f2 < t2 && ++u2, c2 / f2 > n2 && --c2, f2 = -f2) : (f2 = Math.pow(10, i2) * a2, u2 = Math.round(t2 / f2), c2 = Math.round(n2 / f2), u2 * f2 < t2 && ++u2, c2 * f2 > n2 && --c2), c2 < u2 && 0.5 <= e2 && e2 < 2 ? X(t2, n2, 2 * e2) : [u2, c2, f2];\n      }\n      function G(t2, n2, e2) {\n        if (!((e2 = +e2) > 0))\n          return [];\n        if ((t2 = +t2) === (n2 = +n2))\n          return [t2];\n        const r2 = n2 < t2, [i2, o2, a2] = r2 ? X(n2, t2, e2) : X(t2, n2, e2);\n        if (!(o2 >= i2))\n          return [];\n        const u2 = o2 - i2 + 1, c2 = new Array(u2);\n        if (r2)\n          if (a2 < 0)\n            for (let t3 = 0; t3 < u2; ++t3)\n              c2[t3] = (o2 - t3) / -a2;\n          else\n            for (let t3 = 0; t3 < u2; ++t3)\n              c2[t3] = (o2 - t3) * a2;\n        else if (a2 < 0)\n          for (let t3 = 0; t3 < u2; ++t3)\n            c2[t3] = (i2 + t3) / -a2;\n        else\n          for (let t3 = 0; t3 < u2; ++t3)\n            c2[t3] = (i2 + t3) * a2;\n        return c2;\n      }\n      function V(t2, n2, e2) {\n        return X(t2 = +t2, n2 = +n2, e2 = +e2)[2];\n      }\n      function W(t2, n2, e2) {\n        e2 = +e2;\n        const r2 = (n2 = +n2) < (t2 = +t2), i2 = r2 ? V(n2, t2, e2) : V(t2, n2, e2);\n        return (r2 ? -1 : 1) * (i2 < 0 ? 1 / -i2 : i2);\n      }\n      function Z(t2, n2, e2) {\n        let r2;\n        for (; ; ) {\n          const i2 = V(t2, n2, e2);\n          if (i2 === r2 || 0 === i2 || !isFinite(i2))\n            return [t2, n2];\n          i2 > 0 ? (t2 = Math.floor(t2 / i2) * i2, n2 = Math.ceil(n2 / i2) * i2) : i2 < 0 && (t2 = Math.ceil(t2 * i2) / i2, n2 = Math.floor(n2 * i2) / i2), r2 = i2;\n        }\n      }\n      function K(t2) {\n        return Math.max(1, Math.ceil(Math.log(v(t2)) / Math.LN2) + 1);\n      }\n      function Q() {\n        var t2 = k, n2 = M, e2 = K;\n        function r2(r3) {\n          Array.isArray(r3) || (r3 = Array.from(r3));\n          var i2, o2, a2, u2 = r3.length, c2 = new Array(u2);\n          for (i2 = 0; i2 < u2; ++i2)\n            c2[i2] = t2(r3[i2], i2, r3);\n          var f2 = n2(c2), l2 = f2[0], h2 = f2[1], d2 = e2(c2, l2, h2);\n          if (!Array.isArray(d2)) {\n            const t3 = h2, e3 = +d2;\n            if (n2 === M && ([l2, h2] = Z(l2, h2, e3)), (d2 = G(l2, h2, e3))[0] <= l2 && (a2 = V(l2, h2, e3)), d2[d2.length - 1] >= h2)\n              if (t3 >= h2 && n2 === M) {\n                const t4 = V(l2, h2, e3);\n                isFinite(t4) && (t4 > 0 ? h2 = (Math.floor(h2 / t4) + 1) * t4 : t4 < 0 && (h2 = (Math.ceil(h2 * -t4) + 1) / -t4));\n              } else\n                d2.pop();\n          }\n          for (var p2 = d2.length, g2 = 0, y2 = p2; d2[g2] <= l2; )\n            ++g2;\n          for (; d2[y2 - 1] > h2; )\n            --y2;\n          (g2 || y2 < p2) && (d2 = d2.slice(g2, y2), p2 = y2 - g2);\n          var v2, _2 = new Array(p2 + 1);\n          for (i2 = 0; i2 <= p2; ++i2)\n            (v2 = _2[i2] = []).x0 = i2 > 0 ? d2[i2 - 1] : l2, v2.x1 = i2 < p2 ? d2[i2] : h2;\n          if (isFinite(a2)) {\n            if (a2 > 0)\n              for (i2 = 0; i2 < u2; ++i2)\n                null != (o2 = c2[i2]) && l2 <= o2 && o2 <= h2 && _2[Math.min(p2, Math.floor((o2 - l2) / a2))].push(r3[i2]);\n            else if (a2 < 0) {\n              for (i2 = 0; i2 < u2; ++i2)\n                if (null != (o2 = c2[i2]) && l2 <= o2 && o2 <= h2) {\n                  const t3 = Math.floor((l2 - o2) * a2);\n                  _2[Math.min(p2, t3 + (d2[t3] <= o2))].push(r3[i2]);\n                }\n            }\n          } else\n            for (i2 = 0; i2 < u2; ++i2)\n              null != (o2 = c2[i2]) && l2 <= o2 && o2 <= h2 && _2[s(d2, o2, 0, p2)].push(r3[i2]);\n          return _2;\n        }\n        return r2.value = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : Y(n3), r2) : t2;\n        }, r2.domain = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : Y([t3[0], t3[1]]), r2) : n2;\n        }, r2.thresholds = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : Y(Array.isArray(t3) ? B.call(t3) : t3), r2) : e2;\n        }, r2;\n      }\n      function J(t2, n2) {\n        let e2;\n        if (void 0 === n2)\n          for (const n3 of t2)\n            null != n3 && (e2 < n3 || void 0 === e2 && n3 >= n3) && (e2 = n3);\n        else {\n          let r2 = -1;\n          for (let i2 of t2)\n            null != (i2 = n2(i2, ++r2, t2)) && (e2 < i2 || void 0 === e2 && i2 >= i2) && (e2 = i2);\n        }\n        return e2;\n      }\n      function tt(t2, n2) {\n        let e2, r2 = -1, i2 = -1;\n        if (void 0 === n2)\n          for (const n3 of t2)\n            ++i2, null != n3 && (e2 < n3 || void 0 === e2 && n3 >= n3) && (e2 = n3, r2 = i2);\n        else\n          for (let o2 of t2)\n            null != (o2 = n2(o2, ++i2, t2)) && (e2 < o2 || void 0 === e2 && o2 >= o2) && (e2 = o2, r2 = i2);\n        return r2;\n      }\n      function nt(t2, n2) {\n        let e2;\n        if (void 0 === n2)\n          for (const n3 of t2)\n            null != n3 && (e2 > n3 || void 0 === e2 && n3 >= n3) && (e2 = n3);\n        else {\n          let r2 = -1;\n          for (let i2 of t2)\n            null != (i2 = n2(i2, ++r2, t2)) && (e2 > i2 || void 0 === e2 && i2 >= i2) && (e2 = i2);\n        }\n        return e2;\n      }\n      function et(t2, n2) {\n        let e2, r2 = -1, i2 = -1;\n        if (void 0 === n2)\n          for (const n3 of t2)\n            ++i2, null != n3 && (e2 > n3 || void 0 === e2 && n3 >= n3) && (e2 = n3, r2 = i2);\n        else\n          for (let o2 of t2)\n            null != (o2 = n2(o2, ++i2, t2)) && (e2 > o2 || void 0 === e2 && o2 >= o2) && (e2 = o2, r2 = i2);\n        return r2;\n      }\n      function rt(t2, n2, e2 = 0, r2 = 1 / 0, i2) {\n        if (n2 = Math.floor(n2), e2 = Math.floor(Math.max(0, e2)), r2 = Math.floor(Math.min(t2.length - 1, r2)), !(e2 <= n2 && n2 <= r2))\n          return t2;\n        for (i2 = void 0 === i2 ? O : I(i2); r2 > e2; ) {\n          if (r2 - e2 > 600) {\n            const o3 = r2 - e2 + 1, a3 = n2 - e2 + 1, u3 = Math.log(o3), c2 = 0.5 * Math.exp(2 * u3 / 3), f2 = 0.5 * Math.sqrt(u3 * c2 * (o3 - c2) / o3) * (a3 - o3 / 2 < 0 ? -1 : 1);\n            rt(t2, n2, Math.max(e2, Math.floor(n2 - a3 * c2 / o3 + f2)), Math.min(r2, Math.floor(n2 + (o3 - a3) * c2 / o3 + f2)), i2);\n          }\n          const o2 = t2[n2];\n          let a2 = e2, u2 = r2;\n          for (it(t2, e2, n2), i2(t2[r2], o2) > 0 && it(t2, e2, r2); a2 < u2; ) {\n            for (it(t2, a2, u2), ++a2, --u2; i2(t2[a2], o2) < 0; )\n              ++a2;\n            for (; i2(t2[u2], o2) > 0; )\n              --u2;\n          }\n          0 === i2(t2[e2], o2) ? it(t2, e2, u2) : (++u2, it(t2, u2, r2)), u2 <= n2 && (e2 = u2 + 1), n2 <= u2 && (r2 = u2 - 1);\n        }\n        return t2;\n      }\n      function it(t2, n2, e2) {\n        const r2 = t2[n2];\n        t2[n2] = t2[e2], t2[e2] = r2;\n      }\n      function ot(t2, e2 = n) {\n        let r2, i2 = false;\n        if (1 === e2.length) {\n          let o2;\n          for (const a2 of t2) {\n            const t3 = e2(a2);\n            (i2 ? n(t3, o2) > 0 : 0 === n(t3, t3)) && (r2 = a2, o2 = t3, i2 = true);\n          }\n        } else\n          for (const n2 of t2)\n            (i2 ? e2(n2, r2) > 0 : 0 === e2(n2, n2)) && (r2 = n2, i2 = true);\n        return r2;\n      }\n      function at(t2, n2, e2) {\n        if (t2 = Float64Array.from(function* (t3, n3) {\n          if (void 0 === n3)\n            for (let n4 of t3)\n              null != n4 && (n4 = +n4) >= n4 && (yield n4);\n          else {\n            let e3 = -1;\n            for (let r3 of t3)\n              null != (r3 = n3(r3, ++e3, t3)) && (r3 = +r3) >= r3 && (yield r3);\n          }\n        }(t2, e2)), (r2 = t2.length) && !isNaN(n2 = +n2)) {\n          if (n2 <= 0 || r2 < 2)\n            return nt(t2);\n          if (n2 >= 1)\n            return J(t2);\n          var r2, i2 = (r2 - 1) * n2, o2 = Math.floor(i2), a2 = J(rt(t2, o2).subarray(0, o2 + 1));\n          return a2 + (nt(t2.subarray(o2 + 1)) - a2) * (i2 - o2);\n        }\n      }\n      function ut(t2, n2, e2 = o) {\n        if ((r2 = t2.length) && !isNaN(n2 = +n2)) {\n          if (n2 <= 0 || r2 < 2)\n            return +e2(t2[0], 0, t2);\n          if (n2 >= 1)\n            return +e2(t2[r2 - 1], r2 - 1, t2);\n          var r2, i2 = (r2 - 1) * n2, a2 = Math.floor(i2), u2 = +e2(t2[a2], a2, t2);\n          return u2 + (+e2(t2[a2 + 1], a2 + 1, t2) - u2) * (i2 - a2);\n        }\n      }\n      function ct(t2, n2, e2 = o) {\n        if (!isNaN(n2 = +n2)) {\n          if (r2 = Float64Array.from(t2, (n3, r3) => o(e2(t2[r3], r3, t2))), n2 <= 0)\n            return et(r2);\n          if (n2 >= 1)\n            return tt(r2);\n          var r2, i2 = Uint32Array.from(t2, (t3, n3) => n3), a2 = r2.length - 1, u2 = Math.floor(a2 * n2);\n          return rt(i2, u2, 0, a2, (t3, n3) => O(r2[t3], r2[n3])), (u2 = ot(i2.subarray(0, u2 + 1), (t3) => r2[t3])) >= 0 ? u2 : -1;\n        }\n      }\n      function ft(t2) {\n        return Array.from(function* (t3) {\n          for (const n2 of t3)\n            yield* n2;\n        }(t2));\n      }\n      function st(t2, n2) {\n        return [t2, n2];\n      }\n      function lt(t2, n2, e2) {\n        t2 = +t2, n2 = +n2, e2 = (i2 = arguments.length) < 2 ? (n2 = t2, t2 = 0, 1) : i2 < 3 ? 1 : +e2;\n        for (var r2 = -1, i2 = 0 | Math.max(0, Math.ceil((n2 - t2) / e2)), o2 = new Array(i2); ++r2 < i2; )\n          o2[r2] = t2 + r2 * e2;\n        return o2;\n      }\n      function ht(t2, e2 = n) {\n        if (1 === e2.length)\n          return et(t2, e2);\n        let r2, i2 = -1, o2 = -1;\n        for (const n2 of t2)\n          ++o2, (i2 < 0 ? 0 === e2(n2, n2) : e2(n2, r2) < 0) && (r2 = n2, i2 = o2);\n        return i2;\n      }\n      var dt = pt(Math.random);\n      function pt(t2) {\n        return function(n2, e2 = 0, r2 = n2.length) {\n          let i2 = r2 - (e2 = +e2);\n          for (; i2; ) {\n            const r3 = t2() * i2-- | 0, o2 = n2[i2 + e2];\n            n2[i2 + e2] = n2[r3 + e2], n2[r3 + e2] = o2;\n          }\n          return n2;\n        };\n      }\n      function gt(t2) {\n        if (!(i2 = t2.length))\n          return [];\n        for (var n2 = -1, e2 = nt(t2, yt), r2 = new Array(e2); ++n2 < e2; )\n          for (var i2, o2 = -1, a2 = r2[n2] = new Array(i2); ++o2 < i2; )\n            a2[o2] = t2[o2][n2];\n        return r2;\n      }\n      function yt(t2) {\n        return t2.length;\n      }\n      function vt(t2) {\n        return t2 instanceof InternSet ? t2 : new InternSet(t2);\n      }\n      function _t(t2, n2) {\n        const e2 = t2[Symbol.iterator](), r2 = /* @__PURE__ */ new Set();\n        for (const t3 of n2) {\n          const n3 = bt(t3);\n          if (r2.has(n3))\n            continue;\n          let i2, o2;\n          for (; { value: i2, done: o2 } = e2.next(); ) {\n            if (o2)\n              return false;\n            const t4 = bt(i2);\n            if (r2.add(t4), Object.is(n3, t4))\n              break;\n          }\n        }\n        return true;\n      }\n      function bt(t2) {\n        return null !== t2 && \"object\" == typeof t2 ? t2.valueOf() : t2;\n      }\n      function mt(t2) {\n        return t2;\n      }\n      var xt = 1, wt = 2, Mt = 3, Tt = 4, At = 1e-6;\n      function St(t2) {\n        return \"translate(\" + t2 + \",0)\";\n      }\n      function Et(t2) {\n        return \"translate(0,\" + t2 + \")\";\n      }\n      function Nt(t2) {\n        return (n2) => +t2(n2);\n      }\n      function kt(t2, n2) {\n        return n2 = Math.max(0, t2.bandwidth() - 2 * n2) / 2, t2.round() && (n2 = Math.round(n2)), (e2) => +t2(e2) + n2;\n      }\n      function Ct() {\n        return !this.__axis;\n      }\n      function Pt(t2, n2) {\n        var e2 = [], r2 = null, i2 = null, o2 = 6, a2 = 6, u2 = 3, c2 = \"undefined\" != typeof window && window.devicePixelRatio > 1 ? 0 : 0.5, f2 = t2 === xt || t2 === Tt ? -1 : 1, s2 = t2 === Tt || t2 === wt ? \"x\" : \"y\", l2 = t2 === xt || t2 === Mt ? St : Et;\n        function h2(h3) {\n          var d2 = null == r2 ? n2.ticks ? n2.ticks.apply(n2, e2) : n2.domain() : r2, p2 = null == i2 ? n2.tickFormat ? n2.tickFormat.apply(n2, e2) : mt : i2, g2 = Math.max(o2, 0) + u2, y2 = n2.range(), v2 = +y2[0] + c2, _2 = +y2[y2.length - 1] + c2, b2 = (n2.bandwidth ? kt : Nt)(n2.copy(), c2), m2 = h3.selection ? h3.selection() : h3, x2 = m2.selectAll(\".domain\").data([null]), w2 = m2.selectAll(\".tick\").data(d2, n2).order(), M2 = w2.exit(), T2 = w2.enter().append(\"g\").attr(\"class\", \"tick\"), A2 = w2.select(\"line\"), S2 = w2.select(\"text\");\n          x2 = x2.merge(x2.enter().insert(\"path\", \".tick\").attr(\"class\", \"domain\").attr(\"stroke\", \"currentColor\")), w2 = w2.merge(T2), A2 = A2.merge(T2.append(\"line\").attr(\"stroke\", \"currentColor\").attr(s2 + \"2\", f2 * o2)), S2 = S2.merge(T2.append(\"text\").attr(\"fill\", \"currentColor\").attr(s2, f2 * g2).attr(\"dy\", t2 === xt ? \"0em\" : t2 === Mt ? \"0.71em\" : \"0.32em\")), h3 !== m2 && (x2 = x2.transition(h3), w2 = w2.transition(h3), A2 = A2.transition(h3), S2 = S2.transition(h3), M2 = M2.transition(h3).attr(\"opacity\", At).attr(\"transform\", function(t3) {\n            return isFinite(t3 = b2(t3)) ? l2(t3 + c2) : this.getAttribute(\"transform\");\n          }), T2.attr(\"opacity\", At).attr(\"transform\", function(t3) {\n            var n3 = this.parentNode.__axis;\n            return l2((n3 && isFinite(n3 = n3(t3)) ? n3 : b2(t3)) + c2);\n          })), M2.remove(), x2.attr(\"d\", t2 === Tt || t2 === wt ? a2 ? \"M\" + f2 * a2 + \",\" + v2 + \"H\" + c2 + \"V\" + _2 + \"H\" + f2 * a2 : \"M\" + c2 + \",\" + v2 + \"V\" + _2 : a2 ? \"M\" + v2 + \",\" + f2 * a2 + \"V\" + c2 + \"H\" + _2 + \"V\" + f2 * a2 : \"M\" + v2 + \",\" + c2 + \"H\" + _2), w2.attr(\"opacity\", 1).attr(\"transform\", function(t3) {\n            return l2(b2(t3) + c2);\n          }), A2.attr(s2 + \"2\", f2 * o2), S2.attr(s2, f2 * g2).text(p2), m2.filter(Ct).attr(\"fill\", \"none\").attr(\"font-size\", 10).attr(\"font-family\", \"sans-serif\").attr(\"text-anchor\", t2 === wt ? \"start\" : t2 === Tt ? \"end\" : \"middle\"), m2.each(function() {\n            this.__axis = b2;\n          });\n        }\n        return h2.scale = function(t3) {\n          return arguments.length ? (n2 = t3, h2) : n2;\n        }, h2.ticks = function() {\n          return e2 = Array.from(arguments), h2;\n        }, h2.tickArguments = function(t3) {\n          return arguments.length ? (e2 = null == t3 ? [] : Array.from(t3), h2) : e2.slice();\n        }, h2.tickValues = function(t3) {\n          return arguments.length ? (r2 = null == t3 ? null : Array.from(t3), h2) : r2 && r2.slice();\n        }, h2.tickFormat = function(t3) {\n          return arguments.length ? (i2 = t3, h2) : i2;\n        }, h2.tickSize = function(t3) {\n          return arguments.length ? (o2 = a2 = +t3, h2) : o2;\n        }, h2.tickSizeInner = function(t3) {\n          return arguments.length ? (o2 = +t3, h2) : o2;\n        }, h2.tickSizeOuter = function(t3) {\n          return arguments.length ? (a2 = +t3, h2) : a2;\n        }, h2.tickPadding = function(t3) {\n          return arguments.length ? (u2 = +t3, h2) : u2;\n        }, h2.offset = function(t3) {\n          return arguments.length ? (c2 = +t3, h2) : c2;\n        }, h2;\n      }\n      var zt = { value: () => {\n      } };\n      function $t() {\n        for (var t2, n2 = 0, e2 = arguments.length, r2 = {}; n2 < e2; ++n2) {\n          if (!(t2 = arguments[n2] + \"\") || t2 in r2 || /[\\s.]/.test(t2))\n            throw new Error(\"illegal type: \" + t2);\n          r2[t2] = [];\n        }\n        return new Dt(r2);\n      }\n      function Dt(t2) {\n        this._ = t2;\n      }\n      function Rt(t2, n2) {\n        for (var e2, r2 = 0, i2 = t2.length; r2 < i2; ++r2)\n          if ((e2 = t2[r2]).name === n2)\n            return e2.value;\n      }\n      function Ft(t2, n2, e2) {\n        for (var r2 = 0, i2 = t2.length; r2 < i2; ++r2)\n          if (t2[r2].name === n2) {\n            t2[r2] = zt, t2 = t2.slice(0, r2).concat(t2.slice(r2 + 1));\n            break;\n          }\n        return null != e2 && t2.push({ name: n2, value: e2 }), t2;\n      }\n      Dt.prototype = $t.prototype = { constructor: Dt, on: function(t2, n2) {\n        var e2, r2, i2 = this._, o2 = (r2 = i2, (t2 + \"\").trim().split(/^|\\s+/).map(function(t3) {\n          var n3 = \"\", e3 = t3.indexOf(\".\");\n          if (e3 >= 0 && (n3 = t3.slice(e3 + 1), t3 = t3.slice(0, e3)), t3 && !r2.hasOwnProperty(t3))\n            throw new Error(\"unknown type: \" + t3);\n          return { type: t3, name: n3 };\n        })), a2 = -1, u2 = o2.length;\n        if (!(arguments.length < 2)) {\n          if (null != n2 && \"function\" != typeof n2)\n            throw new Error(\"invalid callback: \" + n2);\n          for (; ++a2 < u2; )\n            if (e2 = (t2 = o2[a2]).type)\n              i2[e2] = Ft(i2[e2], t2.name, n2);\n            else if (null == n2)\n              for (e2 in i2)\n                i2[e2] = Ft(i2[e2], t2.name, null);\n          return this;\n        }\n        for (; ++a2 < u2; )\n          if ((e2 = (t2 = o2[a2]).type) && (e2 = Rt(i2[e2], t2.name)))\n            return e2;\n      }, copy: function() {\n        var t2 = {}, n2 = this._;\n        for (var e2 in n2)\n          t2[e2] = n2[e2].slice();\n        return new Dt(t2);\n      }, call: function(t2, n2) {\n        if ((e2 = arguments.length - 2) > 0)\n          for (var e2, r2, i2 = new Array(e2), o2 = 0; o2 < e2; ++o2)\n            i2[o2] = arguments[o2 + 2];\n        if (!this._.hasOwnProperty(t2))\n          throw new Error(\"unknown type: \" + t2);\n        for (o2 = 0, e2 = (r2 = this._[t2]).length; o2 < e2; ++o2)\n          r2[o2].value.apply(n2, i2);\n      }, apply: function(t2, n2, e2) {\n        if (!this._.hasOwnProperty(t2))\n          throw new Error(\"unknown type: \" + t2);\n        for (var r2 = this._[t2], i2 = 0, o2 = r2.length; i2 < o2; ++i2)\n          r2[i2].value.apply(n2, e2);\n      } };\n      var qt = \"http://www.w3.org/1999/xhtml\", Ut = { svg: \"http://www.w3.org/2000/svg\", xhtml: qt, xlink: \"http://www.w3.org/1999/xlink\", xml: \"http://www.w3.org/XML/1998/namespace\", xmlns: \"http://www.w3.org/2000/xmlns/\" };\n      function It(t2) {\n        var n2 = t2 += \"\", e2 = n2.indexOf(\":\");\n        return e2 >= 0 && \"xmlns\" !== (n2 = t2.slice(0, e2)) && (t2 = t2.slice(e2 + 1)), Ut.hasOwnProperty(n2) ? { space: Ut[n2], local: t2 } : t2;\n      }\n      function Ot(t2) {\n        return function() {\n          var n2 = this.ownerDocument, e2 = this.namespaceURI;\n          return e2 === qt && n2.documentElement.namespaceURI === qt ? n2.createElement(t2) : n2.createElementNS(e2, t2);\n        };\n      }\n      function Bt(t2) {\n        return function() {\n          return this.ownerDocument.createElementNS(t2.space, t2.local);\n        };\n      }\n      function Yt(t2) {\n        var n2 = It(t2);\n        return (n2.local ? Bt : Ot)(n2);\n      }\n      function Lt() {\n      }\n      function jt(t2) {\n        return null == t2 ? Lt : function() {\n          return this.querySelector(t2);\n        };\n      }\n      function Ht(t2) {\n        return null == t2 ? [] : Array.isArray(t2) ? t2 : Array.from(t2);\n      }\n      function Xt() {\n        return [];\n      }\n      function Gt(t2) {\n        return null == t2 ? Xt : function() {\n          return this.querySelectorAll(t2);\n        };\n      }\n      function Vt(t2) {\n        return function() {\n          return this.matches(t2);\n        };\n      }\n      function Wt(t2) {\n        return function(n2) {\n          return n2.matches(t2);\n        };\n      }\n      var Zt = Array.prototype.find;\n      function Kt() {\n        return this.firstElementChild;\n      }\n      var Qt = Array.prototype.filter;\n      function Jt() {\n        return Array.from(this.children);\n      }\n      function tn(t2) {\n        return new Array(t2.length);\n      }\n      function nn(t2, n2) {\n        this.ownerDocument = t2.ownerDocument, this.namespaceURI = t2.namespaceURI, this._next = null, this._parent = t2, this.__data__ = n2;\n      }\n      function en(t2, n2, e2, r2, i2, o2) {\n        for (var a2, u2 = 0, c2 = n2.length, f2 = o2.length; u2 < f2; ++u2)\n          (a2 = n2[u2]) ? (a2.__data__ = o2[u2], r2[u2] = a2) : e2[u2] = new nn(t2, o2[u2]);\n        for (; u2 < c2; ++u2)\n          (a2 = n2[u2]) && (i2[u2] = a2);\n      }\n      function rn(t2, n2, e2, r2, i2, o2, a2) {\n        var u2, c2, f2, s2 = /* @__PURE__ */ new Map(), l2 = n2.length, h2 = o2.length, d2 = new Array(l2);\n        for (u2 = 0; u2 < l2; ++u2)\n          (c2 = n2[u2]) && (d2[u2] = f2 = a2.call(c2, c2.__data__, u2, n2) + \"\", s2.has(f2) ? i2[u2] = c2 : s2.set(f2, c2));\n        for (u2 = 0; u2 < h2; ++u2)\n          f2 = a2.call(t2, o2[u2], u2, o2) + \"\", (c2 = s2.get(f2)) ? (r2[u2] = c2, c2.__data__ = o2[u2], s2.delete(f2)) : e2[u2] = new nn(t2, o2[u2]);\n        for (u2 = 0; u2 < l2; ++u2)\n          (c2 = n2[u2]) && s2.get(d2[u2]) === c2 && (i2[u2] = c2);\n      }\n      function on(t2) {\n        return t2.__data__;\n      }\n      function an(t2) {\n        return \"object\" == typeof t2 && \"length\" in t2 ? t2 : Array.from(t2);\n      }\n      function un(t2, n2) {\n        return t2 < n2 ? -1 : t2 > n2 ? 1 : t2 >= n2 ? 0 : NaN;\n      }\n      function cn(t2) {\n        return function() {\n          this.removeAttribute(t2);\n        };\n      }\n      function fn(t2) {\n        return function() {\n          this.removeAttributeNS(t2.space, t2.local);\n        };\n      }\n      function sn(t2, n2) {\n        return function() {\n          this.setAttribute(t2, n2);\n        };\n      }\n      function ln(t2, n2) {\n        return function() {\n          this.setAttributeNS(t2.space, t2.local, n2);\n        };\n      }\n      function hn(t2, n2) {\n        return function() {\n          var e2 = n2.apply(this, arguments);\n          null == e2 ? this.removeAttribute(t2) : this.setAttribute(t2, e2);\n        };\n      }\n      function dn(t2, n2) {\n        return function() {\n          var e2 = n2.apply(this, arguments);\n          null == e2 ? this.removeAttributeNS(t2.space, t2.local) : this.setAttributeNS(t2.space, t2.local, e2);\n        };\n      }\n      function pn(t2) {\n        return t2.ownerDocument && t2.ownerDocument.defaultView || t2.document && t2 || t2.defaultView;\n      }\n      function gn(t2) {\n        return function() {\n          this.style.removeProperty(t2);\n        };\n      }\n      function yn(t2, n2, e2) {\n        return function() {\n          this.style.setProperty(t2, n2, e2);\n        };\n      }\n      function vn(t2, n2, e2) {\n        return function() {\n          var r2 = n2.apply(this, arguments);\n          null == r2 ? this.style.removeProperty(t2) : this.style.setProperty(t2, r2, e2);\n        };\n      }\n      function _n(t2, n2) {\n        return t2.style.getPropertyValue(n2) || pn(t2).getComputedStyle(t2, null).getPropertyValue(n2);\n      }\n      function bn(t2) {\n        return function() {\n          delete this[t2];\n        };\n      }\n      function mn(t2, n2) {\n        return function() {\n          this[t2] = n2;\n        };\n      }\n      function xn(t2, n2) {\n        return function() {\n          var e2 = n2.apply(this, arguments);\n          null == e2 ? delete this[t2] : this[t2] = e2;\n        };\n      }\n      function wn(t2) {\n        return t2.trim().split(/^|\\s+/);\n      }\n      function Mn(t2) {\n        return t2.classList || new Tn(t2);\n      }\n      function Tn(t2) {\n        this._node = t2, this._names = wn(t2.getAttribute(\"class\") || \"\");\n      }\n      function An(t2, n2) {\n        for (var e2 = Mn(t2), r2 = -1, i2 = n2.length; ++r2 < i2; )\n          e2.add(n2[r2]);\n      }\n      function Sn(t2, n2) {\n        for (var e2 = Mn(t2), r2 = -1, i2 = n2.length; ++r2 < i2; )\n          e2.remove(n2[r2]);\n      }\n      function En(t2) {\n        return function() {\n          An(this, t2);\n        };\n      }\n      function Nn(t2) {\n        return function() {\n          Sn(this, t2);\n        };\n      }\n      function kn(t2, n2) {\n        return function() {\n          (n2.apply(this, arguments) ? An : Sn)(this, t2);\n        };\n      }\n      function Cn() {\n        this.textContent = \"\";\n      }\n      function Pn(t2) {\n        return function() {\n          this.textContent = t2;\n        };\n      }\n      function zn(t2) {\n        return function() {\n          var n2 = t2.apply(this, arguments);\n          this.textContent = null == n2 ? \"\" : n2;\n        };\n      }\n      function $n() {\n        this.innerHTML = \"\";\n      }\n      function Dn(t2) {\n        return function() {\n          this.innerHTML = t2;\n        };\n      }\n      function Rn(t2) {\n        return function() {\n          var n2 = t2.apply(this, arguments);\n          this.innerHTML = null == n2 ? \"\" : n2;\n        };\n      }\n      function Fn() {\n        this.nextSibling && this.parentNode.appendChild(this);\n      }\n      function qn() {\n        this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);\n      }\n      function Un() {\n        return null;\n      }\n      function In() {\n        var t2 = this.parentNode;\n        t2 && t2.removeChild(this);\n      }\n      function On() {\n        var t2 = this.cloneNode(false), n2 = this.parentNode;\n        return n2 ? n2.insertBefore(t2, this.nextSibling) : t2;\n      }\n      function Bn() {\n        var t2 = this.cloneNode(true), n2 = this.parentNode;\n        return n2 ? n2.insertBefore(t2, this.nextSibling) : t2;\n      }\n      function Yn(t2) {\n        return function() {\n          var n2 = this.__on;\n          if (n2) {\n            for (var e2, r2 = 0, i2 = -1, o2 = n2.length; r2 < o2; ++r2)\n              e2 = n2[r2], t2.type && e2.type !== t2.type || e2.name !== t2.name ? n2[++i2] = e2 : this.removeEventListener(e2.type, e2.listener, e2.options);\n            ++i2 ? n2.length = i2 : delete this.__on;\n          }\n        };\n      }\n      function Ln(t2, n2, e2) {\n        return function() {\n          var r2, i2 = this.__on, o2 = /* @__PURE__ */ function(t3) {\n            return function(n3) {\n              t3.call(this, n3, this.__data__);\n            };\n          }(n2);\n          if (i2) {\n            for (var a2 = 0, u2 = i2.length; a2 < u2; ++a2)\n              if ((r2 = i2[a2]).type === t2.type && r2.name === t2.name)\n                return this.removeEventListener(r2.type, r2.listener, r2.options), this.addEventListener(r2.type, r2.listener = o2, r2.options = e2), void (r2.value = n2);\n          }\n          this.addEventListener(t2.type, o2, e2), r2 = { type: t2.type, name: t2.name, value: n2, listener: o2, options: e2 }, i2 ? i2.push(r2) : this.__on = [r2];\n        };\n      }\n      function jn(t2, n2, e2) {\n        var r2 = pn(t2), i2 = r2.CustomEvent;\n        \"function\" == typeof i2 ? i2 = new i2(n2, e2) : (i2 = r2.document.createEvent(\"Event\"), e2 ? (i2.initEvent(n2, e2.bubbles, e2.cancelable), i2.detail = e2.detail) : i2.initEvent(n2, false, false)), t2.dispatchEvent(i2);\n      }\n      function Hn(t2, n2) {\n        return function() {\n          return jn(this, t2, n2);\n        };\n      }\n      function Xn(t2, n2) {\n        return function() {\n          return jn(this, t2, n2.apply(this, arguments));\n        };\n      }\n      nn.prototype = { constructor: nn, appendChild: function(t2) {\n        return this._parent.insertBefore(t2, this._next);\n      }, insertBefore: function(t2, n2) {\n        return this._parent.insertBefore(t2, n2);\n      }, querySelector: function(t2) {\n        return this._parent.querySelector(t2);\n      }, querySelectorAll: function(t2) {\n        return this._parent.querySelectorAll(t2);\n      } }, Tn.prototype = { add: function(t2) {\n        this._names.indexOf(t2) < 0 && (this._names.push(t2), this._node.setAttribute(\"class\", this._names.join(\" \")));\n      }, remove: function(t2) {\n        var n2 = this._names.indexOf(t2);\n        n2 >= 0 && (this._names.splice(n2, 1), this._node.setAttribute(\"class\", this._names.join(\" \")));\n      }, contains: function(t2) {\n        return this._names.indexOf(t2) >= 0;\n      } };\n      var Gn = [null];\n      function Vn(t2, n2) {\n        this._groups = t2, this._parents = n2;\n      }\n      function Wn() {\n        return new Vn([[document.documentElement]], Gn);\n      }\n      function Zn(t2) {\n        return \"string\" == typeof t2 ? new Vn([[document.querySelector(t2)]], [document.documentElement]) : new Vn([[t2]], Gn);\n      }\n      Vn.prototype = Wn.prototype = { constructor: Vn, select: function(t2) {\n        \"function\" != typeof t2 && (t2 = jt(t2));\n        for (var n2 = this._groups, e2 = n2.length, r2 = new Array(e2), i2 = 0; i2 < e2; ++i2)\n          for (var o2, a2, u2 = n2[i2], c2 = u2.length, f2 = r2[i2] = new Array(c2), s2 = 0; s2 < c2; ++s2)\n            (o2 = u2[s2]) && (a2 = t2.call(o2, o2.__data__, s2, u2)) && (\"__data__\" in o2 && (a2.__data__ = o2.__data__), f2[s2] = a2);\n        return new Vn(r2, this._parents);\n      }, selectAll: function(t2) {\n        t2 = \"function\" == typeof t2 ? /* @__PURE__ */ function(t3) {\n          return function() {\n            return Ht(t3.apply(this, arguments));\n          };\n        }(t2) : Gt(t2);\n        for (var n2 = this._groups, e2 = n2.length, r2 = [], i2 = [], o2 = 0; o2 < e2; ++o2)\n          for (var a2, u2 = n2[o2], c2 = u2.length, f2 = 0; f2 < c2; ++f2)\n            (a2 = u2[f2]) && (r2.push(t2.call(a2, a2.__data__, f2, u2)), i2.push(a2));\n        return new Vn(r2, i2);\n      }, selectChild: function(t2) {\n        return this.select(null == t2 ? Kt : /* @__PURE__ */ function(t3) {\n          return function() {\n            return Zt.call(this.children, t3);\n          };\n        }(\"function\" == typeof t2 ? t2 : Wt(t2)));\n      }, selectChildren: function(t2) {\n        return this.selectAll(null == t2 ? Jt : /* @__PURE__ */ function(t3) {\n          return function() {\n            return Qt.call(this.children, t3);\n          };\n        }(\"function\" == typeof t2 ? t2 : Wt(t2)));\n      }, filter: function(t2) {\n        \"function\" != typeof t2 && (t2 = Vt(t2));\n        for (var n2 = this._groups, e2 = n2.length, r2 = new Array(e2), i2 = 0; i2 < e2; ++i2)\n          for (var o2, a2 = n2[i2], u2 = a2.length, c2 = r2[i2] = [], f2 = 0; f2 < u2; ++f2)\n            (o2 = a2[f2]) && t2.call(o2, o2.__data__, f2, a2) && c2.push(o2);\n        return new Vn(r2, this._parents);\n      }, data: function(t2, n2) {\n        if (!arguments.length)\n          return Array.from(this, on);\n        var e2 = n2 ? rn : en, r2 = this._parents, i2 = this._groups;\n        \"function\" != typeof t2 && (t2 = /* @__PURE__ */ function(t3) {\n          return function() {\n            return t3;\n          };\n        }(t2));\n        for (var o2 = i2.length, a2 = new Array(o2), u2 = new Array(o2), c2 = new Array(o2), f2 = 0; f2 < o2; ++f2) {\n          var s2 = r2[f2], l2 = i2[f2], h2 = l2.length, d2 = an(t2.call(s2, s2 && s2.__data__, f2, r2)), p2 = d2.length, g2 = u2[f2] = new Array(p2), y2 = a2[f2] = new Array(p2);\n          e2(s2, l2, g2, y2, c2[f2] = new Array(h2), d2, n2);\n          for (var v2, _2, b2 = 0, m2 = 0; b2 < p2; ++b2)\n            if (v2 = g2[b2]) {\n              for (b2 >= m2 && (m2 = b2 + 1); !(_2 = y2[m2]) && ++m2 < p2; )\n                ;\n              v2._next = _2 || null;\n            }\n        }\n        return (a2 = new Vn(a2, r2))._enter = u2, a2._exit = c2, a2;\n      }, enter: function() {\n        return new Vn(this._enter || this._groups.map(tn), this._parents);\n      }, exit: function() {\n        return new Vn(this._exit || this._groups.map(tn), this._parents);\n      }, join: function(t2, n2, e2) {\n        var r2 = this.enter(), i2 = this, o2 = this.exit();\n        return \"function\" == typeof t2 ? (r2 = t2(r2)) && (r2 = r2.selection()) : r2 = r2.append(t2 + \"\"), null != n2 && (i2 = n2(i2)) && (i2 = i2.selection()), null == e2 ? o2.remove() : e2(o2), r2 && i2 ? r2.merge(i2).order() : i2;\n      }, merge: function(t2) {\n        for (var n2 = t2.selection ? t2.selection() : t2, e2 = this._groups, r2 = n2._groups, i2 = e2.length, o2 = r2.length, a2 = Math.min(i2, o2), u2 = new Array(i2), c2 = 0; c2 < a2; ++c2)\n          for (var f2, s2 = e2[c2], l2 = r2[c2], h2 = s2.length, d2 = u2[c2] = new Array(h2), p2 = 0; p2 < h2; ++p2)\n            (f2 = s2[p2] || l2[p2]) && (d2[p2] = f2);\n        for (; c2 < i2; ++c2)\n          u2[c2] = e2[c2];\n        return new Vn(u2, this._parents);\n      }, selection: function() {\n        return this;\n      }, order: function() {\n        for (var t2 = this._groups, n2 = -1, e2 = t2.length; ++n2 < e2; )\n          for (var r2, i2 = t2[n2], o2 = i2.length - 1, a2 = i2[o2]; --o2 >= 0; )\n            (r2 = i2[o2]) && (a2 && 4 ^ r2.compareDocumentPosition(a2) && a2.parentNode.insertBefore(r2, a2), a2 = r2);\n        return this;\n      }, sort: function(t2) {\n        function n2(n3, e3) {\n          return n3 && e3 ? t2(n3.__data__, e3.__data__) : !n3 - !e3;\n        }\n        t2 || (t2 = un);\n        for (var e2 = this._groups, r2 = e2.length, i2 = new Array(r2), o2 = 0; o2 < r2; ++o2) {\n          for (var a2, u2 = e2[o2], c2 = u2.length, f2 = i2[o2] = new Array(c2), s2 = 0; s2 < c2; ++s2)\n            (a2 = u2[s2]) && (f2[s2] = a2);\n          f2.sort(n2);\n        }\n        return new Vn(i2, this._parents).order();\n      }, call: function() {\n        var t2 = arguments[0];\n        return arguments[0] = this, t2.apply(null, arguments), this;\n      }, nodes: function() {\n        return Array.from(this);\n      }, node: function() {\n        for (var t2 = this._groups, n2 = 0, e2 = t2.length; n2 < e2; ++n2)\n          for (var r2 = t2[n2], i2 = 0, o2 = r2.length; i2 < o2; ++i2) {\n            var a2 = r2[i2];\n            if (a2)\n              return a2;\n          }\n        return null;\n      }, size: function() {\n        let t2 = 0;\n        for (const n2 of this)\n          ++t2;\n        return t2;\n      }, empty: function() {\n        return !this.node();\n      }, each: function(t2) {\n        for (var n2 = this._groups, e2 = 0, r2 = n2.length; e2 < r2; ++e2)\n          for (var i2, o2 = n2[e2], a2 = 0, u2 = o2.length; a2 < u2; ++a2)\n            (i2 = o2[a2]) && t2.call(i2, i2.__data__, a2, o2);\n        return this;\n      }, attr: function(t2, n2) {\n        var e2 = It(t2);\n        if (arguments.length < 2) {\n          var r2 = this.node();\n          return e2.local ? r2.getAttributeNS(e2.space, e2.local) : r2.getAttribute(e2);\n        }\n        return this.each((null == n2 ? e2.local ? fn : cn : \"function\" == typeof n2 ? e2.local ? dn : hn : e2.local ? ln : sn)(e2, n2));\n      }, style: function(t2, n2, e2) {\n        return arguments.length > 1 ? this.each((null == n2 ? gn : \"function\" == typeof n2 ? vn : yn)(t2, n2, null == e2 ? \"\" : e2)) : _n(this.node(), t2);\n      }, property: function(t2, n2) {\n        return arguments.length > 1 ? this.each((null == n2 ? bn : \"function\" == typeof n2 ? xn : mn)(t2, n2)) : this.node()[t2];\n      }, classed: function(t2, n2) {\n        var e2 = wn(t2 + \"\");\n        if (arguments.length < 2) {\n          for (var r2 = Mn(this.node()), i2 = -1, o2 = e2.length; ++i2 < o2; )\n            if (!r2.contains(e2[i2]))\n              return false;\n          return true;\n        }\n        return this.each((\"function\" == typeof n2 ? kn : n2 ? En : Nn)(e2, n2));\n      }, text: function(t2) {\n        return arguments.length ? this.each(null == t2 ? Cn : (\"function\" == typeof t2 ? zn : Pn)(t2)) : this.node().textContent;\n      }, html: function(t2) {\n        return arguments.length ? this.each(null == t2 ? $n : (\"function\" == typeof t2 ? Rn : Dn)(t2)) : this.node().innerHTML;\n      }, raise: function() {\n        return this.each(Fn);\n      }, lower: function() {\n        return this.each(qn);\n      }, append: function(t2) {\n        var n2 = \"function\" == typeof t2 ? t2 : Yt(t2);\n        return this.select(function() {\n          return this.appendChild(n2.apply(this, arguments));\n        });\n      }, insert: function(t2, n2) {\n        var e2 = \"function\" == typeof t2 ? t2 : Yt(t2), r2 = null == n2 ? Un : \"function\" == typeof n2 ? n2 : jt(n2);\n        return this.select(function() {\n          return this.insertBefore(e2.apply(this, arguments), r2.apply(this, arguments) || null);\n        });\n      }, remove: function() {\n        return this.each(In);\n      }, clone: function(t2) {\n        return this.select(t2 ? Bn : On);\n      }, datum: function(t2) {\n        return arguments.length ? this.property(\"__data__\", t2) : this.node().__data__;\n      }, on: function(t2, n2, e2) {\n        var r2, i2, o2 = function(t3) {\n          return t3.trim().split(/^|\\s+/).map(function(t4) {\n            var n3 = \"\", e3 = t4.indexOf(\".\");\n            return e3 >= 0 && (n3 = t4.slice(e3 + 1), t4 = t4.slice(0, e3)), { type: t4, name: n3 };\n          });\n        }(t2 + \"\"), a2 = o2.length;\n        if (!(arguments.length < 2)) {\n          for (u2 = n2 ? Ln : Yn, r2 = 0; r2 < a2; ++r2)\n            this.each(u2(o2[r2], n2, e2));\n          return this;\n        }\n        var u2 = this.node().__on;\n        if (u2) {\n          for (var c2, f2 = 0, s2 = u2.length; f2 < s2; ++f2)\n            for (r2 = 0, c2 = u2[f2]; r2 < a2; ++r2)\n              if ((i2 = o2[r2]).type === c2.type && i2.name === c2.name)\n                return c2.value;\n        }\n      }, dispatch: function(t2, n2) {\n        return this.each((\"function\" == typeof n2 ? Xn : Hn)(t2, n2));\n      }, [Symbol.iterator]: function* () {\n        for (var t2 = this._groups, n2 = 0, e2 = t2.length; n2 < e2; ++n2)\n          for (var r2, i2 = t2[n2], o2 = 0, a2 = i2.length; o2 < a2; ++o2)\n            (r2 = i2[o2]) && (yield r2);\n      } };\n      var Kn = 0;\n      function Qn() {\n        return new Jn();\n      }\n      function Jn() {\n        this._ = \"@\" + (++Kn).toString(36);\n      }\n      function te(t2) {\n        let n2;\n        for (; n2 = t2.sourceEvent; )\n          t2 = n2;\n        return t2;\n      }\n      function ne(t2, n2) {\n        if (t2 = te(t2), void 0 === n2 && (n2 = t2.currentTarget), n2) {\n          var e2 = n2.ownerSVGElement || n2;\n          if (e2.createSVGPoint) {\n            var r2 = e2.createSVGPoint();\n            return r2.x = t2.clientX, r2.y = t2.clientY, [(r2 = r2.matrixTransform(n2.getScreenCTM().inverse())).x, r2.y];\n          }\n          if (n2.getBoundingClientRect) {\n            var i2 = n2.getBoundingClientRect();\n            return [t2.clientX - i2.left - n2.clientLeft, t2.clientY - i2.top - n2.clientTop];\n          }\n        }\n        return [t2.pageX, t2.pageY];\n      }\n      Jn.prototype = Qn.prototype = { constructor: Jn, get: function(t2) {\n        for (var n2 = this._; !(n2 in t2); )\n          if (!(t2 = t2.parentNode))\n            return;\n        return t2[n2];\n      }, set: function(t2, n2) {\n        return t2[this._] = n2;\n      }, remove: function(t2) {\n        return this._ in t2 && delete t2[this._];\n      }, toString: function() {\n        return this._;\n      } };\n      const ee = { passive: false }, re = { capture: true, passive: false };\n      function ie(t2) {\n        t2.stopImmediatePropagation();\n      }\n      function oe(t2) {\n        t2.preventDefault(), t2.stopImmediatePropagation();\n      }\n      function ae(t2) {\n        var n2 = t2.document.documentElement, e2 = Zn(t2).on(\"dragstart.drag\", oe, re);\n        \"onselectstart\" in n2 ? e2.on(\"selectstart.drag\", oe, re) : (n2.__noselect = n2.style.MozUserSelect, n2.style.MozUserSelect = \"none\");\n      }\n      function ue(t2, n2) {\n        var e2 = t2.document.documentElement, r2 = Zn(t2).on(\"dragstart.drag\", null);\n        n2 && (r2.on(\"click.drag\", oe, re), setTimeout(function() {\n          r2.on(\"click.drag\", null);\n        }, 0)), \"onselectstart\" in e2 ? r2.on(\"selectstart.drag\", null) : (e2.style.MozUserSelect = e2.__noselect, delete e2.__noselect);\n      }\n      var ce = (t2) => () => t2;\n      function fe(t2, { sourceEvent: n2, subject: e2, target: r2, identifier: i2, active: o2, x: a2, y: u2, dx: c2, dy: f2, dispatch: s2 }) {\n        Object.defineProperties(this, { type: { value: t2, enumerable: true, configurable: true }, sourceEvent: { value: n2, enumerable: true, configurable: true }, subject: { value: e2, enumerable: true, configurable: true }, target: { value: r2, enumerable: true, configurable: true }, identifier: { value: i2, enumerable: true, configurable: true }, active: { value: o2, enumerable: true, configurable: true }, x: { value: a2, enumerable: true, configurable: true }, y: { value: u2, enumerable: true, configurable: true }, dx: { value: c2, enumerable: true, configurable: true }, dy: { value: f2, enumerable: true, configurable: true }, _: { value: s2 } });\n      }\n      function se(t2) {\n        return !t2.ctrlKey && !t2.button;\n      }\n      function le() {\n        return this.parentNode;\n      }\n      function he(t2, n2) {\n        return null == n2 ? { x: t2.x, y: t2.y } : n2;\n      }\n      function de() {\n        return navigator.maxTouchPoints || \"ontouchstart\" in this;\n      }\n      function pe(t2, n2, e2) {\n        t2.prototype = n2.prototype = e2, e2.constructor = t2;\n      }\n      function ge(t2, n2) {\n        var e2 = Object.create(t2.prototype);\n        for (var r2 in n2)\n          e2[r2] = n2[r2];\n        return e2;\n      }\n      function ye() {\n      }\n      fe.prototype.on = function() {\n        var t2 = this._.on.apply(this._, arguments);\n        return t2 === this._ ? this : t2;\n      };\n      var ve = 0.7, _e = 1 / ve, be = \"\\\\s*([+-]?\\\\d+)\\\\s*\", me = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\", xe = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\", we = /^#([0-9a-f]{3,8})$/, Me = new RegExp(`^rgb\\\\(${be},${be},${be}\\\\)$`), Te = new RegExp(`^rgb\\\\(${xe},${xe},${xe}\\\\)$`), Ae = new RegExp(`^rgba\\\\(${be},${be},${be},${me}\\\\)$`), Se = new RegExp(`^rgba\\\\(${xe},${xe},${xe},${me}\\\\)$`), Ee = new RegExp(`^hsl\\\\(${me},${xe},${xe}\\\\)$`), Ne = new RegExp(`^hsla\\\\(${me},${xe},${xe},${me}\\\\)$`), ke = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };\n      function Ce() {\n        return this.rgb().formatHex();\n      }\n      function Pe() {\n        return this.rgb().formatRgb();\n      }\n      function ze(t2) {\n        var n2, e2;\n        return t2 = (t2 + \"\").trim().toLowerCase(), (n2 = we.exec(t2)) ? (e2 = n2[1].length, n2 = parseInt(n2[1], 16), 6 === e2 ? $e(n2) : 3 === e2 ? new qe(n2 >> 8 & 15 | n2 >> 4 & 240, n2 >> 4 & 15 | 240 & n2, (15 & n2) << 4 | 15 & n2, 1) : 8 === e2 ? De(n2 >> 24 & 255, n2 >> 16 & 255, n2 >> 8 & 255, (255 & n2) / 255) : 4 === e2 ? De(n2 >> 12 & 15 | n2 >> 8 & 240, n2 >> 8 & 15 | n2 >> 4 & 240, n2 >> 4 & 15 | 240 & n2, ((15 & n2) << 4 | 15 & n2) / 255) : null) : (n2 = Me.exec(t2)) ? new qe(n2[1], n2[2], n2[3], 1) : (n2 = Te.exec(t2)) ? new qe(255 * n2[1] / 100, 255 * n2[2] / 100, 255 * n2[3] / 100, 1) : (n2 = Ae.exec(t2)) ? De(n2[1], n2[2], n2[3], n2[4]) : (n2 = Se.exec(t2)) ? De(255 * n2[1] / 100, 255 * n2[2] / 100, 255 * n2[3] / 100, n2[4]) : (n2 = Ee.exec(t2)) ? Le(n2[1], n2[2] / 100, n2[3] / 100, 1) : (n2 = Ne.exec(t2)) ? Le(n2[1], n2[2] / 100, n2[3] / 100, n2[4]) : ke.hasOwnProperty(t2) ? $e(ke[t2]) : \"transparent\" === t2 ? new qe(NaN, NaN, NaN, 0) : null;\n      }\n      function $e(t2) {\n        return new qe(t2 >> 16 & 255, t2 >> 8 & 255, 255 & t2, 1);\n      }\n      function De(t2, n2, e2, r2) {\n        return r2 <= 0 && (t2 = n2 = e2 = NaN), new qe(t2, n2, e2, r2);\n      }\n      function Re(t2) {\n        return t2 instanceof ye || (t2 = ze(t2)), t2 ? new qe((t2 = t2.rgb()).r, t2.g, t2.b, t2.opacity) : new qe();\n      }\n      function Fe(t2, n2, e2, r2) {\n        return 1 === arguments.length ? Re(t2) : new qe(t2, n2, e2, null == r2 ? 1 : r2);\n      }\n      function qe(t2, n2, e2, r2) {\n        this.r = +t2, this.g = +n2, this.b = +e2, this.opacity = +r2;\n      }\n      function Ue() {\n        return `#${Ye(this.r)}${Ye(this.g)}${Ye(this.b)}`;\n      }\n      function Ie() {\n        const t2 = Oe(this.opacity);\n        return `${1 === t2 ? \"rgb(\" : \"rgba(\"}${Be(this.r)}, ${Be(this.g)}, ${Be(this.b)}${1 === t2 ? \")\" : `, ${t2})`}`;\n      }\n      function Oe(t2) {\n        return isNaN(t2) ? 1 : Math.max(0, Math.min(1, t2));\n      }\n      function Be(t2) {\n        return Math.max(0, Math.min(255, Math.round(t2) || 0));\n      }\n      function Ye(t2) {\n        return ((t2 = Be(t2)) < 16 ? \"0\" : \"\") + t2.toString(16);\n      }\n      function Le(t2, n2, e2, r2) {\n        return r2 <= 0 ? t2 = n2 = e2 = NaN : e2 <= 0 || e2 >= 1 ? t2 = n2 = NaN : n2 <= 0 && (t2 = NaN), new Xe(t2, n2, e2, r2);\n      }\n      function je(t2) {\n        if (t2 instanceof Xe)\n          return new Xe(t2.h, t2.s, t2.l, t2.opacity);\n        if (t2 instanceof ye || (t2 = ze(t2)), !t2)\n          return new Xe();\n        if (t2 instanceof Xe)\n          return t2;\n        var n2 = (t2 = t2.rgb()).r / 255, e2 = t2.g / 255, r2 = t2.b / 255, i2 = Math.min(n2, e2, r2), o2 = Math.max(n2, e2, r2), a2 = NaN, u2 = o2 - i2, c2 = (o2 + i2) / 2;\n        return u2 ? (a2 = n2 === o2 ? (e2 - r2) / u2 + 6 * (e2 < r2) : e2 === o2 ? (r2 - n2) / u2 + 2 : (n2 - e2) / u2 + 4, u2 /= c2 < 0.5 ? o2 + i2 : 2 - o2 - i2, a2 *= 60) : u2 = c2 > 0 && c2 < 1 ? 0 : a2, new Xe(a2, u2, c2, t2.opacity);\n      }\n      function He(t2, n2, e2, r2) {\n        return 1 === arguments.length ? je(t2) : new Xe(t2, n2, e2, null == r2 ? 1 : r2);\n      }\n      function Xe(t2, n2, e2, r2) {\n        this.h = +t2, this.s = +n2, this.l = +e2, this.opacity = +r2;\n      }\n      function Ge(t2) {\n        return (t2 = (t2 || 0) % 360) < 0 ? t2 + 360 : t2;\n      }\n      function Ve(t2) {\n        return Math.max(0, Math.min(1, t2 || 0));\n      }\n      function We(t2, n2, e2) {\n        return 255 * (t2 < 60 ? n2 + (e2 - n2) * t2 / 60 : t2 < 180 ? e2 : t2 < 240 ? n2 + (e2 - n2) * (240 - t2) / 60 : n2);\n      }\n      pe(ye, ze, { copy(t2) {\n        return Object.assign(new this.constructor(), this, t2);\n      }, displayable() {\n        return this.rgb().displayable();\n      }, hex: Ce, formatHex: Ce, formatHex8: function() {\n        return this.rgb().formatHex8();\n      }, formatHsl: function() {\n        return je(this).formatHsl();\n      }, formatRgb: Pe, toString: Pe }), pe(qe, Fe, ge(ye, { brighter(t2) {\n        return t2 = null == t2 ? _e : Math.pow(_e, t2), new qe(this.r * t2, this.g * t2, this.b * t2, this.opacity);\n      }, darker(t2) {\n        return t2 = null == t2 ? ve : Math.pow(ve, t2), new qe(this.r * t2, this.g * t2, this.b * t2, this.opacity);\n      }, rgb() {\n        return this;\n      }, clamp() {\n        return new qe(Be(this.r), Be(this.g), Be(this.b), Oe(this.opacity));\n      }, displayable() {\n        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n      }, hex: Ue, formatHex: Ue, formatHex8: function() {\n        return `#${Ye(this.r)}${Ye(this.g)}${Ye(this.b)}${Ye(255 * (isNaN(this.opacity) ? 1 : this.opacity))}`;\n      }, formatRgb: Ie, toString: Ie })), pe(Xe, He, ge(ye, { brighter(t2) {\n        return t2 = null == t2 ? _e : Math.pow(_e, t2), new Xe(this.h, this.s, this.l * t2, this.opacity);\n      }, darker(t2) {\n        return t2 = null == t2 ? ve : Math.pow(ve, t2), new Xe(this.h, this.s, this.l * t2, this.opacity);\n      }, rgb() {\n        var t2 = this.h % 360 + 360 * (this.h < 0), n2 = isNaN(t2) || isNaN(this.s) ? 0 : this.s, e2 = this.l, r2 = e2 + (e2 < 0.5 ? e2 : 1 - e2) * n2, i2 = 2 * e2 - r2;\n        return new qe(We(t2 >= 240 ? t2 - 240 : t2 + 120, i2, r2), We(t2, i2, r2), We(t2 < 120 ? t2 + 240 : t2 - 120, i2, r2), this.opacity);\n      }, clamp() {\n        return new Xe(Ge(this.h), Ve(this.s), Ve(this.l), Oe(this.opacity));\n      }, displayable() {\n        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n      }, formatHsl() {\n        const t2 = Oe(this.opacity);\n        return `${1 === t2 ? \"hsl(\" : \"hsla(\"}${Ge(this.h)}, ${100 * Ve(this.s)}%, ${100 * Ve(this.l)}%${1 === t2 ? \")\" : `, ${t2})`}`;\n      } }));\n      const Ze = Math.PI / 180, Ke = 180 / Math.PI, Qe = 0.96422, Je = 1, tr = 0.82521, nr = 4 / 29, er = 6 / 29, rr = 3 * er * er, ir = er * er * er;\n      function or(t2) {\n        if (t2 instanceof ur)\n          return new ur(t2.l, t2.a, t2.b, t2.opacity);\n        if (t2 instanceof pr)\n          return gr(t2);\n        t2 instanceof qe || (t2 = Re(t2));\n        var n2, e2, r2 = lr(t2.r), i2 = lr(t2.g), o2 = lr(t2.b), a2 = cr((0.2225045 * r2 + 0.7168786 * i2 + 0.0606169 * o2) / Je);\n        return r2 === i2 && i2 === o2 ? n2 = e2 = a2 : (n2 = cr((0.4360747 * r2 + 0.3850649 * i2 + 0.1430804 * o2) / Qe), e2 = cr((0.0139322 * r2 + 0.0971045 * i2 + 0.7141733 * o2) / tr)), new ur(116 * a2 - 16, 500 * (n2 - a2), 200 * (a2 - e2), t2.opacity);\n      }\n      function ar(t2, n2, e2, r2) {\n        return 1 === arguments.length ? or(t2) : new ur(t2, n2, e2, null == r2 ? 1 : r2);\n      }\n      function ur(t2, n2, e2, r2) {\n        this.l = +t2, this.a = +n2, this.b = +e2, this.opacity = +r2;\n      }\n      function cr(t2) {\n        return t2 > ir ? Math.pow(t2, 1 / 3) : t2 / rr + nr;\n      }\n      function fr(t2) {\n        return t2 > er ? t2 * t2 * t2 : rr * (t2 - nr);\n      }\n      function sr(t2) {\n        return 255 * (t2 <= 31308e-7 ? 12.92 * t2 : 1.055 * Math.pow(t2, 1 / 2.4) - 0.055);\n      }\n      function lr(t2) {\n        return (t2 /= 255) <= 0.04045 ? t2 / 12.92 : Math.pow((t2 + 0.055) / 1.055, 2.4);\n      }\n      function hr(t2) {\n        if (t2 instanceof pr)\n          return new pr(t2.h, t2.c, t2.l, t2.opacity);\n        if (t2 instanceof ur || (t2 = or(t2)), 0 === t2.a && 0 === t2.b)\n          return new pr(NaN, 0 < t2.l && t2.l < 100 ? 0 : NaN, t2.l, t2.opacity);\n        var n2 = Math.atan2(t2.b, t2.a) * Ke;\n        return new pr(n2 < 0 ? n2 + 360 : n2, Math.sqrt(t2.a * t2.a + t2.b * t2.b), t2.l, t2.opacity);\n      }\n      function dr(t2, n2, e2, r2) {\n        return 1 === arguments.length ? hr(t2) : new pr(t2, n2, e2, null == r2 ? 1 : r2);\n      }\n      function pr(t2, n2, e2, r2) {\n        this.h = +t2, this.c = +n2, this.l = +e2, this.opacity = +r2;\n      }\n      function gr(t2) {\n        if (isNaN(t2.h))\n          return new ur(t2.l, 0, 0, t2.opacity);\n        var n2 = t2.h * Ze;\n        return new ur(t2.l, Math.cos(n2) * t2.c, Math.sin(n2) * t2.c, t2.opacity);\n      }\n      pe(ur, ar, ge(ye, { brighter(t2) {\n        return new ur(this.l + 18 * (null == t2 ? 1 : t2), this.a, this.b, this.opacity);\n      }, darker(t2) {\n        return new ur(this.l - 18 * (null == t2 ? 1 : t2), this.a, this.b, this.opacity);\n      }, rgb() {\n        var t2 = (this.l + 16) / 116, n2 = isNaN(this.a) ? t2 : t2 + this.a / 500, e2 = isNaN(this.b) ? t2 : t2 - this.b / 200;\n        return new qe(sr(3.1338561 * (n2 = Qe * fr(n2)) - 1.6168667 * (t2 = Je * fr(t2)) - 0.4906146 * (e2 = tr * fr(e2))), sr(-0.9787684 * n2 + 1.9161415 * t2 + 0.033454 * e2), sr(0.0719453 * n2 - 0.2289914 * t2 + 1.4052427 * e2), this.opacity);\n      } })), pe(pr, dr, ge(ye, { brighter(t2) {\n        return new pr(this.h, this.c, this.l + 18 * (null == t2 ? 1 : t2), this.opacity);\n      }, darker(t2) {\n        return new pr(this.h, this.c, this.l - 18 * (null == t2 ? 1 : t2), this.opacity);\n      }, rgb() {\n        return gr(this).rgb();\n      } }));\n      var yr = -0.14861, vr = 1.78277, _r = -0.29227, br = -0.90649, mr = 1.97294, xr = mr * br, wr = mr * vr, Mr = vr * _r - br * yr;\n      function Tr(t2, n2, e2, r2) {\n        return 1 === arguments.length ? function(t3) {\n          if (t3 instanceof Ar)\n            return new Ar(t3.h, t3.s, t3.l, t3.opacity);\n          t3 instanceof qe || (t3 = Re(t3));\n          var n3 = t3.r / 255, e3 = t3.g / 255, r3 = t3.b / 255, i2 = (Mr * r3 + xr * n3 - wr * e3) / (Mr + xr - wr), o2 = r3 - i2, a2 = (mr * (e3 - i2) - _r * o2) / br, u2 = Math.sqrt(a2 * a2 + o2 * o2) / (mr * i2 * (1 - i2)), c2 = u2 ? Math.atan2(a2, o2) * Ke - 120 : NaN;\n          return new Ar(c2 < 0 ? c2 + 360 : c2, u2, i2, t3.opacity);\n        }(t2) : new Ar(t2, n2, e2, null == r2 ? 1 : r2);\n      }\n      function Ar(t2, n2, e2, r2) {\n        this.h = +t2, this.s = +n2, this.l = +e2, this.opacity = +r2;\n      }\n      function Sr(t2, n2, e2, r2, i2) {\n        var o2 = t2 * t2, a2 = o2 * t2;\n        return ((1 - 3 * t2 + 3 * o2 - a2) * n2 + (4 - 6 * o2 + 3 * a2) * e2 + (1 + 3 * t2 + 3 * o2 - 3 * a2) * r2 + a2 * i2) / 6;\n      }\n      function Er(t2) {\n        var n2 = t2.length - 1;\n        return function(e2) {\n          var r2 = e2 <= 0 ? e2 = 0 : e2 >= 1 ? (e2 = 1, n2 - 1) : Math.floor(e2 * n2), i2 = t2[r2], o2 = t2[r2 + 1], a2 = r2 > 0 ? t2[r2 - 1] : 2 * i2 - o2, u2 = r2 < n2 - 1 ? t2[r2 + 2] : 2 * o2 - i2;\n          return Sr((e2 - r2 / n2) * n2, a2, i2, o2, u2);\n        };\n      }\n      function Nr(t2) {\n        var n2 = t2.length;\n        return function(e2) {\n          var r2 = Math.floor(((e2 %= 1) < 0 ? ++e2 : e2) * n2), i2 = t2[(r2 + n2 - 1) % n2], o2 = t2[r2 % n2], a2 = t2[(r2 + 1) % n2], u2 = t2[(r2 + 2) % n2];\n          return Sr((e2 - r2 / n2) * n2, i2, o2, a2, u2);\n        };\n      }\n      pe(Ar, Tr, ge(ye, { brighter(t2) {\n        return t2 = null == t2 ? _e : Math.pow(_e, t2), new Ar(this.h, this.s, this.l * t2, this.opacity);\n      }, darker(t2) {\n        return t2 = null == t2 ? ve : Math.pow(ve, t2), new Ar(this.h, this.s, this.l * t2, this.opacity);\n      }, rgb() {\n        var t2 = isNaN(this.h) ? 0 : (this.h + 120) * Ze, n2 = +this.l, e2 = isNaN(this.s) ? 0 : this.s * n2 * (1 - n2), r2 = Math.cos(t2), i2 = Math.sin(t2);\n        return new qe(255 * (n2 + e2 * (yr * r2 + vr * i2)), 255 * (n2 + e2 * (_r * r2 + br * i2)), 255 * (n2 + e2 * (mr * r2)), this.opacity);\n      } }));\n      var kr = (t2) => () => t2;\n      function Cr(t2, n2) {\n        return function(e2) {\n          return t2 + e2 * n2;\n        };\n      }\n      function Pr(t2, n2) {\n        var e2 = n2 - t2;\n        return e2 ? Cr(t2, e2 > 180 || e2 < -180 ? e2 - 360 * Math.round(e2 / 360) : e2) : kr(isNaN(t2) ? n2 : t2);\n      }\n      function zr(t2) {\n        return 1 == (t2 = +t2) ? $r : function(n2, e2) {\n          return e2 - n2 ? function(t3, n3, e3) {\n            return t3 = Math.pow(t3, e3), n3 = Math.pow(n3, e3) - t3, e3 = 1 / e3, function(r2) {\n              return Math.pow(t3 + r2 * n3, e3);\n            };\n          }(n2, e2, t2) : kr(isNaN(n2) ? e2 : n2);\n        };\n      }\n      function $r(t2, n2) {\n        var e2 = n2 - t2;\n        return e2 ? Cr(t2, e2) : kr(isNaN(t2) ? n2 : t2);\n      }\n      var Dr = function t2(n2) {\n        var e2 = zr(n2);\n        function r2(t3, n3) {\n          var r3 = e2((t3 = Fe(t3)).r, (n3 = Fe(n3)).r), i2 = e2(t3.g, n3.g), o2 = e2(t3.b, n3.b), a2 = $r(t3.opacity, n3.opacity);\n          return function(n4) {\n            return t3.r = r3(n4), t3.g = i2(n4), t3.b = o2(n4), t3.opacity = a2(n4), t3 + \"\";\n          };\n        }\n        return r2.gamma = t2, r2;\n      }(1);\n      function Rr(t2) {\n        return function(n2) {\n          var e2, r2, i2 = n2.length, o2 = new Array(i2), a2 = new Array(i2), u2 = new Array(i2);\n          for (e2 = 0; e2 < i2; ++e2)\n            r2 = Fe(n2[e2]), o2[e2] = r2.r || 0, a2[e2] = r2.g || 0, u2[e2] = r2.b || 0;\n          return o2 = t2(o2), a2 = t2(a2), u2 = t2(u2), r2.opacity = 1, function(t3) {\n            return r2.r = o2(t3), r2.g = a2(t3), r2.b = u2(t3), r2 + \"\";\n          };\n        };\n      }\n      var Fr = Rr(Er), qr = Rr(Nr);\n      function Ur(t2, n2) {\n        n2 || (n2 = []);\n        var e2, r2 = t2 ? Math.min(n2.length, t2.length) : 0, i2 = n2.slice();\n        return function(o2) {\n          for (e2 = 0; e2 < r2; ++e2)\n            i2[e2] = t2[e2] * (1 - o2) + n2[e2] * o2;\n          return i2;\n        };\n      }\n      function Ir(t2) {\n        return ArrayBuffer.isView(t2) && !(t2 instanceof DataView);\n      }\n      function Or(t2, n2) {\n        var e2, r2 = n2 ? n2.length : 0, i2 = t2 ? Math.min(r2, t2.length) : 0, o2 = new Array(i2), a2 = new Array(r2);\n        for (e2 = 0; e2 < i2; ++e2)\n          o2[e2] = Gr(t2[e2], n2[e2]);\n        for (; e2 < r2; ++e2)\n          a2[e2] = n2[e2];\n        return function(t3) {\n          for (e2 = 0; e2 < i2; ++e2)\n            a2[e2] = o2[e2](t3);\n          return a2;\n        };\n      }\n      function Br(t2, n2) {\n        var e2 = /* @__PURE__ */ new Date();\n        return t2 = +t2, n2 = +n2, function(r2) {\n          return e2.setTime(t2 * (1 - r2) + n2 * r2), e2;\n        };\n      }\n      function Yr(t2, n2) {\n        return t2 = +t2, n2 = +n2, function(e2) {\n          return t2 * (1 - e2) + n2 * e2;\n        };\n      }\n      function Lr(t2, n2) {\n        var e2, r2 = {}, i2 = {};\n        for (e2 in null !== t2 && \"object\" == typeof t2 || (t2 = {}), null !== n2 && \"object\" == typeof n2 || (n2 = {}), n2)\n          e2 in t2 ? r2[e2] = Gr(t2[e2], n2[e2]) : i2[e2] = n2[e2];\n        return function(t3) {\n          for (e2 in r2)\n            i2[e2] = r2[e2](t3);\n          return i2;\n        };\n      }\n      var jr = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, Hr = new RegExp(jr.source, \"g\");\n      function Xr(t2, n2) {\n        var e2, r2, i2, o2 = jr.lastIndex = Hr.lastIndex = 0, a2 = -1, u2 = [], c2 = [];\n        for (t2 += \"\", n2 += \"\"; (e2 = jr.exec(t2)) && (r2 = Hr.exec(n2)); )\n          (i2 = r2.index) > o2 && (i2 = n2.slice(o2, i2), u2[a2] ? u2[a2] += i2 : u2[++a2] = i2), (e2 = e2[0]) === (r2 = r2[0]) ? u2[a2] ? u2[a2] += r2 : u2[++a2] = r2 : (u2[++a2] = null, c2.push({ i: a2, x: Yr(e2, r2) })), o2 = Hr.lastIndex;\n        return o2 < n2.length && (i2 = n2.slice(o2), u2[a2] ? u2[a2] += i2 : u2[++a2] = i2), u2.length < 2 ? c2[0] ? /* @__PURE__ */ function(t3) {\n          return function(n3) {\n            return t3(n3) + \"\";\n          };\n        }(c2[0].x) : /* @__PURE__ */ function(t3) {\n          return function() {\n            return t3;\n          };\n        }(n2) : (n2 = c2.length, function(t3) {\n          for (var e3, r3 = 0; r3 < n2; ++r3)\n            u2[(e3 = c2[r3]).i] = e3.x(t3);\n          return u2.join(\"\");\n        });\n      }\n      function Gr(t2, n2) {\n        var e2, r2 = typeof n2;\n        return null == n2 || \"boolean\" === r2 ? kr(n2) : (\"number\" === r2 ? Yr : \"string\" === r2 ? (e2 = ze(n2)) ? (n2 = e2, Dr) : Xr : n2 instanceof ze ? Dr : n2 instanceof Date ? Br : Ir(n2) ? Ur : Array.isArray(n2) ? Or : \"function\" != typeof n2.valueOf && \"function\" != typeof n2.toString || isNaN(n2) ? Lr : Yr)(t2, n2);\n      }\n      function Vr(t2, n2) {\n        return t2 = +t2, n2 = +n2, function(e2) {\n          return Math.round(t2 * (1 - e2) + n2 * e2);\n        };\n      }\n      var Wr, Zr = 180 / Math.PI, Kr = { translateX: 0, translateY: 0, rotate: 0, skewX: 0, scaleX: 1, scaleY: 1 };\n      function Qr(t2, n2, e2, r2, i2, o2) {\n        var a2, u2, c2;\n        return (a2 = Math.sqrt(t2 * t2 + n2 * n2)) && (t2 /= a2, n2 /= a2), (c2 = t2 * e2 + n2 * r2) && (e2 -= t2 * c2, r2 -= n2 * c2), (u2 = Math.sqrt(e2 * e2 + r2 * r2)) && (e2 /= u2, r2 /= u2, c2 /= u2), t2 * r2 < n2 * e2 && (t2 = -t2, n2 = -n2, c2 = -c2, a2 = -a2), { translateX: i2, translateY: o2, rotate: Math.atan2(n2, t2) * Zr, skewX: Math.atan(c2) * Zr, scaleX: a2, scaleY: u2 };\n      }\n      function Jr(t2, n2, e2, r2) {\n        function i2(t3) {\n          return t3.length ? t3.pop() + \" \" : \"\";\n        }\n        return function(o2, a2) {\n          var u2 = [], c2 = [];\n          return o2 = t2(o2), a2 = t2(a2), function(t3, r3, i3, o3, a3, u3) {\n            if (t3 !== i3 || r3 !== o3) {\n              var c3 = a3.push(\"translate(\", null, n2, null, e2);\n              u3.push({ i: c3 - 4, x: Yr(t3, i3) }, { i: c3 - 2, x: Yr(r3, o3) });\n            } else\n              (i3 || o3) && a3.push(\"translate(\" + i3 + n2 + o3 + e2);\n          }(o2.translateX, o2.translateY, a2.translateX, a2.translateY, u2, c2), function(t3, n3, e3, o3) {\n            t3 !== n3 ? (t3 - n3 > 180 ? n3 += 360 : n3 - t3 > 180 && (t3 += 360), o3.push({ i: e3.push(i2(e3) + \"rotate(\", null, r2) - 2, x: Yr(t3, n3) })) : n3 && e3.push(i2(e3) + \"rotate(\" + n3 + r2);\n          }(o2.rotate, a2.rotate, u2, c2), function(t3, n3, e3, o3) {\n            t3 !== n3 ? o3.push({ i: e3.push(i2(e3) + \"skewX(\", null, r2) - 2, x: Yr(t3, n3) }) : n3 && e3.push(i2(e3) + \"skewX(\" + n3 + r2);\n          }(o2.skewX, a2.skewX, u2, c2), function(t3, n3, e3, r3, o3, a3) {\n            if (t3 !== e3 || n3 !== r3) {\n              var u3 = o3.push(i2(o3) + \"scale(\", null, \",\", null, \")\");\n              a3.push({ i: u3 - 4, x: Yr(t3, e3) }, { i: u3 - 2, x: Yr(n3, r3) });\n            } else\n              1 === e3 && 1 === r3 || o3.push(i2(o3) + \"scale(\" + e3 + \",\" + r3 + \")\");\n          }(o2.scaleX, o2.scaleY, a2.scaleX, a2.scaleY, u2, c2), o2 = a2 = null, function(t3) {\n            for (var n3, e3 = -1, r3 = c2.length; ++e3 < r3; )\n              u2[(n3 = c2[e3]).i] = n3.x(t3);\n            return u2.join(\"\");\n          };\n        };\n      }\n      var ti = Jr(function(t2) {\n        const n2 = new (\"function\" == typeof DOMMatrix ? DOMMatrix : WebKitCSSMatrix)(t2 + \"\");\n        return n2.isIdentity ? Kr : Qr(n2.a, n2.b, n2.c, n2.d, n2.e, n2.f);\n      }, \"px, \", \"px)\", \"deg)\"), ni = Jr(function(t2) {\n        return null == t2 ? Kr : (Wr || (Wr = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")), Wr.setAttribute(\"transform\", t2), (t2 = Wr.transform.baseVal.consolidate()) ? Qr((t2 = t2.matrix).a, t2.b, t2.c, t2.d, t2.e, t2.f) : Kr);\n      }, \", \", \")\", \")\");\n      function ei(t2) {\n        return ((t2 = Math.exp(t2)) + 1 / t2) / 2;\n      }\n      var ri = function t2(n2, e2, r2) {\n        function i2(t3, i3) {\n          var o2, a2, u2 = t3[0], c2 = t3[1], f2 = t3[2], s2 = i3[0], l2 = i3[1], h2 = i3[2], d2 = s2 - u2, p2 = l2 - c2, g2 = d2 * d2 + p2 * p2;\n          if (g2 < 1e-12)\n            a2 = Math.log(h2 / f2) / n2, o2 = function(t4) {\n              return [u2 + t4 * d2, c2 + t4 * p2, f2 * Math.exp(n2 * t4 * a2)];\n            };\n          else {\n            var y2 = Math.sqrt(g2), v2 = (h2 * h2 - f2 * f2 + r2 * g2) / (2 * f2 * e2 * y2), _2 = (h2 * h2 - f2 * f2 - r2 * g2) / (2 * h2 * e2 * y2), b2 = Math.log(Math.sqrt(v2 * v2 + 1) - v2), m2 = Math.log(Math.sqrt(_2 * _2 + 1) - _2);\n            a2 = (m2 - b2) / n2, o2 = function(t4) {\n              var r3 = t4 * a2, i4 = ei(b2), o3 = f2 / (e2 * y2) * (i4 * function(t5) {\n                return ((t5 = Math.exp(2 * t5)) - 1) / (t5 + 1);\n              }(n2 * r3 + b2) - function(t5) {\n                return ((t5 = Math.exp(t5)) - 1 / t5) / 2;\n              }(b2));\n              return [u2 + o3 * d2, c2 + o3 * p2, f2 * i4 / ei(n2 * r3 + b2)];\n            };\n          }\n          return o2.duration = 1e3 * a2 * n2 / Math.SQRT2, o2;\n        }\n        return i2.rho = function(n3) {\n          var e3 = Math.max(1e-3, +n3), r3 = e3 * e3;\n          return t2(e3, r3, r3 * r3);\n        }, i2;\n      }(Math.SQRT2, 2, 4);\n      function ii(t2) {\n        return function(n2, e2) {\n          var r2 = t2((n2 = He(n2)).h, (e2 = He(e2)).h), i2 = $r(n2.s, e2.s), o2 = $r(n2.l, e2.l), a2 = $r(n2.opacity, e2.opacity);\n          return function(t3) {\n            return n2.h = r2(t3), n2.s = i2(t3), n2.l = o2(t3), n2.opacity = a2(t3), n2 + \"\";\n          };\n        };\n      }\n      var oi = ii(Pr), ai = ii($r);\n      function ui(t2) {\n        return function(n2, e2) {\n          var r2 = t2((n2 = dr(n2)).h, (e2 = dr(e2)).h), i2 = $r(n2.c, e2.c), o2 = $r(n2.l, e2.l), a2 = $r(n2.opacity, e2.opacity);\n          return function(t3) {\n            return n2.h = r2(t3), n2.c = i2(t3), n2.l = o2(t3), n2.opacity = a2(t3), n2 + \"\";\n          };\n        };\n      }\n      var ci = ui(Pr), fi = ui($r);\n      function si(t2) {\n        return function n2(e2) {\n          function r2(n3, r3) {\n            var i2 = t2((n3 = Tr(n3)).h, (r3 = Tr(r3)).h), o2 = $r(n3.s, r3.s), a2 = $r(n3.l, r3.l), u2 = $r(n3.opacity, r3.opacity);\n            return function(t3) {\n              return n3.h = i2(t3), n3.s = o2(t3), n3.l = a2(Math.pow(t3, e2)), n3.opacity = u2(t3), n3 + \"\";\n            };\n          }\n          return e2 = +e2, r2.gamma = n2, r2;\n        }(1);\n      }\n      var li = si(Pr), hi = si($r);\n      function di(t2, n2) {\n        void 0 === n2 && (n2 = t2, t2 = Gr);\n        for (var e2 = 0, r2 = n2.length - 1, i2 = n2[0], o2 = new Array(r2 < 0 ? 0 : r2); e2 < r2; )\n          o2[e2] = t2(i2, i2 = n2[++e2]);\n        return function(t3) {\n          var n3 = Math.max(0, Math.min(r2 - 1, Math.floor(t3 *= r2)));\n          return o2[n3](t3 - n3);\n        };\n      }\n      var pi, gi, yi = 0, vi = 0, _i = 0, bi = 1e3, mi = 0, xi = 0, wi = 0, Mi = \"object\" == typeof performance && performance.now ? performance : Date, Ti = \"object\" == typeof window && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(t2) {\n        setTimeout(t2, 17);\n      };\n      function Ai() {\n        return xi || (Ti(Si), xi = Mi.now() + wi);\n      }\n      function Si() {\n        xi = 0;\n      }\n      function Ei() {\n        this._call = this._time = this._next = null;\n      }\n      function Ni(t2, n2, e2) {\n        var r2 = new Ei();\n        return r2.restart(t2, n2, e2), r2;\n      }\n      function ki() {\n        Ai(), ++yi;\n        for (var t2, n2 = pi; n2; )\n          (t2 = xi - n2._time) >= 0 && n2._call.call(void 0, t2), n2 = n2._next;\n        --yi;\n      }\n      function Ci() {\n        xi = (mi = Mi.now()) + wi, yi = vi = 0;\n        try {\n          ki();\n        } finally {\n          yi = 0, function() {\n            var t2, n2, e2 = pi, r2 = 1 / 0;\n            for (; e2; )\n              e2._call ? (r2 > e2._time && (r2 = e2._time), t2 = e2, e2 = e2._next) : (n2 = e2._next, e2._next = null, e2 = t2 ? t2._next = n2 : pi = n2);\n            gi = t2, zi(r2);\n          }(), xi = 0;\n        }\n      }\n      function Pi() {\n        var t2 = Mi.now(), n2 = t2 - mi;\n        n2 > bi && (wi -= n2, mi = t2);\n      }\n      function zi(t2) {\n        yi || (vi && (vi = clearTimeout(vi)), t2 - xi > 24 ? (t2 < 1 / 0 && (vi = setTimeout(Ci, t2 - Mi.now() - wi)), _i && (_i = clearInterval(_i))) : (_i || (mi = Mi.now(), _i = setInterval(Pi, bi)), yi = 1, Ti(Ci)));\n      }\n      function $i(t2, n2, e2) {\n        var r2 = new Ei();\n        return n2 = null == n2 ? 0 : +n2, r2.restart((e3) => {\n          r2.stop(), t2(e3 + n2);\n        }, n2, e2), r2;\n      }\n      Ei.prototype = Ni.prototype = { constructor: Ei, restart: function(t2, n2, e2) {\n        if (\"function\" != typeof t2)\n          throw new TypeError(\"callback is not a function\");\n        e2 = (null == e2 ? Ai() : +e2) + (null == n2 ? 0 : +n2), this._next || gi === this || (gi ? gi._next = this : pi = this, gi = this), this._call = t2, this._time = e2, zi();\n      }, stop: function() {\n        this._call && (this._call = null, this._time = 1 / 0, zi());\n      } };\n      var Di = $t(\"start\", \"end\", \"cancel\", \"interrupt\"), Ri = [], Fi = 0, qi = 1, Ui = 2, Ii = 3, Oi = 4, Bi = 5, Yi = 6;\n      function Li(t2, n2, e2, r2, i2, o2) {\n        var a2 = t2.__transition;\n        if (a2) {\n          if (e2 in a2)\n            return;\n        } else\n          t2.__transition = {};\n        !function(t3, n3, e3) {\n          var r3, i3 = t3.__transition;\n          function o3(t4) {\n            e3.state = qi, e3.timer.restart(a3, e3.delay, e3.time), e3.delay <= t4 && a3(t4 - e3.delay);\n          }\n          function a3(o4) {\n            var f2, s2, l2, h2;\n            if (e3.state !== qi)\n              return c2();\n            for (f2 in i3)\n              if ((h2 = i3[f2]).name === e3.name) {\n                if (h2.state === Ii)\n                  return $i(a3);\n                h2.state === Oi ? (h2.state = Yi, h2.timer.stop(), h2.on.call(\"interrupt\", t3, t3.__data__, h2.index, h2.group), delete i3[f2]) : +f2 < n3 && (h2.state = Yi, h2.timer.stop(), h2.on.call(\"cancel\", t3, t3.__data__, h2.index, h2.group), delete i3[f2]);\n              }\n            if ($i(function() {\n              e3.state === Ii && (e3.state = Oi, e3.timer.restart(u2, e3.delay, e3.time), u2(o4));\n            }), e3.state = Ui, e3.on.call(\"start\", t3, t3.__data__, e3.index, e3.group), e3.state === Ui) {\n              for (e3.state = Ii, r3 = new Array(l2 = e3.tween.length), f2 = 0, s2 = -1; f2 < l2; ++f2)\n                (h2 = e3.tween[f2].value.call(t3, t3.__data__, e3.index, e3.group)) && (r3[++s2] = h2);\n              r3.length = s2 + 1;\n            }\n          }\n          function u2(n4) {\n            for (var i4 = n4 < e3.duration ? e3.ease.call(null, n4 / e3.duration) : (e3.timer.restart(c2), e3.state = Bi, 1), o4 = -1, a4 = r3.length; ++o4 < a4; )\n              r3[o4].call(t3, i4);\n            e3.state === Bi && (e3.on.call(\"end\", t3, t3.__data__, e3.index, e3.group), c2());\n          }\n          function c2() {\n            for (var r4 in e3.state = Yi, e3.timer.stop(), delete i3[n3], i3)\n              return;\n            delete t3.__transition;\n          }\n          i3[n3] = e3, e3.timer = Ni(o3, 0, e3.time);\n        }(t2, e2, { name: n2, index: r2, group: i2, on: Di, tween: Ri, time: o2.time, delay: o2.delay, duration: o2.duration, ease: o2.ease, timer: null, state: Fi });\n      }\n      function ji(t2, n2) {\n        var e2 = Xi(t2, n2);\n        if (e2.state > Fi)\n          throw new Error(\"too late; already scheduled\");\n        return e2;\n      }\n      function Hi(t2, n2) {\n        var e2 = Xi(t2, n2);\n        if (e2.state > Ii)\n          throw new Error(\"too late; already running\");\n        return e2;\n      }\n      function Xi(t2, n2) {\n        var e2 = t2.__transition;\n        if (!e2 || !(e2 = e2[n2]))\n          throw new Error(\"transition not found\");\n        return e2;\n      }\n      function Gi(t2, n2) {\n        var e2, r2, i2, o2 = t2.__transition, a2 = true;\n        if (o2) {\n          for (i2 in n2 = null == n2 ? null : n2 + \"\", o2)\n            (e2 = o2[i2]).name === n2 ? (r2 = e2.state > Ui && e2.state < Bi, e2.state = Yi, e2.timer.stop(), e2.on.call(r2 ? \"interrupt\" : \"cancel\", t2, t2.__data__, e2.index, e2.group), delete o2[i2]) : a2 = false;\n          a2 && delete t2.__transition;\n        }\n      }\n      function Vi(t2, n2) {\n        var e2, r2;\n        return function() {\n          var i2 = Hi(this, t2), o2 = i2.tween;\n          if (o2 !== e2) {\n            for (var a2 = 0, u2 = (r2 = e2 = o2).length; a2 < u2; ++a2)\n              if (r2[a2].name === n2) {\n                (r2 = r2.slice()).splice(a2, 1);\n                break;\n              }\n          }\n          i2.tween = r2;\n        };\n      }\n      function Wi(t2, n2, e2) {\n        var r2, i2;\n        if (\"function\" != typeof e2)\n          throw new Error();\n        return function() {\n          var o2 = Hi(this, t2), a2 = o2.tween;\n          if (a2 !== r2) {\n            i2 = (r2 = a2).slice();\n            for (var u2 = { name: n2, value: e2 }, c2 = 0, f2 = i2.length; c2 < f2; ++c2)\n              if (i2[c2].name === n2) {\n                i2[c2] = u2;\n                break;\n              }\n            c2 === f2 && i2.push(u2);\n          }\n          o2.tween = i2;\n        };\n      }\n      function Zi(t2, n2, e2) {\n        var r2 = t2._id;\n        return t2.each(function() {\n          var t3 = Hi(this, r2);\n          (t3.value || (t3.value = {}))[n2] = e2.apply(this, arguments);\n        }), function(t3) {\n          return Xi(t3, r2).value[n2];\n        };\n      }\n      function Ki(t2, n2) {\n        var e2;\n        return (\"number\" == typeof n2 ? Yr : n2 instanceof ze ? Dr : (e2 = ze(n2)) ? (n2 = e2, Dr) : Xr)(t2, n2);\n      }\n      function Qi(t2) {\n        return function() {\n          this.removeAttribute(t2);\n        };\n      }\n      function Ji(t2) {\n        return function() {\n          this.removeAttributeNS(t2.space, t2.local);\n        };\n      }\n      function to(t2, n2, e2) {\n        var r2, i2, o2 = e2 + \"\";\n        return function() {\n          var a2 = this.getAttribute(t2);\n          return a2 === o2 ? null : a2 === r2 ? i2 : i2 = n2(r2 = a2, e2);\n        };\n      }\n      function no(t2, n2, e2) {\n        var r2, i2, o2 = e2 + \"\";\n        return function() {\n          var a2 = this.getAttributeNS(t2.space, t2.local);\n          return a2 === o2 ? null : a2 === r2 ? i2 : i2 = n2(r2 = a2, e2);\n        };\n      }\n      function eo(t2, n2, e2) {\n        var r2, i2, o2;\n        return function() {\n          var a2, u2, c2 = e2(this);\n          if (null != c2)\n            return (a2 = this.getAttribute(t2)) === (u2 = c2 + \"\") ? null : a2 === r2 && u2 === i2 ? o2 : (i2 = u2, o2 = n2(r2 = a2, c2));\n          this.removeAttribute(t2);\n        };\n      }\n      function ro(t2, n2, e2) {\n        var r2, i2, o2;\n        return function() {\n          var a2, u2, c2 = e2(this);\n          if (null != c2)\n            return (a2 = this.getAttributeNS(t2.space, t2.local)) === (u2 = c2 + \"\") ? null : a2 === r2 && u2 === i2 ? o2 : (i2 = u2, o2 = n2(r2 = a2, c2));\n          this.removeAttributeNS(t2.space, t2.local);\n        };\n      }\n      function io(t2, n2) {\n        var e2, r2;\n        function i2() {\n          var i3 = n2.apply(this, arguments);\n          return i3 !== r2 && (e2 = (r2 = i3) && /* @__PURE__ */ function(t3, n3) {\n            return function(e3) {\n              this.setAttributeNS(t3.space, t3.local, n3.call(this, e3));\n            };\n          }(t2, i3)), e2;\n        }\n        return i2._value = n2, i2;\n      }\n      function oo(t2, n2) {\n        var e2, r2;\n        function i2() {\n          var i3 = n2.apply(this, arguments);\n          return i3 !== r2 && (e2 = (r2 = i3) && /* @__PURE__ */ function(t3, n3) {\n            return function(e3) {\n              this.setAttribute(t3, n3.call(this, e3));\n            };\n          }(t2, i3)), e2;\n        }\n        return i2._value = n2, i2;\n      }\n      function ao(t2, n2) {\n        return function() {\n          ji(this, t2).delay = +n2.apply(this, arguments);\n        };\n      }\n      function uo(t2, n2) {\n        return n2 = +n2, function() {\n          ji(this, t2).delay = n2;\n        };\n      }\n      function co(t2, n2) {\n        return function() {\n          Hi(this, t2).duration = +n2.apply(this, arguments);\n        };\n      }\n      function fo(t2, n2) {\n        return n2 = +n2, function() {\n          Hi(this, t2).duration = n2;\n        };\n      }\n      var so = Wn.prototype.constructor;\n      function lo(t2) {\n        return function() {\n          this.style.removeProperty(t2);\n        };\n      }\n      var ho = 0;\n      function po(t2, n2, e2, r2) {\n        this._groups = t2, this._parents = n2, this._name = e2, this._id = r2;\n      }\n      function go(t2) {\n        return Wn().transition(t2);\n      }\n      function yo() {\n        return ++ho;\n      }\n      var vo = Wn.prototype;\n      po.prototype = go.prototype = { constructor: po, select: function(t2) {\n        var n2 = this._name, e2 = this._id;\n        \"function\" != typeof t2 && (t2 = jt(t2));\n        for (var r2 = this._groups, i2 = r2.length, o2 = new Array(i2), a2 = 0; a2 < i2; ++a2)\n          for (var u2, c2, f2 = r2[a2], s2 = f2.length, l2 = o2[a2] = new Array(s2), h2 = 0; h2 < s2; ++h2)\n            (u2 = f2[h2]) && (c2 = t2.call(u2, u2.__data__, h2, f2)) && (\"__data__\" in u2 && (c2.__data__ = u2.__data__), l2[h2] = c2, Li(l2[h2], n2, e2, h2, l2, Xi(u2, e2)));\n        return new po(o2, this._parents, n2, e2);\n      }, selectAll: function(t2) {\n        var n2 = this._name, e2 = this._id;\n        \"function\" != typeof t2 && (t2 = Gt(t2));\n        for (var r2 = this._groups, i2 = r2.length, o2 = [], a2 = [], u2 = 0; u2 < i2; ++u2)\n          for (var c2, f2 = r2[u2], s2 = f2.length, l2 = 0; l2 < s2; ++l2)\n            if (c2 = f2[l2]) {\n              for (var h2, d2 = t2.call(c2, c2.__data__, l2, f2), p2 = Xi(c2, e2), g2 = 0, y2 = d2.length; g2 < y2; ++g2)\n                (h2 = d2[g2]) && Li(h2, n2, e2, g2, d2, p2);\n              o2.push(d2), a2.push(c2);\n            }\n        return new po(o2, a2, n2, e2);\n      }, selectChild: vo.selectChild, selectChildren: vo.selectChildren, filter: function(t2) {\n        \"function\" != typeof t2 && (t2 = Vt(t2));\n        for (var n2 = this._groups, e2 = n2.length, r2 = new Array(e2), i2 = 0; i2 < e2; ++i2)\n          for (var o2, a2 = n2[i2], u2 = a2.length, c2 = r2[i2] = [], f2 = 0; f2 < u2; ++f2)\n            (o2 = a2[f2]) && t2.call(o2, o2.__data__, f2, a2) && c2.push(o2);\n        return new po(r2, this._parents, this._name, this._id);\n      }, merge: function(t2) {\n        if (t2._id !== this._id)\n          throw new Error();\n        for (var n2 = this._groups, e2 = t2._groups, r2 = n2.length, i2 = e2.length, o2 = Math.min(r2, i2), a2 = new Array(r2), u2 = 0; u2 < o2; ++u2)\n          for (var c2, f2 = n2[u2], s2 = e2[u2], l2 = f2.length, h2 = a2[u2] = new Array(l2), d2 = 0; d2 < l2; ++d2)\n            (c2 = f2[d2] || s2[d2]) && (h2[d2] = c2);\n        for (; u2 < r2; ++u2)\n          a2[u2] = n2[u2];\n        return new po(a2, this._parents, this._name, this._id);\n      }, selection: function() {\n        return new so(this._groups, this._parents);\n      }, transition: function() {\n        for (var t2 = this._name, n2 = this._id, e2 = yo(), r2 = this._groups, i2 = r2.length, o2 = 0; o2 < i2; ++o2)\n          for (var a2, u2 = r2[o2], c2 = u2.length, f2 = 0; f2 < c2; ++f2)\n            if (a2 = u2[f2]) {\n              var s2 = Xi(a2, n2);\n              Li(a2, t2, e2, f2, u2, { time: s2.time + s2.delay + s2.duration, delay: 0, duration: s2.duration, ease: s2.ease });\n            }\n        return new po(r2, this._parents, t2, e2);\n      }, call: vo.call, nodes: vo.nodes, node: vo.node, size: vo.size, empty: vo.empty, each: vo.each, on: function(t2, n2) {\n        var e2 = this._id;\n        return arguments.length < 2 ? Xi(this.node(), e2).on.on(t2) : this.each(function(t3, n3, e3) {\n          var r2, i2, o2 = function(t4) {\n            return (t4 + \"\").trim().split(/^|\\s+/).every(function(t5) {\n              var n4 = t5.indexOf(\".\");\n              return n4 >= 0 && (t5 = t5.slice(0, n4)), !t5 || \"start\" === t5;\n            });\n          }(n3) ? ji : Hi;\n          return function() {\n            var a2 = o2(this, t3), u2 = a2.on;\n            u2 !== r2 && (i2 = (r2 = u2).copy()).on(n3, e3), a2.on = i2;\n          };\n        }(e2, t2, n2));\n      }, attr: function(t2, n2) {\n        var e2 = It(t2), r2 = \"transform\" === e2 ? ni : Ki;\n        return this.attrTween(t2, \"function\" == typeof n2 ? (e2.local ? ro : eo)(e2, r2, Zi(this, \"attr.\" + t2, n2)) : null == n2 ? (e2.local ? Ji : Qi)(e2) : (e2.local ? no : to)(e2, r2, n2));\n      }, attrTween: function(t2, n2) {\n        var e2 = \"attr.\" + t2;\n        if (arguments.length < 2)\n          return (e2 = this.tween(e2)) && e2._value;\n        if (null == n2)\n          return this.tween(e2, null);\n        if (\"function\" != typeof n2)\n          throw new Error();\n        var r2 = It(t2);\n        return this.tween(e2, (r2.local ? io : oo)(r2, n2));\n      }, style: function(t2, n2, e2) {\n        var r2 = \"transform\" == (t2 += \"\") ? ti : Ki;\n        return null == n2 ? this.styleTween(t2, /* @__PURE__ */ function(t3, n3) {\n          var e3, r3, i2;\n          return function() {\n            var o2 = _n(this, t3), a2 = (this.style.removeProperty(t3), _n(this, t3));\n            return o2 === a2 ? null : o2 === e3 && a2 === r3 ? i2 : i2 = n3(e3 = o2, r3 = a2);\n          };\n        }(t2, r2)).on(\"end.style.\" + t2, lo(t2)) : \"function\" == typeof n2 ? this.styleTween(t2, /* @__PURE__ */ function(t3, n3, e3) {\n          var r3, i2, o2;\n          return function() {\n            var a2 = _n(this, t3), u2 = e3(this), c2 = u2 + \"\";\n            return null == u2 && (this.style.removeProperty(t3), c2 = u2 = _n(this, t3)), a2 === c2 ? null : a2 === r3 && c2 === i2 ? o2 : (i2 = c2, o2 = n3(r3 = a2, u2));\n          };\n        }(t2, r2, Zi(this, \"style.\" + t2, n2))).each(function(t3, n3) {\n          var e3, r3, i2, o2, a2 = \"style.\" + n3, u2 = \"end.\" + a2;\n          return function() {\n            var c2 = Hi(this, t3), f2 = c2.on, s2 = null == c2.value[a2] ? o2 || (o2 = lo(n3)) : void 0;\n            f2 === e3 && i2 === s2 || (r3 = (e3 = f2).copy()).on(u2, i2 = s2), c2.on = r3;\n          };\n        }(this._id, t2)) : this.styleTween(t2, function(t3, n3, e3) {\n          var r3, i2, o2 = e3 + \"\";\n          return function() {\n            var a2 = _n(this, t3);\n            return a2 === o2 ? null : a2 === r3 ? i2 : i2 = n3(r3 = a2, e3);\n          };\n        }(t2, r2, n2), e2).on(\"end.style.\" + t2, null);\n      }, styleTween: function(t2, n2, e2) {\n        var r2 = \"style.\" + (t2 += \"\");\n        if (arguments.length < 2)\n          return (r2 = this.tween(r2)) && r2._value;\n        if (null == n2)\n          return this.tween(r2, null);\n        if (\"function\" != typeof n2)\n          throw new Error();\n        return this.tween(r2, function(t3, n3, e3) {\n          var r3, i2;\n          function o2() {\n            var o3 = n3.apply(this, arguments);\n            return o3 !== i2 && (r3 = (i2 = o3) && /* @__PURE__ */ function(t4, n4, e4) {\n              return function(r4) {\n                this.style.setProperty(t4, n4.call(this, r4), e4);\n              };\n            }(t3, o3, e3)), r3;\n          }\n          return o2._value = n3, o2;\n        }(t2, n2, null == e2 ? \"\" : e2));\n      }, text: function(t2) {\n        return this.tween(\"text\", \"function\" == typeof t2 ? /* @__PURE__ */ function(t3) {\n          return function() {\n            var n2 = t3(this);\n            this.textContent = null == n2 ? \"\" : n2;\n          };\n        }(Zi(this, \"text\", t2)) : /* @__PURE__ */ function(t3) {\n          return function() {\n            this.textContent = t3;\n          };\n        }(null == t2 ? \"\" : t2 + \"\"));\n      }, textTween: function(t2) {\n        var n2 = \"text\";\n        if (arguments.length < 1)\n          return (n2 = this.tween(n2)) && n2._value;\n        if (null == t2)\n          return this.tween(n2, null);\n        if (\"function\" != typeof t2)\n          throw new Error();\n        return this.tween(n2, function(t3) {\n          var n3, e2;\n          function r2() {\n            var r3 = t3.apply(this, arguments);\n            return r3 !== e2 && (n3 = (e2 = r3) && /* @__PURE__ */ function(t4) {\n              return function(n4) {\n                this.textContent = t4.call(this, n4);\n              };\n            }(r3)), n3;\n          }\n          return r2._value = t3, r2;\n        }(t2));\n      }, remove: function() {\n        return this.on(\"end.remove\", /* @__PURE__ */ function(t2) {\n          return function() {\n            var n2 = this.parentNode;\n            for (var e2 in this.__transition)\n              if (+e2 !== t2)\n                return;\n            n2 && n2.removeChild(this);\n          };\n        }(this._id));\n      }, tween: function(t2, n2) {\n        var e2 = this._id;\n        if (t2 += \"\", arguments.length < 2) {\n          for (var r2, i2 = Xi(this.node(), e2).tween, o2 = 0, a2 = i2.length; o2 < a2; ++o2)\n            if ((r2 = i2[o2]).name === t2)\n              return r2.value;\n          return null;\n        }\n        return this.each((null == n2 ? Vi : Wi)(e2, t2, n2));\n      }, delay: function(t2) {\n        var n2 = this._id;\n        return arguments.length ? this.each((\"function\" == typeof t2 ? ao : uo)(n2, t2)) : Xi(this.node(), n2).delay;\n      }, duration: function(t2) {\n        var n2 = this._id;\n        return arguments.length ? this.each((\"function\" == typeof t2 ? co : fo)(n2, t2)) : Xi(this.node(), n2).duration;\n      }, ease: function(t2) {\n        var n2 = this._id;\n        return arguments.length ? this.each(function(t3, n3) {\n          if (\"function\" != typeof n3)\n            throw new Error();\n          return function() {\n            Hi(this, t3).ease = n3;\n          };\n        }(n2, t2)) : Xi(this.node(), n2).ease;\n      }, easeVarying: function(t2) {\n        if (\"function\" != typeof t2)\n          throw new Error();\n        return this.each(/* @__PURE__ */ function(t3, n2) {\n          return function() {\n            var e2 = n2.apply(this, arguments);\n            if (\"function\" != typeof e2)\n              throw new Error();\n            Hi(this, t3).ease = e2;\n          };\n        }(this._id, t2));\n      }, end: function() {\n        var t2, n2, e2 = this, r2 = e2._id, i2 = e2.size();\n        return new Promise(function(o2, a2) {\n          var u2 = { value: a2 }, c2 = { value: function() {\n            0 == --i2 && o2();\n          } };\n          e2.each(function() {\n            var e3 = Hi(this, r2), i3 = e3.on;\n            i3 !== t2 && ((n2 = (t2 = i3).copy())._.cancel.push(u2), n2._.interrupt.push(u2), n2._.end.push(c2)), e3.on = n2;\n          }), 0 === i2 && o2();\n        });\n      }, [Symbol.iterator]: vo[Symbol.iterator] };\n      function _o(t2) {\n        return ((t2 *= 2) <= 1 ? t2 * t2 : --t2 * (2 - t2) + 1) / 2;\n      }\n      function bo(t2) {\n        return ((t2 *= 2) <= 1 ? t2 * t2 * t2 : (t2 -= 2) * t2 * t2 + 2) / 2;\n      }\n      var mo = function t2(n2) {\n        function e2(t3) {\n          return Math.pow(t3, n2);\n        }\n        return n2 = +n2, e2.exponent = t2, e2;\n      }(3), xo = function t2(n2) {\n        function e2(t3) {\n          return 1 - Math.pow(1 - t3, n2);\n        }\n        return n2 = +n2, e2.exponent = t2, e2;\n      }(3), wo = function t2(n2) {\n        function e2(t3) {\n          return ((t3 *= 2) <= 1 ? Math.pow(t3, n2) : 2 - Math.pow(2 - t3, n2)) / 2;\n        }\n        return n2 = +n2, e2.exponent = t2, e2;\n      }(3), Mo = Math.PI, To = Mo / 2;\n      function Ao(t2) {\n        return (1 - Math.cos(Mo * t2)) / 2;\n      }\n      function So(t2) {\n        return 1.0009775171065494 * (Math.pow(2, -10 * t2) - 9765625e-10);\n      }\n      function Eo(t2) {\n        return ((t2 *= 2) <= 1 ? So(1 - t2) : 2 - So(t2 - 1)) / 2;\n      }\n      function No(t2) {\n        return ((t2 *= 2) <= 1 ? 1 - Math.sqrt(1 - t2 * t2) : Math.sqrt(1 - (t2 -= 2) * t2) + 1) / 2;\n      }\n      var ko = 4 / 11, Co = 6 / 11, Po = 8 / 11, zo = 3 / 4, $o = 9 / 11, Do = 10 / 11, Ro = 15 / 16, Fo = 21 / 22, qo = 63 / 64, Uo = 1 / ko / ko;\n      function Io(t2) {\n        return (t2 = +t2) < ko ? Uo * t2 * t2 : t2 < Po ? Uo * (t2 -= Co) * t2 + zo : t2 < Do ? Uo * (t2 -= $o) * t2 + Ro : Uo * (t2 -= Fo) * t2 + qo;\n      }\n      var Oo = 1.70158, Bo = function t2(n2) {\n        function e2(t3) {\n          return (t3 = +t3) * t3 * (n2 * (t3 - 1) + t3);\n        }\n        return n2 = +n2, e2.overshoot = t2, e2;\n      }(Oo), Yo = function t2(n2) {\n        function e2(t3) {\n          return --t3 * t3 * ((t3 + 1) * n2 + t3) + 1;\n        }\n        return n2 = +n2, e2.overshoot = t2, e2;\n      }(Oo), Lo = function t2(n2) {\n        function e2(t3) {\n          return ((t3 *= 2) < 1 ? t3 * t3 * ((n2 + 1) * t3 - n2) : (t3 -= 2) * t3 * ((n2 + 1) * t3 + n2) + 2) / 2;\n        }\n        return n2 = +n2, e2.overshoot = t2, e2;\n      }(Oo), jo = 2 * Math.PI, Ho = function t2(n2, e2) {\n        var r2 = Math.asin(1 / (n2 = Math.max(1, n2))) * (e2 /= jo);\n        function i2(t3) {\n          return n2 * So(- --t3) * Math.sin((r2 - t3) / e2);\n        }\n        return i2.amplitude = function(n3) {\n          return t2(n3, e2 * jo);\n        }, i2.period = function(e3) {\n          return t2(n2, e3);\n        }, i2;\n      }(1, 0.3), Xo = function t2(n2, e2) {\n        var r2 = Math.asin(1 / (n2 = Math.max(1, n2))) * (e2 /= jo);\n        function i2(t3) {\n          return 1 - n2 * So(t3 = +t3) * Math.sin((t3 + r2) / e2);\n        }\n        return i2.amplitude = function(n3) {\n          return t2(n3, e2 * jo);\n        }, i2.period = function(e3) {\n          return t2(n2, e3);\n        }, i2;\n      }(1, 0.3), Go = function t2(n2, e2) {\n        var r2 = Math.asin(1 / (n2 = Math.max(1, n2))) * (e2 /= jo);\n        function i2(t3) {\n          return ((t3 = 2 * t3 - 1) < 0 ? n2 * So(-t3) * Math.sin((r2 - t3) / e2) : 2 - n2 * So(t3) * Math.sin((r2 + t3) / e2)) / 2;\n        }\n        return i2.amplitude = function(n3) {\n          return t2(n3, e2 * jo);\n        }, i2.period = function(e3) {\n          return t2(n2, e3);\n        }, i2;\n      }(1, 0.3), Vo = { time: null, delay: 0, duration: 250, ease: bo };\n      function Wo(t2, n2) {\n        for (var e2; !(e2 = t2.__transition) || !(e2 = e2[n2]); )\n          if (!(t2 = t2.parentNode))\n            throw new Error(`transition ${n2} not found`);\n        return e2;\n      }\n      Wn.prototype.interrupt = function(t2) {\n        return this.each(function() {\n          Gi(this, t2);\n        });\n      }, Wn.prototype.transition = function(t2) {\n        var n2, e2;\n        t2 instanceof po ? (n2 = t2._id, t2 = t2._name) : (n2 = yo(), (e2 = Vo).time = Ai(), t2 = null == t2 ? null : t2 + \"\");\n        for (var r2 = this._groups, i2 = r2.length, o2 = 0; o2 < i2; ++o2)\n          for (var a2, u2 = r2[o2], c2 = u2.length, f2 = 0; f2 < c2; ++f2)\n            (a2 = u2[f2]) && Li(a2, t2, n2, f2, u2, e2 || Wo(a2, n2));\n        return new po(r2, this._parents, t2, n2);\n      };\n      var Zo = [null];\n      var Ko = (t2) => () => t2;\n      function Qo(t2, { sourceEvent: n2, target: e2, selection: r2, mode: i2, dispatch: o2 }) {\n        Object.defineProperties(this, { type: { value: t2, enumerable: true, configurable: true }, sourceEvent: { value: n2, enumerable: true, configurable: true }, target: { value: e2, enumerable: true, configurable: true }, selection: { value: r2, enumerable: true, configurable: true }, mode: { value: i2, enumerable: true, configurable: true }, _: { value: o2 } });\n      }\n      function Jo(t2) {\n        t2.preventDefault(), t2.stopImmediatePropagation();\n      }\n      var ta = { name: \"drag\" }, na = { name: \"space\" }, ea = { name: \"handle\" }, ra = { name: \"center\" };\n      const { abs: ia, max: oa, min: aa } = Math;\n      function ua(t2) {\n        return [+t2[0], +t2[1]];\n      }\n      function ca(t2) {\n        return [ua(t2[0]), ua(t2[1])];\n      }\n      var fa = { name: \"x\", handles: [\"w\", \"e\"].map(va), input: function(t2, n2) {\n        return null == t2 ? null : [[+t2[0], n2[0][1]], [+t2[1], n2[1][1]]];\n      }, output: function(t2) {\n        return t2 && [t2[0][0], t2[1][0]];\n      } }, sa = { name: \"y\", handles: [\"n\", \"s\"].map(va), input: function(t2, n2) {\n        return null == t2 ? null : [[n2[0][0], +t2[0]], [n2[1][0], +t2[1]]];\n      }, output: function(t2) {\n        return t2 && [t2[0][1], t2[1][1]];\n      } }, la = { name: \"xy\", handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(va), input: function(t2) {\n        return null == t2 ? null : ca(t2);\n      }, output: function(t2) {\n        return t2;\n      } }, ha = { overlay: \"crosshair\", selection: \"move\", n: \"ns-resize\", e: \"ew-resize\", s: \"ns-resize\", w: \"ew-resize\", nw: \"nwse-resize\", ne: \"nesw-resize\", se: \"nwse-resize\", sw: \"nesw-resize\" }, da = { e: \"w\", w: \"e\", nw: \"ne\", ne: \"nw\", se: \"sw\", sw: \"se\" }, pa = { n: \"s\", s: \"n\", nw: \"sw\", ne: \"se\", se: \"ne\", sw: \"nw\" }, ga = { overlay: 1, selection: 1, n: null, e: 1, s: null, w: -1, nw: -1, ne: 1, se: 1, sw: -1 }, ya = { overlay: 1, selection: 1, n: -1, e: null, s: 1, w: null, nw: -1, ne: -1, se: 1, sw: 1 };\n      function va(t2) {\n        return { type: t2 };\n      }\n      function _a(t2) {\n        return !t2.ctrlKey && !t2.button;\n      }\n      function ba() {\n        var t2 = this.ownerSVGElement || this;\n        return t2.hasAttribute(\"viewBox\") ? [[(t2 = t2.viewBox.baseVal).x, t2.y], [t2.x + t2.width, t2.y + t2.height]] : [[0, 0], [t2.width.baseVal.value, t2.height.baseVal.value]];\n      }\n      function ma() {\n        return navigator.maxTouchPoints || \"ontouchstart\" in this;\n      }\n      function xa(t2) {\n        for (; !t2.__brush; )\n          if (!(t2 = t2.parentNode))\n            return;\n        return t2.__brush;\n      }\n      function wa(t2) {\n        var n2, e2 = ba, r2 = _a, i2 = ma, o2 = true, a2 = $t(\"start\", \"brush\", \"end\"), u2 = 6;\n        function c2(n3) {\n          var e3 = n3.property(\"__brush\", g2).selectAll(\".overlay\").data([va(\"overlay\")]);\n          e3.enter().append(\"rect\").attr(\"class\", \"overlay\").attr(\"pointer-events\", \"all\").attr(\"cursor\", ha.overlay).merge(e3).each(function() {\n            var t3 = xa(this).extent;\n            Zn(this).attr(\"x\", t3[0][0]).attr(\"y\", t3[0][1]).attr(\"width\", t3[1][0] - t3[0][0]).attr(\"height\", t3[1][1] - t3[0][1]);\n          }), n3.selectAll(\".selection\").data([va(\"selection\")]).enter().append(\"rect\").attr(\"class\", \"selection\").attr(\"cursor\", ha.selection).attr(\"fill\", \"#777\").attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"#fff\").attr(\"shape-rendering\", \"crispEdges\");\n          var r3 = n3.selectAll(\".handle\").data(t2.handles, function(t3) {\n            return t3.type;\n          });\n          r3.exit().remove(), r3.enter().append(\"rect\").attr(\"class\", function(t3) {\n            return \"handle handle--\" + t3.type;\n          }).attr(\"cursor\", function(t3) {\n            return ha[t3.type];\n          }), n3.each(f2).attr(\"fill\", \"none\").attr(\"pointer-events\", \"all\").on(\"mousedown.brush\", h2).filter(i2).on(\"touchstart.brush\", h2).on(\"touchmove.brush\", d2).on(\"touchend.brush touchcancel.brush\", p2).style(\"touch-action\", \"none\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n        }\n        function f2() {\n          var t3 = Zn(this), n3 = xa(this).selection;\n          n3 ? (t3.selectAll(\".selection\").style(\"display\", null).attr(\"x\", n3[0][0]).attr(\"y\", n3[0][1]).attr(\"width\", n3[1][0] - n3[0][0]).attr(\"height\", n3[1][1] - n3[0][1]), t3.selectAll(\".handle\").style(\"display\", null).attr(\"x\", function(t4) {\n            return \"e\" === t4.type[t4.type.length - 1] ? n3[1][0] - u2 / 2 : n3[0][0] - u2 / 2;\n          }).attr(\"y\", function(t4) {\n            return \"s\" === t4.type[0] ? n3[1][1] - u2 / 2 : n3[0][1] - u2 / 2;\n          }).attr(\"width\", function(t4) {\n            return \"n\" === t4.type || \"s\" === t4.type ? n3[1][0] - n3[0][0] + u2 : u2;\n          }).attr(\"height\", function(t4) {\n            return \"e\" === t4.type || \"w\" === t4.type ? n3[1][1] - n3[0][1] + u2 : u2;\n          })) : t3.selectAll(\".selection,.handle\").style(\"display\", \"none\").attr(\"x\", null).attr(\"y\", null).attr(\"width\", null).attr(\"height\", null);\n        }\n        function s2(t3, n3, e3) {\n          var r3 = t3.__brush.emitter;\n          return !r3 || e3 && r3.clean ? new l2(t3, n3, e3) : r3;\n        }\n        function l2(t3, n3, e3) {\n          this.that = t3, this.args = n3, this.state = t3.__brush, this.active = 0, this.clean = e3;\n        }\n        function h2(e3) {\n          if ((!n2 || e3.touches) && r2.apply(this, arguments)) {\n            var i3, a3, u3, c3, l3, h3, d4, p3, g3, y2, v2, _2 = this, b2 = e3.target.__data__.type, m2 = \"selection\" === (o2 && e3.metaKey ? b2 = \"overlay\" : b2) ? ta : o2 && e3.altKey ? ra : ea, x2 = t2 === sa ? null : ga[b2], w2 = t2 === fa ? null : ya[b2], M2 = xa(_2), T2 = M2.extent, A2 = M2.selection, S2 = T2[0][0], E2 = T2[0][1], N2 = T2[1][0], k2 = T2[1][1], C2 = 0, P2 = 0, z2 = x2 && w2 && o2 && e3.shiftKey, $2 = Array.from(e3.touches || [e3], (t3) => {\n              const n3 = t3.identifier;\n              return (t3 = ne(t3, _2)).point0 = t3.slice(), t3.identifier = n3, t3;\n            });\n            Gi(_2);\n            var D2 = s2(_2, arguments, true).beforestart();\n            if (\"overlay\" === b2) {\n              A2 && (g3 = true);\n              const n3 = [$2[0], $2[1] || $2[0]];\n              M2.selection = A2 = [[i3 = t2 === sa ? S2 : aa(n3[0][0], n3[1][0]), u3 = t2 === fa ? E2 : aa(n3[0][1], n3[1][1])], [l3 = t2 === sa ? N2 : oa(n3[0][0], n3[1][0]), d4 = t2 === fa ? k2 : oa(n3[0][1], n3[1][1])]], $2.length > 1 && I2(e3);\n            } else\n              i3 = A2[0][0], u3 = A2[0][1], l3 = A2[1][0], d4 = A2[1][1];\n            a3 = i3, c3 = u3, h3 = l3, p3 = d4;\n            var R2 = Zn(_2).attr(\"pointer-events\", \"none\"), F2 = R2.selectAll(\".overlay\").attr(\"cursor\", ha[b2]);\n            if (e3.touches)\n              D2.moved = U2, D2.ended = O2;\n            else {\n              var q2 = Zn(e3.view).on(\"mousemove.brush\", U2, true).on(\"mouseup.brush\", O2, true);\n              o2 && q2.on(\"keydown.brush\", function(t3) {\n                switch (t3.keyCode) {\n                  case 16:\n                    z2 = x2 && w2;\n                    break;\n                  case 18:\n                    m2 === ea && (x2 && (l3 = h3 - C2 * x2, i3 = a3 + C2 * x2), w2 && (d4 = p3 - P2 * w2, u3 = c3 + P2 * w2), m2 = ra, I2(t3));\n                    break;\n                  case 32:\n                    m2 !== ea && m2 !== ra || (x2 < 0 ? l3 = h3 - C2 : x2 > 0 && (i3 = a3 - C2), w2 < 0 ? d4 = p3 - P2 : w2 > 0 && (u3 = c3 - P2), m2 = na, F2.attr(\"cursor\", ha.selection), I2(t3));\n                    break;\n                  default:\n                    return;\n                }\n                Jo(t3);\n              }, true).on(\"keyup.brush\", function(t3) {\n                switch (t3.keyCode) {\n                  case 16:\n                    z2 && (y2 = v2 = z2 = false, I2(t3));\n                    break;\n                  case 18:\n                    m2 === ra && (x2 < 0 ? l3 = h3 : x2 > 0 && (i3 = a3), w2 < 0 ? d4 = p3 : w2 > 0 && (u3 = c3), m2 = ea, I2(t3));\n                    break;\n                  case 32:\n                    m2 === na && (t3.altKey ? (x2 && (l3 = h3 - C2 * x2, i3 = a3 + C2 * x2), w2 && (d4 = p3 - P2 * w2, u3 = c3 + P2 * w2), m2 = ra) : (x2 < 0 ? l3 = h3 : x2 > 0 && (i3 = a3), w2 < 0 ? d4 = p3 : w2 > 0 && (u3 = c3), m2 = ea), F2.attr(\"cursor\", ha[b2]), I2(t3));\n                    break;\n                  default:\n                    return;\n                }\n                Jo(t3);\n              }, true), ae(e3.view);\n            }\n            f2.call(_2), D2.start(e3, m2.name);\n          }\n          function U2(t3) {\n            for (const n3 of t3.changedTouches || [t3])\n              for (const t4 of $2)\n                t4.identifier === n3.identifier && (t4.cur = ne(n3, _2));\n            if (z2 && !y2 && !v2 && 1 === $2.length) {\n              const t4 = $2[0];\n              ia(t4.cur[0] - t4[0]) > ia(t4.cur[1] - t4[1]) ? v2 = true : y2 = true;\n            }\n            for (const t4 of $2)\n              t4.cur && (t4[0] = t4.cur[0], t4[1] = t4.cur[1]);\n            g3 = true, Jo(t3), I2(t3);\n          }\n          function I2(t3) {\n            const n3 = $2[0], e4 = n3.point0;\n            var r3;\n            switch (C2 = n3[0] - e4[0], P2 = n3[1] - e4[1], m2) {\n              case na:\n              case ta:\n                x2 && (C2 = oa(S2 - i3, aa(N2 - l3, C2)), a3 = i3 + C2, h3 = l3 + C2), w2 && (P2 = oa(E2 - u3, aa(k2 - d4, P2)), c3 = u3 + P2, p3 = d4 + P2);\n                break;\n              case ea:\n                $2[1] ? (x2 && (a3 = oa(S2, aa(N2, $2[0][0])), h3 = oa(S2, aa(N2, $2[1][0])), x2 = 1), w2 && (c3 = oa(E2, aa(k2, $2[0][1])), p3 = oa(E2, aa(k2, $2[1][1])), w2 = 1)) : (x2 < 0 ? (C2 = oa(S2 - i3, aa(N2 - i3, C2)), a3 = i3 + C2, h3 = l3) : x2 > 0 && (C2 = oa(S2 - l3, aa(N2 - l3, C2)), a3 = i3, h3 = l3 + C2), w2 < 0 ? (P2 = oa(E2 - u3, aa(k2 - u3, P2)), c3 = u3 + P2, p3 = d4) : w2 > 0 && (P2 = oa(E2 - d4, aa(k2 - d4, P2)), c3 = u3, p3 = d4 + P2));\n                break;\n              case ra:\n                x2 && (a3 = oa(S2, aa(N2, i3 - C2 * x2)), h3 = oa(S2, aa(N2, l3 + C2 * x2))), w2 && (c3 = oa(E2, aa(k2, u3 - P2 * w2)), p3 = oa(E2, aa(k2, d4 + P2 * w2)));\n            }\n            h3 < a3 && (x2 *= -1, r3 = i3, i3 = l3, l3 = r3, r3 = a3, a3 = h3, h3 = r3, b2 in da && F2.attr(\"cursor\", ha[b2 = da[b2]])), p3 < c3 && (w2 *= -1, r3 = u3, u3 = d4, d4 = r3, r3 = c3, c3 = p3, p3 = r3, b2 in pa && F2.attr(\"cursor\", ha[b2 = pa[b2]])), M2.selection && (A2 = M2.selection), y2 && (a3 = A2[0][0], h3 = A2[1][0]), v2 && (c3 = A2[0][1], p3 = A2[1][1]), A2[0][0] === a3 && A2[0][1] === c3 && A2[1][0] === h3 && A2[1][1] === p3 || (M2.selection = [[a3, c3], [h3, p3]], f2.call(_2), D2.brush(t3, m2.name));\n          }\n          function O2(t3) {\n            if (function(t4) {\n              t4.stopImmediatePropagation();\n            }(t3), t3.touches) {\n              if (t3.touches.length)\n                return;\n              n2 && clearTimeout(n2), n2 = setTimeout(function() {\n                n2 = null;\n              }, 500);\n            } else\n              ue(t3.view, g3), q2.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n            R2.attr(\"pointer-events\", \"all\"), F2.attr(\"cursor\", ha.overlay), M2.selection && (A2 = M2.selection), function(t4) {\n              return t4[0][0] === t4[1][0] || t4[0][1] === t4[1][1];\n            }(A2) && (M2.selection = null, f2.call(_2)), D2.end(t3, m2.name);\n          }\n        }\n        function d2(t3) {\n          s2(this, arguments).moved(t3);\n        }\n        function p2(t3) {\n          s2(this, arguments).ended(t3);\n        }\n        function g2() {\n          var n3 = this.__brush || { selection: null };\n          return n3.extent = ca(e2.apply(this, arguments)), n3.dim = t2, n3;\n        }\n        return c2.move = function(n3, e3, r3) {\n          n3.tween ? n3.on(\"start.brush\", function(t3) {\n            s2(this, arguments).beforestart().start(t3);\n          }).on(\"interrupt.brush end.brush\", function(t3) {\n            s2(this, arguments).end(t3);\n          }).tween(\"brush\", function() {\n            var n4 = this, r4 = n4.__brush, i3 = s2(n4, arguments), o3 = r4.selection, a3 = t2.input(\"function\" == typeof e3 ? e3.apply(this, arguments) : e3, r4.extent), u3 = Gr(o3, a3);\n            function c3(t3) {\n              r4.selection = 1 === t3 && null === a3 ? null : u3(t3), f2.call(n4), i3.brush();\n            }\n            return null !== o3 && null !== a3 ? c3 : c3(1);\n          }) : n3.each(function() {\n            var n4 = this, i3 = arguments, o3 = n4.__brush, a3 = t2.input(\"function\" == typeof e3 ? e3.apply(n4, i3) : e3, o3.extent), u3 = s2(n4, i3).beforestart();\n            Gi(n4), o3.selection = null === a3 ? null : a3, f2.call(n4), u3.start(r3).brush(r3).end(r3);\n          });\n        }, c2.clear = function(t3, n3) {\n          c2.move(t3, null, n3);\n        }, l2.prototype = { beforestart: function() {\n          return 1 == ++this.active && (this.state.emitter = this, this.starting = true), this;\n        }, start: function(t3, n3) {\n          return this.starting ? (this.starting = false, this.emit(\"start\", t3, n3)) : this.emit(\"brush\", t3), this;\n        }, brush: function(t3, n3) {\n          return this.emit(\"brush\", t3, n3), this;\n        }, end: function(t3, n3) {\n          return 0 == --this.active && (delete this.state.emitter, this.emit(\"end\", t3, n3)), this;\n        }, emit: function(n3, e3, r3) {\n          var i3 = Zn(this.that).datum();\n          a2.call(n3, this.that, new Qo(n3, { sourceEvent: e3, target: c2, selection: t2.output(this.state.selection), mode: r3, dispatch: a2 }), i3);\n        } }, c2.extent = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : Ko(ca(t3)), c2) : e2;\n        }, c2.filter = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : Ko(!!t3), c2) : r2;\n        }, c2.touchable = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : Ko(!!t3), c2) : i2;\n        }, c2.handleSize = function(t3) {\n          return arguments.length ? (u2 = +t3, c2) : u2;\n        }, c2.keyModifiers = function(t3) {\n          return arguments.length ? (o2 = !!t3, c2) : o2;\n        }, c2.on = function() {\n          var t3 = a2.on.apply(a2, arguments);\n          return t3 === a2 ? c2 : t3;\n        }, c2;\n      }\n      var Ma = Math.abs, Ta = Math.cos, Aa = Math.sin, Sa = Math.PI, Ea = Sa / 2, Na = 2 * Sa, ka = Math.max, Ca = 1e-12;\n      function Pa(t2, n2) {\n        return Array.from({ length: n2 - t2 }, (n3, e2) => t2 + e2);\n      }\n      function za(t2, n2) {\n        var e2 = 0, r2 = null, i2 = null, o2 = null;\n        function a2(a3) {\n          var u2, c2 = a3.length, f2 = new Array(c2), s2 = Pa(0, c2), l2 = new Array(c2 * c2), h2 = new Array(c2), d2 = 0;\n          a3 = Float64Array.from({ length: c2 * c2 }, n2 ? (t3, n3) => a3[n3 % c2][n3 / c2 | 0] : (t3, n3) => a3[n3 / c2 | 0][n3 % c2]);\n          for (let n3 = 0; n3 < c2; ++n3) {\n            let e3 = 0;\n            for (let r3 = 0; r3 < c2; ++r3)\n              e3 += a3[n3 * c2 + r3] + t2 * a3[r3 * c2 + n3];\n            d2 += f2[n3] = e3;\n          }\n          u2 = (d2 = ka(0, Na - e2 * c2) / d2) ? e2 : Na / c2;\n          {\n            let n3 = 0;\n            r2 && s2.sort((t3, n4) => r2(f2[t3], f2[n4]));\n            for (const e3 of s2) {\n              const r3 = n3;\n              if (t2) {\n                const t3 = Pa(1 + ~c2, c2).filter((t4) => t4 < 0 ? a3[~t4 * c2 + e3] : a3[e3 * c2 + t4]);\n                i2 && t3.sort((t4, n4) => i2(t4 < 0 ? -a3[~t4 * c2 + e3] : a3[e3 * c2 + t4], n4 < 0 ? -a3[~n4 * c2 + e3] : a3[e3 * c2 + n4]));\n                for (const r4 of t3)\n                  if (r4 < 0) {\n                    (l2[~r4 * c2 + e3] || (l2[~r4 * c2 + e3] = { source: null, target: null })).target = { index: e3, startAngle: n3, endAngle: n3 += a3[~r4 * c2 + e3] * d2, value: a3[~r4 * c2 + e3] };\n                  } else {\n                    (l2[e3 * c2 + r4] || (l2[e3 * c2 + r4] = { source: null, target: null })).source = { index: e3, startAngle: n3, endAngle: n3 += a3[e3 * c2 + r4] * d2, value: a3[e3 * c2 + r4] };\n                  }\n                h2[e3] = { index: e3, startAngle: r3, endAngle: n3, value: f2[e3] };\n              } else {\n                const t3 = Pa(0, c2).filter((t4) => a3[e3 * c2 + t4] || a3[t4 * c2 + e3]);\n                i2 && t3.sort((t4, n4) => i2(a3[e3 * c2 + t4], a3[e3 * c2 + n4]));\n                for (const r4 of t3) {\n                  let t4;\n                  if (e3 < r4 ? (t4 = l2[e3 * c2 + r4] || (l2[e3 * c2 + r4] = { source: null, target: null }), t4.source = { index: e3, startAngle: n3, endAngle: n3 += a3[e3 * c2 + r4] * d2, value: a3[e3 * c2 + r4] }) : (t4 = l2[r4 * c2 + e3] || (l2[r4 * c2 + e3] = { source: null, target: null }), t4.target = { index: e3, startAngle: n3, endAngle: n3 += a3[e3 * c2 + r4] * d2, value: a3[e3 * c2 + r4] }, e3 === r4 && (t4.source = t4.target)), t4.source && t4.target && t4.source.value < t4.target.value) {\n                    const n4 = t4.source;\n                    t4.source = t4.target, t4.target = n4;\n                  }\n                }\n                h2[e3] = { index: e3, startAngle: r3, endAngle: n3, value: f2[e3] };\n              }\n              n3 += u2;\n            }\n          }\n          return (l2 = Object.values(l2)).groups = h2, o2 ? l2.sort(o2) : l2;\n        }\n        return a2.padAngle = function(t3) {\n          return arguments.length ? (e2 = ka(0, t3), a2) : e2;\n        }, a2.sortGroups = function(t3) {\n          return arguments.length ? (r2 = t3, a2) : r2;\n        }, a2.sortSubgroups = function(t3) {\n          return arguments.length ? (i2 = t3, a2) : i2;\n        }, a2.sortChords = function(t3) {\n          return arguments.length ? (null == t3 ? o2 = null : (n3 = t3, o2 = function(t4, e3) {\n            return n3(t4.source.value + t4.target.value, e3.source.value + e3.target.value);\n          })._ = t3, a2) : o2 && o2._;\n          var n3;\n        }, a2;\n      }\n      const $a = Math.PI, Da = 2 * $a, Ra = 1e-6, Fa = Da - Ra;\n      function qa(t2) {\n        this._ += t2[0];\n        for (let n2 = 1, e2 = t2.length; n2 < e2; ++n2)\n          this._ += arguments[n2] + t2[n2];\n      }\n      let Ua = class {\n        constructor(t2) {\n          this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = \"\", this._append = null == t2 ? qa : function(t3) {\n            let n2 = Math.floor(t3);\n            if (!(n2 >= 0))\n              throw new Error(`invalid digits: ${t3}`);\n            if (n2 > 15)\n              return qa;\n            const e2 = 10 ** n2;\n            return function(t4) {\n              this._ += t4[0];\n              for (let n3 = 1, r2 = t4.length; n3 < r2; ++n3)\n                this._ += Math.round(arguments[n3] * e2) / e2 + t4[n3];\n            };\n          }(t2);\n        }\n        moveTo(t2, n2) {\n          this._append`M${this._x0 = this._x1 = +t2},${this._y0 = this._y1 = +n2}`;\n        }\n        closePath() {\n          null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._append`Z`);\n        }\n        lineTo(t2, n2) {\n          this._append`L${this._x1 = +t2},${this._y1 = +n2}`;\n        }\n        quadraticCurveTo(t2, n2, e2, r2) {\n          this._append`Q${+t2},${+n2},${this._x1 = +e2},${this._y1 = +r2}`;\n        }\n        bezierCurveTo(t2, n2, e2, r2, i2, o2) {\n          this._append`C${+t2},${+n2},${+e2},${+r2},${this._x1 = +i2},${this._y1 = +o2}`;\n        }\n        arcTo(t2, n2, e2, r2, i2) {\n          if (t2 = +t2, n2 = +n2, e2 = +e2, r2 = +r2, (i2 = +i2) < 0)\n            throw new Error(`negative radius: ${i2}`);\n          let o2 = this._x1, a2 = this._y1, u2 = e2 - t2, c2 = r2 - n2, f2 = o2 - t2, s2 = a2 - n2, l2 = f2 * f2 + s2 * s2;\n          if (null === this._x1)\n            this._append`M${this._x1 = t2},${this._y1 = n2}`;\n          else if (l2 > Ra)\n            if (Math.abs(s2 * u2 - c2 * f2) > Ra && i2) {\n              let h2 = e2 - o2, d2 = r2 - a2, p2 = u2 * u2 + c2 * c2, g2 = h2 * h2 + d2 * d2, y2 = Math.sqrt(p2), v2 = Math.sqrt(l2), _2 = i2 * Math.tan(($a - Math.acos((p2 + l2 - g2) / (2 * y2 * v2))) / 2), b2 = _2 / v2, m2 = _2 / y2;\n              Math.abs(b2 - 1) > Ra && this._append`L${t2 + b2 * f2},${n2 + b2 * s2}`, this._append`A${i2},${i2},0,0,${+(s2 * h2 > f2 * d2)},${this._x1 = t2 + m2 * u2},${this._y1 = n2 + m2 * c2}`;\n            } else\n              this._append`L${this._x1 = t2},${this._y1 = n2}`;\n          else\n            ;\n        }\n        arc(t2, n2, e2, r2, i2, o2) {\n          if (t2 = +t2, n2 = +n2, o2 = !!o2, (e2 = +e2) < 0)\n            throw new Error(`negative radius: ${e2}`);\n          let a2 = e2 * Math.cos(r2), u2 = e2 * Math.sin(r2), c2 = t2 + a2, f2 = n2 + u2, s2 = 1 ^ o2, l2 = o2 ? r2 - i2 : i2 - r2;\n          null === this._x1 ? this._append`M${c2},${f2}` : (Math.abs(this._x1 - c2) > Ra || Math.abs(this._y1 - f2) > Ra) && this._append`L${c2},${f2}`, e2 && (l2 < 0 && (l2 = l2 % Da + Da), l2 > Fa ? this._append`A${e2},${e2},0,1,${s2},${t2 - a2},${n2 - u2}A${e2},${e2},0,1,${s2},${this._x1 = c2},${this._y1 = f2}` : l2 > Ra && this._append`A${e2},${e2},0,${+(l2 >= $a)},${s2},${this._x1 = t2 + e2 * Math.cos(i2)},${this._y1 = n2 + e2 * Math.sin(i2)}`);\n        }\n        rect(t2, n2, e2, r2) {\n          this._append`M${this._x0 = this._x1 = +t2},${this._y0 = this._y1 = +n2}h${e2 = +e2}v${+r2}h${-e2}Z`;\n        }\n        toString() {\n          return this._;\n        }\n      };\n      function Ia() {\n        return new Ua();\n      }\n      Ia.prototype = Ua.prototype;\n      var Oa = Array.prototype.slice;\n      function Ba(t2) {\n        return function() {\n          return t2;\n        };\n      }\n      function Ya(t2) {\n        return t2.source;\n      }\n      function La(t2) {\n        return t2.target;\n      }\n      function ja(t2) {\n        return t2.radius;\n      }\n      function Ha(t2) {\n        return t2.startAngle;\n      }\n      function Xa(t2) {\n        return t2.endAngle;\n      }\n      function Ga() {\n        return 0;\n      }\n      function Va() {\n        return 10;\n      }\n      function Wa(t2) {\n        var n2 = Ya, e2 = La, r2 = ja, i2 = ja, o2 = Ha, a2 = Xa, u2 = Ga, c2 = null;\n        function f2() {\n          var f3, s2 = n2.apply(this, arguments), l2 = e2.apply(this, arguments), h2 = u2.apply(this, arguments) / 2, d2 = Oa.call(arguments), p2 = +r2.apply(this, (d2[0] = s2, d2)), g2 = o2.apply(this, d2) - Ea, y2 = a2.apply(this, d2) - Ea, v2 = +i2.apply(this, (d2[0] = l2, d2)), _2 = o2.apply(this, d2) - Ea, b2 = a2.apply(this, d2) - Ea;\n          if (c2 || (c2 = f3 = Ia()), h2 > Ca && (Ma(y2 - g2) > 2 * h2 + Ca ? y2 > g2 ? (g2 += h2, y2 -= h2) : (g2 -= h2, y2 += h2) : g2 = y2 = (g2 + y2) / 2, Ma(b2 - _2) > 2 * h2 + Ca ? b2 > _2 ? (_2 += h2, b2 -= h2) : (_2 -= h2, b2 += h2) : _2 = b2 = (_2 + b2) / 2), c2.moveTo(p2 * Ta(g2), p2 * Aa(g2)), c2.arc(0, 0, p2, g2, y2), g2 !== _2 || y2 !== b2)\n            if (t2) {\n              var m2 = v2 - +t2.apply(this, arguments), x2 = (_2 + b2) / 2;\n              c2.quadraticCurveTo(0, 0, m2 * Ta(_2), m2 * Aa(_2)), c2.lineTo(v2 * Ta(x2), v2 * Aa(x2)), c2.lineTo(m2 * Ta(b2), m2 * Aa(b2));\n            } else\n              c2.quadraticCurveTo(0, 0, v2 * Ta(_2), v2 * Aa(_2)), c2.arc(0, 0, v2, _2, b2);\n          if (c2.quadraticCurveTo(0, 0, p2 * Ta(g2), p2 * Aa(g2)), c2.closePath(), f3)\n            return c2 = null, f3 + \"\" || null;\n        }\n        return t2 && (f2.headRadius = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : Ba(+n3), f2) : t2;\n        }), f2.radius = function(t3) {\n          return arguments.length ? (r2 = i2 = \"function\" == typeof t3 ? t3 : Ba(+t3), f2) : r2;\n        }, f2.sourceRadius = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : Ba(+t3), f2) : r2;\n        }, f2.targetRadius = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : Ba(+t3), f2) : i2;\n        }, f2.startAngle = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : Ba(+t3), f2) : o2;\n        }, f2.endAngle = function(t3) {\n          return arguments.length ? (a2 = \"function\" == typeof t3 ? t3 : Ba(+t3), f2) : a2;\n        }, f2.padAngle = function(t3) {\n          return arguments.length ? (u2 = \"function\" == typeof t3 ? t3 : Ba(+t3), f2) : u2;\n        }, f2.source = function(t3) {\n          return arguments.length ? (n2 = t3, f2) : n2;\n        }, f2.target = function(t3) {\n          return arguments.length ? (e2 = t3, f2) : e2;\n        }, f2.context = function(t3) {\n          return arguments.length ? (c2 = null == t3 ? null : t3, f2) : c2;\n        }, f2;\n      }\n      var Za = Array.prototype.slice;\n      function Ka(t2, n2) {\n        return t2 - n2;\n      }\n      var Qa = (t2) => () => t2;\n      function Ja(t2, n2) {\n        for (var e2, r2 = -1, i2 = n2.length; ++r2 < i2; )\n          if (e2 = tu(t2, n2[r2]))\n            return e2;\n        return 0;\n      }\n      function tu(t2, n2) {\n        for (var e2 = n2[0], r2 = n2[1], i2 = -1, o2 = 0, a2 = t2.length, u2 = a2 - 1; o2 < a2; u2 = o2++) {\n          var c2 = t2[o2], f2 = c2[0], s2 = c2[1], l2 = t2[u2], h2 = l2[0], d2 = l2[1];\n          if (nu(c2, l2, n2))\n            return 0;\n          s2 > r2 != d2 > r2 && e2 < (h2 - f2) * (r2 - s2) / (d2 - s2) + f2 && (i2 = -i2);\n        }\n        return i2;\n      }\n      function nu(t2, n2, e2) {\n        var r2, i2, o2, a2;\n        return function(t3, n3, e3) {\n          return (n3[0] - t3[0]) * (e3[1] - t3[1]) == (e3[0] - t3[0]) * (n3[1] - t3[1]);\n        }(t2, n2, e2) && (i2 = t2[r2 = +(t2[0] === n2[0])], o2 = e2[r2], a2 = n2[r2], i2 <= o2 && o2 <= a2 || a2 <= o2 && o2 <= i2);\n      }\n      function eu() {\n      }\n      var ru = [[], [[[1, 1.5], [0.5, 1]]], [[[1.5, 1], [1, 1.5]]], [[[1.5, 1], [0.5, 1]]], [[[1, 0.5], [1.5, 1]]], [[[1, 1.5], [0.5, 1]], [[1, 0.5], [1.5, 1]]], [[[1, 0.5], [1, 1.5]]], [[[1, 0.5], [0.5, 1]]], [[[0.5, 1], [1, 0.5]]], [[[1, 1.5], [1, 0.5]]], [[[0.5, 1], [1, 0.5]], [[1.5, 1], [1, 1.5]]], [[[1.5, 1], [1, 0.5]]], [[[0.5, 1], [1.5, 1]]], [[[1, 1.5], [1.5, 1]]], [[[0.5, 1], [1, 1.5]]], []];\n      function iu() {\n        var t2 = 1, n2 = 1, e2 = K, r2 = u2;\n        function i2(t3) {\n          var n3 = e2(t3);\n          if (Array.isArray(n3))\n            n3 = n3.slice().sort(Ka);\n          else {\n            const e3 = M(t3, ou);\n            for (n3 = G(...Z(e3[0], e3[1], n3), n3); n3[n3.length - 1] >= e3[1]; )\n              n3.pop();\n            for (; n3[1] < e3[0]; )\n              n3.shift();\n          }\n          return n3.map((n4) => o2(t3, n4));\n        }\n        function o2(e3, i3) {\n          const o3 = null == i3 ? NaN : +i3;\n          if (isNaN(o3))\n            throw new Error(`invalid value: ${i3}`);\n          var u3 = [], c2 = [];\n          return function(e4, r3, i4) {\n            var o4, u4, c3, f2, s2, l2, h2 = new Array(), d2 = new Array();\n            o4 = u4 = -1, f2 = au(e4[0], r3), ru[f2 << 1].forEach(p2);\n            for (; ++o4 < t2 - 1; )\n              c3 = f2, f2 = au(e4[o4 + 1], r3), ru[c3 | f2 << 1].forEach(p2);\n            ru[f2 << 0].forEach(p2);\n            for (; ++u4 < n2 - 1; ) {\n              for (o4 = -1, f2 = au(e4[u4 * t2 + t2], r3), s2 = au(e4[u4 * t2], r3), ru[f2 << 1 | s2 << 2].forEach(p2); ++o4 < t2 - 1; )\n                c3 = f2, f2 = au(e4[u4 * t2 + t2 + o4 + 1], r3), l2 = s2, s2 = au(e4[u4 * t2 + o4 + 1], r3), ru[c3 | f2 << 1 | s2 << 2 | l2 << 3].forEach(p2);\n              ru[f2 | s2 << 3].forEach(p2);\n            }\n            o4 = -1, s2 = e4[u4 * t2] >= r3, ru[s2 << 2].forEach(p2);\n            for (; ++o4 < t2 - 1; )\n              l2 = s2, s2 = au(e4[u4 * t2 + o4 + 1], r3), ru[s2 << 2 | l2 << 3].forEach(p2);\n            function p2(t3) {\n              var n3, e5, r4 = [t3[0][0] + o4, t3[0][1] + u4], c4 = [t3[1][0] + o4, t3[1][1] + u4], f3 = a2(r4), s3 = a2(c4);\n              (n3 = d2[f3]) ? (e5 = h2[s3]) ? (delete d2[n3.end], delete h2[e5.start], n3 === e5 ? (n3.ring.push(c4), i4(n3.ring)) : h2[n3.start] = d2[e5.end] = { start: n3.start, end: e5.end, ring: n3.ring.concat(e5.ring) }) : (delete d2[n3.end], n3.ring.push(c4), d2[n3.end = s3] = n3) : (n3 = h2[s3]) ? (e5 = d2[f3]) ? (delete h2[n3.start], delete d2[e5.end], n3 === e5 ? (n3.ring.push(c4), i4(n3.ring)) : h2[e5.start] = d2[n3.end] = { start: e5.start, end: n3.end, ring: e5.ring.concat(n3.ring) }) : (delete h2[n3.start], n3.ring.unshift(r4), h2[n3.start = f3] = n3) : h2[f3] = d2[s3] = { start: f3, end: s3, ring: [r4, c4] };\n            }\n            ru[s2 << 3].forEach(p2);\n          }(e3, o3, function(t3) {\n            r2(t3, e3, o3), function(t4) {\n              for (var n3 = 0, e4 = t4.length, r3 = t4[e4 - 1][1] * t4[0][0] - t4[e4 - 1][0] * t4[0][1]; ++n3 < e4; )\n                r3 += t4[n3 - 1][1] * t4[n3][0] - t4[n3 - 1][0] * t4[n3][1];\n              return r3;\n            }(t3) > 0 ? u3.push([t3]) : c2.push(t3);\n          }), c2.forEach(function(t3) {\n            for (var n3, e4 = 0, r3 = u3.length; e4 < r3; ++e4)\n              if (-1 !== Ja((n3 = u3[e4])[0], t3))\n                return void n3.push(t3);\n          }), { type: \"MultiPolygon\", value: i3, coordinates: u3 };\n        }\n        function a2(n3) {\n          return 2 * n3[0] + n3[1] * (t2 + 1) * 4;\n        }\n        function u2(e3, r3, i3) {\n          e3.forEach(function(e4) {\n            var o3 = e4[0], a3 = e4[1], u3 = 0 | o3, c2 = 0 | a3, f2 = uu(r3[c2 * t2 + u3]);\n            o3 > 0 && o3 < t2 && u3 === o3 && (e4[0] = cu(o3, uu(r3[c2 * t2 + u3 - 1]), f2, i3)), a3 > 0 && a3 < n2 && c2 === a3 && (e4[1] = cu(a3, uu(r3[(c2 - 1) * t2 + u3]), f2, i3));\n          });\n        }\n        return i2.contour = o2, i2.size = function(e3) {\n          if (!arguments.length)\n            return [t2, n2];\n          var r3 = Math.floor(e3[0]), o3 = Math.floor(e3[1]);\n          if (!(r3 >= 0 && o3 >= 0))\n            throw new Error(\"invalid size\");\n          return t2 = r3, n2 = o3, i2;\n        }, i2.thresholds = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : Array.isArray(t3) ? Qa(Za.call(t3)) : Qa(t3), i2) : e2;\n        }, i2.smooth = function(t3) {\n          return arguments.length ? (r2 = t3 ? u2 : eu, i2) : r2 === u2;\n        }, i2;\n      }\n      function ou(t2) {\n        return isFinite(t2) ? t2 : NaN;\n      }\n      function au(t2, n2) {\n        return null != t2 && +t2 >= n2;\n      }\n      function uu(t2) {\n        return null == t2 || isNaN(t2 = +t2) ? -1 / 0 : t2;\n      }\n      function cu(t2, n2, e2, r2) {\n        const i2 = r2 - n2, o2 = e2 - n2, a2 = isFinite(i2) || isFinite(o2) ? i2 / o2 : Math.sign(i2) / Math.sign(o2);\n        return isNaN(a2) ? t2 : t2 + a2 - 0.5;\n      }\n      function fu(t2) {\n        return t2[0];\n      }\n      function su(t2) {\n        return t2[1];\n      }\n      function lu() {\n        return 1;\n      }\n      const hu = 134217729, du = 33306690738754706e-32;\n      function pu(t2, n2, e2, r2, i2) {\n        let o2, a2, u2, c2, f2 = n2[0], s2 = r2[0], l2 = 0, h2 = 0;\n        s2 > f2 == s2 > -f2 ? (o2 = f2, f2 = n2[++l2]) : (o2 = s2, s2 = r2[++h2]);\n        let d2 = 0;\n        if (l2 < t2 && h2 < e2)\n          for (s2 > f2 == s2 > -f2 ? (a2 = f2 + o2, u2 = o2 - (a2 - f2), f2 = n2[++l2]) : (a2 = s2 + o2, u2 = o2 - (a2 - s2), s2 = r2[++h2]), o2 = a2, 0 !== u2 && (i2[d2++] = u2); l2 < t2 && h2 < e2; )\n            s2 > f2 == s2 > -f2 ? (a2 = o2 + f2, c2 = a2 - o2, u2 = o2 - (a2 - c2) + (f2 - c2), f2 = n2[++l2]) : (a2 = o2 + s2, c2 = a2 - o2, u2 = o2 - (a2 - c2) + (s2 - c2), s2 = r2[++h2]), o2 = a2, 0 !== u2 && (i2[d2++] = u2);\n        for (; l2 < t2; )\n          a2 = o2 + f2, c2 = a2 - o2, u2 = o2 - (a2 - c2) + (f2 - c2), f2 = n2[++l2], o2 = a2, 0 !== u2 && (i2[d2++] = u2);\n        for (; h2 < e2; )\n          a2 = o2 + s2, c2 = a2 - o2, u2 = o2 - (a2 - c2) + (s2 - c2), s2 = r2[++h2], o2 = a2, 0 !== u2 && (i2[d2++] = u2);\n        return 0 === o2 && 0 !== d2 || (i2[d2++] = o2), d2;\n      }\n      function gu(t2) {\n        return new Float64Array(t2);\n      }\n      const yu = 22204460492503146e-32, vu = 11093356479670487e-47, _u = gu(4), bu = gu(8), mu = gu(12), xu = gu(16), wu = gu(4);\n      function Mu(t2, n2, e2, r2, i2, o2) {\n        const a2 = (n2 - o2) * (e2 - i2), u2 = (t2 - i2) * (r2 - o2), c2 = a2 - u2, f2 = Math.abs(a2 + u2);\n        return Math.abs(c2) >= 33306690738754716e-32 * f2 ? c2 : -function(t3, n3, e3, r3, i3, o3, a3) {\n          let u3, c3, f3, s2, l2, h2, d2, p2, g2, y2, v2, _2, b2, m2, x2, w2, M2, T2;\n          const A2 = t3 - i3, S2 = e3 - i3, E2 = n3 - o3, N2 = r3 - o3;\n          m2 = A2 * N2, h2 = hu * A2, d2 = h2 - (h2 - A2), p2 = A2 - d2, h2 = hu * N2, g2 = h2 - (h2 - N2), y2 = N2 - g2, x2 = p2 * y2 - (m2 - d2 * g2 - p2 * g2 - d2 * y2), w2 = E2 * S2, h2 = hu * E2, d2 = h2 - (h2 - E2), p2 = E2 - d2, h2 = hu * S2, g2 = h2 - (h2 - S2), y2 = S2 - g2, M2 = p2 * y2 - (w2 - d2 * g2 - p2 * g2 - d2 * y2), v2 = x2 - M2, l2 = x2 - v2, _u[0] = x2 - (v2 + l2) + (l2 - M2), _2 = m2 + v2, l2 = _2 - m2, b2 = m2 - (_2 - l2) + (v2 - l2), v2 = b2 - w2, l2 = b2 - v2, _u[1] = b2 - (v2 + l2) + (l2 - w2), T2 = _2 + v2, l2 = T2 - _2, _u[2] = _2 - (T2 - l2) + (v2 - l2), _u[3] = T2;\n          let k2 = function(t4, n4) {\n            let e4 = n4[0];\n            for (let r4 = 1; r4 < t4; r4++)\n              e4 += n4[r4];\n            return e4;\n          }(4, _u), C2 = yu * a3;\n          if (k2 >= C2 || -k2 >= C2)\n            return k2;\n          if (l2 = t3 - A2, u3 = t3 - (A2 + l2) + (l2 - i3), l2 = e3 - S2, f3 = e3 - (S2 + l2) + (l2 - i3), l2 = n3 - E2, c3 = n3 - (E2 + l2) + (l2 - o3), l2 = r3 - N2, s2 = r3 - (N2 + l2) + (l2 - o3), 0 === u3 && 0 === c3 && 0 === f3 && 0 === s2)\n            return k2;\n          if (C2 = vu * a3 + du * Math.abs(k2), k2 += A2 * s2 + N2 * u3 - (E2 * f3 + S2 * c3), k2 >= C2 || -k2 >= C2)\n            return k2;\n          m2 = u3 * N2, h2 = hu * u3, d2 = h2 - (h2 - u3), p2 = u3 - d2, h2 = hu * N2, g2 = h2 - (h2 - N2), y2 = N2 - g2, x2 = p2 * y2 - (m2 - d2 * g2 - p2 * g2 - d2 * y2), w2 = c3 * S2, h2 = hu * c3, d2 = h2 - (h2 - c3), p2 = c3 - d2, h2 = hu * S2, g2 = h2 - (h2 - S2), y2 = S2 - g2, M2 = p2 * y2 - (w2 - d2 * g2 - p2 * g2 - d2 * y2), v2 = x2 - M2, l2 = x2 - v2, wu[0] = x2 - (v2 + l2) + (l2 - M2), _2 = m2 + v2, l2 = _2 - m2, b2 = m2 - (_2 - l2) + (v2 - l2), v2 = b2 - w2, l2 = b2 - v2, wu[1] = b2 - (v2 + l2) + (l2 - w2), T2 = _2 + v2, l2 = T2 - _2, wu[2] = _2 - (T2 - l2) + (v2 - l2), wu[3] = T2;\n          const P2 = pu(4, _u, 4, wu, bu);\n          m2 = A2 * s2, h2 = hu * A2, d2 = h2 - (h2 - A2), p2 = A2 - d2, h2 = hu * s2, g2 = h2 - (h2 - s2), y2 = s2 - g2, x2 = p2 * y2 - (m2 - d2 * g2 - p2 * g2 - d2 * y2), w2 = E2 * f3, h2 = hu * E2, d2 = h2 - (h2 - E2), p2 = E2 - d2, h2 = hu * f3, g2 = h2 - (h2 - f3), y2 = f3 - g2, M2 = p2 * y2 - (w2 - d2 * g2 - p2 * g2 - d2 * y2), v2 = x2 - M2, l2 = x2 - v2, wu[0] = x2 - (v2 + l2) + (l2 - M2), _2 = m2 + v2, l2 = _2 - m2, b2 = m2 - (_2 - l2) + (v2 - l2), v2 = b2 - w2, l2 = b2 - v2, wu[1] = b2 - (v2 + l2) + (l2 - w2), T2 = _2 + v2, l2 = T2 - _2, wu[2] = _2 - (T2 - l2) + (v2 - l2), wu[3] = T2;\n          const z2 = pu(P2, bu, 4, wu, mu);\n          m2 = u3 * s2, h2 = hu * u3, d2 = h2 - (h2 - u3), p2 = u3 - d2, h2 = hu * s2, g2 = h2 - (h2 - s2), y2 = s2 - g2, x2 = p2 * y2 - (m2 - d2 * g2 - p2 * g2 - d2 * y2), w2 = c3 * f3, h2 = hu * c3, d2 = h2 - (h2 - c3), p2 = c3 - d2, h2 = hu * f3, g2 = h2 - (h2 - f3), y2 = f3 - g2, M2 = p2 * y2 - (w2 - d2 * g2 - p2 * g2 - d2 * y2), v2 = x2 - M2, l2 = x2 - v2, wu[0] = x2 - (v2 + l2) + (l2 - M2), _2 = m2 + v2, l2 = _2 - m2, b2 = m2 - (_2 - l2) + (v2 - l2), v2 = b2 - w2, l2 = b2 - v2, wu[1] = b2 - (v2 + l2) + (l2 - w2), T2 = _2 + v2, l2 = T2 - _2, wu[2] = _2 - (T2 - l2) + (v2 - l2), wu[3] = T2;\n          const $2 = pu(z2, mu, 4, wu, xu);\n          return xu[$2 - 1];\n        }(t2, n2, e2, r2, i2, o2, f2);\n      }\n      const Tu = Math.pow(2, -52), Au = new Uint32Array(512);\n      class Su {\n        static from(t2, n2 = zu, e2 = $u) {\n          const r2 = t2.length, i2 = new Float64Array(2 * r2);\n          for (let o2 = 0; o2 < r2; o2++) {\n            const r3 = t2[o2];\n            i2[2 * o2] = n2(r3), i2[2 * o2 + 1] = e2(r3);\n          }\n          return new Su(i2);\n        }\n        constructor(t2) {\n          const n2 = t2.length >> 1;\n          if (n2 > 0 && \"number\" != typeof t2[0])\n            throw new Error(\"Expected coords to contain numbers.\");\n          this.coords = t2;\n          const e2 = Math.max(2 * n2 - 5, 0);\n          this._triangles = new Uint32Array(3 * e2), this._halfedges = new Int32Array(3 * e2), this._hashSize = Math.ceil(Math.sqrt(n2)), this._hullPrev = new Uint32Array(n2), this._hullNext = new Uint32Array(n2), this._hullTri = new Uint32Array(n2), this._hullHash = new Int32Array(this._hashSize).fill(-1), this._ids = new Uint32Array(n2), this._dists = new Float64Array(n2), this.update();\n        }\n        update() {\n          const { coords: t2, _hullPrev: n2, _hullNext: e2, _hullTri: r2, _hullHash: i2 } = this, o2 = t2.length >> 1;\n          let a2 = 1 / 0, u2 = 1 / 0, c2 = -1 / 0, f2 = -1 / 0;\n          for (let n3 = 0; n3 < o2; n3++) {\n            const e3 = t2[2 * n3], r3 = t2[2 * n3 + 1];\n            e3 < a2 && (a2 = e3), r3 < u2 && (u2 = r3), e3 > c2 && (c2 = e3), r3 > f2 && (f2 = r3), this._ids[n3] = n3;\n          }\n          const s2 = (a2 + c2) / 2, l2 = (u2 + f2) / 2;\n          let h2, d2, p2, g2 = 1 / 0;\n          for (let n3 = 0; n3 < o2; n3++) {\n            const e3 = Eu(s2, l2, t2[2 * n3], t2[2 * n3 + 1]);\n            e3 < g2 && (h2 = n3, g2 = e3);\n          }\n          const y2 = t2[2 * h2], v2 = t2[2 * h2 + 1];\n          g2 = 1 / 0;\n          for (let n3 = 0; n3 < o2; n3++) {\n            if (n3 === h2)\n              continue;\n            const e3 = Eu(y2, v2, t2[2 * n3], t2[2 * n3 + 1]);\n            e3 < g2 && e3 > 0 && (d2 = n3, g2 = e3);\n          }\n          let _2 = t2[2 * d2], b2 = t2[2 * d2 + 1], m2 = 1 / 0;\n          for (let n3 = 0; n3 < o2; n3++) {\n            if (n3 === h2 || n3 === d2)\n              continue;\n            const e3 = ku(y2, v2, _2, b2, t2[2 * n3], t2[2 * n3 + 1]);\n            e3 < m2 && (p2 = n3, m2 = e3);\n          }\n          let x2 = t2[2 * p2], w2 = t2[2 * p2 + 1];\n          if (m2 === 1 / 0) {\n            for (let n4 = 0; n4 < o2; n4++)\n              this._dists[n4] = t2[2 * n4] - t2[0] || t2[2 * n4 + 1] - t2[1];\n            Cu(this._ids, this._dists, 0, o2 - 1);\n            const n3 = new Uint32Array(o2);\n            let e3 = 0;\n            for (let t3 = 0, r3 = -1 / 0; t3 < o2; t3++) {\n              const i3 = this._ids[t3];\n              this._dists[i3] > r3 && (n3[e3++] = i3, r3 = this._dists[i3]);\n            }\n            return this.hull = n3.subarray(0, e3), this.triangles = new Uint32Array(0), void (this.halfedges = new Uint32Array(0));\n          }\n          if (Mu(y2, v2, _2, b2, x2, w2) < 0) {\n            const t3 = d2, n3 = _2, e3 = b2;\n            d2 = p2, _2 = x2, b2 = w2, p2 = t3, x2 = n3, w2 = e3;\n          }\n          const M2 = function(t3, n3, e3, r3, i3, o3) {\n            const a3 = e3 - t3, u3 = r3 - n3, c3 = i3 - t3, f3 = o3 - n3, s3 = a3 * a3 + u3 * u3, l3 = c3 * c3 + f3 * f3, h3 = 0.5 / (a3 * f3 - u3 * c3), d4 = t3 + (f3 * s3 - u3 * l3) * h3, p3 = n3 + (a3 * l3 - c3 * s3) * h3;\n            return { x: d4, y: p3 };\n          }(y2, v2, _2, b2, x2, w2);\n          this._cx = M2.x, this._cy = M2.y;\n          for (let n3 = 0; n3 < o2; n3++)\n            this._dists[n3] = Eu(t2[2 * n3], t2[2 * n3 + 1], M2.x, M2.y);\n          Cu(this._ids, this._dists, 0, o2 - 1), this._hullStart = h2;\n          let T2 = 3;\n          e2[h2] = n2[p2] = d2, e2[d2] = n2[h2] = p2, e2[p2] = n2[d2] = h2, r2[h2] = 0, r2[d2] = 1, r2[p2] = 2, i2.fill(-1), i2[this._hashKey(y2, v2)] = h2, i2[this._hashKey(_2, b2)] = d2, i2[this._hashKey(x2, w2)] = p2, this.trianglesLen = 0, this._addTriangle(h2, d2, p2, -1, -1, -1);\n          for (let o3, a3, u3 = 0; u3 < this._ids.length; u3++) {\n            const c3 = this._ids[u3], f3 = t2[2 * c3], s3 = t2[2 * c3 + 1];\n            if (u3 > 0 && Math.abs(f3 - o3) <= Tu && Math.abs(s3 - a3) <= Tu)\n              continue;\n            if (o3 = f3, a3 = s3, c3 === h2 || c3 === d2 || c3 === p2)\n              continue;\n            let l3 = 0;\n            for (let t3 = 0, n3 = this._hashKey(f3, s3); t3 < this._hashSize && (l3 = i2[(n3 + t3) % this._hashSize], -1 === l3 || l3 === e2[l3]); t3++)\n              ;\n            l3 = n2[l3];\n            let g3, y3 = l3;\n            for (; g3 = e2[y3], Mu(f3, s3, t2[2 * y3], t2[2 * y3 + 1], t2[2 * g3], t2[2 * g3 + 1]) >= 0; )\n              if (y3 = g3, y3 === l3) {\n                y3 = -1;\n                break;\n              }\n            if (-1 === y3)\n              continue;\n            let v3 = this._addTriangle(y3, c3, e2[y3], -1, -1, r2[y3]);\n            r2[c3] = this._legalize(v3 + 2), r2[y3] = v3, T2++;\n            let _3 = e2[y3];\n            for (; g3 = e2[_3], Mu(f3, s3, t2[2 * _3], t2[2 * _3 + 1], t2[2 * g3], t2[2 * g3 + 1]) < 0; )\n              v3 = this._addTriangle(_3, c3, g3, r2[c3], -1, r2[_3]), r2[c3] = this._legalize(v3 + 2), e2[_3] = _3, T2--, _3 = g3;\n            if (y3 === l3)\n              for (; g3 = n2[y3], Mu(f3, s3, t2[2 * g3], t2[2 * g3 + 1], t2[2 * y3], t2[2 * y3 + 1]) < 0; )\n                v3 = this._addTriangle(g3, c3, y3, -1, r2[y3], r2[g3]), this._legalize(v3 + 2), r2[g3] = v3, e2[y3] = y3, T2--, y3 = g3;\n            this._hullStart = n2[c3] = y3, e2[y3] = n2[_3] = c3, e2[c3] = _3, i2[this._hashKey(f3, s3)] = c3, i2[this._hashKey(t2[2 * y3], t2[2 * y3 + 1])] = y3;\n          }\n          this.hull = new Uint32Array(T2);\n          for (let t3 = 0, n3 = this._hullStart; t3 < T2; t3++)\n            this.hull[t3] = n3, n3 = e2[n3];\n          this.triangles = this._triangles.subarray(0, this.trianglesLen), this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n        }\n        _hashKey(t2, n2) {\n          return Math.floor(function(t3, n3) {\n            const e2 = t3 / (Math.abs(t3) + Math.abs(n3));\n            return (n3 > 0 ? 3 - e2 : 1 + e2) / 4;\n          }(t2 - this._cx, n2 - this._cy) * this._hashSize) % this._hashSize;\n        }\n        _legalize(t2) {\n          const { _triangles: n2, _halfedges: e2, coords: r2 } = this;\n          let i2 = 0, o2 = 0;\n          for (; ; ) {\n            const a2 = e2[t2], u2 = t2 - t2 % 3;\n            if (o2 = u2 + (t2 + 2) % 3, -1 === a2) {\n              if (0 === i2)\n                break;\n              t2 = Au[--i2];\n              continue;\n            }\n            const c2 = a2 - a2 % 3, f2 = u2 + (t2 + 1) % 3, s2 = c2 + (a2 + 2) % 3, l2 = n2[o2], h2 = n2[t2], d2 = n2[f2], p2 = n2[s2];\n            if (Nu(r2[2 * l2], r2[2 * l2 + 1], r2[2 * h2], r2[2 * h2 + 1], r2[2 * d2], r2[2 * d2 + 1], r2[2 * p2], r2[2 * p2 + 1])) {\n              n2[t2] = p2, n2[a2] = l2;\n              const r3 = e2[s2];\n              if (-1 === r3) {\n                let n3 = this._hullStart;\n                do {\n                  if (this._hullTri[n3] === s2) {\n                    this._hullTri[n3] = t2;\n                    break;\n                  }\n                  n3 = this._hullPrev[n3];\n                } while (n3 !== this._hullStart);\n              }\n              this._link(t2, r3), this._link(a2, e2[o2]), this._link(o2, s2);\n              const u3 = c2 + (a2 + 1) % 3;\n              i2 < Au.length && (Au[i2++] = u3);\n            } else {\n              if (0 === i2)\n                break;\n              t2 = Au[--i2];\n            }\n          }\n          return o2;\n        }\n        _link(t2, n2) {\n          this._halfedges[t2] = n2, -1 !== n2 && (this._halfedges[n2] = t2);\n        }\n        _addTriangle(t2, n2, e2, r2, i2, o2) {\n          const a2 = this.trianglesLen;\n          return this._triangles[a2] = t2, this._triangles[a2 + 1] = n2, this._triangles[a2 + 2] = e2, this._link(a2, r2), this._link(a2 + 1, i2), this._link(a2 + 2, o2), this.trianglesLen += 3, a2;\n        }\n      }\n      function Eu(t2, n2, e2, r2) {\n        const i2 = t2 - e2, o2 = n2 - r2;\n        return i2 * i2 + o2 * o2;\n      }\n      function Nu(t2, n2, e2, r2, i2, o2, a2, u2) {\n        const c2 = t2 - a2, f2 = n2 - u2, s2 = e2 - a2, l2 = r2 - u2, h2 = i2 - a2, d2 = o2 - u2, p2 = s2 * s2 + l2 * l2, g2 = h2 * h2 + d2 * d2;\n        return c2 * (l2 * g2 - p2 * d2) - f2 * (s2 * g2 - p2 * h2) + (c2 * c2 + f2 * f2) * (s2 * d2 - l2 * h2) < 0;\n      }\n      function ku(t2, n2, e2, r2, i2, o2) {\n        const a2 = e2 - t2, u2 = r2 - n2, c2 = i2 - t2, f2 = o2 - n2, s2 = a2 * a2 + u2 * u2, l2 = c2 * c2 + f2 * f2, h2 = 0.5 / (a2 * f2 - u2 * c2), d2 = (f2 * s2 - u2 * l2) * h2, p2 = (a2 * l2 - c2 * s2) * h2;\n        return d2 * d2 + p2 * p2;\n      }\n      function Cu(t2, n2, e2, r2) {\n        if (r2 - e2 <= 20)\n          for (let i2 = e2 + 1; i2 <= r2; i2++) {\n            const r3 = t2[i2], o2 = n2[r3];\n            let a2 = i2 - 1;\n            for (; a2 >= e2 && n2[t2[a2]] > o2; )\n              t2[a2 + 1] = t2[a2--];\n            t2[a2 + 1] = r3;\n          }\n        else {\n          let i2 = e2 + 1, o2 = r2;\n          Pu(t2, e2 + r2 >> 1, i2), n2[t2[e2]] > n2[t2[r2]] && Pu(t2, e2, r2), n2[t2[i2]] > n2[t2[r2]] && Pu(t2, i2, r2), n2[t2[e2]] > n2[t2[i2]] && Pu(t2, e2, i2);\n          const a2 = t2[i2], u2 = n2[a2];\n          for (; ; ) {\n            do {\n              i2++;\n            } while (n2[t2[i2]] < u2);\n            do {\n              o2--;\n            } while (n2[t2[o2]] > u2);\n            if (o2 < i2)\n              break;\n            Pu(t2, i2, o2);\n          }\n          t2[e2 + 1] = t2[o2], t2[o2] = a2, r2 - i2 + 1 >= o2 - e2 ? (Cu(t2, n2, i2, r2), Cu(t2, n2, e2, o2 - 1)) : (Cu(t2, n2, e2, o2 - 1), Cu(t2, n2, i2, r2));\n        }\n      }\n      function Pu(t2, n2, e2) {\n        const r2 = t2[n2];\n        t2[n2] = t2[e2], t2[e2] = r2;\n      }\n      function zu(t2) {\n        return t2[0];\n      }\n      function $u(t2) {\n        return t2[1];\n      }\n      const Du = 1e-6;\n      class Ru {\n        constructor() {\n          this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = \"\";\n        }\n        moveTo(t2, n2) {\n          this._ += `M${this._x0 = this._x1 = +t2},${this._y0 = this._y1 = +n2}`;\n        }\n        closePath() {\n          null !== this._x1 && (this._x1 = this._x0, this._y1 = this._y0, this._ += \"Z\");\n        }\n        lineTo(t2, n2) {\n          this._ += `L${this._x1 = +t2},${this._y1 = +n2}`;\n        }\n        arc(t2, n2, e2) {\n          const r2 = (t2 = +t2) + (e2 = +e2), i2 = n2 = +n2;\n          if (e2 < 0)\n            throw new Error(\"negative radius\");\n          null === this._x1 ? this._ += `M${r2},${i2}` : (Math.abs(this._x1 - r2) > Du || Math.abs(this._y1 - i2) > Du) && (this._ += \"L\" + r2 + \",\" + i2), e2 && (this._ += `A${e2},${e2},0,1,1,${t2 - e2},${n2}A${e2},${e2},0,1,1,${this._x1 = r2},${this._y1 = i2}`);\n        }\n        rect(t2, n2, e2, r2) {\n          this._ += `M${this._x0 = this._x1 = +t2},${this._y0 = this._y1 = +n2}h${+e2}v${+r2}h${-e2}Z`;\n        }\n        value() {\n          return this._ || null;\n        }\n      }\n      class Fu {\n        constructor() {\n          this._ = [];\n        }\n        moveTo(t2, n2) {\n          this._.push([t2, n2]);\n        }\n        closePath() {\n          this._.push(this._[0].slice());\n        }\n        lineTo(t2, n2) {\n          this._.push([t2, n2]);\n        }\n        value() {\n          return this._.length ? this._ : null;\n        }\n      }\n      class qu {\n        constructor(t2, [n2, e2, r2, i2] = [0, 0, 960, 500]) {\n          if (!((r2 = +r2) >= (n2 = +n2) && (i2 = +i2) >= (e2 = +e2)))\n            throw new Error(\"invalid bounds\");\n          this.delaunay = t2, this._circumcenters = new Float64Array(2 * t2.points.length), this.vectors = new Float64Array(2 * t2.points.length), this.xmax = r2, this.xmin = n2, this.ymax = i2, this.ymin = e2, this._init();\n        }\n        update() {\n          return this.delaunay.update(), this._init(), this;\n        }\n        _init() {\n          const { delaunay: { points: t2, hull: n2, triangles: e2 }, vectors: r2 } = this;\n          let i2, o2;\n          const a2 = this.circumcenters = this._circumcenters.subarray(0, e2.length / 3 * 2);\n          for (let r3, u3, c3 = 0, f3 = 0, s3 = e2.length; c3 < s3; c3 += 3, f3 += 2) {\n            const s4 = 2 * e2[c3], l3 = 2 * e2[c3 + 1], h3 = 2 * e2[c3 + 2], d4 = t2[s4], p2 = t2[s4 + 1], g2 = t2[l3], y2 = t2[l3 + 1], v2 = t2[h3], _2 = t2[h3 + 1], b2 = g2 - d4, m2 = y2 - p2, x2 = v2 - d4, w2 = _2 - p2, M2 = 2 * (b2 * w2 - m2 * x2);\n            if (Math.abs(M2) < 1e-9) {\n              if (void 0 === i2) {\n                i2 = o2 = 0;\n                for (const e4 of n2)\n                  i2 += t2[2 * e4], o2 += t2[2 * e4 + 1];\n                i2 /= n2.length, o2 /= n2.length;\n              }\n              const e3 = 1e9 * Math.sign((i2 - d4) * w2 - (o2 - p2) * x2);\n              r3 = (d4 + v2) / 2 - e3 * w2, u3 = (p2 + _2) / 2 + e3 * x2;\n            } else {\n              const t3 = 1 / M2, n3 = b2 * b2 + m2 * m2, e3 = x2 * x2 + w2 * w2;\n              r3 = d4 + (w2 * n3 - m2 * e3) * t3, u3 = p2 + (b2 * e3 - x2 * n3) * t3;\n            }\n            a2[f3] = r3, a2[f3 + 1] = u3;\n          }\n          let u2, c2, f2, s2 = n2[n2.length - 1], l2 = 4 * s2, h2 = t2[2 * s2], d2 = t2[2 * s2 + 1];\n          r2.fill(0);\n          for (let e3 = 0; e3 < n2.length; ++e3)\n            s2 = n2[e3], u2 = l2, c2 = h2, f2 = d2, l2 = 4 * s2, h2 = t2[2 * s2], d2 = t2[2 * s2 + 1], r2[u2 + 2] = r2[l2] = f2 - d2, r2[u2 + 3] = r2[l2 + 1] = h2 - c2;\n        }\n        render(t2) {\n          const n2 = null == t2 ? t2 = new Ru() : void 0, { delaunay: { halfedges: e2, inedges: r2, hull: i2 }, circumcenters: o2, vectors: a2 } = this;\n          if (i2.length <= 1)\n            return null;\n          for (let n3 = 0, r3 = e2.length; n3 < r3; ++n3) {\n            const r4 = e2[n3];\n            if (r4 < n3)\n              continue;\n            const i3 = 2 * Math.floor(n3 / 3), a3 = 2 * Math.floor(r4 / 3), u3 = o2[i3], c3 = o2[i3 + 1], f2 = o2[a3], s2 = o2[a3 + 1];\n            this._renderSegment(u3, c3, f2, s2, t2);\n          }\n          let u2, c2 = i2[i2.length - 1];\n          for (let n3 = 0; n3 < i2.length; ++n3) {\n            u2 = c2, c2 = i2[n3];\n            const e3 = 2 * Math.floor(r2[c2] / 3), f2 = o2[e3], s2 = o2[e3 + 1], l2 = 4 * u2, h2 = this._project(f2, s2, a2[l2 + 2], a2[l2 + 3]);\n            h2 && this._renderSegment(f2, s2, h2[0], h2[1], t2);\n          }\n          return n2 && n2.value();\n        }\n        renderBounds(t2) {\n          const n2 = null == t2 ? t2 = new Ru() : void 0;\n          return t2.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin), n2 && n2.value();\n        }\n        renderCell(t2, n2) {\n          const e2 = null == n2 ? n2 = new Ru() : void 0, r2 = this._clip(t2);\n          if (null === r2 || !r2.length)\n            return;\n          n2.moveTo(r2[0], r2[1]);\n          let i2 = r2.length;\n          for (; r2[0] === r2[i2 - 2] && r2[1] === r2[i2 - 1] && i2 > 1; )\n            i2 -= 2;\n          for (let t3 = 2; t3 < i2; t3 += 2)\n            r2[t3] === r2[t3 - 2] && r2[t3 + 1] === r2[t3 - 1] || n2.lineTo(r2[t3], r2[t3 + 1]);\n          return n2.closePath(), e2 && e2.value();\n        }\n        *cellPolygons() {\n          const { delaunay: { points: t2 } } = this;\n          for (let n2 = 0, e2 = t2.length / 2; n2 < e2; ++n2) {\n            const t3 = this.cellPolygon(n2);\n            t3 && (t3.index = n2, yield t3);\n          }\n        }\n        cellPolygon(t2) {\n          const n2 = new Fu();\n          return this.renderCell(t2, n2), n2.value();\n        }\n        _renderSegment(t2, n2, e2, r2, i2) {\n          let o2;\n          const a2 = this._regioncode(t2, n2), u2 = this._regioncode(e2, r2);\n          0 === a2 && 0 === u2 ? (i2.moveTo(t2, n2), i2.lineTo(e2, r2)) : (o2 = this._clipSegment(t2, n2, e2, r2, a2, u2)) && (i2.moveTo(o2[0], o2[1]), i2.lineTo(o2[2], o2[3]));\n        }\n        contains(t2, n2, e2) {\n          return (n2 = +n2) == n2 && (e2 = +e2) == e2 && this.delaunay._step(t2, n2, e2) === t2;\n        }\n        *neighbors(t2) {\n          const n2 = this._clip(t2);\n          if (n2)\n            for (const e2 of this.delaunay.neighbors(t2)) {\n              const t3 = this._clip(e2);\n              if (t3) {\n                t:\n                  for (let r2 = 0, i2 = n2.length; r2 < i2; r2 += 2)\n                    for (let o2 = 0, a2 = t3.length; o2 < a2; o2 += 2)\n                      if (n2[r2] === t3[o2] && n2[r2 + 1] === t3[o2 + 1] && n2[(r2 + 2) % i2] === t3[(o2 + a2 - 2) % a2] && n2[(r2 + 3) % i2] === t3[(o2 + a2 - 1) % a2]) {\n                        yield e2;\n                        break t;\n                      }\n              }\n            }\n        }\n        _cell(t2) {\n          const { circumcenters: n2, delaunay: { inedges: e2, halfedges: r2, triangles: i2 } } = this, o2 = e2[t2];\n          if (-1 === o2)\n            return null;\n          const a2 = [];\n          let u2 = o2;\n          do {\n            const e3 = Math.floor(u2 / 3);\n            if (a2.push(n2[2 * e3], n2[2 * e3 + 1]), u2 = u2 % 3 == 2 ? u2 - 2 : u2 + 1, i2[u2] !== t2)\n              break;\n            u2 = r2[u2];\n          } while (u2 !== o2 && -1 !== u2);\n          return a2;\n        }\n        _clip(t2) {\n          if (0 === t2 && 1 === this.delaunay.hull.length)\n            return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n          const n2 = this._cell(t2);\n          if (null === n2)\n            return null;\n          const { vectors: e2 } = this, r2 = 4 * t2;\n          return this._simplify(e2[r2] || e2[r2 + 1] ? this._clipInfinite(t2, n2, e2[r2], e2[r2 + 1], e2[r2 + 2], e2[r2 + 3]) : this._clipFinite(t2, n2));\n        }\n        _clipFinite(t2, n2) {\n          const e2 = n2.length;\n          let r2, i2, o2, a2, u2 = null, c2 = n2[e2 - 2], f2 = n2[e2 - 1], s2 = this._regioncode(c2, f2), l2 = 0;\n          for (let h2 = 0; h2 < e2; h2 += 2)\n            if (r2 = c2, i2 = f2, c2 = n2[h2], f2 = n2[h2 + 1], o2 = s2, s2 = this._regioncode(c2, f2), 0 === o2 && 0 === s2)\n              a2 = l2, l2 = 0, u2 ? u2.push(c2, f2) : u2 = [c2, f2];\n            else {\n              let n3, e3, h3, d2, p2;\n              if (0 === o2) {\n                if (null === (n3 = this._clipSegment(r2, i2, c2, f2, o2, s2)))\n                  continue;\n                [e3, h3, d2, p2] = n3;\n              } else {\n                if (null === (n3 = this._clipSegment(c2, f2, r2, i2, s2, o2)))\n                  continue;\n                [d2, p2, e3, h3] = n3, a2 = l2, l2 = this._edgecode(e3, h3), a2 && l2 && this._edge(t2, a2, l2, u2, u2.length), u2 ? u2.push(e3, h3) : u2 = [e3, h3];\n              }\n              a2 = l2, l2 = this._edgecode(d2, p2), a2 && l2 && this._edge(t2, a2, l2, u2, u2.length), u2 ? u2.push(d2, p2) : u2 = [d2, p2];\n            }\n          if (u2)\n            a2 = l2, l2 = this._edgecode(u2[0], u2[1]), a2 && l2 && this._edge(t2, a2, l2, u2, u2.length);\n          else if (this.contains(t2, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2))\n            return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n          return u2;\n        }\n        _clipSegment(t2, n2, e2, r2, i2, o2) {\n          const a2 = i2 < o2;\n          for (a2 && ([t2, n2, e2, r2, i2, o2] = [e2, r2, t2, n2, o2, i2]); ; ) {\n            if (0 === i2 && 0 === o2)\n              return a2 ? [e2, r2, t2, n2] : [t2, n2, e2, r2];\n            if (i2 & o2)\n              return null;\n            let u2, c2, f2 = i2 || o2;\n            8 & f2 ? (u2 = t2 + (e2 - t2) * (this.ymax - n2) / (r2 - n2), c2 = this.ymax) : 4 & f2 ? (u2 = t2 + (e2 - t2) * (this.ymin - n2) / (r2 - n2), c2 = this.ymin) : 2 & f2 ? (c2 = n2 + (r2 - n2) * (this.xmax - t2) / (e2 - t2), u2 = this.xmax) : (c2 = n2 + (r2 - n2) * (this.xmin - t2) / (e2 - t2), u2 = this.xmin), i2 ? (t2 = u2, n2 = c2, i2 = this._regioncode(t2, n2)) : (e2 = u2, r2 = c2, o2 = this._regioncode(e2, r2));\n          }\n        }\n        _clipInfinite(t2, n2, e2, r2, i2, o2) {\n          let a2, u2 = Array.from(n2);\n          if ((a2 = this._project(u2[0], u2[1], e2, r2)) && u2.unshift(a2[0], a2[1]), (a2 = this._project(u2[u2.length - 2], u2[u2.length - 1], i2, o2)) && u2.push(a2[0], a2[1]), u2 = this._clipFinite(t2, u2))\n            for (let n3, e3 = 0, r3 = u2.length, i3 = this._edgecode(u2[r3 - 2], u2[r3 - 1]); e3 < r3; e3 += 2)\n              n3 = i3, i3 = this._edgecode(u2[e3], u2[e3 + 1]), n3 && i3 && (e3 = this._edge(t2, n3, i3, u2, e3), r3 = u2.length);\n          else\n            this.contains(t2, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2) && (u2 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax]);\n          return u2;\n        }\n        _edge(t2, n2, e2, r2, i2) {\n          for (; n2 !== e2; ) {\n            let e3, o2;\n            switch (n2) {\n              case 5:\n                n2 = 4;\n                continue;\n              case 4:\n                n2 = 6, e3 = this.xmax, o2 = this.ymin;\n                break;\n              case 6:\n                n2 = 2;\n                continue;\n              case 2:\n                n2 = 10, e3 = this.xmax, o2 = this.ymax;\n                break;\n              case 10:\n                n2 = 8;\n                continue;\n              case 8:\n                n2 = 9, e3 = this.xmin, o2 = this.ymax;\n                break;\n              case 9:\n                n2 = 1;\n                continue;\n              case 1:\n                n2 = 5, e3 = this.xmin, o2 = this.ymin;\n            }\n            r2[i2] === e3 && r2[i2 + 1] === o2 || !this.contains(t2, e3, o2) || (r2.splice(i2, 0, e3, o2), i2 += 2);\n          }\n          return i2;\n        }\n        _project(t2, n2, e2, r2) {\n          let i2, o2, a2, u2 = 1 / 0;\n          if (r2 < 0) {\n            if (n2 <= this.ymin)\n              return null;\n            (i2 = (this.ymin - n2) / r2) < u2 && (a2 = this.ymin, o2 = t2 + (u2 = i2) * e2);\n          } else if (r2 > 0) {\n            if (n2 >= this.ymax)\n              return null;\n            (i2 = (this.ymax - n2) / r2) < u2 && (a2 = this.ymax, o2 = t2 + (u2 = i2) * e2);\n          }\n          if (e2 > 0) {\n            if (t2 >= this.xmax)\n              return null;\n            (i2 = (this.xmax - t2) / e2) < u2 && (o2 = this.xmax, a2 = n2 + (u2 = i2) * r2);\n          } else if (e2 < 0) {\n            if (t2 <= this.xmin)\n              return null;\n            (i2 = (this.xmin - t2) / e2) < u2 && (o2 = this.xmin, a2 = n2 + (u2 = i2) * r2);\n          }\n          return [o2, a2];\n        }\n        _edgecode(t2, n2) {\n          return (t2 === this.xmin ? 1 : t2 === this.xmax ? 2 : 0) | (n2 === this.ymin ? 4 : n2 === this.ymax ? 8 : 0);\n        }\n        _regioncode(t2, n2) {\n          return (t2 < this.xmin ? 1 : t2 > this.xmax ? 2 : 0) | (n2 < this.ymin ? 4 : n2 > this.ymax ? 8 : 0);\n        }\n        _simplify(t2) {\n          if (t2 && t2.length > 4) {\n            for (let n2 = 0; n2 < t2.length; n2 += 2) {\n              const e2 = (n2 + 2) % t2.length, r2 = (n2 + 4) % t2.length;\n              (t2[n2] === t2[e2] && t2[e2] === t2[r2] || t2[n2 + 1] === t2[e2 + 1] && t2[e2 + 1] === t2[r2 + 1]) && (t2.splice(e2, 2), n2 -= 2);\n            }\n            t2.length || (t2 = null);\n          }\n          return t2;\n        }\n      }\n      const Uu = 2 * Math.PI, Iu = Math.pow;\n      function Ou(t2) {\n        return t2[0];\n      }\n      function Bu(t2) {\n        return t2[1];\n      }\n      function Yu(t2, n2, e2) {\n        return [t2 + Math.sin(t2 + n2) * e2, n2 + Math.cos(t2 - n2) * e2];\n      }\n      class Lu {\n        static from(t2, n2 = Ou, e2 = Bu, r2) {\n          return new Lu(\"length\" in t2 ? function(t3, n3, e3, r3) {\n            const i2 = t3.length, o2 = new Float64Array(2 * i2);\n            for (let a2 = 0; a2 < i2; ++a2) {\n              const i3 = t3[a2];\n              o2[2 * a2] = n3.call(r3, i3, a2, t3), o2[2 * a2 + 1] = e3.call(r3, i3, a2, t3);\n            }\n            return o2;\n          }(t2, n2, e2, r2) : Float64Array.from(function* (t3, n3, e3, r3) {\n            let i2 = 0;\n            for (const o2 of t3)\n              yield n3.call(r3, o2, i2, t3), yield e3.call(r3, o2, i2, t3), ++i2;\n          }(t2, n2, e2, r2)));\n        }\n        constructor(t2) {\n          this._delaunator = new Su(t2), this.inedges = new Int32Array(t2.length / 2), this._hullIndex = new Int32Array(t2.length / 2), this.points = this._delaunator.coords, this._init();\n        }\n        update() {\n          return this._delaunator.update(), this._init(), this;\n        }\n        _init() {\n          const t2 = this._delaunator, n2 = this.points;\n          if (t2.hull && t2.hull.length > 2 && function(t3) {\n            const { triangles: n3, coords: e3 } = t3;\n            for (let t4 = 0; t4 < n3.length; t4 += 3) {\n              const r3 = 2 * n3[t4], i3 = 2 * n3[t4 + 1], o3 = 2 * n3[t4 + 2];\n              if ((e3[o3] - e3[r3]) * (e3[i3 + 1] - e3[r3 + 1]) - (e3[i3] - e3[r3]) * (e3[o3 + 1] - e3[r3 + 1]) > 1e-10)\n                return false;\n            }\n            return true;\n          }(t2)) {\n            this.collinear = Int32Array.from({ length: n2.length / 2 }, (t4, n3) => n3).sort((t4, e4) => n2[2 * t4] - n2[2 * e4] || n2[2 * t4 + 1] - n2[2 * e4 + 1]);\n            const t3 = this.collinear[0], e3 = this.collinear[this.collinear.length - 1], r3 = [n2[2 * t3], n2[2 * t3 + 1], n2[2 * e3], n2[2 * e3 + 1]], i3 = 1e-8 * Math.hypot(r3[3] - r3[1], r3[2] - r3[0]);\n            for (let t4 = 0, e4 = n2.length / 2; t4 < e4; ++t4) {\n              const e5 = Yu(n2[2 * t4], n2[2 * t4 + 1], i3);\n              n2[2 * t4] = e5[0], n2[2 * t4 + 1] = e5[1];\n            }\n            this._delaunator = new Su(n2);\n          } else\n            delete this.collinear;\n          const e2 = this.halfedges = this._delaunator.halfedges, r2 = this.hull = this._delaunator.hull, i2 = this.triangles = this._delaunator.triangles, o2 = this.inedges.fill(-1), a2 = this._hullIndex.fill(-1);\n          for (let t3 = 0, n3 = e2.length; t3 < n3; ++t3) {\n            const n4 = i2[t3 % 3 == 2 ? t3 - 2 : t3 + 1];\n            -1 !== e2[t3] && -1 !== o2[n4] || (o2[n4] = t3);\n          }\n          for (let t3 = 0, n3 = r2.length; t3 < n3; ++t3)\n            a2[r2[t3]] = t3;\n          r2.length <= 2 && r2.length > 0 && (this.triangles = new Int32Array(3).fill(-1), this.halfedges = new Int32Array(3).fill(-1), this.triangles[0] = r2[0], o2[r2[0]] = 1, 2 === r2.length && (o2[r2[1]] = 0, this.triangles[1] = r2[1], this.triangles[2] = r2[1]));\n        }\n        voronoi(t2) {\n          return new qu(this, t2);\n        }\n        *neighbors(t2) {\n          const { inedges: n2, hull: e2, _hullIndex: r2, halfedges: i2, triangles: o2, collinear: a2 } = this;\n          if (a2) {\n            const n3 = a2.indexOf(t2);\n            return n3 > 0 && (yield a2[n3 - 1]), void (n3 < a2.length - 1 && (yield a2[n3 + 1]));\n          }\n          const u2 = n2[t2];\n          if (-1 === u2)\n            return;\n          let c2 = u2, f2 = -1;\n          do {\n            if (yield f2 = o2[c2], c2 = c2 % 3 == 2 ? c2 - 2 : c2 + 1, o2[c2] !== t2)\n              return;\n            if (c2 = i2[c2], -1 === c2) {\n              const n3 = e2[(r2[t2] + 1) % e2.length];\n              return void (n3 !== f2 && (yield n3));\n            }\n          } while (c2 !== u2);\n        }\n        find(t2, n2, e2 = 0) {\n          if ((t2 = +t2) != t2 || (n2 = +n2) != n2)\n            return -1;\n          const r2 = e2;\n          let i2;\n          for (; (i2 = this._step(e2, t2, n2)) >= 0 && i2 !== e2 && i2 !== r2; )\n            e2 = i2;\n          return i2;\n        }\n        _step(t2, n2, e2) {\n          const { inedges: r2, hull: i2, _hullIndex: o2, halfedges: a2, triangles: u2, points: c2 } = this;\n          if (-1 === r2[t2] || !c2.length)\n            return (t2 + 1) % (c2.length >> 1);\n          let f2 = t2, s2 = Iu(n2 - c2[2 * t2], 2) + Iu(e2 - c2[2 * t2 + 1], 2);\n          const l2 = r2[t2];\n          let h2 = l2;\n          do {\n            let r3 = u2[h2];\n            const l3 = Iu(n2 - c2[2 * r3], 2) + Iu(e2 - c2[2 * r3 + 1], 2);\n            if (l3 < s2 && (s2 = l3, f2 = r3), h2 = h2 % 3 == 2 ? h2 - 2 : h2 + 1, u2[h2] !== t2)\n              break;\n            if (h2 = a2[h2], -1 === h2) {\n              if (h2 = i2[(o2[t2] + 1) % i2.length], h2 !== r3 && Iu(n2 - c2[2 * h2], 2) + Iu(e2 - c2[2 * h2 + 1], 2) < s2)\n                return h2;\n              break;\n            }\n          } while (h2 !== l2);\n          return f2;\n        }\n        render(t2) {\n          const n2 = null == t2 ? t2 = new Ru() : void 0, { points: e2, halfedges: r2, triangles: i2 } = this;\n          for (let n3 = 0, o2 = r2.length; n3 < o2; ++n3) {\n            const o3 = r2[n3];\n            if (o3 < n3)\n              continue;\n            const a2 = 2 * i2[n3], u2 = 2 * i2[o3];\n            t2.moveTo(e2[a2], e2[a2 + 1]), t2.lineTo(e2[u2], e2[u2 + 1]);\n          }\n          return this.renderHull(t2), n2 && n2.value();\n        }\n        renderPoints(t2, n2) {\n          void 0 !== n2 || t2 && \"function\" == typeof t2.moveTo || (n2 = t2, t2 = null), n2 = null == n2 ? 2 : +n2;\n          const e2 = null == t2 ? t2 = new Ru() : void 0, { points: r2 } = this;\n          for (let e3 = 0, i2 = r2.length; e3 < i2; e3 += 2) {\n            const i3 = r2[e3], o2 = r2[e3 + 1];\n            t2.moveTo(i3 + n2, o2), t2.arc(i3, o2, n2, 0, Uu);\n          }\n          return e2 && e2.value();\n        }\n        renderHull(t2) {\n          const n2 = null == t2 ? t2 = new Ru() : void 0, { hull: e2, points: r2 } = this, i2 = 2 * e2[0], o2 = e2.length;\n          t2.moveTo(r2[i2], r2[i2 + 1]);\n          for (let n3 = 1; n3 < o2; ++n3) {\n            const i3 = 2 * e2[n3];\n            t2.lineTo(r2[i3], r2[i3 + 1]);\n          }\n          return t2.closePath(), n2 && n2.value();\n        }\n        hullPolygon() {\n          const t2 = new Fu();\n          return this.renderHull(t2), t2.value();\n        }\n        renderTriangle(t2, n2) {\n          const e2 = null == n2 ? n2 = new Ru() : void 0, { points: r2, triangles: i2 } = this, o2 = 2 * i2[t2 *= 3], a2 = 2 * i2[t2 + 1], u2 = 2 * i2[t2 + 2];\n          return n2.moveTo(r2[o2], r2[o2 + 1]), n2.lineTo(r2[a2], r2[a2 + 1]), n2.lineTo(r2[u2], r2[u2 + 1]), n2.closePath(), e2 && e2.value();\n        }\n        *trianglePolygons() {\n          const { triangles: t2 } = this;\n          for (let n2 = 0, e2 = t2.length / 3; n2 < e2; ++n2)\n            yield this.trianglePolygon(n2);\n        }\n        trianglePolygon(t2) {\n          const n2 = new Fu();\n          return this.renderTriangle(t2, n2), n2.value();\n        }\n      }\n      var ju = {}, Hu = {}, Xu = 34, Gu = 10, Vu = 13;\n      function Wu(t2) {\n        return new Function(\"d\", \"return {\" + t2.map(function(t3, n2) {\n          return JSON.stringify(t3) + \": d[\" + n2 + '] || \"\"';\n        }).join(\",\") + \"}\");\n      }\n      function Zu(t2) {\n        var n2 = /* @__PURE__ */ Object.create(null), e2 = [];\n        return t2.forEach(function(t3) {\n          for (var r2 in t3)\n            r2 in n2 || e2.push(n2[r2] = r2);\n        }), e2;\n      }\n      function Ku(t2, n2) {\n        var e2 = t2 + \"\", r2 = e2.length;\n        return r2 < n2 ? new Array(n2 - r2 + 1).join(0) + e2 : e2;\n      }\n      function Qu(t2) {\n        var n2, e2 = t2.getUTCHours(), r2 = t2.getUTCMinutes(), i2 = t2.getUTCSeconds(), o2 = t2.getUTCMilliseconds();\n        return isNaN(t2) ? \"Invalid Date\" : ((n2 = t2.getUTCFullYear()) < 0 ? \"-\" + Ku(-n2, 6) : n2 > 9999 ? \"+\" + Ku(n2, 6) : Ku(n2, 4)) + \"-\" + Ku(t2.getUTCMonth() + 1, 2) + \"-\" + Ku(t2.getUTCDate(), 2) + (o2 ? \"T\" + Ku(e2, 2) + \":\" + Ku(r2, 2) + \":\" + Ku(i2, 2) + \".\" + Ku(o2, 3) + \"Z\" : i2 ? \"T\" + Ku(e2, 2) + \":\" + Ku(r2, 2) + \":\" + Ku(i2, 2) + \"Z\" : r2 || e2 ? \"T\" + Ku(e2, 2) + \":\" + Ku(r2, 2) + \"Z\" : \"\");\n      }\n      function Ju(t2) {\n        var n2 = new RegExp('[\"' + t2 + \"\\n\\r]\"), e2 = t2.charCodeAt(0);\n        function r2(t3, n3) {\n          var r3, i3 = [], o3 = t3.length, a3 = 0, u2 = 0, c2 = o3 <= 0, f2 = false;\n          function s2() {\n            if (c2)\n              return Hu;\n            if (f2)\n              return f2 = false, ju;\n            var n4, r4, i4 = a3;\n            if (t3.charCodeAt(i4) === Xu) {\n              for (; a3++ < o3 && t3.charCodeAt(a3) !== Xu || t3.charCodeAt(++a3) === Xu; )\n                ;\n              return (n4 = a3) >= o3 ? c2 = true : (r4 = t3.charCodeAt(a3++)) === Gu ? f2 = true : r4 === Vu && (f2 = true, t3.charCodeAt(a3) === Gu && ++a3), t3.slice(i4 + 1, n4 - 1).replace(/\"\"/g, '\"');\n            }\n            for (; a3 < o3; ) {\n              if ((r4 = t3.charCodeAt(n4 = a3++)) === Gu)\n                f2 = true;\n              else if (r4 === Vu)\n                f2 = true, t3.charCodeAt(a3) === Gu && ++a3;\n              else if (r4 !== e2)\n                continue;\n              return t3.slice(i4, n4);\n            }\n            return c2 = true, t3.slice(i4, o3);\n          }\n          for (t3.charCodeAt(o3 - 1) === Gu && --o3, t3.charCodeAt(o3 - 1) === Vu && --o3; (r3 = s2()) !== Hu; ) {\n            for (var l2 = []; r3 !== ju && r3 !== Hu; )\n              l2.push(r3), r3 = s2();\n            n3 && null == (l2 = n3(l2, u2++)) || i3.push(l2);\n          }\n          return i3;\n        }\n        function i2(n3, e3) {\n          return n3.map(function(n4) {\n            return e3.map(function(t3) {\n              return a2(n4[t3]);\n            }).join(t2);\n          });\n        }\n        function o2(n3) {\n          return n3.map(a2).join(t2);\n        }\n        function a2(t3) {\n          return null == t3 ? \"\" : t3 instanceof Date ? Qu(t3) : n2.test(t3 += \"\") ? '\"' + t3.replace(/\"/g, '\"\"') + '\"' : t3;\n        }\n        return { parse: function(t3, n3) {\n          var e3, i3, o3 = r2(t3, function(t4, r3) {\n            if (e3)\n              return e3(t4, r3 - 1);\n            i3 = t4, e3 = n3 ? function(t5, n4) {\n              var e4 = Wu(t5);\n              return function(r4, i4) {\n                return n4(e4(r4), i4, t5);\n              };\n            }(t4, n3) : Wu(t4);\n          });\n          return o3.columns = i3 || [], o3;\n        }, parseRows: r2, format: function(n3, e3) {\n          return null == e3 && (e3 = Zu(n3)), [e3.map(a2).join(t2)].concat(i2(n3, e3)).join(\"\\n\");\n        }, formatBody: function(t3, n3) {\n          return null == n3 && (n3 = Zu(t3)), i2(t3, n3).join(\"\\n\");\n        }, formatRows: function(t3) {\n          return t3.map(o2).join(\"\\n\");\n        }, formatRow: o2, formatValue: a2 };\n      }\n      var tc = Ju(\",\"), nc = tc.parse, ec = tc.parseRows, rc = tc.format, ic = tc.formatBody, oc = tc.formatRows, ac = tc.formatRow, uc = tc.formatValue, cc = Ju(\"\t\"), fc = cc.parse, sc = cc.parseRows, lc = cc.format, hc = cc.formatBody, dc = cc.formatRows, pc = cc.formatRow, gc = cc.formatValue;\n      const yc = (/* @__PURE__ */ new Date(\"2019-01-01T00:00\")).getHours() || (/* @__PURE__ */ new Date(\"2019-07-01T00:00\")).getHours();\n      function vc(t2) {\n        if (!t2.ok)\n          throw new Error(t2.status + \" \" + t2.statusText);\n        return t2.blob();\n      }\n      function _c(t2) {\n        if (!t2.ok)\n          throw new Error(t2.status + \" \" + t2.statusText);\n        return t2.arrayBuffer();\n      }\n      function bc(t2) {\n        if (!t2.ok)\n          throw new Error(t2.status + \" \" + t2.statusText);\n        return t2.text();\n      }\n      function mc(t2, n2) {\n        return fetch(t2, n2).then(bc);\n      }\n      function xc(t2) {\n        return function(n2, e2, r2) {\n          return 2 === arguments.length && \"function\" == typeof e2 && (r2 = e2, e2 = void 0), mc(n2, e2).then(function(n3) {\n            return t2(n3, r2);\n          });\n        };\n      }\n      var wc = xc(nc), Mc = xc(fc);\n      function Tc(t2) {\n        if (!t2.ok)\n          throw new Error(t2.status + \" \" + t2.statusText);\n        if (204 !== t2.status && 205 !== t2.status)\n          return t2.json();\n      }\n      function Ac(t2) {\n        return (n2, e2) => mc(n2, e2).then((n3) => new DOMParser().parseFromString(n3, t2));\n      }\n      var Sc = Ac(\"application/xml\"), Ec = Ac(\"text/html\"), Nc = Ac(\"image/svg+xml\");\n      function kc(t2, n2, e2, r2) {\n        if (isNaN(n2) || isNaN(e2))\n          return t2;\n        var i2, o2, a2, u2, c2, f2, s2, l2, h2, d2 = t2._root, p2 = { data: r2 }, g2 = t2._x0, y2 = t2._y0, v2 = t2._x1, _2 = t2._y1;\n        if (!d2)\n          return t2._root = p2, t2;\n        for (; d2.length; )\n          if ((f2 = n2 >= (o2 = (g2 + v2) / 2)) ? g2 = o2 : v2 = o2, (s2 = e2 >= (a2 = (y2 + _2) / 2)) ? y2 = a2 : _2 = a2, i2 = d2, !(d2 = d2[l2 = s2 << 1 | f2]))\n            return i2[l2] = p2, t2;\n        if (u2 = +t2._x.call(null, d2.data), c2 = +t2._y.call(null, d2.data), n2 === u2 && e2 === c2)\n          return p2.next = d2, i2 ? i2[l2] = p2 : t2._root = p2, t2;\n        do {\n          i2 = i2 ? i2[l2] = new Array(4) : t2._root = new Array(4), (f2 = n2 >= (o2 = (g2 + v2) / 2)) ? g2 = o2 : v2 = o2, (s2 = e2 >= (a2 = (y2 + _2) / 2)) ? y2 = a2 : _2 = a2;\n        } while ((l2 = s2 << 1 | f2) == (h2 = (c2 >= a2) << 1 | u2 >= o2));\n        return i2[h2] = d2, i2[l2] = p2, t2;\n      }\n      function Cc(t2, n2, e2, r2, i2) {\n        this.node = t2, this.x0 = n2, this.y0 = e2, this.x1 = r2, this.y1 = i2;\n      }\n      function Pc(t2) {\n        return t2[0];\n      }\n      function zc(t2) {\n        return t2[1];\n      }\n      function $c(t2, n2, e2) {\n        var r2 = new Dc(null == n2 ? Pc : n2, null == e2 ? zc : e2, NaN, NaN, NaN, NaN);\n        return null == t2 ? r2 : r2.addAll(t2);\n      }\n      function Dc(t2, n2, e2, r2, i2, o2) {\n        this._x = t2, this._y = n2, this._x0 = e2, this._y0 = r2, this._x1 = i2, this._y1 = o2, this._root = void 0;\n      }\n      function Rc(t2) {\n        for (var n2 = { data: t2.data }, e2 = n2; t2 = t2.next; )\n          e2 = e2.next = { data: t2.data };\n        return n2;\n      }\n      var Fc = $c.prototype = Dc.prototype;\n      function qc(t2) {\n        return function() {\n          return t2;\n        };\n      }\n      function Uc(t2) {\n        return 1e-6 * (t2() - 0.5);\n      }\n      function Ic(t2) {\n        return t2.x + t2.vx;\n      }\n      function Oc(t2) {\n        return t2.y + t2.vy;\n      }\n      function Bc(t2) {\n        return t2.index;\n      }\n      function Yc(t2, n2) {\n        var e2 = t2.get(n2);\n        if (!e2)\n          throw new Error(\"node not found: \" + n2);\n        return e2;\n      }\n      Fc.copy = function() {\n        var t2, n2, e2 = new Dc(this._x, this._y, this._x0, this._y0, this._x1, this._y1), r2 = this._root;\n        if (!r2)\n          return e2;\n        if (!r2.length)\n          return e2._root = Rc(r2), e2;\n        for (t2 = [{ source: r2, target: e2._root = new Array(4) }]; r2 = t2.pop(); )\n          for (var i2 = 0; i2 < 4; ++i2)\n            (n2 = r2.source[i2]) && (n2.length ? t2.push({ source: n2, target: r2.target[i2] = new Array(4) }) : r2.target[i2] = Rc(n2));\n        return e2;\n      }, Fc.add = function(t2) {\n        const n2 = +this._x.call(null, t2), e2 = +this._y.call(null, t2);\n        return kc(this.cover(n2, e2), n2, e2, t2);\n      }, Fc.addAll = function(t2) {\n        var n2, e2, r2, i2, o2 = t2.length, a2 = new Array(o2), u2 = new Array(o2), c2 = 1 / 0, f2 = 1 / 0, s2 = -1 / 0, l2 = -1 / 0;\n        for (e2 = 0; e2 < o2; ++e2)\n          isNaN(r2 = +this._x.call(null, n2 = t2[e2])) || isNaN(i2 = +this._y.call(null, n2)) || (a2[e2] = r2, u2[e2] = i2, r2 < c2 && (c2 = r2), r2 > s2 && (s2 = r2), i2 < f2 && (f2 = i2), i2 > l2 && (l2 = i2));\n        if (c2 > s2 || f2 > l2)\n          return this;\n        for (this.cover(c2, f2).cover(s2, l2), e2 = 0; e2 < o2; ++e2)\n          kc(this, a2[e2], u2[e2], t2[e2]);\n        return this;\n      }, Fc.cover = function(t2, n2) {\n        if (isNaN(t2 = +t2) || isNaN(n2 = +n2))\n          return this;\n        var e2 = this._x0, r2 = this._y0, i2 = this._x1, o2 = this._y1;\n        if (isNaN(e2))\n          i2 = (e2 = Math.floor(t2)) + 1, o2 = (r2 = Math.floor(n2)) + 1;\n        else {\n          for (var a2, u2, c2 = i2 - e2 || 1, f2 = this._root; e2 > t2 || t2 >= i2 || r2 > n2 || n2 >= o2; )\n            switch (u2 = (n2 < r2) << 1 | t2 < e2, (a2 = new Array(4))[u2] = f2, f2 = a2, c2 *= 2, u2) {\n              case 0:\n                i2 = e2 + c2, o2 = r2 + c2;\n                break;\n              case 1:\n                e2 = i2 - c2, o2 = r2 + c2;\n                break;\n              case 2:\n                i2 = e2 + c2, r2 = o2 - c2;\n                break;\n              case 3:\n                e2 = i2 - c2, r2 = o2 - c2;\n            }\n          this._root && this._root.length && (this._root = f2);\n        }\n        return this._x0 = e2, this._y0 = r2, this._x1 = i2, this._y1 = o2, this;\n      }, Fc.data = function() {\n        var t2 = [];\n        return this.visit(function(n2) {\n          if (!n2.length)\n            do {\n              t2.push(n2.data);\n            } while (n2 = n2.next);\n        }), t2;\n      }, Fc.extent = function(t2) {\n        return arguments.length ? this.cover(+t2[0][0], +t2[0][1]).cover(+t2[1][0], +t2[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];\n      }, Fc.find = function(t2, n2, e2) {\n        var r2, i2, o2, a2, u2, c2, f2, s2 = this._x0, l2 = this._y0, h2 = this._x1, d2 = this._y1, p2 = [], g2 = this._root;\n        for (g2 && p2.push(new Cc(g2, s2, l2, h2, d2)), null == e2 ? e2 = 1 / 0 : (s2 = t2 - e2, l2 = n2 - e2, h2 = t2 + e2, d2 = n2 + e2, e2 *= e2); c2 = p2.pop(); )\n          if (!(!(g2 = c2.node) || (i2 = c2.x0) > h2 || (o2 = c2.y0) > d2 || (a2 = c2.x1) < s2 || (u2 = c2.y1) < l2))\n            if (g2.length) {\n              var y2 = (i2 + a2) / 2, v2 = (o2 + u2) / 2;\n              p2.push(new Cc(g2[3], y2, v2, a2, u2), new Cc(g2[2], i2, v2, y2, u2), new Cc(g2[1], y2, o2, a2, v2), new Cc(g2[0], i2, o2, y2, v2)), (f2 = (n2 >= v2) << 1 | t2 >= y2) && (c2 = p2[p2.length - 1], p2[p2.length - 1] = p2[p2.length - 1 - f2], p2[p2.length - 1 - f2] = c2);\n            } else {\n              var _2 = t2 - +this._x.call(null, g2.data), b2 = n2 - +this._y.call(null, g2.data), m2 = _2 * _2 + b2 * b2;\n              if (m2 < e2) {\n                var x2 = Math.sqrt(e2 = m2);\n                s2 = t2 - x2, l2 = n2 - x2, h2 = t2 + x2, d2 = n2 + x2, r2 = g2.data;\n              }\n            }\n        return r2;\n      }, Fc.remove = function(t2) {\n        if (isNaN(o2 = +this._x.call(null, t2)) || isNaN(a2 = +this._y.call(null, t2)))\n          return this;\n        var n2, e2, r2, i2, o2, a2, u2, c2, f2, s2, l2, h2, d2 = this._root, p2 = this._x0, g2 = this._y0, y2 = this._x1, v2 = this._y1;\n        if (!d2)\n          return this;\n        if (d2.length)\n          for (; ; ) {\n            if ((f2 = o2 >= (u2 = (p2 + y2) / 2)) ? p2 = u2 : y2 = u2, (s2 = a2 >= (c2 = (g2 + v2) / 2)) ? g2 = c2 : v2 = c2, n2 = d2, !(d2 = d2[l2 = s2 << 1 | f2]))\n              return this;\n            if (!d2.length)\n              break;\n            (n2[l2 + 1 & 3] || n2[l2 + 2 & 3] || n2[l2 + 3 & 3]) && (e2 = n2, h2 = l2);\n          }\n        for (; d2.data !== t2; )\n          if (r2 = d2, !(d2 = d2.next))\n            return this;\n        return (i2 = d2.next) && delete d2.next, r2 ? (i2 ? r2.next = i2 : delete r2.next, this) : n2 ? (i2 ? n2[l2] = i2 : delete n2[l2], (d2 = n2[0] || n2[1] || n2[2] || n2[3]) && d2 === (n2[3] || n2[2] || n2[1] || n2[0]) && !d2.length && (e2 ? e2[h2] = d2 : this._root = d2), this) : (this._root = i2, this);\n      }, Fc.removeAll = function(t2) {\n        for (var n2 = 0, e2 = t2.length; n2 < e2; ++n2)\n          this.remove(t2[n2]);\n        return this;\n      }, Fc.root = function() {\n        return this._root;\n      }, Fc.size = function() {\n        var t2 = 0;\n        return this.visit(function(n2) {\n          if (!n2.length)\n            do {\n              ++t2;\n            } while (n2 = n2.next);\n        }), t2;\n      }, Fc.visit = function(t2) {\n        var n2, e2, r2, i2, o2, a2, u2 = [], c2 = this._root;\n        for (c2 && u2.push(new Cc(c2, this._x0, this._y0, this._x1, this._y1)); n2 = u2.pop(); )\n          if (!t2(c2 = n2.node, r2 = n2.x0, i2 = n2.y0, o2 = n2.x1, a2 = n2.y1) && c2.length) {\n            var f2 = (r2 + o2) / 2, s2 = (i2 + a2) / 2;\n            (e2 = c2[3]) && u2.push(new Cc(e2, f2, s2, o2, a2)), (e2 = c2[2]) && u2.push(new Cc(e2, r2, s2, f2, a2)), (e2 = c2[1]) && u2.push(new Cc(e2, f2, i2, o2, s2)), (e2 = c2[0]) && u2.push(new Cc(e2, r2, i2, f2, s2));\n          }\n        return this;\n      }, Fc.visitAfter = function(t2) {\n        var n2, e2 = [], r2 = [];\n        for (this._root && e2.push(new Cc(this._root, this._x0, this._y0, this._x1, this._y1)); n2 = e2.pop(); ) {\n          var i2 = n2.node;\n          if (i2.length) {\n            var o2, a2 = n2.x0, u2 = n2.y0, c2 = n2.x1, f2 = n2.y1, s2 = (a2 + c2) / 2, l2 = (u2 + f2) / 2;\n            (o2 = i2[0]) && e2.push(new Cc(o2, a2, u2, s2, l2)), (o2 = i2[1]) && e2.push(new Cc(o2, s2, u2, c2, l2)), (o2 = i2[2]) && e2.push(new Cc(o2, a2, l2, s2, f2)), (o2 = i2[3]) && e2.push(new Cc(o2, s2, l2, c2, f2));\n          }\n          r2.push(n2);\n        }\n        for (; n2 = r2.pop(); )\n          t2(n2.node, n2.x0, n2.y0, n2.x1, n2.y1);\n        return this;\n      }, Fc.x = function(t2) {\n        return arguments.length ? (this._x = t2, this) : this._x;\n      }, Fc.y = function(t2) {\n        return arguments.length ? (this._y = t2, this) : this._y;\n      };\n      const Lc = 1664525, jc = 1013904223, Hc = 4294967296;\n      function Xc(t2) {\n        return t2.x;\n      }\n      function Gc(t2) {\n        return t2.y;\n      }\n      var Vc = Math.PI * (3 - Math.sqrt(5));\n      function Wc(t2, n2) {\n        if ((e2 = (t2 = n2 ? t2.toExponential(n2 - 1) : t2.toExponential()).indexOf(\"e\")) < 0)\n          return null;\n        var e2, r2 = t2.slice(0, e2);\n        return [r2.length > 1 ? r2[0] + r2.slice(2) : r2, +t2.slice(e2 + 1)];\n      }\n      function Zc(t2) {\n        return (t2 = Wc(Math.abs(t2))) ? t2[1] : NaN;\n      }\n      var Kc, Qc = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n      function Jc(t2) {\n        if (!(n2 = Qc.exec(t2)))\n          throw new Error(\"invalid format: \" + t2);\n        var n2;\n        return new tf({ fill: n2[1], align: n2[2], sign: n2[3], symbol: n2[4], zero: n2[5], width: n2[6], comma: n2[7], precision: n2[8] && n2[8].slice(1), trim: n2[9], type: n2[10] });\n      }\n      function tf(t2) {\n        this.fill = void 0 === t2.fill ? \" \" : t2.fill + \"\", this.align = void 0 === t2.align ? \">\" : t2.align + \"\", this.sign = void 0 === t2.sign ? \"-\" : t2.sign + \"\", this.symbol = void 0 === t2.symbol ? \"\" : t2.symbol + \"\", this.zero = !!t2.zero, this.width = void 0 === t2.width ? void 0 : +t2.width, this.comma = !!t2.comma, this.precision = void 0 === t2.precision ? void 0 : +t2.precision, this.trim = !!t2.trim, this.type = void 0 === t2.type ? \"\" : t2.type + \"\";\n      }\n      function nf(t2, n2) {\n        var e2 = Wc(t2, n2);\n        if (!e2)\n          return t2 + \"\";\n        var r2 = e2[0], i2 = e2[1];\n        return i2 < 0 ? \"0.\" + new Array(-i2).join(\"0\") + r2 : r2.length > i2 + 1 ? r2.slice(0, i2 + 1) + \".\" + r2.slice(i2 + 1) : r2 + new Array(i2 - r2.length + 2).join(\"0\");\n      }\n      Jc.prototype = tf.prototype, tf.prototype.toString = function() {\n        return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (void 0 === this.width ? \"\" : Math.max(1, 0 | this.width)) + (this.comma ? \",\" : \"\") + (void 0 === this.precision ? \"\" : \".\" + Math.max(0, 0 | this.precision)) + (this.trim ? \"~\" : \"\") + this.type;\n      };\n      var ef = { \"%\": (t2, n2) => (100 * t2).toFixed(n2), b: (t2) => Math.round(t2).toString(2), c: (t2) => t2 + \"\", d: function(t2) {\n        return Math.abs(t2 = Math.round(t2)) >= 1e21 ? t2.toLocaleString(\"en\").replace(/,/g, \"\") : t2.toString(10);\n      }, e: (t2, n2) => t2.toExponential(n2), f: (t2, n2) => t2.toFixed(n2), g: (t2, n2) => t2.toPrecision(n2), o: (t2) => Math.round(t2).toString(8), p: (t2, n2) => nf(100 * t2, n2), r: nf, s: function(t2, n2) {\n        var e2 = Wc(t2, n2);\n        if (!e2)\n          return t2 + \"\";\n        var r2 = e2[0], i2 = e2[1], o2 = i2 - (Kc = 3 * Math.max(-8, Math.min(8, Math.floor(i2 / 3)))) + 1, a2 = r2.length;\n        return o2 === a2 ? r2 : o2 > a2 ? r2 + new Array(o2 - a2 + 1).join(\"0\") : o2 > 0 ? r2.slice(0, o2) + \".\" + r2.slice(o2) : \"0.\" + new Array(1 - o2).join(\"0\") + Wc(t2, Math.max(0, n2 + o2 - 1))[0];\n      }, X: (t2) => Math.round(t2).toString(16).toUpperCase(), x: (t2) => Math.round(t2).toString(16) };\n      function rf(t2) {\n        return t2;\n      }\n      var of, af = Array.prototype.map, uf = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"\\xB5\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n      function cf(t2) {\n        var n2, e2, r2 = void 0 === t2.grouping || void 0 === t2.thousands ? rf : (n2 = af.call(t2.grouping, Number), e2 = t2.thousands + \"\", function(t3, r3) {\n          for (var i3 = t3.length, o3 = [], a3 = 0, u3 = n2[0], c3 = 0; i3 > 0 && u3 > 0 && (c3 + u3 + 1 > r3 && (u3 = Math.max(1, r3 - c3)), o3.push(t3.substring(i3 -= u3, i3 + u3)), !((c3 += u3 + 1) > r3)); )\n            u3 = n2[a3 = (a3 + 1) % n2.length];\n          return o3.reverse().join(e2);\n        }), i2 = void 0 === t2.currency ? \"\" : t2.currency[0] + \"\", o2 = void 0 === t2.currency ? \"\" : t2.currency[1] + \"\", a2 = void 0 === t2.decimal ? \".\" : t2.decimal + \"\", u2 = void 0 === t2.numerals ? rf : /* @__PURE__ */ function(t3) {\n          return function(n3) {\n            return n3.replace(/[0-9]/g, function(n4) {\n              return t3[+n4];\n            });\n          };\n        }(af.call(t2.numerals, String)), c2 = void 0 === t2.percent ? \"%\" : t2.percent + \"\", f2 = void 0 === t2.minus ? \"\\u2212\" : t2.minus + \"\", s2 = void 0 === t2.nan ? \"NaN\" : t2.nan + \"\";\n        function l2(t3) {\n          var n3 = (t3 = Jc(t3)).fill, e3 = t3.align, l3 = t3.sign, h2 = t3.symbol, d2 = t3.zero, p2 = t3.width, g2 = t3.comma, y2 = t3.precision, v2 = t3.trim, _2 = t3.type;\n          \"n\" === _2 ? (g2 = true, _2 = \"g\") : ef[_2] || (void 0 === y2 && (y2 = 12), v2 = true, _2 = \"g\"), (d2 || \"0\" === n3 && \"=\" === e3) && (d2 = true, n3 = \"0\", e3 = \"=\");\n          var b2 = \"$\" === h2 ? i2 : \"#\" === h2 && /[boxX]/.test(_2) ? \"0\" + _2.toLowerCase() : \"\", m2 = \"$\" === h2 ? o2 : /[%p]/.test(_2) ? c2 : \"\", x2 = ef[_2], w2 = /[defgprs%]/.test(_2);\n          function M2(t4) {\n            var i3, o3, c3, h3 = b2, M3 = m2;\n            if (\"c\" === _2)\n              M3 = x2(t4) + M3, t4 = \"\";\n            else {\n              var T2 = (t4 = +t4) < 0 || 1 / t4 < 0;\n              if (t4 = isNaN(t4) ? s2 : x2(Math.abs(t4), y2), v2 && (t4 = function(t5) {\n                t:\n                  for (var n4, e4 = t5.length, r3 = 1, i4 = -1; r3 < e4; ++r3)\n                    switch (t5[r3]) {\n                      case \".\":\n                        i4 = n4 = r3;\n                        break;\n                      case \"0\":\n                        0 === i4 && (i4 = r3), n4 = r3;\n                        break;\n                      default:\n                        if (!+t5[r3])\n                          break t;\n                        i4 > 0 && (i4 = 0);\n                    }\n                return i4 > 0 ? t5.slice(0, i4) + t5.slice(n4 + 1) : t5;\n              }(t4)), T2 && 0 == +t4 && \"+\" !== l3 && (T2 = false), h3 = (T2 ? \"(\" === l3 ? l3 : f2 : \"-\" === l3 || \"(\" === l3 ? \"\" : l3) + h3, M3 = (\"s\" === _2 ? uf[8 + Kc / 3] : \"\") + M3 + (T2 && \"(\" === l3 ? \")\" : \"\"), w2) {\n                for (i3 = -1, o3 = t4.length; ++i3 < o3; )\n                  if (48 > (c3 = t4.charCodeAt(i3)) || c3 > 57) {\n                    M3 = (46 === c3 ? a2 + t4.slice(i3 + 1) : t4.slice(i3)) + M3, t4 = t4.slice(0, i3);\n                    break;\n                  }\n              }\n            }\n            g2 && !d2 && (t4 = r2(t4, 1 / 0));\n            var A2 = h3.length + t4.length + M3.length, S2 = A2 < p2 ? new Array(p2 - A2 + 1).join(n3) : \"\";\n            switch (g2 && d2 && (t4 = r2(S2 + t4, S2.length ? p2 - M3.length : 1 / 0), S2 = \"\"), e3) {\n              case \"<\":\n                t4 = h3 + t4 + M3 + S2;\n                break;\n              case \"=\":\n                t4 = h3 + S2 + t4 + M3;\n                break;\n              case \"^\":\n                t4 = S2.slice(0, A2 = S2.length >> 1) + h3 + t4 + M3 + S2.slice(A2);\n                break;\n              default:\n                t4 = S2 + h3 + t4 + M3;\n            }\n            return u2(t4);\n          }\n          return y2 = void 0 === y2 ? 6 : /[gprs]/.test(_2) ? Math.max(1, Math.min(21, y2)) : Math.max(0, Math.min(20, y2)), M2.toString = function() {\n            return t3 + \"\";\n          }, M2;\n        }\n        return { format: l2, formatPrefix: function(t3, n3) {\n          var e3 = l2(((t3 = Jc(t3)).type = \"f\", t3)), r3 = 3 * Math.max(-8, Math.min(8, Math.floor(Zc(n3) / 3))), i3 = Math.pow(10, -r3), o3 = uf[8 + r3 / 3];\n          return function(t4) {\n            return e3(i3 * t4) + o3;\n          };\n        } };\n      }\n      function ff(n2) {\n        return of = cf(n2), t.format = of.format, t.formatPrefix = of.formatPrefix, of;\n      }\n      function sf(t2) {\n        return Math.max(0, -Zc(Math.abs(t2)));\n      }\n      function lf(t2, n2) {\n        return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(Zc(n2) / 3))) - Zc(Math.abs(t2)));\n      }\n      function hf(t2, n2) {\n        return t2 = Math.abs(t2), n2 = Math.abs(n2) - t2, Math.max(0, Zc(n2) - Zc(t2)) + 1;\n      }\n      t.format = void 0, t.formatPrefix = void 0, ff({ thousands: \",\", grouping: [3], currency: [\"$\", \"\"] });\n      var df = 1e-6, pf = 1e-12, gf = Math.PI, yf = gf / 2, vf = gf / 4, _f = 2 * gf, bf = 180 / gf, mf = gf / 180, xf = Math.abs, wf = Math.atan, Mf = Math.atan2, Tf = Math.cos, Af = Math.ceil, Sf = Math.exp, Ef = Math.hypot, Nf = Math.log, kf = Math.pow, Cf = Math.sin, Pf = Math.sign || function(t2) {\n        return t2 > 0 ? 1 : t2 < 0 ? -1 : 0;\n      }, zf = Math.sqrt, $f = Math.tan;\n      function Df(t2) {\n        return t2 > 1 ? 0 : t2 < -1 ? gf : Math.acos(t2);\n      }\n      function Rf(t2) {\n        return t2 > 1 ? yf : t2 < -1 ? -yf : Math.asin(t2);\n      }\n      function Ff(t2) {\n        return (t2 = Cf(t2 / 2)) * t2;\n      }\n      function qf() {\n      }\n      function Uf(t2, n2) {\n        t2 && Of.hasOwnProperty(t2.type) && Of[t2.type](t2, n2);\n      }\n      var If = { Feature: function(t2, n2) {\n        Uf(t2.geometry, n2);\n      }, FeatureCollection: function(t2, n2) {\n        for (var e2 = t2.features, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          Uf(e2[r2].geometry, n2);\n      } }, Of = { Sphere: function(t2, n2) {\n        n2.sphere();\n      }, Point: function(t2, n2) {\n        t2 = t2.coordinates, n2.point(t2[0], t2[1], t2[2]);\n      }, MultiPoint: function(t2, n2) {\n        for (var e2 = t2.coordinates, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          t2 = e2[r2], n2.point(t2[0], t2[1], t2[2]);\n      }, LineString: function(t2, n2) {\n        Bf(t2.coordinates, n2, 0);\n      }, MultiLineString: function(t2, n2) {\n        for (var e2 = t2.coordinates, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          Bf(e2[r2], n2, 0);\n      }, Polygon: function(t2, n2) {\n        Yf(t2.coordinates, n2);\n      }, MultiPolygon: function(t2, n2) {\n        for (var e2 = t2.coordinates, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          Yf(e2[r2], n2);\n      }, GeometryCollection: function(t2, n2) {\n        for (var e2 = t2.geometries, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          Uf(e2[r2], n2);\n      } };\n      function Bf(t2, n2, e2) {\n        var r2, i2 = -1, o2 = t2.length - e2;\n        for (n2.lineStart(); ++i2 < o2; )\n          r2 = t2[i2], n2.point(r2[0], r2[1], r2[2]);\n        n2.lineEnd();\n      }\n      function Yf(t2, n2) {\n        var e2 = -1, r2 = t2.length;\n        for (n2.polygonStart(); ++e2 < r2; )\n          Bf(t2[e2], n2, 1);\n        n2.polygonEnd();\n      }\n      function Lf(t2, n2) {\n        t2 && If.hasOwnProperty(t2.type) ? If[t2.type](t2, n2) : Uf(t2, n2);\n      }\n      var jf, Hf, Xf, Gf, Vf, Wf, Zf, Kf, Qf, Jf, ts, ns, es, rs, is, os, as = new T(), us = new T(), cs = { point: qf, lineStart: qf, lineEnd: qf, polygonStart: function() {\n        as = new T(), cs.lineStart = fs, cs.lineEnd = ss;\n      }, polygonEnd: function() {\n        var t2 = +as;\n        us.add(t2 < 0 ? _f + t2 : t2), this.lineStart = this.lineEnd = this.point = qf;\n      }, sphere: function() {\n        us.add(_f);\n      } };\n      function fs() {\n        cs.point = ls;\n      }\n      function ss() {\n        hs(jf, Hf);\n      }\n      function ls(t2, n2) {\n        cs.point = hs, jf = t2, Hf = n2, Xf = t2 *= mf, Gf = Tf(n2 = (n2 *= mf) / 2 + vf), Vf = Cf(n2);\n      }\n      function hs(t2, n2) {\n        var e2 = (t2 *= mf) - Xf, r2 = e2 >= 0 ? 1 : -1, i2 = r2 * e2, o2 = Tf(n2 = (n2 *= mf) / 2 + vf), a2 = Cf(n2), u2 = Vf * a2, c2 = Gf * o2 + u2 * Tf(i2), f2 = u2 * r2 * Cf(i2);\n        as.add(Mf(f2, c2)), Xf = t2, Gf = o2, Vf = a2;\n      }\n      function ds(t2) {\n        return [Mf(t2[1], t2[0]), Rf(t2[2])];\n      }\n      function ps(t2) {\n        var n2 = t2[0], e2 = t2[1], r2 = Tf(e2);\n        return [r2 * Tf(n2), r2 * Cf(n2), Cf(e2)];\n      }\n      function gs(t2, n2) {\n        return t2[0] * n2[0] + t2[1] * n2[1] + t2[2] * n2[2];\n      }\n      function ys(t2, n2) {\n        return [t2[1] * n2[2] - t2[2] * n2[1], t2[2] * n2[0] - t2[0] * n2[2], t2[0] * n2[1] - t2[1] * n2[0]];\n      }\n      function vs(t2, n2) {\n        t2[0] += n2[0], t2[1] += n2[1], t2[2] += n2[2];\n      }\n      function _s(t2, n2) {\n        return [t2[0] * n2, t2[1] * n2, t2[2] * n2];\n      }\n      function bs(t2) {\n        var n2 = zf(t2[0] * t2[0] + t2[1] * t2[1] + t2[2] * t2[2]);\n        t2[0] /= n2, t2[1] /= n2, t2[2] /= n2;\n      }\n      var ms, xs, ws, Ms, Ts, As, Ss, Es, Ns, ks, Cs, Ps, zs, $s, Ds, Rs, Fs = { point: qs, lineStart: Is, lineEnd: Os, polygonStart: function() {\n        Fs.point = Bs, Fs.lineStart = Ys, Fs.lineEnd = Ls, rs = new T(), cs.polygonStart();\n      }, polygonEnd: function() {\n        cs.polygonEnd(), Fs.point = qs, Fs.lineStart = Is, Fs.lineEnd = Os, as < 0 ? (Wf = -(Kf = 180), Zf = -(Qf = 90)) : rs > df ? Qf = 90 : rs < -df && (Zf = -90), os[0] = Wf, os[1] = Kf;\n      }, sphere: function() {\n        Wf = -(Kf = 180), Zf = -(Qf = 90);\n      } };\n      function qs(t2, n2) {\n        is.push(os = [Wf = t2, Kf = t2]), n2 < Zf && (Zf = n2), n2 > Qf && (Qf = n2);\n      }\n      function Us(t2, n2) {\n        var e2 = ps([t2 * mf, n2 * mf]);\n        if (es) {\n          var r2 = ys(es, e2), i2 = ys([r2[1], -r2[0], 0], r2);\n          bs(i2), i2 = ds(i2);\n          var o2, a2 = t2 - Jf, u2 = a2 > 0 ? 1 : -1, c2 = i2[0] * bf * u2, f2 = xf(a2) > 180;\n          f2 ^ (u2 * Jf < c2 && c2 < u2 * t2) ? (o2 = i2[1] * bf) > Qf && (Qf = o2) : f2 ^ (u2 * Jf < (c2 = (c2 + 360) % 360 - 180) && c2 < u2 * t2) ? (o2 = -i2[1] * bf) < Zf && (Zf = o2) : (n2 < Zf && (Zf = n2), n2 > Qf && (Qf = n2)), f2 ? t2 < Jf ? js(Wf, t2) > js(Wf, Kf) && (Kf = t2) : js(t2, Kf) > js(Wf, Kf) && (Wf = t2) : Kf >= Wf ? (t2 < Wf && (Wf = t2), t2 > Kf && (Kf = t2)) : t2 > Jf ? js(Wf, t2) > js(Wf, Kf) && (Kf = t2) : js(t2, Kf) > js(Wf, Kf) && (Wf = t2);\n        } else\n          is.push(os = [Wf = t2, Kf = t2]);\n        n2 < Zf && (Zf = n2), n2 > Qf && (Qf = n2), es = e2, Jf = t2;\n      }\n      function Is() {\n        Fs.point = Us;\n      }\n      function Os() {\n        os[0] = Wf, os[1] = Kf, Fs.point = qs, es = null;\n      }\n      function Bs(t2, n2) {\n        if (es) {\n          var e2 = t2 - Jf;\n          rs.add(xf(e2) > 180 ? e2 + (e2 > 0 ? 360 : -360) : e2);\n        } else\n          ts = t2, ns = n2;\n        cs.point(t2, n2), Us(t2, n2);\n      }\n      function Ys() {\n        cs.lineStart();\n      }\n      function Ls() {\n        Bs(ts, ns), cs.lineEnd(), xf(rs) > df && (Wf = -(Kf = 180)), os[0] = Wf, os[1] = Kf, es = null;\n      }\n      function js(t2, n2) {\n        return (n2 -= t2) < 0 ? n2 + 360 : n2;\n      }\n      function Hs(t2, n2) {\n        return t2[0] - n2[0];\n      }\n      function Xs(t2, n2) {\n        return t2[0] <= t2[1] ? t2[0] <= n2 && n2 <= t2[1] : n2 < t2[0] || t2[1] < n2;\n      }\n      var Gs = { sphere: qf, point: Vs, lineStart: Zs, lineEnd: Js, polygonStart: function() {\n        Gs.lineStart = tl, Gs.lineEnd = nl;\n      }, polygonEnd: function() {\n        Gs.lineStart = Zs, Gs.lineEnd = Js;\n      } };\n      function Vs(t2, n2) {\n        t2 *= mf;\n        var e2 = Tf(n2 *= mf);\n        Ws(e2 * Tf(t2), e2 * Cf(t2), Cf(n2));\n      }\n      function Ws(t2, n2, e2) {\n        ++ms, ws += (t2 - ws) / ms, Ms += (n2 - Ms) / ms, Ts += (e2 - Ts) / ms;\n      }\n      function Zs() {\n        Gs.point = Ks;\n      }\n      function Ks(t2, n2) {\n        t2 *= mf;\n        var e2 = Tf(n2 *= mf);\n        $s = e2 * Tf(t2), Ds = e2 * Cf(t2), Rs = Cf(n2), Gs.point = Qs, Ws($s, Ds, Rs);\n      }\n      function Qs(t2, n2) {\n        t2 *= mf;\n        var e2 = Tf(n2 *= mf), r2 = e2 * Tf(t2), i2 = e2 * Cf(t2), o2 = Cf(n2), a2 = Mf(zf((a2 = Ds * o2 - Rs * i2) * a2 + (a2 = Rs * r2 - $s * o2) * a2 + (a2 = $s * i2 - Ds * r2) * a2), $s * r2 + Ds * i2 + Rs * o2);\n        xs += a2, As += a2 * ($s + ($s = r2)), Ss += a2 * (Ds + (Ds = i2)), Es += a2 * (Rs + (Rs = o2)), Ws($s, Ds, Rs);\n      }\n      function Js() {\n        Gs.point = Vs;\n      }\n      function tl() {\n        Gs.point = el;\n      }\n      function nl() {\n        rl(Ps, zs), Gs.point = Vs;\n      }\n      function el(t2, n2) {\n        Ps = t2, zs = n2, t2 *= mf, n2 *= mf, Gs.point = rl;\n        var e2 = Tf(n2);\n        $s = e2 * Tf(t2), Ds = e2 * Cf(t2), Rs = Cf(n2), Ws($s, Ds, Rs);\n      }\n      function rl(t2, n2) {\n        t2 *= mf;\n        var e2 = Tf(n2 *= mf), r2 = e2 * Tf(t2), i2 = e2 * Cf(t2), o2 = Cf(n2), a2 = Ds * o2 - Rs * i2, u2 = Rs * r2 - $s * o2, c2 = $s * i2 - Ds * r2, f2 = Ef(a2, u2, c2), s2 = Rf(f2), l2 = f2 && -s2 / f2;\n        Ns.add(l2 * a2), ks.add(l2 * u2), Cs.add(l2 * c2), xs += s2, As += s2 * ($s + ($s = r2)), Ss += s2 * (Ds + (Ds = i2)), Es += s2 * (Rs + (Rs = o2)), Ws($s, Ds, Rs);\n      }\n      function il(t2) {\n        return function() {\n          return t2;\n        };\n      }\n      function ol(t2, n2) {\n        function e2(e3, r2) {\n          return e3 = t2(e3, r2), n2(e3[0], e3[1]);\n        }\n        return t2.invert && n2.invert && (e2.invert = function(e3, r2) {\n          return (e3 = n2.invert(e3, r2)) && t2.invert(e3[0], e3[1]);\n        }), e2;\n      }\n      function al(t2, n2) {\n        return xf(t2) > gf && (t2 -= Math.round(t2 / _f) * _f), [t2, n2];\n      }\n      function ul(t2, n2, e2) {\n        return (t2 %= _f) ? n2 || e2 ? ol(fl(t2), sl(n2, e2)) : fl(t2) : n2 || e2 ? sl(n2, e2) : al;\n      }\n      function cl(t2) {\n        return function(n2, e2) {\n          return xf(n2 += t2) > gf && (n2 -= Math.round(n2 / _f) * _f), [n2, e2];\n        };\n      }\n      function fl(t2) {\n        var n2 = cl(t2);\n        return n2.invert = cl(-t2), n2;\n      }\n      function sl(t2, n2) {\n        var e2 = Tf(t2), r2 = Cf(t2), i2 = Tf(n2), o2 = Cf(n2);\n        function a2(t3, n3) {\n          var a3 = Tf(n3), u2 = Tf(t3) * a3, c2 = Cf(t3) * a3, f2 = Cf(n3), s2 = f2 * e2 + u2 * r2;\n          return [Mf(c2 * i2 - s2 * o2, u2 * e2 - f2 * r2), Rf(s2 * i2 + c2 * o2)];\n        }\n        return a2.invert = function(t3, n3) {\n          var a3 = Tf(n3), u2 = Tf(t3) * a3, c2 = Cf(t3) * a3, f2 = Cf(n3), s2 = f2 * i2 - c2 * o2;\n          return [Mf(c2 * i2 + f2 * o2, u2 * e2 + s2 * r2), Rf(s2 * e2 - u2 * r2)];\n        }, a2;\n      }\n      function ll(t2) {\n        function n2(n3) {\n          return (n3 = t2(n3[0] * mf, n3[1] * mf))[0] *= bf, n3[1] *= bf, n3;\n        }\n        return t2 = ul(t2[0] * mf, t2[1] * mf, t2.length > 2 ? t2[2] * mf : 0), n2.invert = function(n3) {\n          return (n3 = t2.invert(n3[0] * mf, n3[1] * mf))[0] *= bf, n3[1] *= bf, n3;\n        }, n2;\n      }\n      function hl(t2, n2, e2, r2, i2, o2) {\n        if (e2) {\n          var a2 = Tf(n2), u2 = Cf(n2), c2 = r2 * e2;\n          null == i2 ? (i2 = n2 + r2 * _f, o2 = n2 - c2 / 2) : (i2 = dl(a2, i2), o2 = dl(a2, o2), (r2 > 0 ? i2 < o2 : i2 > o2) && (i2 += r2 * _f));\n          for (var f2, s2 = i2; r2 > 0 ? s2 > o2 : s2 < o2; s2 -= c2)\n            f2 = ds([a2, -u2 * Tf(s2), -u2 * Cf(s2)]), t2.point(f2[0], f2[1]);\n        }\n      }\n      function dl(t2, n2) {\n        (n2 = ps(n2))[0] -= t2, bs(n2);\n        var e2 = Df(-n2[1]);\n        return ((-n2[2] < 0 ? -e2 : e2) + _f - df) % _f;\n      }\n      function pl() {\n        var t2, n2 = [];\n        return { point: function(n3, e2, r2) {\n          t2.push([n3, e2, r2]);\n        }, lineStart: function() {\n          n2.push(t2 = []);\n        }, lineEnd: qf, rejoin: function() {\n          n2.length > 1 && n2.push(n2.pop().concat(n2.shift()));\n        }, result: function() {\n          var e2 = n2;\n          return n2 = [], t2 = null, e2;\n        } };\n      }\n      function gl(t2, n2) {\n        return xf(t2[0] - n2[0]) < df && xf(t2[1] - n2[1]) < df;\n      }\n      function yl(t2, n2, e2, r2) {\n        this.x = t2, this.z = n2, this.o = e2, this.e = r2, this.v = false, this.n = this.p = null;\n      }\n      function vl(t2, n2, e2, r2, i2) {\n        var o2, a2, u2 = [], c2 = [];\n        if (t2.forEach(function(t3) {\n          if (!((n3 = t3.length - 1) <= 0)) {\n            var n3, e3, r3 = t3[0], a3 = t3[n3];\n            if (gl(r3, a3)) {\n              if (!r3[2] && !a3[2]) {\n                for (i2.lineStart(), o2 = 0; o2 < n3; ++o2)\n                  i2.point((r3 = t3[o2])[0], r3[1]);\n                return void i2.lineEnd();\n              }\n              a3[0] += 2 * df;\n            }\n            u2.push(e3 = new yl(r3, t3, null, true)), c2.push(e3.o = new yl(r3, null, e3, false)), u2.push(e3 = new yl(a3, t3, null, false)), c2.push(e3.o = new yl(a3, null, e3, true));\n          }\n        }), u2.length) {\n          for (c2.sort(n2), _l(u2), _l(c2), o2 = 0, a2 = c2.length; o2 < a2; ++o2)\n            c2[o2].e = e2 = !e2;\n          for (var f2, s2, l2 = u2[0]; ; ) {\n            for (var h2 = l2, d2 = true; h2.v; )\n              if ((h2 = h2.n) === l2)\n                return;\n            f2 = h2.z, i2.lineStart();\n            do {\n              if (h2.v = h2.o.v = true, h2.e) {\n                if (d2)\n                  for (o2 = 0, a2 = f2.length; o2 < a2; ++o2)\n                    i2.point((s2 = f2[o2])[0], s2[1]);\n                else\n                  r2(h2.x, h2.n.x, 1, i2);\n                h2 = h2.n;\n              } else {\n                if (d2)\n                  for (f2 = h2.p.z, o2 = f2.length - 1; o2 >= 0; --o2)\n                    i2.point((s2 = f2[o2])[0], s2[1]);\n                else\n                  r2(h2.x, h2.p.x, -1, i2);\n                h2 = h2.p;\n              }\n              f2 = (h2 = h2.o).z, d2 = !d2;\n            } while (!h2.v);\n            i2.lineEnd();\n          }\n        }\n      }\n      function _l(t2) {\n        if (n2 = t2.length) {\n          for (var n2, e2, r2 = 0, i2 = t2[0]; ++r2 < n2; )\n            i2.n = e2 = t2[r2], e2.p = i2, i2 = e2;\n          i2.n = e2 = t2[0], e2.p = i2;\n        }\n      }\n      function bl(t2) {\n        return xf(t2[0]) <= gf ? t2[0] : Pf(t2[0]) * ((xf(t2[0]) + gf) % _f - gf);\n      }\n      function ml(t2, n2) {\n        var e2 = bl(n2), r2 = n2[1], i2 = Cf(r2), o2 = [Cf(e2), -Tf(e2), 0], a2 = 0, u2 = 0, c2 = new T();\n        1 === i2 ? r2 = yf + df : -1 === i2 && (r2 = -yf - df);\n        for (var f2 = 0, s2 = t2.length; f2 < s2; ++f2)\n          if (h2 = (l2 = t2[f2]).length)\n            for (var l2, h2, d2 = l2[h2 - 1], p2 = bl(d2), g2 = d2[1] / 2 + vf, y2 = Cf(g2), v2 = Tf(g2), _2 = 0; _2 < h2; ++_2, p2 = m2, y2 = w2, v2 = M2, d2 = b2) {\n              var b2 = l2[_2], m2 = bl(b2), x2 = b2[1] / 2 + vf, w2 = Cf(x2), M2 = Tf(x2), A2 = m2 - p2, S2 = A2 >= 0 ? 1 : -1, E2 = S2 * A2, N2 = E2 > gf, k2 = y2 * w2;\n              if (c2.add(Mf(k2 * S2 * Cf(E2), v2 * M2 + k2 * Tf(E2))), a2 += N2 ? A2 + S2 * _f : A2, N2 ^ p2 >= e2 ^ m2 >= e2) {\n                var C2 = ys(ps(d2), ps(b2));\n                bs(C2);\n                var P2 = ys(o2, C2);\n                bs(P2);\n                var z2 = (N2 ^ A2 >= 0 ? -1 : 1) * Rf(P2[2]);\n                (r2 > z2 || r2 === z2 && (C2[0] || C2[1])) && (u2 += N2 ^ A2 >= 0 ? 1 : -1);\n              }\n            }\n        return (a2 < -df || a2 < df && c2 < -pf) ^ 1 & u2;\n      }\n      function xl(t2, n2, e2, r2) {\n        return function(i2) {\n          var o2, a2, u2, c2 = n2(i2), f2 = pl(), s2 = n2(f2), l2 = false, h2 = { point: d2, lineStart: g2, lineEnd: y2, polygonStart: function() {\n            h2.point = v2, h2.lineStart = _2, h2.lineEnd = b2, a2 = [], o2 = [];\n          }, polygonEnd: function() {\n            h2.point = d2, h2.lineStart = g2, h2.lineEnd = y2, a2 = ft(a2);\n            var t3 = ml(o2, r2);\n            a2.length ? (l2 || (i2.polygonStart(), l2 = true), vl(a2, Ml, t3, e2, i2)) : t3 && (l2 || (i2.polygonStart(), l2 = true), i2.lineStart(), e2(null, null, 1, i2), i2.lineEnd()), l2 && (i2.polygonEnd(), l2 = false), a2 = o2 = null;\n          }, sphere: function() {\n            i2.polygonStart(), i2.lineStart(), e2(null, null, 1, i2), i2.lineEnd(), i2.polygonEnd();\n          } };\n          function d2(n3, e3) {\n            t2(n3, e3) && i2.point(n3, e3);\n          }\n          function p2(t3, n3) {\n            c2.point(t3, n3);\n          }\n          function g2() {\n            h2.point = p2, c2.lineStart();\n          }\n          function y2() {\n            h2.point = d2, c2.lineEnd();\n          }\n          function v2(t3, n3) {\n            u2.push([t3, n3]), s2.point(t3, n3);\n          }\n          function _2() {\n            s2.lineStart(), u2 = [];\n          }\n          function b2() {\n            v2(u2[0][0], u2[0][1]), s2.lineEnd();\n            var t3, n3, e3, r3, c3 = s2.clean(), h3 = f2.result(), d4 = h3.length;\n            if (u2.pop(), o2.push(u2), u2 = null, d4)\n              if (1 & c3) {\n                if ((n3 = (e3 = h3[0]).length - 1) > 0) {\n                  for (l2 || (i2.polygonStart(), l2 = true), i2.lineStart(), t3 = 0; t3 < n3; ++t3)\n                    i2.point((r3 = e3[t3])[0], r3[1]);\n                  i2.lineEnd();\n                }\n              } else\n                d4 > 1 && 2 & c3 && h3.push(h3.pop().concat(h3.shift())), a2.push(h3.filter(wl));\n          }\n          return h2;\n        };\n      }\n      function wl(t2) {\n        return t2.length > 1;\n      }\n      function Ml(t2, n2) {\n        return ((t2 = t2.x)[0] < 0 ? t2[1] - yf - df : yf - t2[1]) - ((n2 = n2.x)[0] < 0 ? n2[1] - yf - df : yf - n2[1]);\n      }\n      al.invert = al;\n      var Tl = xl(function() {\n        return true;\n      }, function(t2) {\n        var n2, e2 = NaN, r2 = NaN, i2 = NaN;\n        return { lineStart: function() {\n          t2.lineStart(), n2 = 1;\n        }, point: function(o2, a2) {\n          var u2 = o2 > 0 ? gf : -gf, c2 = xf(o2 - e2);\n          xf(c2 - gf) < df ? (t2.point(e2, r2 = (r2 + a2) / 2 > 0 ? yf : -yf), t2.point(i2, r2), t2.lineEnd(), t2.lineStart(), t2.point(u2, r2), t2.point(o2, r2), n2 = 0) : i2 !== u2 && c2 >= gf && (xf(e2 - i2) < df && (e2 -= i2 * df), xf(o2 - u2) < df && (o2 -= u2 * df), r2 = function(t3, n3, e3, r3) {\n            var i3, o3, a3 = Cf(t3 - e3);\n            return xf(a3) > df ? wf((Cf(n3) * (o3 = Tf(r3)) * Cf(e3) - Cf(r3) * (i3 = Tf(n3)) * Cf(t3)) / (i3 * o3 * a3)) : (n3 + r3) / 2;\n          }(e2, r2, o2, a2), t2.point(i2, r2), t2.lineEnd(), t2.lineStart(), t2.point(u2, r2), n2 = 0), t2.point(e2 = o2, r2 = a2), i2 = u2;\n        }, lineEnd: function() {\n          t2.lineEnd(), e2 = r2 = NaN;\n        }, clean: function() {\n          return 2 - n2;\n        } };\n      }, function(t2, n2, e2, r2) {\n        var i2;\n        if (null == t2)\n          i2 = e2 * yf, r2.point(-gf, i2), r2.point(0, i2), r2.point(gf, i2), r2.point(gf, 0), r2.point(gf, -i2), r2.point(0, -i2), r2.point(-gf, -i2), r2.point(-gf, 0), r2.point(-gf, i2);\n        else if (xf(t2[0] - n2[0]) > df) {\n          var o2 = t2[0] < n2[0] ? gf : -gf;\n          i2 = e2 * o2 / 2, r2.point(-o2, i2), r2.point(0, i2), r2.point(o2, i2);\n        } else\n          r2.point(n2[0], n2[1]);\n      }, [-gf, -yf]);\n      function Al(t2) {\n        var n2 = Tf(t2), e2 = 6 * mf, r2 = n2 > 0, i2 = xf(n2) > df;\n        function o2(t3, e3) {\n          return Tf(t3) * Tf(e3) > n2;\n        }\n        function a2(t3, e3, r3) {\n          var i3 = [1, 0, 0], o3 = ys(ps(t3), ps(e3)), a3 = gs(o3, o3), u3 = o3[0], c2 = a3 - u3 * u3;\n          if (!c2)\n            return !r3 && t3;\n          var f2 = n2 * a3 / c2, s2 = -n2 * u3 / c2, l2 = ys(i3, o3), h2 = _s(i3, f2);\n          vs(h2, _s(o3, s2));\n          var d2 = l2, p2 = gs(h2, d2), g2 = gs(d2, d2), y2 = p2 * p2 - g2 * (gs(h2, h2) - 1);\n          if (!(y2 < 0)) {\n            var v2 = zf(y2), _2 = _s(d2, (-p2 - v2) / g2);\n            if (vs(_2, h2), _2 = ds(_2), !r3)\n              return _2;\n            var b2, m2 = t3[0], x2 = e3[0], w2 = t3[1], M2 = e3[1];\n            x2 < m2 && (b2 = m2, m2 = x2, x2 = b2);\n            var T2 = x2 - m2, A2 = xf(T2 - gf) < df;\n            if (!A2 && M2 < w2 && (b2 = w2, w2 = M2, M2 = b2), A2 || T2 < df ? A2 ? w2 + M2 > 0 ^ _2[1] < (xf(_2[0] - m2) < df ? w2 : M2) : w2 <= _2[1] && _2[1] <= M2 : T2 > gf ^ (m2 <= _2[0] && _2[0] <= x2)) {\n              var S2 = _s(d2, (-p2 + v2) / g2);\n              return vs(S2, h2), [_2, ds(S2)];\n            }\n          }\n        }\n        function u2(n3, e3) {\n          var i3 = r2 ? t2 : gf - t2, o3 = 0;\n          return n3 < -i3 ? o3 |= 1 : n3 > i3 && (o3 |= 2), e3 < -i3 ? o3 |= 4 : e3 > i3 && (o3 |= 8), o3;\n        }\n        return xl(o2, function(t3) {\n          var n3, e3, c2, f2, s2;\n          return { lineStart: function() {\n            f2 = c2 = false, s2 = 1;\n          }, point: function(l2, h2) {\n            var d2, p2 = [l2, h2], g2 = o2(l2, h2), y2 = r2 ? g2 ? 0 : u2(l2, h2) : g2 ? u2(l2 + (l2 < 0 ? gf : -gf), h2) : 0;\n            if (!n3 && (f2 = c2 = g2) && t3.lineStart(), g2 !== c2 && (!(d2 = a2(n3, p2)) || gl(n3, d2) || gl(p2, d2)) && (p2[2] = 1), g2 !== c2)\n              s2 = 0, g2 ? (t3.lineStart(), d2 = a2(p2, n3), t3.point(d2[0], d2[1])) : (d2 = a2(n3, p2), t3.point(d2[0], d2[1], 2), t3.lineEnd()), n3 = d2;\n            else if (i2 && n3 && r2 ^ g2) {\n              var v2;\n              y2 & e3 || !(v2 = a2(p2, n3, true)) || (s2 = 0, r2 ? (t3.lineStart(), t3.point(v2[0][0], v2[0][1]), t3.point(v2[1][0], v2[1][1]), t3.lineEnd()) : (t3.point(v2[1][0], v2[1][1]), t3.lineEnd(), t3.lineStart(), t3.point(v2[0][0], v2[0][1], 3)));\n            }\n            !g2 || n3 && gl(n3, p2) || t3.point(p2[0], p2[1]), n3 = p2, c2 = g2, e3 = y2;\n          }, lineEnd: function() {\n            c2 && t3.lineEnd(), n3 = null;\n          }, clean: function() {\n            return s2 | (f2 && c2) << 1;\n          } };\n        }, function(n3, r3, i3, o3) {\n          hl(o3, t2, e2, i3, n3, r3);\n        }, r2 ? [0, -t2] : [-gf, t2 - gf]);\n      }\n      var Sl, El, Nl, kl, Cl = 1e9, Pl = -Cl;\n      function zl(t2, n2, e2, r2) {\n        function i2(i3, o3) {\n          return t2 <= i3 && i3 <= e2 && n2 <= o3 && o3 <= r2;\n        }\n        function o2(i3, o3, u3, f2) {\n          var s2 = 0, l2 = 0;\n          if (null == i3 || (s2 = a2(i3, u3)) !== (l2 = a2(o3, u3)) || c2(i3, o3) < 0 ^ u3 > 0)\n            do {\n              f2.point(0 === s2 || 3 === s2 ? t2 : e2, s2 > 1 ? r2 : n2);\n            } while ((s2 = (s2 + u3 + 4) % 4) !== l2);\n          else\n            f2.point(o3[0], o3[1]);\n        }\n        function a2(r3, i3) {\n          return xf(r3[0] - t2) < df ? i3 > 0 ? 0 : 3 : xf(r3[0] - e2) < df ? i3 > 0 ? 2 : 1 : xf(r3[1] - n2) < df ? i3 > 0 ? 1 : 0 : i3 > 0 ? 3 : 2;\n        }\n        function u2(t3, n3) {\n          return c2(t3.x, n3.x);\n        }\n        function c2(t3, n3) {\n          var e3 = a2(t3, 1), r3 = a2(n3, 1);\n          return e3 !== r3 ? e3 - r3 : 0 === e3 ? n3[1] - t3[1] : 1 === e3 ? t3[0] - n3[0] : 2 === e3 ? t3[1] - n3[1] : n3[0] - t3[0];\n        }\n        return function(a3) {\n          var c3, f2, s2, l2, h2, d2, p2, g2, y2, v2, _2, b2 = a3, m2 = pl(), x2 = { point: w2, lineStart: function() {\n            x2.point = M2, f2 && f2.push(s2 = []);\n            v2 = true, y2 = false, p2 = g2 = NaN;\n          }, lineEnd: function() {\n            c3 && (M2(l2, h2), d2 && y2 && m2.rejoin(), c3.push(m2.result()));\n            x2.point = w2, y2 && b2.lineEnd();\n          }, polygonStart: function() {\n            b2 = m2, c3 = [], f2 = [], _2 = true;\n          }, polygonEnd: function() {\n            var n3 = function() {\n              for (var n4 = 0, e4 = 0, i4 = f2.length; e4 < i4; ++e4)\n                for (var o3, a4, u3 = f2[e4], c4 = 1, s3 = u3.length, l3 = u3[0], h3 = l3[0], d4 = l3[1]; c4 < s3; ++c4)\n                  o3 = h3, a4 = d4, h3 = (l3 = u3[c4])[0], d4 = l3[1], a4 <= r2 ? d4 > r2 && (h3 - o3) * (r2 - a4) > (d4 - a4) * (t2 - o3) && ++n4 : d4 <= r2 && (h3 - o3) * (r2 - a4) < (d4 - a4) * (t2 - o3) && --n4;\n              return n4;\n            }(), e3 = _2 && n3, i3 = (c3 = ft(c3)).length;\n            (e3 || i3) && (a3.polygonStart(), e3 && (a3.lineStart(), o2(null, null, 1, a3), a3.lineEnd()), i3 && vl(c3, u2, n3, o2, a3), a3.polygonEnd());\n            b2 = a3, c3 = f2 = s2 = null;\n          } };\n          function w2(t3, n3) {\n            i2(t3, n3) && b2.point(t3, n3);\n          }\n          function M2(o3, a4) {\n            var u3 = i2(o3, a4);\n            if (f2 && s2.push([o3, a4]), v2)\n              l2 = o3, h2 = a4, d2 = u3, v2 = false, u3 && (b2.lineStart(), b2.point(o3, a4));\n            else if (u3 && y2)\n              b2.point(o3, a4);\n            else {\n              var c4 = [p2 = Math.max(Pl, Math.min(Cl, p2)), g2 = Math.max(Pl, Math.min(Cl, g2))], m3 = [o3 = Math.max(Pl, Math.min(Cl, o3)), a4 = Math.max(Pl, Math.min(Cl, a4))];\n              !function(t3, n3, e3, r3, i3, o4) {\n                var a5, u4 = t3[0], c5 = t3[1], f3 = 0, s3 = 1, l3 = n3[0] - u4, h3 = n3[1] - c5;\n                if (a5 = e3 - u4, l3 || !(a5 > 0)) {\n                  if (a5 /= l3, l3 < 0) {\n                    if (a5 < f3)\n                      return;\n                    a5 < s3 && (s3 = a5);\n                  } else if (l3 > 0) {\n                    if (a5 > s3)\n                      return;\n                    a5 > f3 && (f3 = a5);\n                  }\n                  if (a5 = i3 - u4, l3 || !(a5 < 0)) {\n                    if (a5 /= l3, l3 < 0) {\n                      if (a5 > s3)\n                        return;\n                      a5 > f3 && (f3 = a5);\n                    } else if (l3 > 0) {\n                      if (a5 < f3)\n                        return;\n                      a5 < s3 && (s3 = a5);\n                    }\n                    if (a5 = r3 - c5, h3 || !(a5 > 0)) {\n                      if (a5 /= h3, h3 < 0) {\n                        if (a5 < f3)\n                          return;\n                        a5 < s3 && (s3 = a5);\n                      } else if (h3 > 0) {\n                        if (a5 > s3)\n                          return;\n                        a5 > f3 && (f3 = a5);\n                      }\n                      if (a5 = o4 - c5, h3 || !(a5 < 0)) {\n                        if (a5 /= h3, h3 < 0) {\n                          if (a5 > s3)\n                            return;\n                          a5 > f3 && (f3 = a5);\n                        } else if (h3 > 0) {\n                          if (a5 < f3)\n                            return;\n                          a5 < s3 && (s3 = a5);\n                        }\n                        return f3 > 0 && (t3[0] = u4 + f3 * l3, t3[1] = c5 + f3 * h3), s3 < 1 && (n3[0] = u4 + s3 * l3, n3[1] = c5 + s3 * h3), true;\n                      }\n                    }\n                  }\n                }\n              }(c4, m3, t2, n2, e2, r2) ? u3 && (b2.lineStart(), b2.point(o3, a4), _2 = false) : (y2 || (b2.lineStart(), b2.point(c4[0], c4[1])), b2.point(m3[0], m3[1]), u3 || b2.lineEnd(), _2 = false);\n            }\n            p2 = o3, g2 = a4, y2 = u3;\n          }\n          return x2;\n        };\n      }\n      var $l = { sphere: qf, point: qf, lineStart: function() {\n        $l.point = Rl, $l.lineEnd = Dl;\n      }, lineEnd: qf, polygonStart: qf, polygonEnd: qf };\n      function Dl() {\n        $l.point = $l.lineEnd = qf;\n      }\n      function Rl(t2, n2) {\n        El = t2 *= mf, Nl = Cf(n2 *= mf), kl = Tf(n2), $l.point = Fl;\n      }\n      function Fl(t2, n2) {\n        t2 *= mf;\n        var e2 = Cf(n2 *= mf), r2 = Tf(n2), i2 = xf(t2 - El), o2 = Tf(i2), a2 = r2 * Cf(i2), u2 = kl * e2 - Nl * r2 * o2, c2 = Nl * e2 + kl * r2 * o2;\n        Sl.add(Mf(zf(a2 * a2 + u2 * u2), c2)), El = t2, Nl = e2, kl = r2;\n      }\n      function ql(t2) {\n        return Sl = new T(), Lf(t2, $l), +Sl;\n      }\n      var Ul = [null, null], Il = { type: \"LineString\", coordinates: Ul };\n      function Ol(t2, n2) {\n        return Ul[0] = t2, Ul[1] = n2, ql(Il);\n      }\n      var Bl = { Feature: function(t2, n2) {\n        return Ll(t2.geometry, n2);\n      }, FeatureCollection: function(t2, n2) {\n        for (var e2 = t2.features, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          if (Ll(e2[r2].geometry, n2))\n            return true;\n        return false;\n      } }, Yl = { Sphere: function() {\n        return true;\n      }, Point: function(t2, n2) {\n        return jl(t2.coordinates, n2);\n      }, MultiPoint: function(t2, n2) {\n        for (var e2 = t2.coordinates, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          if (jl(e2[r2], n2))\n            return true;\n        return false;\n      }, LineString: function(t2, n2) {\n        return Hl(t2.coordinates, n2);\n      }, MultiLineString: function(t2, n2) {\n        for (var e2 = t2.coordinates, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          if (Hl(e2[r2], n2))\n            return true;\n        return false;\n      }, Polygon: function(t2, n2) {\n        return Xl(t2.coordinates, n2);\n      }, MultiPolygon: function(t2, n2) {\n        for (var e2 = t2.coordinates, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          if (Xl(e2[r2], n2))\n            return true;\n        return false;\n      }, GeometryCollection: function(t2, n2) {\n        for (var e2 = t2.geometries, r2 = -1, i2 = e2.length; ++r2 < i2; )\n          if (Ll(e2[r2], n2))\n            return true;\n        return false;\n      } };\n      function Ll(t2, n2) {\n        return !(!t2 || !Yl.hasOwnProperty(t2.type)) && Yl[t2.type](t2, n2);\n      }\n      function jl(t2, n2) {\n        return 0 === Ol(t2, n2);\n      }\n      function Hl(t2, n2) {\n        for (var e2, r2, i2, o2 = 0, a2 = t2.length; o2 < a2; o2++) {\n          if (0 === (r2 = Ol(t2[o2], n2)))\n            return true;\n          if (o2 > 0 && (i2 = Ol(t2[o2], t2[o2 - 1])) > 0 && e2 <= i2 && r2 <= i2 && (e2 + r2 - i2) * (1 - Math.pow((e2 - r2) / i2, 2)) < pf * i2)\n            return true;\n          e2 = r2;\n        }\n        return false;\n      }\n      function Xl(t2, n2) {\n        return !!ml(t2.map(Gl), Vl(n2));\n      }\n      function Gl(t2) {\n        return (t2 = t2.map(Vl)).pop(), t2;\n      }\n      function Vl(t2) {\n        return [t2[0] * mf, t2[1] * mf];\n      }\n      function Wl(t2, n2, e2) {\n        var r2 = lt(t2, n2 - df, e2).concat(n2);\n        return function(t3) {\n          return r2.map(function(n3) {\n            return [t3, n3];\n          });\n        };\n      }\n      function Zl(t2, n2, e2) {\n        var r2 = lt(t2, n2 - df, e2).concat(n2);\n        return function(t3) {\n          return r2.map(function(n3) {\n            return [n3, t3];\n          });\n        };\n      }\n      function Kl() {\n        var t2, n2, e2, r2, i2, o2, a2, u2, c2, f2, s2, l2, h2 = 10, d2 = h2, p2 = 90, g2 = 360, y2 = 2.5;\n        function v2() {\n          return { type: \"MultiLineString\", coordinates: _2() };\n        }\n        function _2() {\n          return lt(Af(r2 / p2) * p2, e2, p2).map(s2).concat(lt(Af(u2 / g2) * g2, a2, g2).map(l2)).concat(lt(Af(n2 / h2) * h2, t2, h2).filter(function(t3) {\n            return xf(t3 % p2) > df;\n          }).map(c2)).concat(lt(Af(o2 / d2) * d2, i2, d2).filter(function(t3) {\n            return xf(t3 % g2) > df;\n          }).map(f2));\n        }\n        return v2.lines = function() {\n          return _2().map(function(t3) {\n            return { type: \"LineString\", coordinates: t3 };\n          });\n        }, v2.outline = function() {\n          return { type: \"Polygon\", coordinates: [s2(r2).concat(l2(a2).slice(1), s2(e2).reverse().slice(1), l2(u2).reverse().slice(1))] };\n        }, v2.extent = function(t3) {\n          return arguments.length ? v2.extentMajor(t3).extentMinor(t3) : v2.extentMinor();\n        }, v2.extentMajor = function(t3) {\n          return arguments.length ? (r2 = +t3[0][0], e2 = +t3[1][0], u2 = +t3[0][1], a2 = +t3[1][1], r2 > e2 && (t3 = r2, r2 = e2, e2 = t3), u2 > a2 && (t3 = u2, u2 = a2, a2 = t3), v2.precision(y2)) : [[r2, u2], [e2, a2]];\n        }, v2.extentMinor = function(e3) {\n          return arguments.length ? (n2 = +e3[0][0], t2 = +e3[1][0], o2 = +e3[0][1], i2 = +e3[1][1], n2 > t2 && (e3 = n2, n2 = t2, t2 = e3), o2 > i2 && (e3 = o2, o2 = i2, i2 = e3), v2.precision(y2)) : [[n2, o2], [t2, i2]];\n        }, v2.step = function(t3) {\n          return arguments.length ? v2.stepMajor(t3).stepMinor(t3) : v2.stepMinor();\n        }, v2.stepMajor = function(t3) {\n          return arguments.length ? (p2 = +t3[0], g2 = +t3[1], v2) : [p2, g2];\n        }, v2.stepMinor = function(t3) {\n          return arguments.length ? (h2 = +t3[0], d2 = +t3[1], v2) : [h2, d2];\n        }, v2.precision = function(h3) {\n          return arguments.length ? (y2 = +h3, c2 = Wl(o2, i2, 90), f2 = Zl(n2, t2, y2), s2 = Wl(u2, a2, 90), l2 = Zl(r2, e2, y2), v2) : y2;\n        }, v2.extentMajor([[-180, -90 + df], [180, 90 - df]]).extentMinor([[-180, -80 - df], [180, 80 + df]]);\n      }\n      var Ql, Jl, th, nh, eh = (t2) => t2, rh = new T(), ih = new T(), oh = { point: qf, lineStart: qf, lineEnd: qf, polygonStart: function() {\n        oh.lineStart = ah, oh.lineEnd = fh;\n      }, polygonEnd: function() {\n        oh.lineStart = oh.lineEnd = oh.point = qf, rh.add(xf(ih)), ih = new T();\n      }, result: function() {\n        var t2 = rh / 2;\n        return rh = new T(), t2;\n      } };\n      function ah() {\n        oh.point = uh;\n      }\n      function uh(t2, n2) {\n        oh.point = ch, Ql = th = t2, Jl = nh = n2;\n      }\n      function ch(t2, n2) {\n        ih.add(nh * t2 - th * n2), th = t2, nh = n2;\n      }\n      function fh() {\n        ch(Ql, Jl);\n      }\n      var sh = oh, lh = 1 / 0, hh = lh, dh = -lh, ph = dh, gh = { point: function(t2, n2) {\n        t2 < lh && (lh = t2);\n        t2 > dh && (dh = t2);\n        n2 < hh && (hh = n2);\n        n2 > ph && (ph = n2);\n      }, lineStart: qf, lineEnd: qf, polygonStart: qf, polygonEnd: qf, result: function() {\n        var t2 = [[lh, hh], [dh, ph]];\n        return dh = ph = -(hh = lh = 1 / 0), t2;\n      } };\n      var yh, vh, _h, bh, mh = gh, xh = 0, wh = 0, Mh = 0, Th = 0, Ah = 0, Sh = 0, Eh = 0, Nh = 0, kh = 0, Ch = { point: Ph, lineStart: zh, lineEnd: Rh, polygonStart: function() {\n        Ch.lineStart = Fh, Ch.lineEnd = qh;\n      }, polygonEnd: function() {\n        Ch.point = Ph, Ch.lineStart = zh, Ch.lineEnd = Rh;\n      }, result: function() {\n        var t2 = kh ? [Eh / kh, Nh / kh] : Sh ? [Th / Sh, Ah / Sh] : Mh ? [xh / Mh, wh / Mh] : [NaN, NaN];\n        return xh = wh = Mh = Th = Ah = Sh = Eh = Nh = kh = 0, t2;\n      } };\n      function Ph(t2, n2) {\n        xh += t2, wh += n2, ++Mh;\n      }\n      function zh() {\n        Ch.point = $h;\n      }\n      function $h(t2, n2) {\n        Ch.point = Dh, Ph(_h = t2, bh = n2);\n      }\n      function Dh(t2, n2) {\n        var e2 = t2 - _h, r2 = n2 - bh, i2 = zf(e2 * e2 + r2 * r2);\n        Th += i2 * (_h + t2) / 2, Ah += i2 * (bh + n2) / 2, Sh += i2, Ph(_h = t2, bh = n2);\n      }\n      function Rh() {\n        Ch.point = Ph;\n      }\n      function Fh() {\n        Ch.point = Uh;\n      }\n      function qh() {\n        Ih(yh, vh);\n      }\n      function Uh(t2, n2) {\n        Ch.point = Ih, Ph(yh = _h = t2, vh = bh = n2);\n      }\n      function Ih(t2, n2) {\n        var e2 = t2 - _h, r2 = n2 - bh, i2 = zf(e2 * e2 + r2 * r2);\n        Th += i2 * (_h + t2) / 2, Ah += i2 * (bh + n2) / 2, Sh += i2, Eh += (i2 = bh * t2 - _h * n2) * (_h + t2), Nh += i2 * (bh + n2), kh += 3 * i2, Ph(_h = t2, bh = n2);\n      }\n      var Oh = Ch;\n      function Bh(t2) {\n        this._context = t2;\n      }\n      Bh.prototype = { _radius: 4.5, pointRadius: function(t2) {\n        return this._radius = t2, this;\n      }, polygonStart: function() {\n        this._line = 0;\n      }, polygonEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._point = 0;\n      }, lineEnd: function() {\n        0 === this._line && this._context.closePath(), this._point = NaN;\n      }, point: function(t2, n2) {\n        switch (this._point) {\n          case 0:\n            this._context.moveTo(t2, n2), this._point = 1;\n            break;\n          case 1:\n            this._context.lineTo(t2, n2);\n            break;\n          default:\n            this._context.moveTo(t2 + this._radius, n2), this._context.arc(t2, n2, this._radius, 0, _f);\n        }\n      }, result: qf };\n      var Yh, Lh, jh, Hh, Xh, Gh = new T(), Vh = { point: qf, lineStart: function() {\n        Vh.point = Wh;\n      }, lineEnd: function() {\n        Yh && Zh(Lh, jh), Vh.point = qf;\n      }, polygonStart: function() {\n        Yh = true;\n      }, polygonEnd: function() {\n        Yh = null;\n      }, result: function() {\n        var t2 = +Gh;\n        return Gh = new T(), t2;\n      } };\n      function Wh(t2, n2) {\n        Vh.point = Zh, Lh = Hh = t2, jh = Xh = n2;\n      }\n      function Zh(t2, n2) {\n        Hh -= t2, Xh -= n2, Gh.add(zf(Hh * Hh + Xh * Xh)), Hh = t2, Xh = n2;\n      }\n      var Kh = Vh;\n      let Qh, Jh, td, nd;\n      class ed {\n        constructor(t2) {\n          this._append = null == t2 ? rd : function(t3) {\n            const n2 = Math.floor(t3);\n            if (!(n2 >= 0))\n              throw new RangeError(`invalid digits: ${t3}`);\n            if (n2 > 15)\n              return rd;\n            if (n2 !== Qh) {\n              const t4 = 10 ** n2;\n              Qh = n2, Jh = function(n3) {\n                let e2 = 1;\n                this._ += n3[0];\n                for (const r2 = n3.length; e2 < r2; ++e2)\n                  this._ += Math.round(arguments[e2] * t4) / t4 + n3[e2];\n              };\n            }\n            return Jh;\n          }(t2), this._radius = 4.5, this._ = \"\";\n        }\n        pointRadius(t2) {\n          return this._radius = +t2, this;\n        }\n        polygonStart() {\n          this._line = 0;\n        }\n        polygonEnd() {\n          this._line = NaN;\n        }\n        lineStart() {\n          this._point = 0;\n        }\n        lineEnd() {\n          0 === this._line && (this._ += \"Z\"), this._point = NaN;\n        }\n        point(t2, n2) {\n          switch (this._point) {\n            case 0:\n              this._append`M${t2},${n2}`, this._point = 1;\n              break;\n            case 1:\n              this._append`L${t2},${n2}`;\n              break;\n            default:\n              if (this._append`M${t2},${n2}`, this._radius !== td || this._append !== Jh) {\n                const t3 = this._radius, n3 = this._;\n                this._ = \"\", this._append`m0,${t3}a${t3},${t3} 0 1,1 0,${-2 * t3}a${t3},${t3} 0 1,1 0,${2 * t3}z`, td = t3, Jh = this._append, nd = this._, this._ = n3;\n              }\n              this._ += nd;\n          }\n        }\n        result() {\n          const t2 = this._;\n          return this._ = \"\", t2.length ? t2 : null;\n        }\n      }\n      function rd(t2) {\n        let n2 = 1;\n        this._ += t2[0];\n        for (const e2 = t2.length; n2 < e2; ++n2)\n          this._ += arguments[n2] + t2[n2];\n      }\n      function id(t2) {\n        return function(n2) {\n          var e2 = new od();\n          for (var r2 in t2)\n            e2[r2] = t2[r2];\n          return e2.stream = n2, e2;\n        };\n      }\n      function od() {\n      }\n      function ad(t2, n2, e2) {\n        var r2 = t2.clipExtent && t2.clipExtent();\n        return t2.scale(150).translate([0, 0]), null != r2 && t2.clipExtent(null), Lf(e2, t2.stream(mh)), n2(mh.result()), null != r2 && t2.clipExtent(r2), t2;\n      }\n      function ud(t2, n2, e2) {\n        return ad(t2, function(e3) {\n          var r2 = n2[1][0] - n2[0][0], i2 = n2[1][1] - n2[0][1], o2 = Math.min(r2 / (e3[1][0] - e3[0][0]), i2 / (e3[1][1] - e3[0][1])), a2 = +n2[0][0] + (r2 - o2 * (e3[1][0] + e3[0][0])) / 2, u2 = +n2[0][1] + (i2 - o2 * (e3[1][1] + e3[0][1])) / 2;\n          t2.scale(150 * o2).translate([a2, u2]);\n        }, e2);\n      }\n      function cd(t2, n2, e2) {\n        return ud(t2, [[0, 0], n2], e2);\n      }\n      function fd(t2, n2, e2) {\n        return ad(t2, function(e3) {\n          var r2 = +n2, i2 = r2 / (e3[1][0] - e3[0][0]), o2 = (r2 - i2 * (e3[1][0] + e3[0][0])) / 2, a2 = -i2 * e3[0][1];\n          t2.scale(150 * i2).translate([o2, a2]);\n        }, e2);\n      }\n      function sd(t2, n2, e2) {\n        return ad(t2, function(e3) {\n          var r2 = +n2, i2 = r2 / (e3[1][1] - e3[0][1]), o2 = -i2 * e3[0][0], a2 = (r2 - i2 * (e3[1][1] + e3[0][1])) / 2;\n          t2.scale(150 * i2).translate([o2, a2]);\n        }, e2);\n      }\n      od.prototype = { constructor: od, point: function(t2, n2) {\n        this.stream.point(t2, n2);\n      }, sphere: function() {\n        this.stream.sphere();\n      }, lineStart: function() {\n        this.stream.lineStart();\n      }, lineEnd: function() {\n        this.stream.lineEnd();\n      }, polygonStart: function() {\n        this.stream.polygonStart();\n      }, polygonEnd: function() {\n        this.stream.polygonEnd();\n      } };\n      var ld = 16, hd = Tf(30 * mf);\n      function dd(t2, n2) {\n        return +n2 ? /* @__PURE__ */ function(t3, n3) {\n          function e2(r2, i2, o2, a2, u2, c2, f2, s2, l2, h2, d2, p2, g2, y2) {\n            var v2 = f2 - r2, _2 = s2 - i2, b2 = v2 * v2 + _2 * _2;\n            if (b2 > 4 * n3 && g2--) {\n              var m2 = a2 + h2, x2 = u2 + d2, w2 = c2 + p2, M2 = zf(m2 * m2 + x2 * x2 + w2 * w2), T2 = Rf(w2 /= M2), A2 = xf(xf(w2) - 1) < df || xf(o2 - l2) < df ? (o2 + l2) / 2 : Mf(x2, m2), S2 = t3(A2, T2), E2 = S2[0], N2 = S2[1], k2 = E2 - r2, C2 = N2 - i2, P2 = _2 * k2 - v2 * C2;\n              (P2 * P2 / b2 > n3 || xf((v2 * k2 + _2 * C2) / b2 - 0.5) > 0.3 || a2 * h2 + u2 * d2 + c2 * p2 < hd) && (e2(r2, i2, o2, a2, u2, c2, E2, N2, A2, m2 /= M2, x2 /= M2, w2, g2, y2), y2.point(E2, N2), e2(E2, N2, A2, m2, x2, w2, f2, s2, l2, h2, d2, p2, g2, y2));\n            }\n          }\n          return function(n4) {\n            var r2, i2, o2, a2, u2, c2, f2, s2, l2, h2, d2, p2, g2 = { point: y2, lineStart: v2, lineEnd: b2, polygonStart: function() {\n              n4.polygonStart(), g2.lineStart = m2;\n            }, polygonEnd: function() {\n              n4.polygonEnd(), g2.lineStart = v2;\n            } };\n            function y2(e3, r3) {\n              e3 = t3(e3, r3), n4.point(e3[0], e3[1]);\n            }\n            function v2() {\n              s2 = NaN, g2.point = _2, n4.lineStart();\n            }\n            function _2(r3, i3) {\n              var o3 = ps([r3, i3]), a3 = t3(r3, i3);\n              e2(s2, l2, f2, h2, d2, p2, s2 = a3[0], l2 = a3[1], f2 = r3, h2 = o3[0], d2 = o3[1], p2 = o3[2], ld, n4), n4.point(s2, l2);\n            }\n            function b2() {\n              g2.point = y2, n4.lineEnd();\n            }\n            function m2() {\n              v2(), g2.point = x2, g2.lineEnd = w2;\n            }\n            function x2(t4, n5) {\n              _2(r2 = t4, n5), i2 = s2, o2 = l2, a2 = h2, u2 = d2, c2 = p2, g2.point = _2;\n            }\n            function w2() {\n              e2(s2, l2, f2, h2, d2, p2, i2, o2, r2, a2, u2, c2, ld, n4), g2.lineEnd = b2, b2();\n            }\n            return g2;\n          };\n        }(t2, n2) : function(t3) {\n          return id({ point: function(n3, e2) {\n            n3 = t3(n3, e2), this.stream.point(n3[0], n3[1]);\n          } });\n        }(t2);\n      }\n      var pd = id({ point: function(t2, n2) {\n        this.stream.point(t2 * mf, n2 * mf);\n      } });\n      function gd(t2, n2, e2, r2, i2, o2) {\n        if (!o2)\n          return function(t3, n3, e3, r3, i3) {\n            function o3(o4, a3) {\n              return [n3 + t3 * (o4 *= r3), e3 - t3 * (a3 *= i3)];\n            }\n            return o3.invert = function(o4, a3) {\n              return [(o4 - n3) / t3 * r3, (e3 - a3) / t3 * i3];\n            }, o3;\n          }(t2, n2, e2, r2, i2);\n        var a2 = Tf(o2), u2 = Cf(o2), c2 = a2 * t2, f2 = u2 * t2, s2 = a2 / t2, l2 = u2 / t2, h2 = (u2 * e2 - a2 * n2) / t2, d2 = (u2 * n2 + a2 * e2) / t2;\n        function p2(t3, o3) {\n          return [c2 * (t3 *= r2) - f2 * (o3 *= i2) + n2, e2 - f2 * t3 - c2 * o3];\n        }\n        return p2.invert = function(t3, n3) {\n          return [r2 * (s2 * t3 - l2 * n3 + h2), i2 * (d2 - l2 * t3 - s2 * n3)];\n        }, p2;\n      }\n      function yd(t2) {\n        return vd(function() {\n          return t2;\n        })();\n      }\n      function vd(t2) {\n        var n2, e2, r2, i2, o2, a2, u2, c2, f2, s2, l2 = 150, h2 = 480, d2 = 250, p2 = 0, g2 = 0, y2 = 0, v2 = 0, _2 = 0, b2 = 0, m2 = 1, x2 = 1, w2 = null, M2 = Tl, T2 = null, A2 = eh, S2 = 0.5;\n        function E2(t3) {\n          return c2(t3[0] * mf, t3[1] * mf);\n        }\n        function N2(t3) {\n          return (t3 = c2.invert(t3[0], t3[1])) && [t3[0] * bf, t3[1] * bf];\n        }\n        function k2() {\n          var t3 = gd(l2, 0, 0, m2, x2, b2).apply(null, n2(p2, g2)), r3 = gd(l2, h2 - t3[0], d2 - t3[1], m2, x2, b2);\n          return e2 = ul(y2, v2, _2), u2 = ol(n2, r3), c2 = ol(e2, u2), a2 = dd(u2, S2), C2();\n        }\n        function C2() {\n          return f2 = s2 = null, E2;\n        }\n        return E2.stream = function(t3) {\n          return f2 && s2 === t3 ? f2 : f2 = pd(function(t4) {\n            return id({ point: function(n3, e3) {\n              var r3 = t4(n3, e3);\n              return this.stream.point(r3[0], r3[1]);\n            } });\n          }(e2)(M2(a2(A2(s2 = t3)))));\n        }, E2.preclip = function(t3) {\n          return arguments.length ? (M2 = t3, w2 = void 0, C2()) : M2;\n        }, E2.postclip = function(t3) {\n          return arguments.length ? (A2 = t3, T2 = r2 = i2 = o2 = null, C2()) : A2;\n        }, E2.clipAngle = function(t3) {\n          return arguments.length ? (M2 = +t3 ? Al(w2 = t3 * mf) : (w2 = null, Tl), C2()) : w2 * bf;\n        }, E2.clipExtent = function(t3) {\n          return arguments.length ? (A2 = null == t3 ? (T2 = r2 = i2 = o2 = null, eh) : zl(T2 = +t3[0][0], r2 = +t3[0][1], i2 = +t3[1][0], o2 = +t3[1][1]), C2()) : null == T2 ? null : [[T2, r2], [i2, o2]];\n        }, E2.scale = function(t3) {\n          return arguments.length ? (l2 = +t3, k2()) : l2;\n        }, E2.translate = function(t3) {\n          return arguments.length ? (h2 = +t3[0], d2 = +t3[1], k2()) : [h2, d2];\n        }, E2.center = function(t3) {\n          return arguments.length ? (p2 = t3[0] % 360 * mf, g2 = t3[1] % 360 * mf, k2()) : [p2 * bf, g2 * bf];\n        }, E2.rotate = function(t3) {\n          return arguments.length ? (y2 = t3[0] % 360 * mf, v2 = t3[1] % 360 * mf, _2 = t3.length > 2 ? t3[2] % 360 * mf : 0, k2()) : [y2 * bf, v2 * bf, _2 * bf];\n        }, E2.angle = function(t3) {\n          return arguments.length ? (b2 = t3 % 360 * mf, k2()) : b2 * bf;\n        }, E2.reflectX = function(t3) {\n          return arguments.length ? (m2 = t3 ? -1 : 1, k2()) : m2 < 0;\n        }, E2.reflectY = function(t3) {\n          return arguments.length ? (x2 = t3 ? -1 : 1, k2()) : x2 < 0;\n        }, E2.precision = function(t3) {\n          return arguments.length ? (a2 = dd(u2, S2 = t3 * t3), C2()) : zf(S2);\n        }, E2.fitExtent = function(t3, n3) {\n          return ud(E2, t3, n3);\n        }, E2.fitSize = function(t3, n3) {\n          return cd(E2, t3, n3);\n        }, E2.fitWidth = function(t3, n3) {\n          return fd(E2, t3, n3);\n        }, E2.fitHeight = function(t3, n3) {\n          return sd(E2, t3, n3);\n        }, function() {\n          return n2 = t2.apply(this, arguments), E2.invert = n2.invert && N2, k2();\n        };\n      }\n      function _d(t2) {\n        var n2 = 0, e2 = gf / 3, r2 = vd(t2), i2 = r2(n2, e2);\n        return i2.parallels = function(t3) {\n          return arguments.length ? r2(n2 = t3[0] * mf, e2 = t3[1] * mf) : [n2 * bf, e2 * bf];\n        }, i2;\n      }\n      function bd(t2, n2) {\n        var e2 = Cf(t2), r2 = (e2 + Cf(n2)) / 2;\n        if (xf(r2) < df)\n          return function(t3) {\n            var n3 = Tf(t3);\n            function e3(t4, e4) {\n              return [t4 * n3, Cf(e4) / n3];\n            }\n            return e3.invert = function(t4, e4) {\n              return [t4 / n3, Rf(e4 * n3)];\n            }, e3;\n          }(t2);\n        var i2 = 1 + e2 * (2 * r2 - e2), o2 = zf(i2) / r2;\n        function a2(t3, n3) {\n          var e3 = zf(i2 - 2 * r2 * Cf(n3)) / r2;\n          return [e3 * Cf(t3 *= r2), o2 - e3 * Tf(t3)];\n        }\n        return a2.invert = function(t3, n3) {\n          var e3 = o2 - n3, a3 = Mf(t3, xf(e3)) * Pf(e3);\n          return e3 * r2 < 0 && (a3 -= gf * Pf(t3) * Pf(e3)), [a3 / r2, Rf((i2 - (t3 * t3 + e3 * e3) * r2 * r2) / (2 * r2))];\n        }, a2;\n      }\n      function md() {\n        return _d(bd).scale(155.424).center([0, 33.6442]);\n      }\n      function xd() {\n        return md().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);\n      }\n      function wd(t2) {\n        return function(n2, e2) {\n          var r2 = Tf(n2), i2 = Tf(e2), o2 = t2(r2 * i2);\n          return o2 === 1 / 0 ? [2, 0] : [o2 * i2 * Cf(n2), o2 * Cf(e2)];\n        };\n      }\n      function Md(t2) {\n        return function(n2, e2) {\n          var r2 = zf(n2 * n2 + e2 * e2), i2 = t2(r2), o2 = Cf(i2), a2 = Tf(i2);\n          return [Mf(n2 * o2, r2 * a2), Rf(r2 && e2 * o2 / r2)];\n        };\n      }\n      var Td = wd(function(t2) {\n        return zf(2 / (1 + t2));\n      });\n      Td.invert = Md(function(t2) {\n        return 2 * Rf(t2 / 2);\n      });\n      var Ad = wd(function(t2) {\n        return (t2 = Df(t2)) && t2 / Cf(t2);\n      });\n      function Sd(t2, n2) {\n        return [t2, Nf($f((yf + n2) / 2))];\n      }\n      function Ed(t2) {\n        var n2, e2, r2, i2 = yd(t2), o2 = i2.center, a2 = i2.scale, u2 = i2.translate, c2 = i2.clipExtent, f2 = null;\n        function s2() {\n          var o3 = gf * a2(), u3 = i2(ll(i2.rotate()).invert([0, 0]));\n          return c2(null == f2 ? [[u3[0] - o3, u3[1] - o3], [u3[0] + o3, u3[1] + o3]] : t2 === Sd ? [[Math.max(u3[0] - o3, f2), n2], [Math.min(u3[0] + o3, e2), r2]] : [[f2, Math.max(u3[1] - o3, n2)], [e2, Math.min(u3[1] + o3, r2)]]);\n        }\n        return i2.scale = function(t3) {\n          return arguments.length ? (a2(t3), s2()) : a2();\n        }, i2.translate = function(t3) {\n          return arguments.length ? (u2(t3), s2()) : u2();\n        }, i2.center = function(t3) {\n          return arguments.length ? (o2(t3), s2()) : o2();\n        }, i2.clipExtent = function(t3) {\n          return arguments.length ? (null == t3 ? f2 = n2 = e2 = r2 = null : (f2 = +t3[0][0], n2 = +t3[0][1], e2 = +t3[1][0], r2 = +t3[1][1]), s2()) : null == f2 ? null : [[f2, n2], [e2, r2]];\n        }, s2();\n      }\n      function Nd(t2) {\n        return $f((yf + t2) / 2);\n      }\n      function kd(t2, n2) {\n        var e2 = Tf(t2), r2 = t2 === n2 ? Cf(t2) : Nf(e2 / Tf(n2)) / Nf(Nd(n2) / Nd(t2)), i2 = e2 * kf(Nd(t2), r2) / r2;\n        if (!r2)\n          return Sd;\n        function o2(t3, n3) {\n          i2 > 0 ? n3 < -yf + df && (n3 = -yf + df) : n3 > yf - df && (n3 = yf - df);\n          var e3 = i2 / kf(Nd(n3), r2);\n          return [e3 * Cf(r2 * t3), i2 - e3 * Tf(r2 * t3)];\n        }\n        return o2.invert = function(t3, n3) {\n          var e3 = i2 - n3, o3 = Pf(r2) * zf(t3 * t3 + e3 * e3), a2 = Mf(t3, xf(e3)) * Pf(e3);\n          return e3 * r2 < 0 && (a2 -= gf * Pf(t3) * Pf(e3)), [a2 / r2, 2 * wf(kf(i2 / o3, 1 / r2)) - yf];\n        }, o2;\n      }\n      function Cd(t2, n2) {\n        return [t2, n2];\n      }\n      function Pd(t2, n2) {\n        var e2 = Tf(t2), r2 = t2 === n2 ? Cf(t2) : (e2 - Tf(n2)) / (n2 - t2), i2 = e2 / r2 + t2;\n        if (xf(r2) < df)\n          return Cd;\n        function o2(t3, n3) {\n          var e3 = i2 - n3, o3 = r2 * t3;\n          return [e3 * Cf(o3), i2 - e3 * Tf(o3)];\n        }\n        return o2.invert = function(t3, n3) {\n          var e3 = i2 - n3, o3 = Mf(t3, xf(e3)) * Pf(e3);\n          return e3 * r2 < 0 && (o3 -= gf * Pf(t3) * Pf(e3)), [o3 / r2, i2 - Pf(r2) * zf(t3 * t3 + e3 * e3)];\n        }, o2;\n      }\n      Ad.invert = Md(function(t2) {\n        return t2;\n      }), Sd.invert = function(t2, n2) {\n        return [t2, 2 * wf(Sf(n2)) - yf];\n      }, Cd.invert = Cd;\n      var zd = 1.340264, $d = -0.081106, Dd = 893e-6, Rd = 3796e-6, Fd = zf(3) / 2;\n      function qd(t2, n2) {\n        var e2 = Rf(Fd * Cf(n2)), r2 = e2 * e2, i2 = r2 * r2 * r2;\n        return [t2 * Tf(e2) / (Fd * (zd + 3 * $d * r2 + i2 * (7 * Dd + 9 * Rd * r2))), e2 * (zd + $d * r2 + i2 * (Dd + Rd * r2))];\n      }\n      function Ud(t2, n2) {\n        var e2 = Tf(n2), r2 = Tf(t2) * e2;\n        return [e2 * Cf(t2) / r2, Cf(n2) / r2];\n      }\n      function Id(t2, n2) {\n        var e2 = n2 * n2, r2 = e2 * e2;\n        return [t2 * (0.8707 - 0.131979 * e2 + r2 * (r2 * (3971e-6 * e2 - 1529e-6 * r2) - 0.013791)), n2 * (1.007226 + e2 * (0.015085 + r2 * (0.028874 * e2 - 0.044475 - 5916e-6 * r2)))];\n      }\n      function Od(t2, n2) {\n        return [Tf(n2) * Cf(t2), Cf(n2)];\n      }\n      function Bd(t2, n2) {\n        var e2 = Tf(n2), r2 = 1 + Tf(t2) * e2;\n        return [e2 * Cf(t2) / r2, Cf(n2) / r2];\n      }\n      function Yd(t2, n2) {\n        return [Nf($f((yf + n2) / 2)), -t2];\n      }\n      function Ld(t2, n2) {\n        return t2.parent === n2.parent ? 1 : 2;\n      }\n      function jd(t2, n2) {\n        return t2 + n2.x;\n      }\n      function Hd(t2, n2) {\n        return Math.max(t2, n2.y);\n      }\n      function Xd(t2) {\n        var n2 = 0, e2 = t2.children, r2 = e2 && e2.length;\n        if (r2)\n          for (; --r2 >= 0; )\n            n2 += e2[r2].value;\n        else\n          n2 = 1;\n        t2.value = n2;\n      }\n      function Gd(t2, n2) {\n        t2 instanceof Map ? (t2 = [void 0, t2], void 0 === n2 && (n2 = Wd)) : void 0 === n2 && (n2 = Vd);\n        for (var e2, r2, i2, o2, a2, u2 = new Qd(t2), c2 = [u2]; e2 = c2.pop(); )\n          if ((i2 = n2(e2.data)) && (a2 = (i2 = Array.from(i2)).length))\n            for (e2.children = i2, o2 = a2 - 1; o2 >= 0; --o2)\n              c2.push(r2 = i2[o2] = new Qd(i2[o2])), r2.parent = e2, r2.depth = e2.depth + 1;\n        return u2.eachBefore(Kd);\n      }\n      function Vd(t2) {\n        return t2.children;\n      }\n      function Wd(t2) {\n        return Array.isArray(t2) ? t2[1] : null;\n      }\n      function Zd(t2) {\n        void 0 !== t2.data.value && (t2.value = t2.data.value), t2.data = t2.data.data;\n      }\n      function Kd(t2) {\n        var n2 = 0;\n        do {\n          t2.height = n2;\n        } while ((t2 = t2.parent) && t2.height < ++n2);\n      }\n      function Qd(t2) {\n        this.data = t2, this.depth = this.height = 0, this.parent = null;\n      }\n      function Jd(t2) {\n        return null == t2 ? null : tp(t2);\n      }\n      function tp(t2) {\n        if (\"function\" != typeof t2)\n          throw new Error();\n        return t2;\n      }\n      function np() {\n        return 0;\n      }\n      function ep(t2) {\n        return function() {\n          return t2;\n        };\n      }\n      qd.invert = function(t2, n2) {\n        for (var e2, r2 = n2, i2 = r2 * r2, o2 = i2 * i2 * i2, a2 = 0; a2 < 12 && (o2 = (i2 = (r2 -= e2 = (r2 * (zd + $d * i2 + o2 * (Dd + Rd * i2)) - n2) / (zd + 3 * $d * i2 + o2 * (7 * Dd + 9 * Rd * i2))) * r2) * i2 * i2, !(xf(e2) < pf)); ++a2)\n          ;\n        return [Fd * t2 * (zd + 3 * $d * i2 + o2 * (7 * Dd + 9 * Rd * i2)) / Tf(r2), Rf(Cf(r2) / Fd)];\n      }, Ud.invert = Md(wf), Id.invert = function(t2, n2) {\n        var e2, r2 = n2, i2 = 25;\n        do {\n          var o2 = r2 * r2, a2 = o2 * o2;\n          r2 -= e2 = (r2 * (1.007226 + o2 * (0.015085 + a2 * (0.028874 * o2 - 0.044475 - 5916e-6 * a2))) - n2) / (1.007226 + o2 * (0.045255 + a2 * (0.259866 * o2 - 0.311325 - 5916e-6 * 11 * a2)));\n        } while (xf(e2) > df && --i2 > 0);\n        return [t2 / (0.8707 + (o2 = r2 * r2) * (o2 * (o2 * o2 * o2 * (3971e-6 - 1529e-6 * o2) - 0.013791) - 0.131979)), r2];\n      }, Od.invert = Md(Rf), Bd.invert = Md(function(t2) {\n        return 2 * wf(t2);\n      }), Yd.invert = function(t2, n2) {\n        return [-n2, 2 * wf(Sf(t2)) - yf];\n      }, Qd.prototype = Gd.prototype = { constructor: Qd, count: function() {\n        return this.eachAfter(Xd);\n      }, each: function(t2, n2) {\n        let e2 = -1;\n        for (const r2 of this)\n          t2.call(n2, r2, ++e2, this);\n        return this;\n      }, eachAfter: function(t2, n2) {\n        for (var e2, r2, i2, o2 = this, a2 = [o2], u2 = [], c2 = -1; o2 = a2.pop(); )\n          if (u2.push(o2), e2 = o2.children)\n            for (r2 = 0, i2 = e2.length; r2 < i2; ++r2)\n              a2.push(e2[r2]);\n        for (; o2 = u2.pop(); )\n          t2.call(n2, o2, ++c2, this);\n        return this;\n      }, eachBefore: function(t2, n2) {\n        for (var e2, r2, i2 = this, o2 = [i2], a2 = -1; i2 = o2.pop(); )\n          if (t2.call(n2, i2, ++a2, this), e2 = i2.children)\n            for (r2 = e2.length - 1; r2 >= 0; --r2)\n              o2.push(e2[r2]);\n        return this;\n      }, find: function(t2, n2) {\n        let e2 = -1;\n        for (const r2 of this)\n          if (t2.call(n2, r2, ++e2, this))\n            return r2;\n      }, sum: function(t2) {\n        return this.eachAfter(function(n2) {\n          for (var e2 = +t2(n2.data) || 0, r2 = n2.children, i2 = r2 && r2.length; --i2 >= 0; )\n            e2 += r2[i2].value;\n          n2.value = e2;\n        });\n      }, sort: function(t2) {\n        return this.eachBefore(function(n2) {\n          n2.children && n2.children.sort(t2);\n        });\n      }, path: function(t2) {\n        for (var n2 = this, e2 = function(t3, n3) {\n          if (t3 === n3)\n            return t3;\n          var e3 = t3.ancestors(), r3 = n3.ancestors(), i3 = null;\n          t3 = e3.pop(), n3 = r3.pop();\n          for (; t3 === n3; )\n            i3 = t3, t3 = e3.pop(), n3 = r3.pop();\n          return i3;\n        }(n2, t2), r2 = [n2]; n2 !== e2; )\n          n2 = n2.parent, r2.push(n2);\n        for (var i2 = r2.length; t2 !== e2; )\n          r2.splice(i2, 0, t2), t2 = t2.parent;\n        return r2;\n      }, ancestors: function() {\n        for (var t2 = this, n2 = [t2]; t2 = t2.parent; )\n          n2.push(t2);\n        return n2;\n      }, descendants: function() {\n        return Array.from(this);\n      }, leaves: function() {\n        var t2 = [];\n        return this.eachBefore(function(n2) {\n          n2.children || t2.push(n2);\n        }), t2;\n      }, links: function() {\n        var t2 = this, n2 = [];\n        return t2.each(function(e2) {\n          e2 !== t2 && n2.push({ source: e2.parent, target: e2 });\n        }), n2;\n      }, copy: function() {\n        return Gd(this).eachBefore(Zd);\n      }, [Symbol.iterator]: function* () {\n        var t2, n2, e2, r2, i2 = this, o2 = [i2];\n        do {\n          for (t2 = o2.reverse(), o2 = []; i2 = t2.pop(); )\n            if (yield i2, n2 = i2.children)\n              for (e2 = 0, r2 = n2.length; e2 < r2; ++e2)\n                o2.push(n2[e2]);\n        } while (o2.length);\n      } };\n      const rp = 1664525, ip = 1013904223, op = 4294967296;\n      function ap() {\n        let t2 = 1;\n        return () => (t2 = (rp * t2 + ip) % op) / op;\n      }\n      function up(t2, n2) {\n        for (var e2, r2, i2 = 0, o2 = (t2 = function(t3, n3) {\n          let e3, r3, i3 = t3.length;\n          for (; i3; )\n            r3 = n3() * i3-- | 0, e3 = t3[i3], t3[i3] = t3[r3], t3[r3] = e3;\n          return t3;\n        }(Array.from(t2), n2)).length, a2 = []; i2 < o2; )\n          e2 = t2[i2], r2 && sp(r2, e2) ? ++i2 : (r2 = hp(a2 = cp(a2, e2)), i2 = 0);\n        return r2;\n      }\n      function cp(t2, n2) {\n        var e2, r2;\n        if (lp(n2, t2))\n          return [n2];\n        for (e2 = 0; e2 < t2.length; ++e2)\n          if (fp(n2, t2[e2]) && lp(dp(t2[e2], n2), t2))\n            return [t2[e2], n2];\n        for (e2 = 0; e2 < t2.length - 1; ++e2)\n          for (r2 = e2 + 1; r2 < t2.length; ++r2)\n            if (fp(dp(t2[e2], t2[r2]), n2) && fp(dp(t2[e2], n2), t2[r2]) && fp(dp(t2[r2], n2), t2[e2]) && lp(pp(t2[e2], t2[r2], n2), t2))\n              return [t2[e2], t2[r2], n2];\n        throw new Error();\n      }\n      function fp(t2, n2) {\n        var e2 = t2.r - n2.r, r2 = n2.x - t2.x, i2 = n2.y - t2.y;\n        return e2 < 0 || e2 * e2 < r2 * r2 + i2 * i2;\n      }\n      function sp(t2, n2) {\n        var e2 = t2.r - n2.r + 1e-9 * Math.max(t2.r, n2.r, 1), r2 = n2.x - t2.x, i2 = n2.y - t2.y;\n        return e2 > 0 && e2 * e2 > r2 * r2 + i2 * i2;\n      }\n      function lp(t2, n2) {\n        for (var e2 = 0; e2 < n2.length; ++e2)\n          if (!sp(t2, n2[e2]))\n            return false;\n        return true;\n      }\n      function hp(t2) {\n        switch (t2.length) {\n          case 1:\n            return function(t3) {\n              return { x: t3.x, y: t3.y, r: t3.r };\n            }(t2[0]);\n          case 2:\n            return dp(t2[0], t2[1]);\n          case 3:\n            return pp(t2[0], t2[1], t2[2]);\n        }\n      }\n      function dp(t2, n2) {\n        var e2 = t2.x, r2 = t2.y, i2 = t2.r, o2 = n2.x, a2 = n2.y, u2 = n2.r, c2 = o2 - e2, f2 = a2 - r2, s2 = u2 - i2, l2 = Math.sqrt(c2 * c2 + f2 * f2);\n        return { x: (e2 + o2 + c2 / l2 * s2) / 2, y: (r2 + a2 + f2 / l2 * s2) / 2, r: (l2 + i2 + u2) / 2 };\n      }\n      function pp(t2, n2, e2) {\n        var r2 = t2.x, i2 = t2.y, o2 = t2.r, a2 = n2.x, u2 = n2.y, c2 = n2.r, f2 = e2.x, s2 = e2.y, l2 = e2.r, h2 = r2 - a2, d2 = r2 - f2, p2 = i2 - u2, g2 = i2 - s2, y2 = c2 - o2, v2 = l2 - o2, _2 = r2 * r2 + i2 * i2 - o2 * o2, b2 = _2 - a2 * a2 - u2 * u2 + c2 * c2, m2 = _2 - f2 * f2 - s2 * s2 + l2 * l2, x2 = d2 * p2 - h2 * g2, w2 = (p2 * m2 - g2 * b2) / (2 * x2) - r2, M2 = (g2 * y2 - p2 * v2) / x2, T2 = (d2 * b2 - h2 * m2) / (2 * x2) - i2, A2 = (h2 * v2 - d2 * y2) / x2, S2 = M2 * M2 + A2 * A2 - 1, E2 = 2 * (o2 + w2 * M2 + T2 * A2), N2 = w2 * w2 + T2 * T2 - o2 * o2, k2 = -(Math.abs(S2) > 1e-6 ? (E2 + Math.sqrt(E2 * E2 - 4 * S2 * N2)) / (2 * S2) : N2 / E2);\n        return { x: r2 + w2 + M2 * k2, y: i2 + T2 + A2 * k2, r: k2 };\n      }\n      function gp(t2, n2, e2) {\n        var r2, i2, o2, a2, u2 = t2.x - n2.x, c2 = t2.y - n2.y, f2 = u2 * u2 + c2 * c2;\n        f2 ? (i2 = n2.r + e2.r, i2 *= i2, a2 = t2.r + e2.r, i2 > (a2 *= a2) ? (r2 = (f2 + a2 - i2) / (2 * f2), o2 = Math.sqrt(Math.max(0, a2 / f2 - r2 * r2)), e2.x = t2.x - r2 * u2 - o2 * c2, e2.y = t2.y - r2 * c2 + o2 * u2) : (r2 = (f2 + i2 - a2) / (2 * f2), o2 = Math.sqrt(Math.max(0, i2 / f2 - r2 * r2)), e2.x = n2.x + r2 * u2 - o2 * c2, e2.y = n2.y + r2 * c2 + o2 * u2)) : (e2.x = n2.x + e2.r, e2.y = n2.y);\n      }\n      function yp(t2, n2) {\n        var e2 = t2.r + n2.r - 1e-6, r2 = n2.x - t2.x, i2 = n2.y - t2.y;\n        return e2 > 0 && e2 * e2 > r2 * r2 + i2 * i2;\n      }\n      function vp(t2) {\n        var n2 = t2._, e2 = t2.next._, r2 = n2.r + e2.r, i2 = (n2.x * e2.r + e2.x * n2.r) / r2, o2 = (n2.y * e2.r + e2.y * n2.r) / r2;\n        return i2 * i2 + o2 * o2;\n      }\n      function _p(t2) {\n        this._ = t2, this.next = null, this.previous = null;\n      }\n      function bp(t2, n2) {\n        if (!(o2 = (t2 = function(t3) {\n          return \"object\" == typeof t3 && \"length\" in t3 ? t3 : Array.from(t3);\n        }(t2)).length))\n          return 0;\n        var e2, r2, i2, o2, a2, u2, c2, f2, s2, l2, h2;\n        if ((e2 = t2[0]).x = 0, e2.y = 0, !(o2 > 1))\n          return e2.r;\n        if (r2 = t2[1], e2.x = -r2.r, r2.x = e2.r, r2.y = 0, !(o2 > 2))\n          return e2.r + r2.r;\n        gp(r2, e2, i2 = t2[2]), e2 = new _p(e2), r2 = new _p(r2), i2 = new _p(i2), e2.next = i2.previous = r2, r2.next = e2.previous = i2, i2.next = r2.previous = e2;\n        t:\n          for (c2 = 3; c2 < o2; ++c2) {\n            gp(e2._, r2._, i2 = t2[c2]), i2 = new _p(i2), f2 = r2.next, s2 = e2.previous, l2 = r2._.r, h2 = e2._.r;\n            do {\n              if (l2 <= h2) {\n                if (yp(f2._, i2._)) {\n                  r2 = f2, e2.next = r2, r2.previous = e2, --c2;\n                  continue t;\n                }\n                l2 += f2._.r, f2 = f2.next;\n              } else {\n                if (yp(s2._, i2._)) {\n                  (e2 = s2).next = r2, r2.previous = e2, --c2;\n                  continue t;\n                }\n                h2 += s2._.r, s2 = s2.previous;\n              }\n            } while (f2 !== s2.next);\n            for (i2.previous = e2, i2.next = r2, e2.next = r2.previous = r2 = i2, a2 = vp(e2); (i2 = i2.next) !== r2; )\n              (u2 = vp(i2)) < a2 && (e2 = i2, a2 = u2);\n            r2 = e2.next;\n          }\n        for (e2 = [r2._], i2 = r2; (i2 = i2.next) !== r2; )\n          e2.push(i2._);\n        for (i2 = up(e2, n2), c2 = 0; c2 < o2; ++c2)\n          (e2 = t2[c2]).x -= i2.x, e2.y -= i2.y;\n        return i2.r;\n      }\n      function mp(t2) {\n        return Math.sqrt(t2.value);\n      }\n      function xp(t2) {\n        return function(n2) {\n          n2.children || (n2.r = Math.max(0, +t2(n2) || 0));\n        };\n      }\n      function wp(t2, n2, e2) {\n        return function(r2) {\n          if (i2 = r2.children) {\n            var i2, o2, a2, u2 = i2.length, c2 = t2(r2) * n2 || 0;\n            if (c2)\n              for (o2 = 0; o2 < u2; ++o2)\n                i2[o2].r += c2;\n            if (a2 = bp(i2, e2), c2)\n              for (o2 = 0; o2 < u2; ++o2)\n                i2[o2].r -= c2;\n            r2.r = a2 + c2;\n          }\n        };\n      }\n      function Mp(t2) {\n        return function(n2) {\n          var e2 = n2.parent;\n          n2.r *= t2, e2 && (n2.x = e2.x + t2 * n2.x, n2.y = e2.y + t2 * n2.y);\n        };\n      }\n      function Tp(t2) {\n        t2.x0 = Math.round(t2.x0), t2.y0 = Math.round(t2.y0), t2.x1 = Math.round(t2.x1), t2.y1 = Math.round(t2.y1);\n      }\n      function Ap(t2, n2, e2, r2, i2) {\n        for (var o2, a2 = t2.children, u2 = -1, c2 = a2.length, f2 = t2.value && (r2 - n2) / t2.value; ++u2 < c2; )\n          (o2 = a2[u2]).y0 = e2, o2.y1 = i2, o2.x0 = n2, o2.x1 = n2 += o2.value * f2;\n      }\n      var Sp = { depth: -1 }, Ep = {}, Np = {};\n      function kp(t2) {\n        return t2.id;\n      }\n      function Cp(t2) {\n        return t2.parentId;\n      }\n      function Pp(t2) {\n        let n2 = t2.length;\n        if (n2 < 2)\n          return \"\";\n        for (; --n2 > 1 && !zp(t2, n2); )\n          ;\n        return t2.slice(0, n2);\n      }\n      function zp(t2, n2) {\n        if (\"/\" === t2[n2]) {\n          let e2 = 0;\n          for (; n2 > 0 && \"\\\\\" === t2[--n2]; )\n            ++e2;\n          if (0 == (1 & e2))\n            return true;\n        }\n        return false;\n      }\n      function $p(t2, n2) {\n        return t2.parent === n2.parent ? 1 : 2;\n      }\n      function Dp(t2) {\n        var n2 = t2.children;\n        return n2 ? n2[0] : t2.t;\n      }\n      function Rp(t2) {\n        var n2 = t2.children;\n        return n2 ? n2[n2.length - 1] : t2.t;\n      }\n      function Fp(t2, n2, e2) {\n        var r2 = e2 / (n2.i - t2.i);\n        n2.c -= r2, n2.s += e2, t2.c += r2, n2.z += e2, n2.m += e2;\n      }\n      function qp(t2, n2, e2) {\n        return t2.a.parent === n2.parent ? t2.a : e2;\n      }\n      function Up(t2, n2) {\n        this._ = t2, this.parent = null, this.children = null, this.A = null, this.a = this, this.z = 0, this.m = 0, this.c = 0, this.s = 0, this.t = null, this.i = n2;\n      }\n      function Ip(t2, n2, e2, r2, i2) {\n        for (var o2, a2 = t2.children, u2 = -1, c2 = a2.length, f2 = t2.value && (i2 - e2) / t2.value; ++u2 < c2; )\n          (o2 = a2[u2]).x0 = n2, o2.x1 = r2, o2.y0 = e2, o2.y1 = e2 += o2.value * f2;\n      }\n      Up.prototype = Object.create(Qd.prototype);\n      var Op = (1 + Math.sqrt(5)) / 2;\n      function Bp(t2, n2, e2, r2, i2, o2) {\n        for (var a2, u2, c2, f2, s2, l2, h2, d2, p2, g2, y2, v2 = [], _2 = n2.children, b2 = 0, m2 = 0, x2 = _2.length, w2 = n2.value; b2 < x2; ) {\n          c2 = i2 - e2, f2 = o2 - r2;\n          do {\n            s2 = _2[m2++].value;\n          } while (!s2 && m2 < x2);\n          for (l2 = h2 = s2, y2 = s2 * s2 * (g2 = Math.max(f2 / c2, c2 / f2) / (w2 * t2)), p2 = Math.max(h2 / y2, y2 / l2); m2 < x2; ++m2) {\n            if (s2 += u2 = _2[m2].value, u2 < l2 && (l2 = u2), u2 > h2 && (h2 = u2), y2 = s2 * s2 * g2, (d2 = Math.max(h2 / y2, y2 / l2)) > p2) {\n              s2 -= u2;\n              break;\n            }\n            p2 = d2;\n          }\n          v2.push(a2 = { value: s2, dice: c2 < f2, children: _2.slice(b2, m2) }), a2.dice ? Ap(a2, e2, r2, i2, w2 ? r2 += f2 * s2 / w2 : o2) : Ip(a2, e2, r2, w2 ? e2 += c2 * s2 / w2 : i2, o2), w2 -= s2, b2 = m2;\n        }\n        return v2;\n      }\n      var Yp = function t2(n2) {\n        function e2(t3, e3, r2, i2, o2) {\n          Bp(n2, t3, e3, r2, i2, o2);\n        }\n        return e2.ratio = function(n3) {\n          return t2((n3 = +n3) > 1 ? n3 : 1);\n        }, e2;\n      }(Op);\n      var Lp = function t2(n2) {\n        function e2(t3, e3, r2, i2, o2) {\n          if ((a2 = t3._squarify) && a2.ratio === n2)\n            for (var a2, u2, c2, f2, s2, l2 = -1, h2 = a2.length, d2 = t3.value; ++l2 < h2; ) {\n              for (c2 = (u2 = a2[l2]).children, f2 = u2.value = 0, s2 = c2.length; f2 < s2; ++f2)\n                u2.value += c2[f2].value;\n              u2.dice ? Ap(u2, e3, r2, i2, d2 ? r2 += (o2 - r2) * u2.value / d2 : o2) : Ip(u2, e3, r2, d2 ? e3 += (i2 - e3) * u2.value / d2 : i2, o2), d2 -= u2.value;\n            }\n          else\n            t3._squarify = a2 = Bp(n2, t3, e3, r2, i2, o2), a2.ratio = n2;\n        }\n        return e2.ratio = function(n3) {\n          return t2((n3 = +n3) > 1 ? n3 : 1);\n        }, e2;\n      }(Op);\n      function jp(t2, n2, e2) {\n        return (n2[0] - t2[0]) * (e2[1] - t2[1]) - (n2[1] - t2[1]) * (e2[0] - t2[0]);\n      }\n      function Hp(t2, n2) {\n        return t2[0] - n2[0] || t2[1] - n2[1];\n      }\n      function Xp(t2) {\n        const n2 = t2.length, e2 = [0, 1];\n        let r2, i2 = 2;\n        for (r2 = 2; r2 < n2; ++r2) {\n          for (; i2 > 1 && jp(t2[e2[i2 - 2]], t2[e2[i2 - 1]], t2[r2]) <= 0; )\n            --i2;\n          e2[i2++] = r2;\n        }\n        return e2.slice(0, i2);\n      }\n      var Gp = Math.random, Vp = function t2(n2) {\n        function e2(t3, e3) {\n          return t3 = null == t3 ? 0 : +t3, e3 = null == e3 ? 1 : +e3, 1 === arguments.length ? (e3 = t3, t3 = 0) : e3 -= t3, function() {\n            return n2() * e3 + t3;\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), Wp = function t2(n2) {\n        function e2(t3, e3) {\n          return arguments.length < 2 && (e3 = t3, t3 = 0), t3 = Math.floor(t3), e3 = Math.floor(e3) - t3, function() {\n            return Math.floor(n2() * e3 + t3);\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), Zp = function t2(n2) {\n        function e2(t3, e3) {\n          var r2, i2;\n          return t3 = null == t3 ? 0 : +t3, e3 = null == e3 ? 1 : +e3, function() {\n            var o2;\n            if (null != r2)\n              o2 = r2, r2 = null;\n            else\n              do {\n                r2 = 2 * n2() - 1, o2 = 2 * n2() - 1, i2 = r2 * r2 + o2 * o2;\n              } while (!i2 || i2 > 1);\n            return t3 + e3 * o2 * Math.sqrt(-2 * Math.log(i2) / i2);\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), Kp = function t2(n2) {\n        var e2 = Zp.source(n2);\n        function r2() {\n          var t3 = e2.apply(this, arguments);\n          return function() {\n            return Math.exp(t3());\n          };\n        }\n        return r2.source = t2, r2;\n      }(Gp), Qp = function t2(n2) {\n        function e2(t3) {\n          return (t3 = +t3) <= 0 ? () => 0 : function() {\n            for (var e3 = 0, r2 = t3; r2 > 1; --r2)\n              e3 += n2();\n            return e3 + r2 * n2();\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), Jp = function t2(n2) {\n        var e2 = Qp.source(n2);\n        function r2(t3) {\n          if (0 == (t3 = +t3))\n            return n2;\n          var r3 = e2(t3);\n          return function() {\n            return r3() / t3;\n          };\n        }\n        return r2.source = t2, r2;\n      }(Gp), tg = function t2(n2) {\n        function e2(t3) {\n          return function() {\n            return -Math.log1p(-n2()) / t3;\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), ng = function t2(n2) {\n        function e2(t3) {\n          if ((t3 = +t3) < 0)\n            throw new RangeError(\"invalid alpha\");\n          return t3 = 1 / -t3, function() {\n            return Math.pow(1 - n2(), t3);\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), eg = function t2(n2) {\n        function e2(t3) {\n          if ((t3 = +t3) < 0 || t3 > 1)\n            throw new RangeError(\"invalid p\");\n          return function() {\n            return Math.floor(n2() + t3);\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), rg = function t2(n2) {\n        function e2(t3) {\n          if ((t3 = +t3) < 0 || t3 > 1)\n            throw new RangeError(\"invalid p\");\n          return 0 === t3 ? () => 1 / 0 : 1 === t3 ? () => 1 : (t3 = Math.log1p(-t3), function() {\n            return 1 + Math.floor(Math.log1p(-n2()) / t3);\n          });\n        }\n        return e2.source = t2, e2;\n      }(Gp), ig = function t2(n2) {\n        var e2 = Zp.source(n2)();\n        function r2(t3, r3) {\n          if ((t3 = +t3) < 0)\n            throw new RangeError(\"invalid k\");\n          if (0 === t3)\n            return () => 0;\n          if (r3 = null == r3 ? 1 : +r3, 1 === t3)\n            return () => -Math.log1p(-n2()) * r3;\n          var i2 = (t3 < 1 ? t3 + 1 : t3) - 1 / 3, o2 = 1 / (3 * Math.sqrt(i2)), a2 = t3 < 1 ? () => Math.pow(n2(), 1 / t3) : () => 1;\n          return function() {\n            do {\n              do {\n                var t4 = e2(), u2 = 1 + o2 * t4;\n              } while (u2 <= 0);\n              u2 *= u2 * u2;\n              var c2 = 1 - n2();\n            } while (c2 >= 1 - 0.0331 * t4 * t4 * t4 * t4 && Math.log(c2) >= 0.5 * t4 * t4 + i2 * (1 - u2 + Math.log(u2)));\n            return i2 * u2 * a2() * r3;\n          };\n        }\n        return r2.source = t2, r2;\n      }(Gp), og = function t2(n2) {\n        var e2 = ig.source(n2);\n        function r2(t3, n3) {\n          var r3 = e2(t3), i2 = e2(n3);\n          return function() {\n            var t4 = r3();\n            return 0 === t4 ? 0 : t4 / (t4 + i2());\n          };\n        }\n        return r2.source = t2, r2;\n      }(Gp), ag = function t2(n2) {\n        var e2 = rg.source(n2), r2 = og.source(n2);\n        function i2(t3, n3) {\n          return t3 = +t3, (n3 = +n3) >= 1 ? () => t3 : n3 <= 0 ? () => 0 : function() {\n            for (var i3 = 0, o2 = t3, a2 = n3; o2 * a2 > 16 && o2 * (1 - a2) > 16; ) {\n              var u2 = Math.floor((o2 + 1) * a2), c2 = r2(u2, o2 - u2 + 1)();\n              c2 <= a2 ? (i3 += u2, o2 -= u2, a2 = (a2 - c2) / (1 - c2)) : (o2 = u2 - 1, a2 /= c2);\n            }\n            for (var f2 = a2 < 0.5, s2 = e2(f2 ? a2 : 1 - a2), l2 = s2(), h2 = 0; l2 <= o2; ++h2)\n              l2 += s2();\n            return i3 + (f2 ? h2 : o2 - h2);\n          };\n        }\n        return i2.source = t2, i2;\n      }(Gp), ug = function t2(n2) {\n        function e2(t3, e3, r2) {\n          var i2;\n          return 0 == (t3 = +t3) ? i2 = (t4) => -Math.log(t4) : (t3 = 1 / t3, i2 = (n3) => Math.pow(n3, t3)), e3 = null == e3 ? 0 : +e3, r2 = null == r2 ? 1 : +r2, function() {\n            return e3 + r2 * i2(-Math.log1p(-n2()));\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), cg = function t2(n2) {\n        function e2(t3, e3) {\n          return t3 = null == t3 ? 0 : +t3, e3 = null == e3 ? 1 : +e3, function() {\n            return t3 + e3 * Math.tan(Math.PI * n2());\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), fg = function t2(n2) {\n        function e2(t3, e3) {\n          return t3 = null == t3 ? 0 : +t3, e3 = null == e3 ? 1 : +e3, function() {\n            var r2 = n2();\n            return t3 + e3 * Math.log(r2 / (1 - r2));\n          };\n        }\n        return e2.source = t2, e2;\n      }(Gp), sg = function t2(n2) {\n        var e2 = ig.source(n2), r2 = ag.source(n2);\n        function i2(t3) {\n          return function() {\n            for (var i3 = 0, o2 = t3; o2 > 16; ) {\n              var a2 = Math.floor(0.875 * o2), u2 = e2(a2)();\n              if (u2 > o2)\n                return i3 + r2(a2 - 1, o2 / u2)();\n              i3 += a2, o2 -= u2;\n            }\n            for (var c2 = -Math.log1p(-n2()), f2 = 0; c2 <= o2; ++f2)\n              c2 -= Math.log1p(-n2());\n            return i3 + f2;\n          };\n        }\n        return i2.source = t2, i2;\n      }(Gp);\n      const lg = 1 / 4294967296;\n      function hg(t2, n2) {\n        switch (arguments.length) {\n          case 0:\n            break;\n          case 1:\n            this.range(t2);\n            break;\n          default:\n            this.range(n2).domain(t2);\n        }\n        return this;\n      }\n      function dg(t2, n2) {\n        switch (arguments.length) {\n          case 0:\n            break;\n          case 1:\n            \"function\" == typeof t2 ? this.interpolator(t2) : this.range(t2);\n            break;\n          default:\n            this.domain(t2), \"function\" == typeof n2 ? this.interpolator(n2) : this.range(n2);\n        }\n        return this;\n      }\n      const pg = Symbol(\"implicit\");\n      function gg() {\n        var t2 = new InternMap(), n2 = [], e2 = [], r2 = pg;\n        function i2(i3) {\n          let o2 = t2.get(i3);\n          if (void 0 === o2) {\n            if (r2 !== pg)\n              return r2;\n            t2.set(i3, o2 = n2.push(i3) - 1);\n          }\n          return e2[o2 % e2.length];\n        }\n        return i2.domain = function(e3) {\n          if (!arguments.length)\n            return n2.slice();\n          n2 = [], t2 = new InternMap();\n          for (const r3 of e3)\n            t2.has(r3) || t2.set(r3, n2.push(r3) - 1);\n          return i2;\n        }, i2.range = function(t3) {\n          return arguments.length ? (e2 = Array.from(t3), i2) : e2.slice();\n        }, i2.unknown = function(t3) {\n          return arguments.length ? (r2 = t3, i2) : r2;\n        }, i2.copy = function() {\n          return gg(n2, e2).unknown(r2);\n        }, hg.apply(i2, arguments), i2;\n      }\n      function yg() {\n        var t2, n2, e2 = gg().unknown(void 0), r2 = e2.domain, i2 = e2.range, o2 = 0, a2 = 1, u2 = false, c2 = 0, f2 = 0, s2 = 0.5;\n        function l2() {\n          var e3 = r2().length, l3 = a2 < o2, h2 = l3 ? a2 : o2, d2 = l3 ? o2 : a2;\n          t2 = (d2 - h2) / Math.max(1, e3 - c2 + 2 * f2), u2 && (t2 = Math.floor(t2)), h2 += (d2 - h2 - t2 * (e3 - c2)) * s2, n2 = t2 * (1 - c2), u2 && (h2 = Math.round(h2), n2 = Math.round(n2));\n          var p2 = lt(e3).map(function(n3) {\n            return h2 + t2 * n3;\n          });\n          return i2(l3 ? p2.reverse() : p2);\n        }\n        return delete e2.unknown, e2.domain = function(t3) {\n          return arguments.length ? (r2(t3), l2()) : r2();\n        }, e2.range = function(t3) {\n          return arguments.length ? ([o2, a2] = t3, o2 = +o2, a2 = +a2, l2()) : [o2, a2];\n        }, e2.rangeRound = function(t3) {\n          return [o2, a2] = t3, o2 = +o2, a2 = +a2, u2 = true, l2();\n        }, e2.bandwidth = function() {\n          return n2;\n        }, e2.step = function() {\n          return t2;\n        }, e2.round = function(t3) {\n          return arguments.length ? (u2 = !!t3, l2()) : u2;\n        }, e2.padding = function(t3) {\n          return arguments.length ? (c2 = Math.min(1, f2 = +t3), l2()) : c2;\n        }, e2.paddingInner = function(t3) {\n          return arguments.length ? (c2 = Math.min(1, t3), l2()) : c2;\n        }, e2.paddingOuter = function(t3) {\n          return arguments.length ? (f2 = +t3, l2()) : f2;\n        }, e2.align = function(t3) {\n          return arguments.length ? (s2 = Math.max(0, Math.min(1, t3)), l2()) : s2;\n        }, e2.copy = function() {\n          return yg(r2(), [o2, a2]).round(u2).paddingInner(c2).paddingOuter(f2).align(s2);\n        }, hg.apply(l2(), arguments);\n      }\n      function vg(t2) {\n        var n2 = t2.copy;\n        return t2.padding = t2.paddingOuter, delete t2.paddingInner, delete t2.paddingOuter, t2.copy = function() {\n          return vg(n2());\n        }, t2;\n      }\n      function _g(t2) {\n        return +t2;\n      }\n      var bg = [0, 1];\n      function mg(t2) {\n        return t2;\n      }\n      function xg(t2, n2) {\n        return (n2 -= t2 = +t2) ? function(e2) {\n          return (e2 - t2) / n2;\n        } : /* @__PURE__ */ function(t3) {\n          return function() {\n            return t3;\n          };\n        }(isNaN(n2) ? NaN : 0.5);\n      }\n      function wg(t2, n2, e2) {\n        var r2 = t2[0], i2 = t2[1], o2 = n2[0], a2 = n2[1];\n        return i2 < r2 ? (r2 = xg(i2, r2), o2 = e2(a2, o2)) : (r2 = xg(r2, i2), o2 = e2(o2, a2)), function(t3) {\n          return o2(r2(t3));\n        };\n      }\n      function Mg(t2, n2, e2) {\n        var r2 = Math.min(t2.length, n2.length) - 1, i2 = new Array(r2), o2 = new Array(r2), a2 = -1;\n        for (t2[r2] < t2[0] && (t2 = t2.slice().reverse(), n2 = n2.slice().reverse()); ++a2 < r2; )\n          i2[a2] = xg(t2[a2], t2[a2 + 1]), o2[a2] = e2(n2[a2], n2[a2 + 1]);\n        return function(n3) {\n          var e3 = s(t2, n3, 1, r2) - 1;\n          return o2[e3](i2[e3](n3));\n        };\n      }\n      function Tg(t2, n2) {\n        return n2.domain(t2.domain()).range(t2.range()).interpolate(t2.interpolate()).clamp(t2.clamp()).unknown(t2.unknown());\n      }\n      function Ag() {\n        var t2, n2, e2, r2, i2, o2, a2 = bg, u2 = bg, c2 = Gr, f2 = mg;\n        function s2() {\n          var t3 = Math.min(a2.length, u2.length);\n          return f2 !== mg && (f2 = function(t4, n3) {\n            var e3;\n            return t4 > n3 && (e3 = t4, t4 = n3, n3 = e3), function(e4) {\n              return Math.max(t4, Math.min(n3, e4));\n            };\n          }(a2[0], a2[t3 - 1])), r2 = t3 > 2 ? Mg : wg, i2 = o2 = null, l2;\n        }\n        function l2(n3) {\n          return null == n3 || isNaN(n3 = +n3) ? e2 : (i2 || (i2 = r2(a2.map(t2), u2, c2)))(t2(f2(n3)));\n        }\n        return l2.invert = function(e3) {\n          return f2(n2((o2 || (o2 = r2(u2, a2.map(t2), Yr)))(e3)));\n        }, l2.domain = function(t3) {\n          return arguments.length ? (a2 = Array.from(t3, _g), s2()) : a2.slice();\n        }, l2.range = function(t3) {\n          return arguments.length ? (u2 = Array.from(t3), s2()) : u2.slice();\n        }, l2.rangeRound = function(t3) {\n          return u2 = Array.from(t3), c2 = Vr, s2();\n        }, l2.clamp = function(t3) {\n          return arguments.length ? (f2 = !!t3 || mg, s2()) : f2 !== mg;\n        }, l2.interpolate = function(t3) {\n          return arguments.length ? (c2 = t3, s2()) : c2;\n        }, l2.unknown = function(t3) {\n          return arguments.length ? (e2 = t3, l2) : e2;\n        }, function(e3, r3) {\n          return t2 = e3, n2 = r3, s2();\n        };\n      }\n      function Sg() {\n        return Ag()(mg, mg);\n      }\n      function Eg(n2, e2, r2, i2) {\n        var o2, a2 = W(n2, e2, r2);\n        switch ((i2 = Jc(null == i2 ? \",f\" : i2)).type) {\n          case \"s\":\n            var u2 = Math.max(Math.abs(n2), Math.abs(e2));\n            return null != i2.precision || isNaN(o2 = lf(a2, u2)) || (i2.precision = o2), t.formatPrefix(i2, u2);\n          case \"\":\n          case \"e\":\n          case \"g\":\n          case \"p\":\n          case \"r\":\n            null != i2.precision || isNaN(o2 = hf(a2, Math.max(Math.abs(n2), Math.abs(e2)))) || (i2.precision = o2 - (\"e\" === i2.type));\n            break;\n          case \"f\":\n          case \"%\":\n            null != i2.precision || isNaN(o2 = sf(a2)) || (i2.precision = o2 - 2 * (\"%\" === i2.type));\n        }\n        return t.format(i2);\n      }\n      function Ng(t2) {\n        var n2 = t2.domain;\n        return t2.ticks = function(t3) {\n          var e2 = n2();\n          return G(e2[0], e2[e2.length - 1], null == t3 ? 10 : t3);\n        }, t2.tickFormat = function(t3, e2) {\n          var r2 = n2();\n          return Eg(r2[0], r2[r2.length - 1], null == t3 ? 10 : t3, e2);\n        }, t2.nice = function(e2) {\n          null == e2 && (e2 = 10);\n          var r2, i2, o2 = n2(), a2 = 0, u2 = o2.length - 1, c2 = o2[a2], f2 = o2[u2], s2 = 10;\n          for (f2 < c2 && (i2 = c2, c2 = f2, f2 = i2, i2 = a2, a2 = u2, u2 = i2); s2-- > 0; ) {\n            if ((i2 = V(c2, f2, e2)) === r2)\n              return o2[a2] = c2, o2[u2] = f2, n2(o2);\n            if (i2 > 0)\n              c2 = Math.floor(c2 / i2) * i2, f2 = Math.ceil(f2 / i2) * i2;\n            else {\n              if (!(i2 < 0))\n                break;\n              c2 = Math.ceil(c2 * i2) / i2, f2 = Math.floor(f2 * i2) / i2;\n            }\n            r2 = i2;\n          }\n          return t2;\n        }, t2;\n      }\n      function kg(t2, n2) {\n        var e2, r2 = 0, i2 = (t2 = t2.slice()).length - 1, o2 = t2[r2], a2 = t2[i2];\n        return a2 < o2 && (e2 = r2, r2 = i2, i2 = e2, e2 = o2, o2 = a2, a2 = e2), t2[r2] = n2.floor(o2), t2[i2] = n2.ceil(a2), t2;\n      }\n      function Cg(t2) {\n        return Math.log(t2);\n      }\n      function Pg(t2) {\n        return Math.exp(t2);\n      }\n      function zg(t2) {\n        return -Math.log(-t2);\n      }\n      function $g(t2) {\n        return -Math.exp(-t2);\n      }\n      function Dg(t2) {\n        return isFinite(t2) ? +(\"1e\" + t2) : t2 < 0 ? 0 : t2;\n      }\n      function Rg(t2) {\n        return (n2, e2) => -t2(-n2, e2);\n      }\n      function Fg(n2) {\n        const e2 = n2(Cg, Pg), r2 = e2.domain;\n        let i2, o2, a2 = 10;\n        function u2() {\n          return i2 = function(t2) {\n            return t2 === Math.E ? Math.log : 10 === t2 && Math.log10 || 2 === t2 && Math.log2 || (t2 = Math.log(t2), (n3) => Math.log(n3) / t2);\n          }(a2), o2 = /* @__PURE__ */ function(t2) {\n            return 10 === t2 ? Dg : t2 === Math.E ? Math.exp : (n3) => Math.pow(t2, n3);\n          }(a2), r2()[0] < 0 ? (i2 = Rg(i2), o2 = Rg(o2), n2(zg, $g)) : n2(Cg, Pg), e2;\n        }\n        return e2.base = function(t2) {\n          return arguments.length ? (a2 = +t2, u2()) : a2;\n        }, e2.domain = function(t2) {\n          return arguments.length ? (r2(t2), u2()) : r2();\n        }, e2.ticks = (t2) => {\n          const n3 = r2();\n          let e3 = n3[0], u3 = n3[n3.length - 1];\n          const c2 = u3 < e3;\n          c2 && ([e3, u3] = [u3, e3]);\n          let f2, s2, l2 = i2(e3), h2 = i2(u3);\n          const d2 = null == t2 ? 10 : +t2;\n          let p2 = [];\n          if (!(a2 % 1) && h2 - l2 < d2) {\n            if (l2 = Math.floor(l2), h2 = Math.ceil(h2), e3 > 0) {\n              for (; l2 <= h2; ++l2)\n                for (f2 = 1; f2 < a2; ++f2)\n                  if (s2 = l2 < 0 ? f2 / o2(-l2) : f2 * o2(l2), !(s2 < e3)) {\n                    if (s2 > u3)\n                      break;\n                    p2.push(s2);\n                  }\n            } else\n              for (; l2 <= h2; ++l2)\n                for (f2 = a2 - 1; f2 >= 1; --f2)\n                  if (s2 = l2 > 0 ? f2 / o2(-l2) : f2 * o2(l2), !(s2 < e3)) {\n                    if (s2 > u3)\n                      break;\n                    p2.push(s2);\n                  }\n            2 * p2.length < d2 && (p2 = G(e3, u3, d2));\n          } else\n            p2 = G(l2, h2, Math.min(h2 - l2, d2)).map(o2);\n          return c2 ? p2.reverse() : p2;\n        }, e2.tickFormat = (n3, r3) => {\n          if (null == n3 && (n3 = 10), null == r3 && (r3 = 10 === a2 ? \"s\" : \",\"), \"function\" != typeof r3 && (a2 % 1 || null != (r3 = Jc(r3)).precision || (r3.trim = true), r3 = t.format(r3)), n3 === 1 / 0)\n            return r3;\n          const u3 = Math.max(1, a2 * n3 / e2.ticks().length);\n          return (t2) => {\n            let n4 = t2 / o2(Math.round(i2(t2)));\n            return n4 * a2 < a2 - 0.5 && (n4 *= a2), n4 <= u3 ? r3(t2) : \"\";\n          };\n        }, e2.nice = () => r2(kg(r2(), { floor: (t2) => o2(Math.floor(i2(t2))), ceil: (t2) => o2(Math.ceil(i2(t2))) })), e2;\n      }\n      function qg(t2) {\n        return function(n2) {\n          return Math.sign(n2) * Math.log1p(Math.abs(n2 / t2));\n        };\n      }\n      function Ug(t2) {\n        return function(n2) {\n          return Math.sign(n2) * Math.expm1(Math.abs(n2)) * t2;\n        };\n      }\n      function Ig(t2) {\n        var n2 = 1, e2 = t2(qg(n2), Ug(n2));\n        return e2.constant = function(e3) {\n          return arguments.length ? t2(qg(n2 = +e3), Ug(n2)) : n2;\n        }, Ng(e2);\n      }\n      function Og(t2) {\n        return function(n2) {\n          return n2 < 0 ? -Math.pow(-n2, t2) : Math.pow(n2, t2);\n        };\n      }\n      function Bg(t2) {\n        return t2 < 0 ? -Math.sqrt(-t2) : Math.sqrt(t2);\n      }\n      function Yg(t2) {\n        return t2 < 0 ? -t2 * t2 : t2 * t2;\n      }\n      function Lg(t2) {\n        var n2 = t2(mg, mg), e2 = 1;\n        return n2.exponent = function(n3) {\n          return arguments.length ? 1 === (e2 = +n3) ? t2(mg, mg) : 0.5 === e2 ? t2(Bg, Yg) : t2(Og(e2), Og(1 / e2)) : e2;\n        }, Ng(n2);\n      }\n      function jg() {\n        var t2 = Lg(Ag());\n        return t2.copy = function() {\n          return Tg(t2, jg()).exponent(t2.exponent());\n        }, hg.apply(t2, arguments), t2;\n      }\n      function Hg(t2) {\n        return Math.sign(t2) * t2 * t2;\n      }\n      const Xg = /* @__PURE__ */ new Date(), Gg = /* @__PURE__ */ new Date();\n      function Vg(t2, n2, e2, r2) {\n        function i2(n3) {\n          return t2(n3 = 0 === arguments.length ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+n3)), n3;\n        }\n        return i2.floor = (n3) => (t2(n3 = /* @__PURE__ */ new Date(+n3)), n3), i2.ceil = (e3) => (t2(e3 = new Date(e3 - 1)), n2(e3, 1), t2(e3), e3), i2.round = (t3) => {\n          const n3 = i2(t3), e3 = i2.ceil(t3);\n          return t3 - n3 < e3 - t3 ? n3 : e3;\n        }, i2.offset = (t3, e3) => (n2(t3 = /* @__PURE__ */ new Date(+t3), null == e3 ? 1 : Math.floor(e3)), t3), i2.range = (e3, r3, o2) => {\n          const a2 = [];\n          if (e3 = i2.ceil(e3), o2 = null == o2 ? 1 : Math.floor(o2), !(e3 < r3 && o2 > 0))\n            return a2;\n          let u2;\n          do {\n            a2.push(u2 = /* @__PURE__ */ new Date(+e3)), n2(e3, o2), t2(e3);\n          } while (u2 < e3 && e3 < r3);\n          return a2;\n        }, i2.filter = (e3) => Vg((n3) => {\n          if (n3 >= n3)\n            for (; t2(n3), !e3(n3); )\n              n3.setTime(n3 - 1);\n        }, (t3, r3) => {\n          if (t3 >= t3)\n            if (r3 < 0)\n              for (; ++r3 <= 0; )\n                for (; n2(t3, -1), !e3(t3); )\n                  ;\n            else\n              for (; --r3 >= 0; )\n                for (; n2(t3, 1), !e3(t3); )\n                  ;\n        }), e2 && (i2.count = (n3, r3) => (Xg.setTime(+n3), Gg.setTime(+r3), t2(Xg), t2(Gg), Math.floor(e2(Xg, Gg))), i2.every = (t3) => (t3 = Math.floor(t3), isFinite(t3) && t3 > 0 ? t3 > 1 ? i2.filter(r2 ? (n3) => r2(n3) % t3 == 0 : (n3) => i2.count(0, n3) % t3 == 0) : i2 : null)), i2;\n      }\n      const Wg = Vg(() => {\n      }, (t2, n2) => {\n        t2.setTime(+t2 + n2);\n      }, (t2, n2) => n2 - t2);\n      Wg.every = (t2) => (t2 = Math.floor(t2), isFinite(t2) && t2 > 0 ? t2 > 1 ? Vg((n2) => {\n        n2.setTime(Math.floor(n2 / t2) * t2);\n      }, (n2, e2) => {\n        n2.setTime(+n2 + e2 * t2);\n      }, (n2, e2) => (e2 - n2) / t2) : Wg : null);\n      const Zg = Wg.range, Kg = 1e3, Qg = 6e4, Jg = 36e5, ty = 864e5, ny = 6048e5, ey = 2592e6, ry = 31536e6, iy = Vg((t2) => {\n        t2.setTime(t2 - t2.getMilliseconds());\n      }, (t2, n2) => {\n        t2.setTime(+t2 + n2 * Kg);\n      }, (t2, n2) => (n2 - t2) / Kg, (t2) => t2.getUTCSeconds()), oy = iy.range, ay = Vg((t2) => {\n        t2.setTime(t2 - t2.getMilliseconds() - t2.getSeconds() * Kg);\n      }, (t2, n2) => {\n        t2.setTime(+t2 + n2 * Qg);\n      }, (t2, n2) => (n2 - t2) / Qg, (t2) => t2.getMinutes()), uy = ay.range, cy = Vg((t2) => {\n        t2.setUTCSeconds(0, 0);\n      }, (t2, n2) => {\n        t2.setTime(+t2 + n2 * Qg);\n      }, (t2, n2) => (n2 - t2) / Qg, (t2) => t2.getUTCMinutes()), fy = cy.range, sy = Vg((t2) => {\n        t2.setTime(t2 - t2.getMilliseconds() - t2.getSeconds() * Kg - t2.getMinutes() * Qg);\n      }, (t2, n2) => {\n        t2.setTime(+t2 + n2 * Jg);\n      }, (t2, n2) => (n2 - t2) / Jg, (t2) => t2.getHours()), ly = sy.range, hy = Vg((t2) => {\n        t2.setUTCMinutes(0, 0, 0);\n      }, (t2, n2) => {\n        t2.setTime(+t2 + n2 * Jg);\n      }, (t2, n2) => (n2 - t2) / Jg, (t2) => t2.getUTCHours()), dy = hy.range, py = Vg((t2) => t2.setHours(0, 0, 0, 0), (t2, n2) => t2.setDate(t2.getDate() + n2), (t2, n2) => (n2 - t2 - (n2.getTimezoneOffset() - t2.getTimezoneOffset()) * Qg) / ty, (t2) => t2.getDate() - 1), gy = py.range, yy = Vg((t2) => {\n        t2.setUTCHours(0, 0, 0, 0);\n      }, (t2, n2) => {\n        t2.setUTCDate(t2.getUTCDate() + n2);\n      }, (t2, n2) => (n2 - t2) / ty, (t2) => t2.getUTCDate() - 1), vy = yy.range, _y = Vg((t2) => {\n        t2.setUTCHours(0, 0, 0, 0);\n      }, (t2, n2) => {\n        t2.setUTCDate(t2.getUTCDate() + n2);\n      }, (t2, n2) => (n2 - t2) / ty, (t2) => Math.floor(t2 / ty)), by = _y.range;\n      function my(t2) {\n        return Vg((n2) => {\n          n2.setDate(n2.getDate() - (n2.getDay() + 7 - t2) % 7), n2.setHours(0, 0, 0, 0);\n        }, (t3, n2) => {\n          t3.setDate(t3.getDate() + 7 * n2);\n        }, (t3, n2) => (n2 - t3 - (n2.getTimezoneOffset() - t3.getTimezoneOffset()) * Qg) / ny);\n      }\n      const xy = my(0), wy = my(1), My = my(2), Ty = my(3), Ay = my(4), Sy = my(5), Ey = my(6), Ny = xy.range, ky = wy.range, Cy = My.range, Py = Ty.range, zy = Ay.range, $y = Sy.range, Dy = Ey.range;\n      function Ry(t2) {\n        return Vg((n2) => {\n          n2.setUTCDate(n2.getUTCDate() - (n2.getUTCDay() + 7 - t2) % 7), n2.setUTCHours(0, 0, 0, 0);\n        }, (t3, n2) => {\n          t3.setUTCDate(t3.getUTCDate() + 7 * n2);\n        }, (t3, n2) => (n2 - t3) / ny);\n      }\n      const Fy = Ry(0), qy = Ry(1), Uy = Ry(2), Iy = Ry(3), Oy = Ry(4), By = Ry(5), Yy = Ry(6), Ly = Fy.range, jy = qy.range, Hy = Uy.range, Xy = Iy.range, Gy = Oy.range, Vy = By.range, Wy = Yy.range, Zy = Vg((t2) => {\n        t2.setDate(1), t2.setHours(0, 0, 0, 0);\n      }, (t2, n2) => {\n        t2.setMonth(t2.getMonth() + n2);\n      }, (t2, n2) => n2.getMonth() - t2.getMonth() + 12 * (n2.getFullYear() - t2.getFullYear()), (t2) => t2.getMonth()), Ky = Zy.range, Qy = Vg((t2) => {\n        t2.setUTCDate(1), t2.setUTCHours(0, 0, 0, 0);\n      }, (t2, n2) => {\n        t2.setUTCMonth(t2.getUTCMonth() + n2);\n      }, (t2, n2) => n2.getUTCMonth() - t2.getUTCMonth() + 12 * (n2.getUTCFullYear() - t2.getUTCFullYear()), (t2) => t2.getUTCMonth()), Jy = Qy.range, tv = Vg((t2) => {\n        t2.setMonth(0, 1), t2.setHours(0, 0, 0, 0);\n      }, (t2, n2) => {\n        t2.setFullYear(t2.getFullYear() + n2);\n      }, (t2, n2) => n2.getFullYear() - t2.getFullYear(), (t2) => t2.getFullYear());\n      tv.every = (t2) => isFinite(t2 = Math.floor(t2)) && t2 > 0 ? Vg((n2) => {\n        n2.setFullYear(Math.floor(n2.getFullYear() / t2) * t2), n2.setMonth(0, 1), n2.setHours(0, 0, 0, 0);\n      }, (n2, e2) => {\n        n2.setFullYear(n2.getFullYear() + e2 * t2);\n      }) : null;\n      const nv = tv.range, ev = Vg((t2) => {\n        t2.setUTCMonth(0, 1), t2.setUTCHours(0, 0, 0, 0);\n      }, (t2, n2) => {\n        t2.setUTCFullYear(t2.getUTCFullYear() + n2);\n      }, (t2, n2) => n2.getUTCFullYear() - t2.getUTCFullYear(), (t2) => t2.getUTCFullYear());\n      ev.every = (t2) => isFinite(t2 = Math.floor(t2)) && t2 > 0 ? Vg((n2) => {\n        n2.setUTCFullYear(Math.floor(n2.getUTCFullYear() / t2) * t2), n2.setUTCMonth(0, 1), n2.setUTCHours(0, 0, 0, 0);\n      }, (n2, e2) => {\n        n2.setUTCFullYear(n2.getUTCFullYear() + e2 * t2);\n      }) : null;\n      const rv = ev.range;\n      function iv(t2, n2, e2, i2, o2, a2) {\n        const u2 = [[iy, 1, Kg], [iy, 5, 5e3], [iy, 15, 15e3], [iy, 30, 3e4], [a2, 1, Qg], [a2, 5, 3e5], [a2, 15, 9e5], [a2, 30, 18e5], [o2, 1, Jg], [o2, 3, 108e5], [o2, 6, 216e5], [o2, 12, 432e5], [i2, 1, ty], [i2, 2, 1728e5], [e2, 1, ny], [n2, 1, ey], [n2, 3, 7776e6], [t2, 1, ry]];\n        function c2(n3, e3, i3) {\n          const o3 = Math.abs(e3 - n3) / i3, a3 = r(([, , t3]) => t3).right(u2, o3);\n          if (a3 === u2.length)\n            return t2.every(W(n3 / ry, e3 / ry, i3));\n          if (0 === a3)\n            return Wg.every(Math.max(W(n3, e3, i3), 1));\n          const [c3, f2] = u2[o3 / u2[a3 - 1][2] < u2[a3][2] / o3 ? a3 - 1 : a3];\n          return c3.every(f2);\n        }\n        return [function(t3, n3, e3) {\n          const r2 = n3 < t3;\n          r2 && ([t3, n3] = [n3, t3]);\n          const i3 = e3 && \"function\" == typeof e3.range ? e3 : c2(t3, n3, e3), o3 = i3 ? i3.range(t3, +n3 + 1) : [];\n          return r2 ? o3.reverse() : o3;\n        }, c2];\n      }\n      const [ov, av] = iv(ev, Qy, Fy, _y, hy, cy), [uv, cv] = iv(tv, Zy, xy, py, sy, ay);\n      function fv(t2) {\n        if (0 <= t2.y && t2.y < 100) {\n          var n2 = new Date(-1, t2.m, t2.d, t2.H, t2.M, t2.S, t2.L);\n          return n2.setFullYear(t2.y), n2;\n        }\n        return new Date(t2.y, t2.m, t2.d, t2.H, t2.M, t2.S, t2.L);\n      }\n      function sv(t2) {\n        if (0 <= t2.y && t2.y < 100) {\n          var n2 = new Date(Date.UTC(-1, t2.m, t2.d, t2.H, t2.M, t2.S, t2.L));\n          return n2.setUTCFullYear(t2.y), n2;\n        }\n        return new Date(Date.UTC(t2.y, t2.m, t2.d, t2.H, t2.M, t2.S, t2.L));\n      }\n      function lv(t2, n2, e2) {\n        return { y: t2, m: n2, d: e2, H: 0, M: 0, S: 0, L: 0 };\n      }\n      function hv(t2) {\n        var n2 = t2.dateTime, e2 = t2.date, r2 = t2.time, i2 = t2.periods, o2 = t2.days, a2 = t2.shortDays, u2 = t2.months, c2 = t2.shortMonths, f2 = mv(i2), s2 = xv(i2), l2 = mv(o2), h2 = xv(o2), d2 = mv(a2), p2 = xv(a2), g2 = mv(u2), y2 = xv(u2), v2 = mv(c2), _2 = xv(c2), b2 = { a: function(t3) {\n          return a2[t3.getDay()];\n        }, A: function(t3) {\n          return o2[t3.getDay()];\n        }, b: function(t3) {\n          return c2[t3.getMonth()];\n        }, B: function(t3) {\n          return u2[t3.getMonth()];\n        }, c: null, d: Yv, e: Yv, f: Gv, g: i_, G: a_, H: Lv, I: jv, j: Hv, L: Xv, m: Vv, M: Wv, p: function(t3) {\n          return i2[+(t3.getHours() >= 12)];\n        }, q: function(t3) {\n          return 1 + ~~(t3.getMonth() / 3);\n        }, Q: k_, s: C_, S: Zv, u: Kv, U: Qv, V: t_, w: n_, W: e_, x: null, X: null, y: r_, Y: o_, Z: u_, \"%\": N_ }, m2 = { a: function(t3) {\n          return a2[t3.getUTCDay()];\n        }, A: function(t3) {\n          return o2[t3.getUTCDay()];\n        }, b: function(t3) {\n          return c2[t3.getUTCMonth()];\n        }, B: function(t3) {\n          return u2[t3.getUTCMonth()];\n        }, c: null, d: c_, e: c_, f: d_, g: T_, G: S_, H: f_, I: s_, j: l_, L: h_, m: p_, M: g_, p: function(t3) {\n          return i2[+(t3.getUTCHours() >= 12)];\n        }, q: function(t3) {\n          return 1 + ~~(t3.getUTCMonth() / 3);\n        }, Q: k_, s: C_, S: y_, u: v_, U: __, V: m_, w: x_, W: w_, x: null, X: null, y: M_, Y: A_, Z: E_, \"%\": N_ }, x2 = { a: function(t3, n3, e3) {\n          var r3 = d2.exec(n3.slice(e3));\n          return r3 ? (t3.w = p2.get(r3[0].toLowerCase()), e3 + r3[0].length) : -1;\n        }, A: function(t3, n3, e3) {\n          var r3 = l2.exec(n3.slice(e3));\n          return r3 ? (t3.w = h2.get(r3[0].toLowerCase()), e3 + r3[0].length) : -1;\n        }, b: function(t3, n3, e3) {\n          var r3 = v2.exec(n3.slice(e3));\n          return r3 ? (t3.m = _2.get(r3[0].toLowerCase()), e3 + r3[0].length) : -1;\n        }, B: function(t3, n3, e3) {\n          var r3 = g2.exec(n3.slice(e3));\n          return r3 ? (t3.m = y2.get(r3[0].toLowerCase()), e3 + r3[0].length) : -1;\n        }, c: function(t3, e3, r3) {\n          return T2(t3, n2, e3, r3);\n        }, d: zv, e: zv, f: Uv, g: Nv, G: Ev, H: Dv, I: Dv, j: $v, L: qv, m: Pv, M: Rv, p: function(t3, n3, e3) {\n          var r3 = f2.exec(n3.slice(e3));\n          return r3 ? (t3.p = s2.get(r3[0].toLowerCase()), e3 + r3[0].length) : -1;\n        }, q: Cv, Q: Ov, s: Bv, S: Fv, u: Mv, U: Tv, V: Av, w: wv, W: Sv, x: function(t3, n3, r3) {\n          return T2(t3, e2, n3, r3);\n        }, X: function(t3, n3, e3) {\n          return T2(t3, r2, n3, e3);\n        }, y: Nv, Y: Ev, Z: kv, \"%\": Iv };\n        function w2(t3, n3) {\n          return function(e3) {\n            var r3, i3, o3, a3 = [], u3 = -1, c3 = 0, f3 = t3.length;\n            for (e3 instanceof Date || (e3 = /* @__PURE__ */ new Date(+e3)); ++u3 < f3; )\n              37 === t3.charCodeAt(u3) && (a3.push(t3.slice(c3, u3)), null != (i3 = pv[r3 = t3.charAt(++u3)]) ? r3 = t3.charAt(++u3) : i3 = \"e\" === r3 ? \" \" : \"0\", (o3 = n3[r3]) && (r3 = o3(e3, i3)), a3.push(r3), c3 = u3 + 1);\n            return a3.push(t3.slice(c3, u3)), a3.join(\"\");\n          };\n        }\n        function M2(t3, n3) {\n          return function(e3) {\n            var r3, i3, o3 = lv(1900, void 0, 1);\n            if (T2(o3, t3, e3 += \"\", 0) != e3.length)\n              return null;\n            if (\"Q\" in o3)\n              return new Date(o3.Q);\n            if (\"s\" in o3)\n              return new Date(1e3 * o3.s + (\"L\" in o3 ? o3.L : 0));\n            if (n3 && !(\"Z\" in o3) && (o3.Z = 0), \"p\" in o3 && (o3.H = o3.H % 12 + 12 * o3.p), void 0 === o3.m && (o3.m = \"q\" in o3 ? o3.q : 0), \"V\" in o3) {\n              if (o3.V < 1 || o3.V > 53)\n                return null;\n              \"w\" in o3 || (o3.w = 1), \"Z\" in o3 ? (i3 = (r3 = sv(lv(o3.y, 0, 1))).getUTCDay(), r3 = i3 > 4 || 0 === i3 ? qy.ceil(r3) : qy(r3), r3 = yy.offset(r3, 7 * (o3.V - 1)), o3.y = r3.getUTCFullYear(), o3.m = r3.getUTCMonth(), o3.d = r3.getUTCDate() + (o3.w + 6) % 7) : (i3 = (r3 = fv(lv(o3.y, 0, 1))).getDay(), r3 = i3 > 4 || 0 === i3 ? wy.ceil(r3) : wy(r3), r3 = py.offset(r3, 7 * (o3.V - 1)), o3.y = r3.getFullYear(), o3.m = r3.getMonth(), o3.d = r3.getDate() + (o3.w + 6) % 7);\n            } else\n              (\"W\" in o3 || \"U\" in o3) && (\"w\" in o3 || (o3.w = \"u\" in o3 ? o3.u % 7 : \"W\" in o3 ? 1 : 0), i3 = \"Z\" in o3 ? sv(lv(o3.y, 0, 1)).getUTCDay() : fv(lv(o3.y, 0, 1)).getDay(), o3.m = 0, o3.d = \"W\" in o3 ? (o3.w + 6) % 7 + 7 * o3.W - (i3 + 5) % 7 : o3.w + 7 * o3.U - (i3 + 6) % 7);\n            return \"Z\" in o3 ? (o3.H += o3.Z / 100 | 0, o3.M += o3.Z % 100, sv(o3)) : fv(o3);\n          };\n        }\n        function T2(t3, n3, e3, r3) {\n          for (var i3, o3, a3 = 0, u3 = n3.length, c3 = e3.length; a3 < u3; ) {\n            if (r3 >= c3)\n              return -1;\n            if (37 === (i3 = n3.charCodeAt(a3++))) {\n              if (i3 = n3.charAt(a3++), !(o3 = x2[i3 in pv ? n3.charAt(a3++) : i3]) || (r3 = o3(t3, e3, r3)) < 0)\n                return -1;\n            } else if (i3 != e3.charCodeAt(r3++))\n              return -1;\n          }\n          return r3;\n        }\n        return b2.x = w2(e2, b2), b2.X = w2(r2, b2), b2.c = w2(n2, b2), m2.x = w2(e2, m2), m2.X = w2(r2, m2), m2.c = w2(n2, m2), { format: function(t3) {\n          var n3 = w2(t3 += \"\", b2);\n          return n3.toString = function() {\n            return t3;\n          }, n3;\n        }, parse: function(t3) {\n          var n3 = M2(t3 += \"\", false);\n          return n3.toString = function() {\n            return t3;\n          }, n3;\n        }, utcFormat: function(t3) {\n          var n3 = w2(t3 += \"\", m2);\n          return n3.toString = function() {\n            return t3;\n          }, n3;\n        }, utcParse: function(t3) {\n          var n3 = M2(t3 += \"\", true);\n          return n3.toString = function() {\n            return t3;\n          }, n3;\n        } };\n      }\n      var dv, pv = { \"-\": \"\", _: \" \", 0: \"0\" }, gv = /^\\s*\\d+/, yv = /^%/, vv = /[\\\\^$*+?|[\\]().{}]/g;\n      function _v(t2, n2, e2) {\n        var r2 = t2 < 0 ? \"-\" : \"\", i2 = (r2 ? -t2 : t2) + \"\", o2 = i2.length;\n        return r2 + (o2 < e2 ? new Array(e2 - o2 + 1).join(n2) + i2 : i2);\n      }\n      function bv(t2) {\n        return t2.replace(vv, \"\\\\$&\");\n      }\n      function mv(t2) {\n        return new RegExp(\"^(?:\" + t2.map(bv).join(\"|\") + \")\", \"i\");\n      }\n      function xv(t2) {\n        return new Map(t2.map((t3, n2) => [t3.toLowerCase(), n2]));\n      }\n      function wv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 1));\n        return r2 ? (t2.w = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Mv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 1));\n        return r2 ? (t2.u = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Tv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.U = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Av(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.V = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Sv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.W = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Ev(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 4));\n        return r2 ? (t2.y = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Nv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.y = +r2[0] + (+r2[0] > 68 ? 1900 : 2e3), e2 + r2[0].length) : -1;\n      }\n      function kv(t2, n2, e2) {\n        var r2 = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(n2.slice(e2, e2 + 6));\n        return r2 ? (t2.Z = r2[1] ? 0 : -(r2[2] + (r2[3] || \"00\")), e2 + r2[0].length) : -1;\n      }\n      function Cv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 1));\n        return r2 ? (t2.q = 3 * r2[0] - 3, e2 + r2[0].length) : -1;\n      }\n      function Pv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.m = r2[0] - 1, e2 + r2[0].length) : -1;\n      }\n      function zv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.d = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function $v(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 3));\n        return r2 ? (t2.m = 0, t2.d = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Dv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.H = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Rv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.M = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Fv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 2));\n        return r2 ? (t2.S = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function qv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 3));\n        return r2 ? (t2.L = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Uv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2, e2 + 6));\n        return r2 ? (t2.L = Math.floor(r2[0] / 1e3), e2 + r2[0].length) : -1;\n      }\n      function Iv(t2, n2, e2) {\n        var r2 = yv.exec(n2.slice(e2, e2 + 1));\n        return r2 ? e2 + r2[0].length : -1;\n      }\n      function Ov(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2));\n        return r2 ? (t2.Q = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Bv(t2, n2, e2) {\n        var r2 = gv.exec(n2.slice(e2));\n        return r2 ? (t2.s = +r2[0], e2 + r2[0].length) : -1;\n      }\n      function Yv(t2, n2) {\n        return _v(t2.getDate(), n2, 2);\n      }\n      function Lv(t2, n2) {\n        return _v(t2.getHours(), n2, 2);\n      }\n      function jv(t2, n2) {\n        return _v(t2.getHours() % 12 || 12, n2, 2);\n      }\n      function Hv(t2, n2) {\n        return _v(1 + py.count(tv(t2), t2), n2, 3);\n      }\n      function Xv(t2, n2) {\n        return _v(t2.getMilliseconds(), n2, 3);\n      }\n      function Gv(t2, n2) {\n        return Xv(t2, n2) + \"000\";\n      }\n      function Vv(t2, n2) {\n        return _v(t2.getMonth() + 1, n2, 2);\n      }\n      function Wv(t2, n2) {\n        return _v(t2.getMinutes(), n2, 2);\n      }\n      function Zv(t2, n2) {\n        return _v(t2.getSeconds(), n2, 2);\n      }\n      function Kv(t2) {\n        var n2 = t2.getDay();\n        return 0 === n2 ? 7 : n2;\n      }\n      function Qv(t2, n2) {\n        return _v(xy.count(tv(t2) - 1, t2), n2, 2);\n      }\n      function Jv(t2) {\n        var n2 = t2.getDay();\n        return n2 >= 4 || 0 === n2 ? Ay(t2) : Ay.ceil(t2);\n      }\n      function t_(t2, n2) {\n        return t2 = Jv(t2), _v(Ay.count(tv(t2), t2) + (4 === tv(t2).getDay()), n2, 2);\n      }\n      function n_(t2) {\n        return t2.getDay();\n      }\n      function e_(t2, n2) {\n        return _v(wy.count(tv(t2) - 1, t2), n2, 2);\n      }\n      function r_(t2, n2) {\n        return _v(t2.getFullYear() % 100, n2, 2);\n      }\n      function i_(t2, n2) {\n        return _v((t2 = Jv(t2)).getFullYear() % 100, n2, 2);\n      }\n      function o_(t2, n2) {\n        return _v(t2.getFullYear() % 1e4, n2, 4);\n      }\n      function a_(t2, n2) {\n        var e2 = t2.getDay();\n        return _v((t2 = e2 >= 4 || 0 === e2 ? Ay(t2) : Ay.ceil(t2)).getFullYear() % 1e4, n2, 4);\n      }\n      function u_(t2) {\n        var n2 = t2.getTimezoneOffset();\n        return (n2 > 0 ? \"-\" : (n2 *= -1, \"+\")) + _v(n2 / 60 | 0, \"0\", 2) + _v(n2 % 60, \"0\", 2);\n      }\n      function c_(t2, n2) {\n        return _v(t2.getUTCDate(), n2, 2);\n      }\n      function f_(t2, n2) {\n        return _v(t2.getUTCHours(), n2, 2);\n      }\n      function s_(t2, n2) {\n        return _v(t2.getUTCHours() % 12 || 12, n2, 2);\n      }\n      function l_(t2, n2) {\n        return _v(1 + yy.count(ev(t2), t2), n2, 3);\n      }\n      function h_(t2, n2) {\n        return _v(t2.getUTCMilliseconds(), n2, 3);\n      }\n      function d_(t2, n2) {\n        return h_(t2, n2) + \"000\";\n      }\n      function p_(t2, n2) {\n        return _v(t2.getUTCMonth() + 1, n2, 2);\n      }\n      function g_(t2, n2) {\n        return _v(t2.getUTCMinutes(), n2, 2);\n      }\n      function y_(t2, n2) {\n        return _v(t2.getUTCSeconds(), n2, 2);\n      }\n      function v_(t2) {\n        var n2 = t2.getUTCDay();\n        return 0 === n2 ? 7 : n2;\n      }\n      function __(t2, n2) {\n        return _v(Fy.count(ev(t2) - 1, t2), n2, 2);\n      }\n      function b_(t2) {\n        var n2 = t2.getUTCDay();\n        return n2 >= 4 || 0 === n2 ? Oy(t2) : Oy.ceil(t2);\n      }\n      function m_(t2, n2) {\n        return t2 = b_(t2), _v(Oy.count(ev(t2), t2) + (4 === ev(t2).getUTCDay()), n2, 2);\n      }\n      function x_(t2) {\n        return t2.getUTCDay();\n      }\n      function w_(t2, n2) {\n        return _v(qy.count(ev(t2) - 1, t2), n2, 2);\n      }\n      function M_(t2, n2) {\n        return _v(t2.getUTCFullYear() % 100, n2, 2);\n      }\n      function T_(t2, n2) {\n        return _v((t2 = b_(t2)).getUTCFullYear() % 100, n2, 2);\n      }\n      function A_(t2, n2) {\n        return _v(t2.getUTCFullYear() % 1e4, n2, 4);\n      }\n      function S_(t2, n2) {\n        var e2 = t2.getUTCDay();\n        return _v((t2 = e2 >= 4 || 0 === e2 ? Oy(t2) : Oy.ceil(t2)).getUTCFullYear() % 1e4, n2, 4);\n      }\n      function E_() {\n        return \"+0000\";\n      }\n      function N_() {\n        return \"%\";\n      }\n      function k_(t2) {\n        return +t2;\n      }\n      function C_(t2) {\n        return Math.floor(+t2 / 1e3);\n      }\n      function P_(n2) {\n        return dv = hv(n2), t.timeFormat = dv.format, t.timeParse = dv.parse, t.utcFormat = dv.utcFormat, t.utcParse = dv.utcParse, dv;\n      }\n      t.timeFormat = void 0, t.timeParse = void 0, t.utcFormat = void 0, t.utcParse = void 0, P_({ dateTime: \"%x, %X\", date: \"%-m/%-d/%Y\", time: \"%-I:%M:%S %p\", periods: [\"AM\", \"PM\"], days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"], shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"] });\n      var z_ = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n      var $_ = Date.prototype.toISOString ? function(t2) {\n        return t2.toISOString();\n      } : t.utcFormat(z_), D_ = $_;\n      var R_ = +/* @__PURE__ */ new Date(\"2000-01-01T00:00:00.000Z\") ? function(t2) {\n        var n2 = new Date(t2);\n        return isNaN(n2) ? null : n2;\n      } : t.utcParse(z_), F_ = R_;\n      function q_(t2) {\n        return new Date(t2);\n      }\n      function U_(t2) {\n        return t2 instanceof Date ? +t2 : +/* @__PURE__ */ new Date(+t2);\n      }\n      function I_(t2, n2, e2, r2, i2, o2, a2, u2, c2, f2) {\n        var s2 = Sg(), l2 = s2.invert, h2 = s2.domain, d2 = f2(\".%L\"), p2 = f2(\":%S\"), g2 = f2(\"%I:%M\"), y2 = f2(\"%I %p\"), v2 = f2(\"%a %d\"), _2 = f2(\"%b %d\"), b2 = f2(\"%B\"), m2 = f2(\"%Y\");\n        function x2(t3) {\n          return (c2(t3) < t3 ? d2 : u2(t3) < t3 ? p2 : a2(t3) < t3 ? g2 : o2(t3) < t3 ? y2 : r2(t3) < t3 ? i2(t3) < t3 ? v2 : _2 : e2(t3) < t3 ? b2 : m2)(t3);\n        }\n        return s2.invert = function(t3) {\n          return new Date(l2(t3));\n        }, s2.domain = function(t3) {\n          return arguments.length ? h2(Array.from(t3, U_)) : h2().map(q_);\n        }, s2.ticks = function(n3) {\n          var e3 = h2();\n          return t2(e3[0], e3[e3.length - 1], null == n3 ? 10 : n3);\n        }, s2.tickFormat = function(t3, n3) {\n          return null == n3 ? x2 : f2(n3);\n        }, s2.nice = function(t3) {\n          var e3 = h2();\n          return t3 && \"function\" == typeof t3.range || (t3 = n2(e3[0], e3[e3.length - 1], null == t3 ? 10 : t3)), t3 ? h2(kg(e3, t3)) : s2;\n        }, s2.copy = function() {\n          return Tg(s2, I_(t2, n2, e2, r2, i2, o2, a2, u2, c2, f2));\n        }, s2;\n      }\n      function O_() {\n        var t2, n2, e2, r2, i2, o2 = 0, a2 = 1, u2 = mg, c2 = false;\n        function f2(n3) {\n          return null == n3 || isNaN(n3 = +n3) ? i2 : u2(0 === e2 ? 0.5 : (n3 = (r2(n3) - t2) * e2, c2 ? Math.max(0, Math.min(1, n3)) : n3));\n        }\n        function s2(t3) {\n          return function(n3) {\n            var e3, r3;\n            return arguments.length ? ([e3, r3] = n3, u2 = t3(e3, r3), f2) : [u2(0), u2(1)];\n          };\n        }\n        return f2.domain = function(i3) {\n          return arguments.length ? ([o2, a2] = i3, t2 = r2(o2 = +o2), n2 = r2(a2 = +a2), e2 = t2 === n2 ? 0 : 1 / (n2 - t2), f2) : [o2, a2];\n        }, f2.clamp = function(t3) {\n          return arguments.length ? (c2 = !!t3, f2) : c2;\n        }, f2.interpolator = function(t3) {\n          return arguments.length ? (u2 = t3, f2) : u2;\n        }, f2.range = s2(Gr), f2.rangeRound = s2(Vr), f2.unknown = function(t3) {\n          return arguments.length ? (i2 = t3, f2) : i2;\n        }, function(i3) {\n          return r2 = i3, t2 = i3(o2), n2 = i3(a2), e2 = t2 === n2 ? 0 : 1 / (n2 - t2), f2;\n        };\n      }\n      function B_(t2, n2) {\n        return n2.domain(t2.domain()).interpolator(t2.interpolator()).clamp(t2.clamp()).unknown(t2.unknown());\n      }\n      function Y_() {\n        var t2 = Lg(O_());\n        return t2.copy = function() {\n          return B_(t2, Y_()).exponent(t2.exponent());\n        }, dg.apply(t2, arguments);\n      }\n      function L_() {\n        var t2, n2, e2, r2, i2, o2, a2, u2 = 0, c2 = 0.5, f2 = 1, s2 = 1, l2 = mg, h2 = false;\n        function d2(t3) {\n          return isNaN(t3 = +t3) ? a2 : (t3 = 0.5 + ((t3 = +o2(t3)) - n2) * (s2 * t3 < s2 * n2 ? r2 : i2), l2(h2 ? Math.max(0, Math.min(1, t3)) : t3));\n        }\n        function p2(t3) {\n          return function(n3) {\n            var e3, r3, i3;\n            return arguments.length ? ([e3, r3, i3] = n3, l2 = di(t3, [e3, r3, i3]), d2) : [l2(0), l2(0.5), l2(1)];\n          };\n        }\n        return d2.domain = function(a3) {\n          return arguments.length ? ([u2, c2, f2] = a3, t2 = o2(u2 = +u2), n2 = o2(c2 = +c2), e2 = o2(f2 = +f2), r2 = t2 === n2 ? 0 : 0.5 / (n2 - t2), i2 = n2 === e2 ? 0 : 0.5 / (e2 - n2), s2 = n2 < t2 ? -1 : 1, d2) : [u2, c2, f2];\n        }, d2.clamp = function(t3) {\n          return arguments.length ? (h2 = !!t3, d2) : h2;\n        }, d2.interpolator = function(t3) {\n          return arguments.length ? (l2 = t3, d2) : l2;\n        }, d2.range = p2(Gr), d2.rangeRound = p2(Vr), d2.unknown = function(t3) {\n          return arguments.length ? (a2 = t3, d2) : a2;\n        }, function(a3) {\n          return o2 = a3, t2 = a3(u2), n2 = a3(c2), e2 = a3(f2), r2 = t2 === n2 ? 0 : 0.5 / (n2 - t2), i2 = n2 === e2 ? 0 : 0.5 / (e2 - n2), s2 = n2 < t2 ? -1 : 1, d2;\n        };\n      }\n      function j_() {\n        var t2 = Lg(L_());\n        return t2.copy = function() {\n          return B_(t2, j_()).exponent(t2.exponent());\n        }, dg.apply(t2, arguments);\n      }\n      function H_(t2) {\n        for (var n2 = t2.length / 6 | 0, e2 = new Array(n2), r2 = 0; r2 < n2; )\n          e2[r2] = \"#\" + t2.slice(6 * r2, 6 * ++r2);\n        return e2;\n      }\n      var X_ = H_(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"), G_ = H_(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"), V_ = H_(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"), W_ = H_(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"), Z_ = H_(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"), K_ = H_(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"), Q_ = H_(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"), J_ = H_(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"), tb = H_(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"), nb = H_(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\"), eb = (t2) => Fr(t2[t2.length - 1]), rb = new Array(3).concat(\"d8b365f5f5f55ab4ac\", \"a6611adfc27d80cdc1018571\", \"a6611adfc27df5f5f580cdc1018571\", \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\", \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\", \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\", \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\", \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\", \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(H_), ib = eb(rb), ob = new Array(3).concat(\"af8dc3f7f7f77fbf7b\", \"7b3294c2a5cfa6dba0008837\", \"7b3294c2a5cff7f7f7a6dba0008837\", \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\", \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\", \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\", \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\", \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\", \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(H_), ab = eb(ob), ub = new Array(3).concat(\"e9a3c9f7f7f7a1d76a\", \"d01c8bf1b6dab8e1864dac26\", \"d01c8bf1b6daf7f7f7b8e1864dac26\", \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\", \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\", \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\", \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\", \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\", \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(H_), cb = eb(ub), fb = new Array(3).concat(\"998ec3f7f7f7f1a340\", \"5e3c99b2abd2fdb863e66101\", \"5e3c99b2abd2f7f7f7fdb863e66101\", \"542788998ec3d8daebfee0b6f1a340b35806\", \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\", \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\", \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\", \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\", \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(H_), sb = eb(fb), lb = new Array(3).concat(\"ef8a62f7f7f767a9cf\", \"ca0020f4a58292c5de0571b0\", \"ca0020f4a582f7f7f792c5de0571b0\", \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\", \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\", \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\", \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\", \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\", \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(H_), hb = eb(lb), db = new Array(3).concat(\"ef8a62ffffff999999\", \"ca0020f4a582bababa404040\", \"ca0020f4a582ffffffbababa404040\", \"b2182bef8a62fddbc7e0e0e09999994d4d4d\", \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\", \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\", \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\", \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\", \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(H_), pb = eb(db), gb = new Array(3).concat(\"fc8d59ffffbf91bfdb\", \"d7191cfdae61abd9e92c7bb6\", \"d7191cfdae61ffffbfabd9e92c7bb6\", \"d73027fc8d59fee090e0f3f891bfdb4575b4\", \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\", \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\", \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\", \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\", \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(H_), yb = eb(gb), vb = new Array(3).concat(\"fc8d59ffffbf91cf60\", \"d7191cfdae61a6d96a1a9641\", \"d7191cfdae61ffffbfa6d96a1a9641\", \"d73027fc8d59fee08bd9ef8b91cf601a9850\", \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\", \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\", \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\", \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\", \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(H_), _b = eb(vb), bb = new Array(3).concat(\"fc8d59ffffbf99d594\", \"d7191cfdae61abdda42b83ba\", \"d7191cfdae61ffffbfabdda42b83ba\", \"d53e4ffc8d59fee08be6f59899d5943288bd\", \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\", \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\", \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\", \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\", \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(H_), mb = eb(bb), xb = new Array(3).concat(\"e5f5f999d8c92ca25f\", \"edf8fbb2e2e266c2a4238b45\", \"edf8fbb2e2e266c2a42ca25f006d2c\", \"edf8fbccece699d8c966c2a42ca25f006d2c\", \"edf8fbccece699d8c966c2a441ae76238b45005824\", \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\", \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(H_), wb = eb(xb), Mb = new Array(3).concat(\"e0ecf49ebcda8856a7\", \"edf8fbb3cde38c96c688419d\", \"edf8fbb3cde38c96c68856a7810f7c\", \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\", \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\", \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\", \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(H_), Tb = eb(Mb), Ab = new Array(3).concat(\"e0f3dba8ddb543a2ca\", \"f0f9e8bae4bc7bccc42b8cbe\", \"f0f9e8bae4bc7bccc443a2ca0868ac\", \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\", \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\", \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\", \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(H_), Sb = eb(Ab), Eb = new Array(3).concat(\"fee8c8fdbb84e34a33\", \"fef0d9fdcc8afc8d59d7301f\", \"fef0d9fdcc8afc8d59e34a33b30000\", \"fef0d9fdd49efdbb84fc8d59e34a33b30000\", \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\", \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\", \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(H_), Nb = eb(Eb), kb = new Array(3).concat(\"ece2f0a6bddb1c9099\", \"f6eff7bdc9e167a9cf02818a\", \"f6eff7bdc9e167a9cf1c9099016c59\", \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\", \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\", \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\", \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(H_), Cb = eb(kb), Pb = new Array(3).concat(\"ece7f2a6bddb2b8cbe\", \"f1eef6bdc9e174a9cf0570b0\", \"f1eef6bdc9e174a9cf2b8cbe045a8d\", \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\", \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\", \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\", \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(H_), zb = eb(Pb), $b = new Array(3).concat(\"e7e1efc994c7dd1c77\", \"f1eef6d7b5d8df65b0ce1256\", \"f1eef6d7b5d8df65b0dd1c77980043\", \"f1eef6d4b9dac994c7df65b0dd1c77980043\", \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\", \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\", \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(H_), Db = eb($b), Rb = new Array(3).concat(\"fde0ddfa9fb5c51b8a\", \"feebe2fbb4b9f768a1ae017e\", \"feebe2fbb4b9f768a1c51b8a7a0177\", \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\", \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\", \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\", \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(H_), Fb = eb(Rb), qb = new Array(3).concat(\"edf8b17fcdbb2c7fb8\", \"ffffcca1dab441b6c4225ea8\", \"ffffcca1dab441b6c42c7fb8253494\", \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\", \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\", \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\", \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(H_), Ub = eb(qb), Ib = new Array(3).concat(\"f7fcb9addd8e31a354\", \"ffffccc2e69978c679238443\", \"ffffccc2e69978c67931a354006837\", \"ffffccd9f0a3addd8e78c67931a354006837\", \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\", \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\", \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(H_), Ob = eb(Ib), Bb = new Array(3).concat(\"fff7bcfec44fd95f0e\", \"ffffd4fed98efe9929cc4c02\", \"ffffd4fed98efe9929d95f0e993404\", \"ffffd4fee391fec44ffe9929d95f0e993404\", \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\", \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\", \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(H_), Yb = eb(Bb), Lb = new Array(3).concat(\"ffeda0feb24cf03b20\", \"ffffb2fecc5cfd8d3ce31a1c\", \"ffffb2fecc5cfd8d3cf03b20bd0026\", \"ffffb2fed976feb24cfd8d3cf03b20bd0026\", \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\", \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\", \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(H_), jb = eb(Lb), Hb = new Array(3).concat(\"deebf79ecae13182bd\", \"eff3ffbdd7e76baed62171b5\", \"eff3ffbdd7e76baed63182bd08519c\", \"eff3ffc6dbef9ecae16baed63182bd08519c\", \"eff3ffc6dbef9ecae16baed64292c62171b5084594\", \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\", \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(H_), Xb = eb(Hb), Gb = new Array(3).concat(\"e5f5e0a1d99b31a354\", \"edf8e9bae4b374c476238b45\", \"edf8e9bae4b374c47631a354006d2c\", \"edf8e9c7e9c0a1d99b74c47631a354006d2c\", \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\", \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\", \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(H_), Vb = eb(Gb), Wb = new Array(3).concat(\"f0f0f0bdbdbd636363\", \"f7f7f7cccccc969696525252\", \"f7f7f7cccccc969696636363252525\", \"f7f7f7d9d9d9bdbdbd969696636363252525\", \"f7f7f7d9d9d9bdbdbd969696737373525252252525\", \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\", \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(H_), Zb = eb(Wb), Kb = new Array(3).concat(\"efedf5bcbddc756bb1\", \"f2f0f7cbc9e29e9ac86a51a3\", \"f2f0f7cbc9e29e9ac8756bb154278f\", \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\", \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\", \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\", \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(H_), Qb = eb(Kb), Jb = new Array(3).concat(\"fee0d2fc9272de2d26\", \"fee5d9fcae91fb6a4acb181d\", \"fee5d9fcae91fb6a4ade2d26a50f15\", \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\", \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\", \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\", \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(H_), tm = eb(Jb), nm = new Array(3).concat(\"fee6cefdae6be6550d\", \"feeddefdbe85fd8d3cd94701\", \"feeddefdbe85fd8d3ce6550da63603\", \"feeddefdd0a2fdae6bfd8d3ce6550da63603\", \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\", \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\", \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(H_), em = eb(nm);\n      var rm = hi(Tr(300, 0.5, 0), Tr(-240, 0.5, 1)), im = hi(Tr(-100, 0.75, 0.35), Tr(80, 1.5, 0.8)), om = hi(Tr(260, 0.75, 0.35), Tr(80, 1.5, 0.8)), am = Tr();\n      var um = Fe(), cm = Math.PI / 3, fm = 2 * Math.PI / 3;\n      function sm(t2) {\n        var n2 = t2.length;\n        return function(e2) {\n          return t2[Math.max(0, Math.min(n2 - 1, Math.floor(e2 * n2)))];\n        };\n      }\n      var lm = sm(H_(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")), hm = sm(H_(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")), dm = sm(H_(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")), pm = sm(H_(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n      function gm(t2) {\n        return function() {\n          return t2;\n        };\n      }\n      const ym = Math.abs, vm = Math.atan2, _m = Math.cos, bm = Math.max, mm = Math.min, xm = Math.sin, wm = Math.sqrt, Mm = 1e-12, Tm = Math.PI, Am = Tm / 2, Sm = 2 * Tm;\n      function Em(t2) {\n        return t2 >= 1 ? Am : t2 <= -1 ? -Am : Math.asin(t2);\n      }\n      function Nm(t2) {\n        let n2 = 3;\n        return t2.digits = function(e2) {\n          if (!arguments.length)\n            return n2;\n          if (null == e2)\n            n2 = null;\n          else {\n            const t3 = Math.floor(e2);\n            if (!(t3 >= 0))\n              throw new RangeError(`invalid digits: ${e2}`);\n            n2 = t3;\n          }\n          return t2;\n        }, () => new Ua(n2);\n      }\n      function km(t2) {\n        return t2.innerRadius;\n      }\n      function Cm(t2) {\n        return t2.outerRadius;\n      }\n      function Pm(t2) {\n        return t2.startAngle;\n      }\n      function zm(t2) {\n        return t2.endAngle;\n      }\n      function $m(t2) {\n        return t2 && t2.padAngle;\n      }\n      function Dm(t2, n2, e2, r2, i2, o2, a2) {\n        var u2 = t2 - e2, c2 = n2 - r2, f2 = (a2 ? o2 : -o2) / wm(u2 * u2 + c2 * c2), s2 = f2 * c2, l2 = -f2 * u2, h2 = t2 + s2, d2 = n2 + l2, p2 = e2 + s2, g2 = r2 + l2, y2 = (h2 + p2) / 2, v2 = (d2 + g2) / 2, _2 = p2 - h2, b2 = g2 - d2, m2 = _2 * _2 + b2 * b2, x2 = i2 - o2, w2 = h2 * g2 - p2 * d2, M2 = (b2 < 0 ? -1 : 1) * wm(bm(0, x2 * x2 * m2 - w2 * w2)), T2 = (w2 * b2 - _2 * M2) / m2, A2 = (-w2 * _2 - b2 * M2) / m2, S2 = (w2 * b2 + _2 * M2) / m2, E2 = (-w2 * _2 + b2 * M2) / m2, N2 = T2 - y2, k2 = A2 - v2, C2 = S2 - y2, P2 = E2 - v2;\n        return N2 * N2 + k2 * k2 > C2 * C2 + P2 * P2 && (T2 = S2, A2 = E2), { cx: T2, cy: A2, x01: -s2, y01: -l2, x11: T2 * (i2 / x2 - 1), y11: A2 * (i2 / x2 - 1) };\n      }\n      var Rm = Array.prototype.slice;\n      function Fm(t2) {\n        return \"object\" == typeof t2 && \"length\" in t2 ? t2 : Array.from(t2);\n      }\n      function qm(t2) {\n        this._context = t2;\n      }\n      function Um(t2) {\n        return new qm(t2);\n      }\n      function Im(t2) {\n        return t2[0];\n      }\n      function Om(t2) {\n        return t2[1];\n      }\n      function Bm(t2, n2) {\n        var e2 = gm(true), r2 = null, i2 = Um, o2 = null, a2 = Nm(u2);\n        function u2(u3) {\n          var c2, f2, s2, l2 = (u3 = Fm(u3)).length, h2 = false;\n          for (null == r2 && (o2 = i2(s2 = a2())), c2 = 0; c2 <= l2; ++c2)\n            !(c2 < l2 && e2(f2 = u3[c2], c2, u3)) === h2 && ((h2 = !h2) ? o2.lineStart() : o2.lineEnd()), h2 && o2.point(+t2(f2, c2, u3), +n2(f2, c2, u3));\n          if (s2)\n            return o2 = null, s2 + \"\" || null;\n        }\n        return t2 = \"function\" == typeof t2 ? t2 : void 0 === t2 ? Im : gm(t2), n2 = \"function\" == typeof n2 ? n2 : void 0 === n2 ? Om : gm(n2), u2.x = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(+n3), u2) : t2;\n        }, u2.y = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : gm(+t3), u2) : n2;\n        }, u2.defined = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : gm(!!t3), u2) : e2;\n        }, u2.curve = function(t3) {\n          return arguments.length ? (i2 = t3, null != r2 && (o2 = i2(r2)), u2) : i2;\n        }, u2.context = function(t3) {\n          return arguments.length ? (null == t3 ? r2 = o2 = null : o2 = i2(r2 = t3), u2) : r2;\n        }, u2;\n      }\n      function Ym(t2, n2, e2) {\n        var r2 = null, i2 = gm(true), o2 = null, a2 = Um, u2 = null, c2 = Nm(f2);\n        function f2(f3) {\n          var s3, l2, h2, d2, p2, g2 = (f3 = Fm(f3)).length, y2 = false, v2 = new Array(g2), _2 = new Array(g2);\n          for (null == o2 && (u2 = a2(p2 = c2())), s3 = 0; s3 <= g2; ++s3) {\n            if (!(s3 < g2 && i2(d2 = f3[s3], s3, f3)) === y2)\n              if (y2 = !y2)\n                l2 = s3, u2.areaStart(), u2.lineStart();\n              else {\n                for (u2.lineEnd(), u2.lineStart(), h2 = s3 - 1; h2 >= l2; --h2)\n                  u2.point(v2[h2], _2[h2]);\n                u2.lineEnd(), u2.areaEnd();\n              }\n            y2 && (v2[s3] = +t2(d2, s3, f3), _2[s3] = +n2(d2, s3, f3), u2.point(r2 ? +r2(d2, s3, f3) : v2[s3], e2 ? +e2(d2, s3, f3) : _2[s3]));\n          }\n          if (p2)\n            return u2 = null, p2 + \"\" || null;\n        }\n        function s2() {\n          return Bm().defined(i2).curve(a2).context(o2);\n        }\n        return t2 = \"function\" == typeof t2 ? t2 : void 0 === t2 ? Im : gm(+t2), n2 = \"function\" == typeof n2 ? n2 : gm(void 0 === n2 ? 0 : +n2), e2 = \"function\" == typeof e2 ? e2 : void 0 === e2 ? Om : gm(+e2), f2.x = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(+n3), r2 = null, f2) : t2;\n        }, f2.x0 = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(+n3), f2) : t2;\n        }, f2.x1 = function(t3) {\n          return arguments.length ? (r2 = null == t3 ? null : \"function\" == typeof t3 ? t3 : gm(+t3), f2) : r2;\n        }, f2.y = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : gm(+t3), e2 = null, f2) : n2;\n        }, f2.y0 = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : gm(+t3), f2) : n2;\n        }, f2.y1 = function(t3) {\n          return arguments.length ? (e2 = null == t3 ? null : \"function\" == typeof t3 ? t3 : gm(+t3), f2) : e2;\n        }, f2.lineX0 = f2.lineY0 = function() {\n          return s2().x(t2).y(n2);\n        }, f2.lineY1 = function() {\n          return s2().x(t2).y(e2);\n        }, f2.lineX1 = function() {\n          return s2().x(r2).y(n2);\n        }, f2.defined = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : gm(!!t3), f2) : i2;\n        }, f2.curve = function(t3) {\n          return arguments.length ? (a2 = t3, null != o2 && (u2 = a2(o2)), f2) : a2;\n        }, f2.context = function(t3) {\n          return arguments.length ? (null == t3 ? o2 = u2 = null : u2 = a2(o2 = t3), f2) : o2;\n        }, f2;\n      }\n      function Lm(t2, n2) {\n        return n2 < t2 ? -1 : n2 > t2 ? 1 : n2 >= t2 ? 0 : NaN;\n      }\n      function jm(t2) {\n        return t2;\n      }\n      qm.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._point = 0;\n      }, lineEnd: function() {\n        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n            break;\n          case 1:\n            this._point = 2;\n          default:\n            this._context.lineTo(t2, n2);\n        }\n      } };\n      var Hm = Gm(Um);\n      function Xm(t2) {\n        this._curve = t2;\n      }\n      function Gm(t2) {\n        function n2(n3) {\n          return new Xm(t2(n3));\n        }\n        return n2._curve = t2, n2;\n      }\n      function Vm(t2) {\n        var n2 = t2.curve;\n        return t2.angle = t2.x, delete t2.x, t2.radius = t2.y, delete t2.y, t2.curve = function(t3) {\n          return arguments.length ? n2(Gm(t3)) : n2()._curve;\n        }, t2;\n      }\n      function Wm() {\n        return Vm(Bm().curve(Hm));\n      }\n      function Zm() {\n        var t2 = Ym().curve(Hm), n2 = t2.curve, e2 = t2.lineX0, r2 = t2.lineX1, i2 = t2.lineY0, o2 = t2.lineY1;\n        return t2.angle = t2.x, delete t2.x, t2.startAngle = t2.x0, delete t2.x0, t2.endAngle = t2.x1, delete t2.x1, t2.radius = t2.y, delete t2.y, t2.innerRadius = t2.y0, delete t2.y0, t2.outerRadius = t2.y1, delete t2.y1, t2.lineStartAngle = function() {\n          return Vm(e2());\n        }, delete t2.lineX0, t2.lineEndAngle = function() {\n          return Vm(r2());\n        }, delete t2.lineX1, t2.lineInnerRadius = function() {\n          return Vm(i2());\n        }, delete t2.lineY0, t2.lineOuterRadius = function() {\n          return Vm(o2());\n        }, delete t2.lineY1, t2.curve = function(t3) {\n          return arguments.length ? n2(Gm(t3)) : n2()._curve;\n        }, t2;\n      }\n      function Km(t2, n2) {\n        return [(n2 = +n2) * Math.cos(t2 -= Math.PI / 2), n2 * Math.sin(t2)];\n      }\n      Xm.prototype = { areaStart: function() {\n        this._curve.areaStart();\n      }, areaEnd: function() {\n        this._curve.areaEnd();\n      }, lineStart: function() {\n        this._curve.lineStart();\n      }, lineEnd: function() {\n        this._curve.lineEnd();\n      }, point: function(t2, n2) {\n        this._curve.point(n2 * Math.sin(t2), n2 * -Math.cos(t2));\n      } };\n      class Qm {\n        constructor(t2, n2) {\n          this._context = t2, this._x = n2;\n        }\n        areaStart() {\n          this._line = 0;\n        }\n        areaEnd() {\n          this._line = NaN;\n        }\n        lineStart() {\n          this._point = 0;\n        }\n        lineEnd() {\n          (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n        }\n        point(t2, n2) {\n          switch (t2 = +t2, n2 = +n2, this._point) {\n            case 0:\n              this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n              break;\n            case 1:\n              this._point = 2;\n            default:\n              this._x ? this._context.bezierCurveTo(this._x0 = (this._x0 + t2) / 2, this._y0, this._x0, n2, t2, n2) : this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + n2) / 2, t2, this._y0, t2, n2);\n          }\n          this._x0 = t2, this._y0 = n2;\n        }\n      }\n      class Jm {\n        constructor(t2) {\n          this._context = t2;\n        }\n        lineStart() {\n          this._point = 0;\n        }\n        lineEnd() {\n        }\n        point(t2, n2) {\n          if (t2 = +t2, n2 = +n2, 0 === this._point)\n            this._point = 1;\n          else {\n            const e2 = Km(this._x0, this._y0), r2 = Km(this._x0, this._y0 = (this._y0 + n2) / 2), i2 = Km(t2, this._y0), o2 = Km(t2, n2);\n            this._context.moveTo(...e2), this._context.bezierCurveTo(...r2, ...i2, ...o2);\n          }\n          this._x0 = t2, this._y0 = n2;\n        }\n      }\n      function tx(t2) {\n        return new Qm(t2, true);\n      }\n      function nx(t2) {\n        return new Qm(t2, false);\n      }\n      function ex(t2) {\n        return new Jm(t2);\n      }\n      function rx(t2) {\n        return t2.source;\n      }\n      function ix(t2) {\n        return t2.target;\n      }\n      function ox(t2) {\n        let n2 = rx, e2 = ix, r2 = Im, i2 = Om, o2 = null, a2 = null, u2 = Nm(c2);\n        function c2() {\n          let c3;\n          const f2 = Rm.call(arguments), s2 = n2.apply(this, f2), l2 = e2.apply(this, f2);\n          if (null == o2 && (a2 = t2(c3 = u2())), a2.lineStart(), f2[0] = s2, a2.point(+r2.apply(this, f2), +i2.apply(this, f2)), f2[0] = l2, a2.point(+r2.apply(this, f2), +i2.apply(this, f2)), a2.lineEnd(), c3)\n            return a2 = null, c3 + \"\" || null;\n        }\n        return c2.source = function(t3) {\n          return arguments.length ? (n2 = t3, c2) : n2;\n        }, c2.target = function(t3) {\n          return arguments.length ? (e2 = t3, c2) : e2;\n        }, c2.x = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : gm(+t3), c2) : r2;\n        }, c2.y = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : gm(+t3), c2) : i2;\n        }, c2.context = function(n3) {\n          return arguments.length ? (null == n3 ? o2 = a2 = null : a2 = t2(o2 = n3), c2) : o2;\n        }, c2;\n      }\n      const ax = wm(3);\n      var ux = { draw(t2, n2) {\n        const e2 = 0.59436 * wm(n2 + mm(n2 / 28, 0.75)), r2 = e2 / 2, i2 = r2 * ax;\n        t2.moveTo(0, e2), t2.lineTo(0, -e2), t2.moveTo(-i2, -r2), t2.lineTo(i2, r2), t2.moveTo(-i2, r2), t2.lineTo(i2, -r2);\n      } }, cx = { draw(t2, n2) {\n        const e2 = wm(n2 / Tm);\n        t2.moveTo(e2, 0), t2.arc(0, 0, e2, 0, Sm);\n      } }, fx = { draw(t2, n2) {\n        const e2 = wm(n2 / 5) / 2;\n        t2.moveTo(-3 * e2, -e2), t2.lineTo(-e2, -e2), t2.lineTo(-e2, -3 * e2), t2.lineTo(e2, -3 * e2), t2.lineTo(e2, -e2), t2.lineTo(3 * e2, -e2), t2.lineTo(3 * e2, e2), t2.lineTo(e2, e2), t2.lineTo(e2, 3 * e2), t2.lineTo(-e2, 3 * e2), t2.lineTo(-e2, e2), t2.lineTo(-3 * e2, e2), t2.closePath();\n      } };\n      const sx = wm(1 / 3), lx = 2 * sx;\n      var hx = { draw(t2, n2) {\n        const e2 = wm(n2 / lx), r2 = e2 * sx;\n        t2.moveTo(0, -e2), t2.lineTo(r2, 0), t2.lineTo(0, e2), t2.lineTo(-r2, 0), t2.closePath();\n      } }, dx = { draw(t2, n2) {\n        const e2 = 0.62625 * wm(n2);\n        t2.moveTo(0, -e2), t2.lineTo(e2, 0), t2.lineTo(0, e2), t2.lineTo(-e2, 0), t2.closePath();\n      } }, px = { draw(t2, n2) {\n        const e2 = 0.87559 * wm(n2 - mm(n2 / 7, 2));\n        t2.moveTo(-e2, 0), t2.lineTo(e2, 0), t2.moveTo(0, e2), t2.lineTo(0, -e2);\n      } }, gx = { draw(t2, n2) {\n        const e2 = wm(n2), r2 = -e2 / 2;\n        t2.rect(r2, r2, e2, e2);\n      } }, yx = { draw(t2, n2) {\n        const e2 = 0.4431 * wm(n2);\n        t2.moveTo(e2, e2), t2.lineTo(e2, -e2), t2.lineTo(-e2, -e2), t2.lineTo(-e2, e2), t2.closePath();\n      } };\n      const vx = xm(Tm / 10) / xm(7 * Tm / 10), _x = xm(Sm / 10) * vx, bx = -_m(Sm / 10) * vx;\n      var mx = { draw(t2, n2) {\n        const e2 = wm(0.8908130915292852 * n2), r2 = _x * e2, i2 = bx * e2;\n        t2.moveTo(0, -e2), t2.lineTo(r2, i2);\n        for (let n3 = 1; n3 < 5; ++n3) {\n          const o2 = Sm * n3 / 5, a2 = _m(o2), u2 = xm(o2);\n          t2.lineTo(u2 * e2, -a2 * e2), t2.lineTo(a2 * r2 - u2 * i2, u2 * r2 + a2 * i2);\n        }\n        t2.closePath();\n      } };\n      const xx = wm(3);\n      var wx = { draw(t2, n2) {\n        const e2 = -wm(n2 / (3 * xx));\n        t2.moveTo(0, 2 * e2), t2.lineTo(-xx * e2, -e2), t2.lineTo(xx * e2, -e2), t2.closePath();\n      } };\n      const Mx = wm(3);\n      var Tx = { draw(t2, n2) {\n        const e2 = 0.6824 * wm(n2), r2 = e2 / 2, i2 = e2 * Mx / 2;\n        t2.moveTo(0, -e2), t2.lineTo(i2, r2), t2.lineTo(-i2, r2), t2.closePath();\n      } };\n      const Ax = -0.5, Sx = wm(3) / 2, Ex = 1 / wm(12), Nx = 3 * (Ex / 2 + 1);\n      var kx = { draw(t2, n2) {\n        const e2 = wm(n2 / Nx), r2 = e2 / 2, i2 = e2 * Ex, o2 = r2, a2 = e2 * Ex + e2, u2 = -o2, c2 = a2;\n        t2.moveTo(r2, i2), t2.lineTo(o2, a2), t2.lineTo(u2, c2), t2.lineTo(Ax * r2 - Sx * i2, Sx * r2 + Ax * i2), t2.lineTo(Ax * o2 - Sx * a2, Sx * o2 + Ax * a2), t2.lineTo(Ax * u2 - Sx * c2, Sx * u2 + Ax * c2), t2.lineTo(Ax * r2 + Sx * i2, Ax * i2 - Sx * r2), t2.lineTo(Ax * o2 + Sx * a2, Ax * a2 - Sx * o2), t2.lineTo(Ax * u2 + Sx * c2, Ax * c2 - Sx * u2), t2.closePath();\n      } }, Cx = { draw(t2, n2) {\n        const e2 = 0.6189 * wm(n2 - mm(n2 / 6, 1.7));\n        t2.moveTo(-e2, -e2), t2.lineTo(e2, e2), t2.moveTo(-e2, e2), t2.lineTo(e2, -e2);\n      } };\n      const Px = [cx, fx, hx, gx, mx, wx, kx], zx = [cx, px, Cx, Tx, ux, yx, dx];\n      function $x() {\n      }\n      function Dx(t2, n2, e2) {\n        t2._context.bezierCurveTo((2 * t2._x0 + t2._x1) / 3, (2 * t2._y0 + t2._y1) / 3, (t2._x0 + 2 * t2._x1) / 3, (t2._y0 + 2 * t2._y1) / 3, (t2._x0 + 4 * t2._x1 + n2) / 6, (t2._y0 + 4 * t2._y1 + e2) / 6);\n      }\n      function Rx(t2) {\n        this._context = t2;\n      }\n      function Fx(t2) {\n        this._context = t2;\n      }\n      function qx(t2) {\n        this._context = t2;\n      }\n      function Ux(t2, n2) {\n        this._basis = new Rx(t2), this._beta = n2;\n      }\n      Rx.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 3:\n            Dx(this, this._x1, this._y1);\n          case 2:\n            this._context.lineTo(this._x1, this._y1);\n        }\n        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n            break;\n          case 1:\n            this._point = 2;\n            break;\n          case 2:\n            this._point = 3, this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);\n          default:\n            Dx(this, t2, n2);\n        }\n        this._x0 = this._x1, this._x1 = t2, this._y0 = this._y1, this._y1 = n2;\n      } }, Fx.prototype = { areaStart: $x, areaEnd: $x, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 1:\n            this._context.moveTo(this._x2, this._y2), this._context.closePath();\n            break;\n          case 2:\n            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3), this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3), this._context.closePath();\n            break;\n          case 3:\n            this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);\n        }\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1, this._x2 = t2, this._y2 = n2;\n            break;\n          case 1:\n            this._point = 2, this._x3 = t2, this._y3 = n2;\n            break;\n          case 2:\n            this._point = 3, this._x4 = t2, this._y4 = n2, this._context.moveTo((this._x0 + 4 * this._x1 + t2) / 6, (this._y0 + 4 * this._y1 + n2) / 6);\n            break;\n          default:\n            Dx(this, t2, n2);\n        }\n        this._x0 = this._x1, this._x1 = t2, this._y0 = this._y1, this._y1 = n2;\n      } }, qx.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1;\n            break;\n          case 1:\n            this._point = 2;\n            break;\n          case 2:\n            this._point = 3;\n            var e2 = (this._x0 + 4 * this._x1 + t2) / 6, r2 = (this._y0 + 4 * this._y1 + n2) / 6;\n            this._line ? this._context.lineTo(e2, r2) : this._context.moveTo(e2, r2);\n            break;\n          case 3:\n            this._point = 4;\n          default:\n            Dx(this, t2, n2);\n        }\n        this._x0 = this._x1, this._x1 = t2, this._y0 = this._y1, this._y1 = n2;\n      } }, Ux.prototype = { lineStart: function() {\n        this._x = [], this._y = [], this._basis.lineStart();\n      }, lineEnd: function() {\n        var t2 = this._x, n2 = this._y, e2 = t2.length - 1;\n        if (e2 > 0)\n          for (var r2, i2 = t2[0], o2 = n2[0], a2 = t2[e2] - i2, u2 = n2[e2] - o2, c2 = -1; ++c2 <= e2; )\n            r2 = c2 / e2, this._basis.point(this._beta * t2[c2] + (1 - this._beta) * (i2 + r2 * a2), this._beta * n2[c2] + (1 - this._beta) * (o2 + r2 * u2));\n        this._x = this._y = null, this._basis.lineEnd();\n      }, point: function(t2, n2) {\n        this._x.push(+t2), this._y.push(+n2);\n      } };\n      var Ix = function t2(n2) {\n        function e2(t3) {\n          return 1 === n2 ? new Rx(t3) : new Ux(t3, n2);\n        }\n        return e2.beta = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0.85);\n      function Ox(t2, n2, e2) {\n        t2._context.bezierCurveTo(t2._x1 + t2._k * (t2._x2 - t2._x0), t2._y1 + t2._k * (t2._y2 - t2._y0), t2._x2 + t2._k * (t2._x1 - n2), t2._y2 + t2._k * (t2._y1 - e2), t2._x2, t2._y2);\n      }\n      function Bx(t2, n2) {\n        this._context = t2, this._k = (1 - n2) / 6;\n      }\n      Bx.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 2:\n            this._context.lineTo(this._x2, this._y2);\n            break;\n          case 3:\n            Ox(this, this._x1, this._y1);\n        }\n        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n            break;\n          case 1:\n            this._point = 2, this._x1 = t2, this._y1 = n2;\n            break;\n          case 2:\n            this._point = 3;\n          default:\n            Ox(this, t2, n2);\n        }\n        this._x0 = this._x1, this._x1 = this._x2, this._x2 = t2, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n2;\n      } };\n      var Yx = function t2(n2) {\n        function e2(t3) {\n          return new Bx(t3, n2);\n        }\n        return e2.tension = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0);\n      function Lx(t2, n2) {\n        this._context = t2, this._k = (1 - n2) / 6;\n      }\n      Lx.prototype = { areaStart: $x, areaEnd: $x, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 1:\n            this._context.moveTo(this._x3, this._y3), this._context.closePath();\n            break;\n          case 2:\n            this._context.lineTo(this._x3, this._y3), this._context.closePath();\n            break;\n          case 3:\n            this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);\n        }\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1, this._x3 = t2, this._y3 = n2;\n            break;\n          case 1:\n            this._point = 2, this._context.moveTo(this._x4 = t2, this._y4 = n2);\n            break;\n          case 2:\n            this._point = 3, this._x5 = t2, this._y5 = n2;\n            break;\n          default:\n            Ox(this, t2, n2);\n        }\n        this._x0 = this._x1, this._x1 = this._x2, this._x2 = t2, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n2;\n      } };\n      var jx = function t2(n2) {\n        function e2(t3) {\n          return new Lx(t3, n2);\n        }\n        return e2.tension = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0);\n      function Hx(t2, n2) {\n        this._context = t2, this._k = (1 - n2) / 6;\n      }\n      Hx.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1;\n            break;\n          case 1:\n            this._point = 2;\n            break;\n          case 2:\n            this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n            break;\n          case 3:\n            this._point = 4;\n          default:\n            Ox(this, t2, n2);\n        }\n        this._x0 = this._x1, this._x1 = this._x2, this._x2 = t2, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n2;\n      } };\n      var Xx = function t2(n2) {\n        function e2(t3) {\n          return new Hx(t3, n2);\n        }\n        return e2.tension = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0);\n      function Gx(t2, n2, e2) {\n        var r2 = t2._x1, i2 = t2._y1, o2 = t2._x2, a2 = t2._y2;\n        if (t2._l01_a > Mm) {\n          var u2 = 2 * t2._l01_2a + 3 * t2._l01_a * t2._l12_a + t2._l12_2a, c2 = 3 * t2._l01_a * (t2._l01_a + t2._l12_a);\n          r2 = (r2 * u2 - t2._x0 * t2._l12_2a + t2._x2 * t2._l01_2a) / c2, i2 = (i2 * u2 - t2._y0 * t2._l12_2a + t2._y2 * t2._l01_2a) / c2;\n        }\n        if (t2._l23_a > Mm) {\n          var f2 = 2 * t2._l23_2a + 3 * t2._l23_a * t2._l12_a + t2._l12_2a, s2 = 3 * t2._l23_a * (t2._l23_a + t2._l12_a);\n          o2 = (o2 * f2 + t2._x1 * t2._l23_2a - n2 * t2._l12_2a) / s2, a2 = (a2 * f2 + t2._y1 * t2._l23_2a - e2 * t2._l12_2a) / s2;\n        }\n        t2._context.bezierCurveTo(r2, i2, o2, a2, t2._x2, t2._y2);\n      }\n      function Vx(t2, n2) {\n        this._context = t2, this._alpha = n2;\n      }\n      Vx.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 2:\n            this._context.lineTo(this._x2, this._y2);\n            break;\n          case 3:\n            this.point(this._x2, this._y2);\n        }\n        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        if (t2 = +t2, n2 = +n2, this._point) {\n          var e2 = this._x2 - t2, r2 = this._y2 - n2;\n          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e2 * e2 + r2 * r2, this._alpha));\n        }\n        switch (this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n            break;\n          case 1:\n            this._point = 2;\n            break;\n          case 2:\n            this._point = 3;\n          default:\n            Gx(this, t2, n2);\n        }\n        this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t2, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n2;\n      } };\n      var Wx = function t2(n2) {\n        function e2(t3) {\n          return n2 ? new Vx(t3, n2) : new Bx(t3, 0);\n        }\n        return e2.alpha = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0.5);\n      function Zx(t2, n2) {\n        this._context = t2, this._alpha = n2;\n      }\n      Zx.prototype = { areaStart: $x, areaEnd: $x, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 1:\n            this._context.moveTo(this._x3, this._y3), this._context.closePath();\n            break;\n          case 2:\n            this._context.lineTo(this._x3, this._y3), this._context.closePath();\n            break;\n          case 3:\n            this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);\n        }\n      }, point: function(t2, n2) {\n        if (t2 = +t2, n2 = +n2, this._point) {\n          var e2 = this._x2 - t2, r2 = this._y2 - n2;\n          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e2 * e2 + r2 * r2, this._alpha));\n        }\n        switch (this._point) {\n          case 0:\n            this._point = 1, this._x3 = t2, this._y3 = n2;\n            break;\n          case 1:\n            this._point = 2, this._context.moveTo(this._x4 = t2, this._y4 = n2);\n            break;\n          case 2:\n            this._point = 3, this._x5 = t2, this._y5 = n2;\n            break;\n          default:\n            Gx(this, t2, n2);\n        }\n        this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t2, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n2;\n      } };\n      var Kx = function t2(n2) {\n        function e2(t3) {\n          return n2 ? new Zx(t3, n2) : new Lx(t3, 0);\n        }\n        return e2.alpha = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0.5);\n      function Qx(t2, n2) {\n        this._context = t2, this._alpha = n2;\n      }\n      Qx.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n      }, lineEnd: function() {\n        (this._line || 0 !== this._line && 3 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        if (t2 = +t2, n2 = +n2, this._point) {\n          var e2 = this._x2 - t2, r2 = this._y2 - n2;\n          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(e2 * e2 + r2 * r2, this._alpha));\n        }\n        switch (this._point) {\n          case 0:\n            this._point = 1;\n            break;\n          case 1:\n            this._point = 2;\n            break;\n          case 2:\n            this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n            break;\n          case 3:\n            this._point = 4;\n          default:\n            Gx(this, t2, n2);\n        }\n        this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = t2, this._y0 = this._y1, this._y1 = this._y2, this._y2 = n2;\n      } };\n      var Jx = function t2(n2) {\n        function e2(t3) {\n          return n2 ? new Qx(t3, n2) : new Hx(t3, 0);\n        }\n        return e2.alpha = function(n3) {\n          return t2(+n3);\n        }, e2;\n      }(0.5);\n      function tw(t2) {\n        this._context = t2;\n      }\n      function nw(t2) {\n        return t2 < 0 ? -1 : 1;\n      }\n      function ew(t2, n2, e2) {\n        var r2 = t2._x1 - t2._x0, i2 = n2 - t2._x1, o2 = (t2._y1 - t2._y0) / (r2 || i2 < 0 && -0), a2 = (e2 - t2._y1) / (i2 || r2 < 0 && -0), u2 = (o2 * i2 + a2 * r2) / (r2 + i2);\n        return (nw(o2) + nw(a2)) * Math.min(Math.abs(o2), Math.abs(a2), 0.5 * Math.abs(u2)) || 0;\n      }\n      function rw(t2, n2) {\n        var e2 = t2._x1 - t2._x0;\n        return e2 ? (3 * (t2._y1 - t2._y0) / e2 - n2) / 2 : n2;\n      }\n      function iw(t2, n2, e2) {\n        var r2 = t2._x0, i2 = t2._y0, o2 = t2._x1, a2 = t2._y1, u2 = (o2 - r2) / 3;\n        t2._context.bezierCurveTo(r2 + u2, i2 + u2 * n2, o2 - u2, a2 - u2 * e2, o2, a2);\n      }\n      function ow(t2) {\n        this._context = t2;\n      }\n      function aw(t2) {\n        this._context = new uw(t2);\n      }\n      function uw(t2) {\n        this._context = t2;\n      }\n      function cw(t2) {\n        this._context = t2;\n      }\n      function fw(t2) {\n        var n2, e2, r2 = t2.length - 1, i2 = new Array(r2), o2 = new Array(r2), a2 = new Array(r2);\n        for (i2[0] = 0, o2[0] = 2, a2[0] = t2[0] + 2 * t2[1], n2 = 1; n2 < r2 - 1; ++n2)\n          i2[n2] = 1, o2[n2] = 4, a2[n2] = 4 * t2[n2] + 2 * t2[n2 + 1];\n        for (i2[r2 - 1] = 2, o2[r2 - 1] = 7, a2[r2 - 1] = 8 * t2[r2 - 1] + t2[r2], n2 = 1; n2 < r2; ++n2)\n          e2 = i2[n2] / o2[n2 - 1], o2[n2] -= e2, a2[n2] -= e2 * a2[n2 - 1];\n        for (i2[r2 - 1] = a2[r2 - 1] / o2[r2 - 1], n2 = r2 - 2; n2 >= 0; --n2)\n          i2[n2] = (a2[n2] - i2[n2 + 1]) / o2[n2];\n        for (o2[r2 - 1] = (t2[r2] + i2[r2 - 1]) / 2, n2 = 0; n2 < r2 - 1; ++n2)\n          o2[n2] = 2 * t2[n2 + 1] - i2[n2 + 1];\n        return [i2, o2];\n      }\n      function sw(t2, n2) {\n        this._context = t2, this._t = n2;\n      }\n      function lw(t2, n2) {\n        if ((i2 = t2.length) > 1)\n          for (var e2, r2, i2, o2 = 1, a2 = t2[n2[0]], u2 = a2.length; o2 < i2; ++o2)\n            for (r2 = a2, a2 = t2[n2[o2]], e2 = 0; e2 < u2; ++e2)\n              a2[e2][1] += a2[e2][0] = isNaN(r2[e2][1]) ? r2[e2][0] : r2[e2][1];\n      }\n      function hw(t2) {\n        for (var n2 = t2.length, e2 = new Array(n2); --n2 >= 0; )\n          e2[n2] = n2;\n        return e2;\n      }\n      function dw(t2, n2) {\n        return t2[n2];\n      }\n      function pw(t2) {\n        const n2 = [];\n        return n2.key = t2, n2;\n      }\n      function gw(t2) {\n        var n2 = t2.map(yw);\n        return hw(t2).sort(function(t3, e2) {\n          return n2[t3] - n2[e2];\n        });\n      }\n      function yw(t2) {\n        for (var n2, e2 = -1, r2 = 0, i2 = t2.length, o2 = -1 / 0; ++e2 < i2; )\n          (n2 = +t2[e2][1]) > o2 && (o2 = n2, r2 = e2);\n        return r2;\n      }\n      function vw(t2) {\n        var n2 = t2.map(_w);\n        return hw(t2).sort(function(t3, e2) {\n          return n2[t3] - n2[e2];\n        });\n      }\n      function _w(t2) {\n        for (var n2, e2 = 0, r2 = -1, i2 = t2.length; ++r2 < i2; )\n          (n2 = +t2[r2][1]) && (e2 += n2);\n        return e2;\n      }\n      tw.prototype = { areaStart: $x, areaEnd: $x, lineStart: function() {\n        this._point = 0;\n      }, lineEnd: function() {\n        this._point && this._context.closePath();\n      }, point: function(t2, n2) {\n        t2 = +t2, n2 = +n2, this._point ? this._context.lineTo(t2, n2) : (this._point = 1, this._context.moveTo(t2, n2));\n      } }, ow.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;\n      }, lineEnd: function() {\n        switch (this._point) {\n          case 2:\n            this._context.lineTo(this._x1, this._y1);\n            break;\n          case 3:\n            iw(this, this._t0, rw(this, this._t0));\n        }\n        (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line = 1 - this._line;\n      }, point: function(t2, n2) {\n        var e2 = NaN;\n        if (n2 = +n2, (t2 = +t2) !== this._x1 || n2 !== this._y1) {\n          switch (this._point) {\n            case 0:\n              this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n              break;\n            case 1:\n              this._point = 2;\n              break;\n            case 2:\n              this._point = 3, iw(this, rw(this, e2 = ew(this, t2, n2)), e2);\n              break;\n            default:\n              iw(this, this._t0, e2 = ew(this, t2, n2));\n          }\n          this._x0 = this._x1, this._x1 = t2, this._y0 = this._y1, this._y1 = n2, this._t0 = e2;\n        }\n      } }, (aw.prototype = Object.create(ow.prototype)).point = function(t2, n2) {\n        ow.prototype.point.call(this, n2, t2);\n      }, uw.prototype = { moveTo: function(t2, n2) {\n        this._context.moveTo(n2, t2);\n      }, closePath: function() {\n        this._context.closePath();\n      }, lineTo: function(t2, n2) {\n        this._context.lineTo(n2, t2);\n      }, bezierCurveTo: function(t2, n2, e2, r2, i2, o2) {\n        this._context.bezierCurveTo(n2, t2, r2, e2, o2, i2);\n      } }, cw.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x = [], this._y = [];\n      }, lineEnd: function() {\n        var t2 = this._x, n2 = this._y, e2 = t2.length;\n        if (e2)\n          if (this._line ? this._context.lineTo(t2[0], n2[0]) : this._context.moveTo(t2[0], n2[0]), 2 === e2)\n            this._context.lineTo(t2[1], n2[1]);\n          else\n            for (var r2 = fw(t2), i2 = fw(n2), o2 = 0, a2 = 1; a2 < e2; ++o2, ++a2)\n              this._context.bezierCurveTo(r2[0][o2], i2[0][o2], r2[1][o2], i2[1][o2], t2[a2], n2[a2]);\n        (this._line || 0 !== this._line && 1 === e2) && this._context.closePath(), this._line = 1 - this._line, this._x = this._y = null;\n      }, point: function(t2, n2) {\n        this._x.push(+t2), this._y.push(+n2);\n      } }, sw.prototype = { areaStart: function() {\n        this._line = 0;\n      }, areaEnd: function() {\n        this._line = NaN;\n      }, lineStart: function() {\n        this._x = this._y = NaN, this._point = 0;\n      }, lineEnd: function() {\n        0 < this._t && this._t < 1 && 2 === this._point && this._context.lineTo(this._x, this._y), (this._line || 0 !== this._line && 1 === this._point) && this._context.closePath(), this._line >= 0 && (this._t = 1 - this._t, this._line = 1 - this._line);\n      }, point: function(t2, n2) {\n        switch (t2 = +t2, n2 = +n2, this._point) {\n          case 0:\n            this._point = 1, this._line ? this._context.lineTo(t2, n2) : this._context.moveTo(t2, n2);\n            break;\n          case 1:\n            this._point = 2;\n          default:\n            if (this._t <= 0)\n              this._context.lineTo(this._x, n2), this._context.lineTo(t2, n2);\n            else {\n              var e2 = this._x * (1 - this._t) + t2 * this._t;\n              this._context.lineTo(e2, this._y), this._context.lineTo(e2, n2);\n            }\n        }\n        this._x = t2, this._y = n2;\n      } };\n      var bw = (t2) => () => t2;\n      function mw(t2, { sourceEvent: n2, target: e2, transform: r2, dispatch: i2 }) {\n        Object.defineProperties(this, { type: { value: t2, enumerable: true, configurable: true }, sourceEvent: { value: n2, enumerable: true, configurable: true }, target: { value: e2, enumerable: true, configurable: true }, transform: { value: r2, enumerable: true, configurable: true }, _: { value: i2 } });\n      }\n      function xw(t2, n2, e2) {\n        this.k = t2, this.x = n2, this.y = e2;\n      }\n      xw.prototype = { constructor: xw, scale: function(t2) {\n        return 1 === t2 ? this : new xw(this.k * t2, this.x, this.y);\n      }, translate: function(t2, n2) {\n        return 0 === t2 & 0 === n2 ? this : new xw(this.k, this.x + this.k * t2, this.y + this.k * n2);\n      }, apply: function(t2) {\n        return [t2[0] * this.k + this.x, t2[1] * this.k + this.y];\n      }, applyX: function(t2) {\n        return t2 * this.k + this.x;\n      }, applyY: function(t2) {\n        return t2 * this.k + this.y;\n      }, invert: function(t2) {\n        return [(t2[0] - this.x) / this.k, (t2[1] - this.y) / this.k];\n      }, invertX: function(t2) {\n        return (t2 - this.x) / this.k;\n      }, invertY: function(t2) {\n        return (t2 - this.y) / this.k;\n      }, rescaleX: function(t2) {\n        return t2.copy().domain(t2.range().map(this.invertX, this).map(t2.invert, t2));\n      }, rescaleY: function(t2) {\n        return t2.copy().domain(t2.range().map(this.invertY, this).map(t2.invert, t2));\n      }, toString: function() {\n        return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n      } };\n      var ww = new xw(1, 0, 0);\n      function Mw(t2) {\n        for (; !t2.__zoom; )\n          if (!(t2 = t2.parentNode))\n            return ww;\n        return t2.__zoom;\n      }\n      function Tw(t2) {\n        t2.stopImmediatePropagation();\n      }\n      function Aw(t2) {\n        t2.preventDefault(), t2.stopImmediatePropagation();\n      }\n      function Sw(t2) {\n        return !(t2.ctrlKey && \"wheel\" !== t2.type || t2.button);\n      }\n      function Ew() {\n        var t2 = this;\n        return t2 instanceof SVGElement ? (t2 = t2.ownerSVGElement || t2).hasAttribute(\"viewBox\") ? [[(t2 = t2.viewBox.baseVal).x, t2.y], [t2.x + t2.width, t2.y + t2.height]] : [[0, 0], [t2.width.baseVal.value, t2.height.baseVal.value]] : [[0, 0], [t2.clientWidth, t2.clientHeight]];\n      }\n      function Nw() {\n        return this.__zoom || ww;\n      }\n      function kw(t2) {\n        return -t2.deltaY * (1 === t2.deltaMode ? 0.05 : t2.deltaMode ? 1 : 2e-3) * (t2.ctrlKey ? 10 : 1);\n      }\n      function Cw() {\n        return navigator.maxTouchPoints || \"ontouchstart\" in this;\n      }\n      function Pw(t2, n2, e2) {\n        var r2 = t2.invertX(n2[0][0]) - e2[0][0], i2 = t2.invertX(n2[1][0]) - e2[1][0], o2 = t2.invertY(n2[0][1]) - e2[0][1], a2 = t2.invertY(n2[1][1]) - e2[1][1];\n        return t2.translate(i2 > r2 ? (r2 + i2) / 2 : Math.min(0, r2) || Math.max(0, i2), a2 > o2 ? (o2 + a2) / 2 : Math.min(0, o2) || Math.max(0, a2));\n      }\n      Mw.prototype = xw.prototype, t.Adder = T, t.Delaunay = Lu, t.FormatSpecifier = tf, t.InternMap = InternMap, t.InternSet = InternSet, t.Node = Qd, t.Path = Ua, t.Voronoi = qu, t.ZoomTransform = xw, t.active = function(t2, n2) {\n        var e2, r2, i2 = t2.__transition;\n        if (i2) {\n          for (r2 in n2 = null == n2 ? null : n2 + \"\", i2)\n            if ((e2 = i2[r2]).state > qi && e2.name === n2)\n              return new po([[t2]], Zo, n2, +r2);\n        }\n        return null;\n      }, t.arc = function() {\n        var t2 = km, n2 = Cm, e2 = gm(0), r2 = null, i2 = Pm, o2 = zm, a2 = $m, u2 = null, c2 = Nm(f2);\n        function f2() {\n          var f3, s2, l2 = +t2.apply(this, arguments), h2 = +n2.apply(this, arguments), d2 = i2.apply(this, arguments) - Am, p2 = o2.apply(this, arguments) - Am, g2 = ym(p2 - d2), y2 = p2 > d2;\n          if (u2 || (u2 = f3 = c2()), h2 < l2 && (s2 = h2, h2 = l2, l2 = s2), h2 > Mm)\n            if (g2 > Sm - Mm)\n              u2.moveTo(h2 * _m(d2), h2 * xm(d2)), u2.arc(0, 0, h2, d2, p2, !y2), l2 > Mm && (u2.moveTo(l2 * _m(p2), l2 * xm(p2)), u2.arc(0, 0, l2, p2, d2, y2));\n            else {\n              var v2, _2, b2 = d2, m2 = p2, x2 = d2, w2 = p2, M2 = g2, T2 = g2, A2 = a2.apply(this, arguments) / 2, S2 = A2 > Mm && (r2 ? +r2.apply(this, arguments) : wm(l2 * l2 + h2 * h2)), E2 = mm(ym(h2 - l2) / 2, +e2.apply(this, arguments)), N2 = E2, k2 = E2;\n              if (S2 > Mm) {\n                var C2 = Em(S2 / l2 * xm(A2)), P2 = Em(S2 / h2 * xm(A2));\n                (M2 -= 2 * C2) > Mm ? (x2 += C2 *= y2 ? 1 : -1, w2 -= C2) : (M2 = 0, x2 = w2 = (d2 + p2) / 2), (T2 -= 2 * P2) > Mm ? (b2 += P2 *= y2 ? 1 : -1, m2 -= P2) : (T2 = 0, b2 = m2 = (d2 + p2) / 2);\n              }\n              var z2 = h2 * _m(b2), $2 = h2 * xm(b2), D2 = l2 * _m(w2), R2 = l2 * xm(w2);\n              if (E2 > Mm) {\n                var F2, q2 = h2 * _m(m2), U2 = h2 * xm(m2), I2 = l2 * _m(x2), O2 = l2 * xm(x2);\n                if (g2 < Tm)\n                  if (F2 = function(t3, n3, e3, r3, i3, o3, a3, u3) {\n                    var c3 = e3 - t3, f4 = r3 - n3, s3 = a3 - i3, l3 = u3 - o3, h3 = l3 * c3 - s3 * f4;\n                    if (!(h3 * h3 < Mm))\n                      return [t3 + (h3 = (s3 * (n3 - o3) - l3 * (t3 - i3)) / h3) * c3, n3 + h3 * f4];\n                  }(z2, $2, I2, O2, q2, U2, D2, R2)) {\n                    var B2 = z2 - F2[0], Y2 = $2 - F2[1], L2 = q2 - F2[0], j2 = U2 - F2[1], H2 = 1 / xm(function(t3) {\n                      return t3 > 1 ? 0 : t3 < -1 ? Tm : Math.acos(t3);\n                    }((B2 * L2 + Y2 * j2) / (wm(B2 * B2 + Y2 * Y2) * wm(L2 * L2 + j2 * j2))) / 2), X2 = wm(F2[0] * F2[0] + F2[1] * F2[1]);\n                    N2 = mm(E2, (l2 - X2) / (H2 - 1)), k2 = mm(E2, (h2 - X2) / (H2 + 1));\n                  } else\n                    N2 = k2 = 0;\n              }\n              T2 > Mm ? k2 > Mm ? (v2 = Dm(I2, O2, z2, $2, h2, k2, y2), _2 = Dm(q2, U2, D2, R2, h2, k2, y2), u2.moveTo(v2.cx + v2.x01, v2.cy + v2.y01), k2 < E2 ? u2.arc(v2.cx, v2.cy, k2, vm(v2.y01, v2.x01), vm(_2.y01, _2.x01), !y2) : (u2.arc(v2.cx, v2.cy, k2, vm(v2.y01, v2.x01), vm(v2.y11, v2.x11), !y2), u2.arc(0, 0, h2, vm(v2.cy + v2.y11, v2.cx + v2.x11), vm(_2.cy + _2.y11, _2.cx + _2.x11), !y2), u2.arc(_2.cx, _2.cy, k2, vm(_2.y11, _2.x11), vm(_2.y01, _2.x01), !y2))) : (u2.moveTo(z2, $2), u2.arc(0, 0, h2, b2, m2, !y2)) : u2.moveTo(z2, $2), l2 > Mm && M2 > Mm ? N2 > Mm ? (v2 = Dm(D2, R2, q2, U2, l2, -N2, y2), _2 = Dm(z2, $2, I2, O2, l2, -N2, y2), u2.lineTo(v2.cx + v2.x01, v2.cy + v2.y01), N2 < E2 ? u2.arc(v2.cx, v2.cy, N2, vm(v2.y01, v2.x01), vm(_2.y01, _2.x01), !y2) : (u2.arc(v2.cx, v2.cy, N2, vm(v2.y01, v2.x01), vm(v2.y11, v2.x11), !y2), u2.arc(0, 0, l2, vm(v2.cy + v2.y11, v2.cx + v2.x11), vm(_2.cy + _2.y11, _2.cx + _2.x11), y2), u2.arc(_2.cx, _2.cy, N2, vm(_2.y11, _2.x11), vm(_2.y01, _2.x01), !y2))) : u2.arc(0, 0, l2, w2, x2, y2) : u2.lineTo(D2, R2);\n            }\n          else\n            u2.moveTo(0, 0);\n          if (u2.closePath(), f3)\n            return u2 = null, f3 + \"\" || null;\n        }\n        return f2.centroid = function() {\n          var e3 = (+t2.apply(this, arguments) + +n2.apply(this, arguments)) / 2, r3 = (+i2.apply(this, arguments) + +o2.apply(this, arguments)) / 2 - Tm / 2;\n          return [_m(r3) * e3, xm(r3) * e3];\n        }, f2.innerRadius = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(+n3), f2) : t2;\n        }, f2.outerRadius = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : gm(+t3), f2) : n2;\n        }, f2.cornerRadius = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : gm(+t3), f2) : e2;\n        }, f2.padRadius = function(t3) {\n          return arguments.length ? (r2 = null == t3 ? null : \"function\" == typeof t3 ? t3 : gm(+t3), f2) : r2;\n        }, f2.startAngle = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : gm(+t3), f2) : i2;\n        }, f2.endAngle = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : gm(+t3), f2) : o2;\n        }, f2.padAngle = function(t3) {\n          return arguments.length ? (a2 = \"function\" == typeof t3 ? t3 : gm(+t3), f2) : a2;\n        }, f2.context = function(t3) {\n          return arguments.length ? (u2 = null == t3 ? null : t3, f2) : u2;\n        }, f2;\n      }, t.area = Ym, t.areaRadial = Zm, t.ascending = n, t.autoType = function(t2) {\n        for (var n2 in t2) {\n          var e2, r2, i2 = t2[n2].trim();\n          if (i2)\n            if (\"true\" === i2)\n              i2 = true;\n            else if (\"false\" === i2)\n              i2 = false;\n            else if (\"NaN\" === i2)\n              i2 = NaN;\n            else if (isNaN(e2 = +i2)) {\n              if (!(r2 = i2.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)))\n                continue;\n              yc && r2[4] && !r2[7] && (i2 = i2.replace(/-/g, \"/\").replace(/T/, \" \")), i2 = new Date(i2);\n            } else\n              i2 = e2;\n          else\n            i2 = null;\n          t2[n2] = i2;\n        }\n        return t2;\n      }, t.axisBottom = function(t2) {\n        return Pt(Mt, t2);\n      }, t.axisLeft = function(t2) {\n        return Pt(Tt, t2);\n      }, t.axisRight = function(t2) {\n        return Pt(wt, t2);\n      }, t.axisTop = function(t2) {\n        return Pt(xt, t2);\n      }, t.bin = Q, t.bisect = s, t.bisectCenter = f, t.bisectLeft = c, t.bisectRight = u, t.bisector = r, t.blob = function(t2, n2) {\n        return fetch(t2, n2).then(vc);\n      }, t.blur = function(t2, n2) {\n        if (!((n2 = +n2) >= 0))\n          throw new RangeError(\"invalid r\");\n        let e2 = t2.length;\n        if (!((e2 = Math.floor(e2)) >= 0))\n          throw new RangeError(\"invalid length\");\n        if (!e2 || !n2)\n          return t2;\n        const r2 = y(n2), i2 = t2.slice();\n        return r2(t2, i2, 0, e2, 1), r2(i2, t2, 0, e2, 1), r2(t2, i2, 0, e2, 1), t2;\n      }, t.blur2 = l, t.blurImage = h, t.brush = function() {\n        return wa(la);\n      }, t.brushSelection = function(t2) {\n        var n2 = t2.__brush;\n        return n2 ? n2.dim.output(n2.selection) : null;\n      }, t.brushX = function() {\n        return wa(fa);\n      }, t.brushY = function() {\n        return wa(sa);\n      }, t.buffer = function(t2, n2) {\n        return fetch(t2, n2).then(_c);\n      }, t.chord = function() {\n        return za(false, false);\n      }, t.chordDirected = function() {\n        return za(true, false);\n      }, t.chordTranspose = function() {\n        return za(false, true);\n      }, t.cluster = function() {\n        var t2 = Ld, n2 = 1, e2 = 1, r2 = false;\n        function i2(i3) {\n          var o2, a2 = 0;\n          i3.eachAfter(function(n3) {\n            var e3 = n3.children;\n            e3 ? (n3.x = function(t3) {\n              return t3.reduce(jd, 0) / t3.length;\n            }(e3), n3.y = function(t3) {\n              return 1 + t3.reduce(Hd, 0);\n            }(e3)) : (n3.x = o2 ? a2 += t2(n3, o2) : 0, n3.y = 0, o2 = n3);\n          });\n          var u2 = function(t3) {\n            for (var n3; n3 = t3.children; )\n              t3 = n3[0];\n            return t3;\n          }(i3), c2 = function(t3) {\n            for (var n3; n3 = t3.children; )\n              t3 = n3[n3.length - 1];\n            return t3;\n          }(i3), f2 = u2.x - t2(u2, c2) / 2, s2 = c2.x + t2(c2, u2) / 2;\n          return i3.eachAfter(r2 ? function(t3) {\n            t3.x = (t3.x - i3.x) * n2, t3.y = (i3.y - t3.y) * e2;\n          } : function(t3) {\n            t3.x = (t3.x - f2) / (s2 - f2) * n2, t3.y = (1 - (i3.y ? t3.y / i3.y : 1)) * e2;\n          });\n        }\n        return i2.separation = function(n3) {\n          return arguments.length ? (t2 = n3, i2) : t2;\n        }, i2.size = function(t3) {\n          return arguments.length ? (r2 = false, n2 = +t3[0], e2 = +t3[1], i2) : r2 ? null : [n2, e2];\n        }, i2.nodeSize = function(t3) {\n          return arguments.length ? (r2 = true, n2 = +t3[0], e2 = +t3[1], i2) : r2 ? [n2, e2] : null;\n        }, i2;\n      }, t.color = ze, t.contourDensity = function() {\n        var t2 = fu, n2 = su, e2 = lu, r2 = 960, i2 = 500, o2 = 20, a2 = 2, u2 = 3 * o2, c2 = r2 + 2 * u2 >> a2, f2 = i2 + 2 * u2 >> a2, s2 = Qa(20);\n        function h2(r3) {\n          var i3 = new Float32Array(c2 * f2), s3 = Math.pow(2, -a2), h3 = -1;\n          for (const o3 of r3) {\n            var d4 = (t2(o3, ++h3, r3) + u2) * s3, p3 = (n2(o3, h3, r3) + u2) * s3, g3 = +e2(o3, h3, r3);\n            if (g3 && d4 >= 0 && d4 < c2 && p3 >= 0 && p3 < f2) {\n              var y3 = Math.floor(d4), v3 = Math.floor(p3), _3 = d4 - y3 - 0.5, b2 = p3 - v3 - 0.5;\n              i3[y3 + v3 * c2] += (1 - _3) * (1 - b2) * g3, i3[y3 + 1 + v3 * c2] += _3 * (1 - b2) * g3, i3[y3 + 1 + (v3 + 1) * c2] += _3 * b2 * g3, i3[y3 + (v3 + 1) * c2] += (1 - _3) * b2 * g3;\n            }\n          }\n          return l({ data: i3, width: c2, height: f2 }, o2 * s3), i3;\n        }\n        function d2(t3) {\n          var n3 = h2(t3), e3 = s2(n3), r3 = Math.pow(2, 2 * a2);\n          return Array.isArray(e3) || (e3 = G(Number.MIN_VALUE, J(n3) / r3, e3)), iu().size([c2, f2]).thresholds(e3.map((t4) => t4 * r3))(n3).map((t4, n4) => (t4.value = +e3[n4], p2(t4)));\n        }\n        function p2(t3) {\n          return t3.coordinates.forEach(g2), t3;\n        }\n        function g2(t3) {\n          t3.forEach(y2);\n        }\n        function y2(t3) {\n          t3.forEach(v2);\n        }\n        function v2(t3) {\n          t3[0] = t3[0] * Math.pow(2, a2) - u2, t3[1] = t3[1] * Math.pow(2, a2) - u2;\n        }\n        function _2() {\n          return c2 = r2 + 2 * (u2 = 3 * o2) >> a2, f2 = i2 + 2 * u2 >> a2, d2;\n        }\n        return d2.contours = function(t3) {\n          var n3 = h2(t3), e3 = iu().size([c2, f2]), r3 = Math.pow(2, 2 * a2), i3 = (t4) => {\n            t4 = +t4;\n            var i4 = p2(e3.contour(n3, t4 * r3));\n            return i4.value = t4, i4;\n          };\n          return Object.defineProperty(i3, \"max\", { get: () => J(n3) / r3 }), i3;\n        }, d2.x = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : Qa(+n3), d2) : t2;\n        }, d2.y = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : Qa(+t3), d2) : n2;\n        }, d2.weight = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : Qa(+t3), d2) : e2;\n        }, d2.size = function(t3) {\n          if (!arguments.length)\n            return [r2, i2];\n          var n3 = +t3[0], e3 = +t3[1];\n          if (!(n3 >= 0 && e3 >= 0))\n            throw new Error(\"invalid size\");\n          return r2 = n3, i2 = e3, _2();\n        }, d2.cellSize = function(t3) {\n          if (!arguments.length)\n            return 1 << a2;\n          if (!((t3 = +t3) >= 1))\n            throw new Error(\"invalid cell size\");\n          return a2 = Math.floor(Math.log(t3) / Math.LN2), _2();\n        }, d2.thresholds = function(t3) {\n          return arguments.length ? (s2 = \"function\" == typeof t3 ? t3 : Array.isArray(t3) ? Qa(Za.call(t3)) : Qa(t3), d2) : s2;\n        }, d2.bandwidth = function(t3) {\n          if (!arguments.length)\n            return Math.sqrt(o2 * (o2 + 1));\n          if (!((t3 = +t3) >= 0))\n            throw new Error(\"invalid bandwidth\");\n          return o2 = (Math.sqrt(4 * t3 * t3 + 1) - 1) / 2, _2();\n        }, d2;\n      }, t.contours = iu, t.count = v, t.create = function(t2) {\n        return Zn(Yt(t2).call(document.documentElement));\n      }, t.creator = Yt, t.cross = function(...t2) {\n        const n2 = \"function\" == typeof t2[t2.length - 1] && /* @__PURE__ */ function(t3) {\n          return (n3) => t3(...n3);\n        }(t2.pop()), e2 = (t2 = t2.map(m)).map(_), r2 = t2.length - 1, i2 = new Array(r2 + 1).fill(0), o2 = [];\n        if (r2 < 0 || e2.some(b))\n          return o2;\n        for (; ; ) {\n          o2.push(i2.map((n3, e3) => t2[e3][n3]));\n          let a2 = r2;\n          for (; ++i2[a2] === e2[a2]; ) {\n            if (0 === a2)\n              return n2 ? o2.map(n2) : o2;\n            i2[a2--] = 0;\n          }\n        }\n      }, t.csv = wc, t.csvFormat = rc, t.csvFormatBody = ic, t.csvFormatRow = ac, t.csvFormatRows = oc, t.csvFormatValue = uc, t.csvParse = nc, t.csvParseRows = ec, t.cubehelix = Tr, t.cumsum = function(t2, n2) {\n        var e2 = 0, r2 = 0;\n        return Float64Array.from(t2, void 0 === n2 ? (t3) => e2 += +t3 || 0 : (i2) => e2 += +n2(i2, r2++, t2) || 0);\n      }, t.curveBasis = function(t2) {\n        return new Rx(t2);\n      }, t.curveBasisClosed = function(t2) {\n        return new Fx(t2);\n      }, t.curveBasisOpen = function(t2) {\n        return new qx(t2);\n      }, t.curveBumpX = tx, t.curveBumpY = nx, t.curveBundle = Ix, t.curveCardinal = Yx, t.curveCardinalClosed = jx, t.curveCardinalOpen = Xx, t.curveCatmullRom = Wx, t.curveCatmullRomClosed = Kx, t.curveCatmullRomOpen = Jx, t.curveLinear = Um, t.curveLinearClosed = function(t2) {\n        return new tw(t2);\n      }, t.curveMonotoneX = function(t2) {\n        return new ow(t2);\n      }, t.curveMonotoneY = function(t2) {\n        return new aw(t2);\n      }, t.curveNatural = function(t2) {\n        return new cw(t2);\n      }, t.curveStep = function(t2) {\n        return new sw(t2, 0.5);\n      }, t.curveStepAfter = function(t2) {\n        return new sw(t2, 1);\n      }, t.curveStepBefore = function(t2) {\n        return new sw(t2, 0);\n      }, t.descending = e, t.deviation = w, t.difference = function(t2, ...n2) {\n        t2 = new InternSet(t2);\n        for (const e2 of n2)\n          for (const n3 of e2)\n            t2.delete(n3);\n        return t2;\n      }, t.disjoint = function(t2, n2) {\n        const e2 = n2[Symbol.iterator](), r2 = new InternSet();\n        for (const n3 of t2) {\n          if (r2.has(n3))\n            return false;\n          let t3, i2;\n          for (; ({ value: t3, done: i2 } = e2.next()) && !i2; ) {\n            if (Object.is(n3, t3))\n              return false;\n            r2.add(t3);\n          }\n        }\n        return true;\n      }, t.dispatch = $t, t.drag = function() {\n        var t2, n2, e2, r2, i2 = se, o2 = le, a2 = he, u2 = de, c2 = {}, f2 = $t(\"start\", \"drag\", \"end\"), s2 = 0, l2 = 0;\n        function h2(t3) {\n          t3.on(\"mousedown.drag\", d2).filter(u2).on(\"touchstart.drag\", y2).on(\"touchmove.drag\", v2, ee).on(\"touchend.drag touchcancel.drag\", _2).style(\"touch-action\", \"none\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n        }\n        function d2(a3, u3) {\n          if (!r2 && i2.call(this, a3, u3)) {\n            var c3 = b2(this, o2.call(this, a3, u3), a3, u3, \"mouse\");\n            c3 && (Zn(a3.view).on(\"mousemove.drag\", p2, re).on(\"mouseup.drag\", g2, re), ae(a3.view), ie(a3), e2 = false, t2 = a3.clientX, n2 = a3.clientY, c3(\"start\", a3));\n          }\n        }\n        function p2(r3) {\n          if (oe(r3), !e2) {\n            var i3 = r3.clientX - t2, o3 = r3.clientY - n2;\n            e2 = i3 * i3 + o3 * o3 > l2;\n          }\n          c2.mouse(\"drag\", r3);\n        }\n        function g2(t3) {\n          Zn(t3.view).on(\"mousemove.drag mouseup.drag\", null), ue(t3.view, e2), oe(t3), c2.mouse(\"end\", t3);\n        }\n        function y2(t3, n3) {\n          if (i2.call(this, t3, n3)) {\n            var e3, r3, a3 = t3.changedTouches, u3 = o2.call(this, t3, n3), c3 = a3.length;\n            for (e3 = 0; e3 < c3; ++e3)\n              (r3 = b2(this, u3, t3, n3, a3[e3].identifier, a3[e3])) && (ie(t3), r3(\"start\", t3, a3[e3]));\n          }\n        }\n        function v2(t3) {\n          var n3, e3, r3 = t3.changedTouches, i3 = r3.length;\n          for (n3 = 0; n3 < i3; ++n3)\n            (e3 = c2[r3[n3].identifier]) && (oe(t3), e3(\"drag\", t3, r3[n3]));\n        }\n        function _2(t3) {\n          var n3, e3, i3 = t3.changedTouches, o3 = i3.length;\n          for (r2 && clearTimeout(r2), r2 = setTimeout(function() {\n            r2 = null;\n          }, 500), n3 = 0; n3 < o3; ++n3)\n            (e3 = c2[i3[n3].identifier]) && (ie(t3), e3(\"end\", t3, i3[n3]));\n        }\n        function b2(t3, n3, e3, r3, i3, o3) {\n          var u3, l3, d4, p3 = f2.copy(), g3 = ne(o3 || e3, n3);\n          if (null != (d4 = a2.call(t3, new fe(\"beforestart\", { sourceEvent: e3, target: h2, identifier: i3, active: s2, x: g3[0], y: g3[1], dx: 0, dy: 0, dispatch: p3 }), r3)))\n            return u3 = d4.x - g3[0] || 0, l3 = d4.y - g3[1] || 0, function e4(o4, a3, f3) {\n              var y3, v3 = g3;\n              switch (o4) {\n                case \"start\":\n                  c2[i3] = e4, y3 = s2++;\n                  break;\n                case \"end\":\n                  delete c2[i3], --s2;\n                case \"drag\":\n                  g3 = ne(f3 || a3, n3), y3 = s2;\n              }\n              p3.call(o4, t3, new fe(o4, { sourceEvent: a3, subject: d4, target: h2, identifier: i3, active: y3, x: g3[0] + u3, y: g3[1] + l3, dx: g3[0] - v3[0], dy: g3[1] - v3[1], dispatch: p3 }), r3);\n            };\n        }\n        return h2.filter = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : ce(!!t3), h2) : i2;\n        }, h2.container = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : ce(t3), h2) : o2;\n        }, h2.subject = function(t3) {\n          return arguments.length ? (a2 = \"function\" == typeof t3 ? t3 : ce(t3), h2) : a2;\n        }, h2.touchable = function(t3) {\n          return arguments.length ? (u2 = \"function\" == typeof t3 ? t3 : ce(!!t3), h2) : u2;\n        }, h2.on = function() {\n          var t3 = f2.on.apply(f2, arguments);\n          return t3 === f2 ? h2 : t3;\n        }, h2.clickDistance = function(t3) {\n          return arguments.length ? (l2 = (t3 = +t3) * t3, h2) : Math.sqrt(l2);\n        }, h2;\n      }, t.dragDisable = ae, t.dragEnable = ue, t.dsv = function(t2, n2, e2, r2) {\n        3 === arguments.length && \"function\" == typeof e2 && (r2 = e2, e2 = void 0);\n        var i2 = Ju(t2);\n        return mc(n2, e2).then(function(t3) {\n          return i2.parse(t3, r2);\n        });\n      }, t.dsvFormat = Ju, t.easeBack = Lo, t.easeBackIn = Bo, t.easeBackInOut = Lo, t.easeBackOut = Yo, t.easeBounce = Io, t.easeBounceIn = function(t2) {\n        return 1 - Io(1 - t2);\n      }, t.easeBounceInOut = function(t2) {\n        return ((t2 *= 2) <= 1 ? 1 - Io(1 - t2) : Io(t2 - 1) + 1) / 2;\n      }, t.easeBounceOut = Io, t.easeCircle = No, t.easeCircleIn = function(t2) {\n        return 1 - Math.sqrt(1 - t2 * t2);\n      }, t.easeCircleInOut = No, t.easeCircleOut = function(t2) {\n        return Math.sqrt(1 - --t2 * t2);\n      }, t.easeCubic = bo, t.easeCubicIn = function(t2) {\n        return t2 * t2 * t2;\n      }, t.easeCubicInOut = bo, t.easeCubicOut = function(t2) {\n        return --t2 * t2 * t2 + 1;\n      }, t.easeElastic = Xo, t.easeElasticIn = Ho, t.easeElasticInOut = Go, t.easeElasticOut = Xo, t.easeExp = Eo, t.easeExpIn = function(t2) {\n        return So(1 - +t2);\n      }, t.easeExpInOut = Eo, t.easeExpOut = function(t2) {\n        return 1 - So(t2);\n      }, t.easeLinear = (t2) => +t2, t.easePoly = wo, t.easePolyIn = mo, t.easePolyInOut = wo, t.easePolyOut = xo, t.easeQuad = _o, t.easeQuadIn = function(t2) {\n        return t2 * t2;\n      }, t.easeQuadInOut = _o, t.easeQuadOut = function(t2) {\n        return t2 * (2 - t2);\n      }, t.easeSin = Ao, t.easeSinIn = function(t2) {\n        return 1 == +t2 ? 1 : 1 - Math.cos(t2 * To);\n      }, t.easeSinInOut = Ao, t.easeSinOut = function(t2) {\n        return Math.sin(t2 * To);\n      }, t.every = function(t2, n2) {\n        if (\"function\" != typeof n2)\n          throw new TypeError(\"test is not a function\");\n        let e2 = -1;\n        for (const r2 of t2)\n          if (!n2(r2, ++e2, t2))\n            return false;\n        return true;\n      }, t.extent = M, t.fcumsum = function(t2, n2) {\n        const e2 = new T();\n        let r2 = -1;\n        return Float64Array.from(t2, void 0 === n2 ? (t3) => e2.add(+t3 || 0) : (i2) => e2.add(+n2(i2, ++r2, t2) || 0));\n      }, t.filter = function(t2, n2) {\n        if (\"function\" != typeof n2)\n          throw new TypeError(\"test is not a function\");\n        const e2 = [];\n        let r2 = -1;\n        for (const i2 of t2)\n          n2(i2, ++r2, t2) && e2.push(i2);\n        return e2;\n      }, t.flatGroup = function(t2, ...n2) {\n        return z(P(t2, ...n2), n2);\n      }, t.flatRollup = function(t2, n2, ...e2) {\n        return z(D(t2, n2, ...e2), e2);\n      }, t.forceCenter = function(t2, n2) {\n        var e2, r2 = 1;\n        function i2() {\n          var i3, o2, a2 = e2.length, u2 = 0, c2 = 0;\n          for (i3 = 0; i3 < a2; ++i3)\n            u2 += (o2 = e2[i3]).x, c2 += o2.y;\n          for (u2 = (u2 / a2 - t2) * r2, c2 = (c2 / a2 - n2) * r2, i3 = 0; i3 < a2; ++i3)\n            (o2 = e2[i3]).x -= u2, o2.y -= c2;\n        }\n        return null == t2 && (t2 = 0), null == n2 && (n2 = 0), i2.initialize = function(t3) {\n          e2 = t3;\n        }, i2.x = function(n3) {\n          return arguments.length ? (t2 = +n3, i2) : t2;\n        }, i2.y = function(t3) {\n          return arguments.length ? (n2 = +t3, i2) : n2;\n        }, i2.strength = function(t3) {\n          return arguments.length ? (r2 = +t3, i2) : r2;\n        }, i2;\n      }, t.forceCollide = function(t2) {\n        var n2, e2, r2, i2 = 1, o2 = 1;\n        function a2() {\n          for (var t3, a3, c3, f2, s2, l2, h2, d2 = n2.length, p2 = 0; p2 < o2; ++p2)\n            for (a3 = $c(n2, Ic, Oc).visitAfter(u2), t3 = 0; t3 < d2; ++t3)\n              c3 = n2[t3], l2 = e2[c3.index], h2 = l2 * l2, f2 = c3.x + c3.vx, s2 = c3.y + c3.vy, a3.visit(g2);\n          function g2(t4, n3, e3, o3, a4) {\n            var u3 = t4.data, d4 = t4.r, p3 = l2 + d4;\n            if (!u3)\n              return n3 > f2 + p3 || o3 < f2 - p3 || e3 > s2 + p3 || a4 < s2 - p3;\n            if (u3.index > c3.index) {\n              var g3 = f2 - u3.x - u3.vx, y2 = s2 - u3.y - u3.vy, v2 = g3 * g3 + y2 * y2;\n              v2 < p3 * p3 && (0 === g3 && (v2 += (g3 = Uc(r2)) * g3), 0 === y2 && (v2 += (y2 = Uc(r2)) * y2), v2 = (p3 - (v2 = Math.sqrt(v2))) / v2 * i2, c3.vx += (g3 *= v2) * (p3 = (d4 *= d4) / (h2 + d4)), c3.vy += (y2 *= v2) * p3, u3.vx -= g3 * (p3 = 1 - p3), u3.vy -= y2 * p3);\n            }\n          }\n        }\n        function u2(t3) {\n          if (t3.data)\n            return t3.r = e2[t3.data.index];\n          for (var n3 = t3.r = 0; n3 < 4; ++n3)\n            t3[n3] && t3[n3].r > t3.r && (t3.r = t3[n3].r);\n        }\n        function c2() {\n          if (n2) {\n            var r3, i3, o3 = n2.length;\n            for (e2 = new Array(o3), r3 = 0; r3 < o3; ++r3)\n              i3 = n2[r3], e2[i3.index] = +t2(i3, r3, n2);\n          }\n        }\n        return \"function\" != typeof t2 && (t2 = qc(null == t2 ? 1 : +t2)), a2.initialize = function(t3, e3) {\n          n2 = t3, r2 = e3, c2();\n        }, a2.iterations = function(t3) {\n          return arguments.length ? (o2 = +t3, a2) : o2;\n        }, a2.strength = function(t3) {\n          return arguments.length ? (i2 = +t3, a2) : i2;\n        }, a2.radius = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : qc(+n3), c2(), a2) : t2;\n        }, a2;\n      }, t.forceLink = function(t2) {\n        var n2, e2, r2, i2, o2, a2, u2 = Bc, c2 = function(t3) {\n          return 1 / Math.min(i2[t3.source.index], i2[t3.target.index]);\n        }, f2 = qc(30), s2 = 1;\n        function l2(r3) {\n          for (var i3 = 0, u3 = t2.length; i3 < s2; ++i3)\n            for (var c3, f3, l3, h3, d4, p3, g2, y2 = 0; y2 < u3; ++y2)\n              f3 = (c3 = t2[y2]).source, h3 = (l3 = c3.target).x + l3.vx - f3.x - f3.vx || Uc(a2), d4 = l3.y + l3.vy - f3.y - f3.vy || Uc(a2), h3 *= p3 = ((p3 = Math.sqrt(h3 * h3 + d4 * d4)) - e2[y2]) / p3 * r3 * n2[y2], d4 *= p3, l3.vx -= h3 * (g2 = o2[y2]), l3.vy -= d4 * g2, f3.vx += h3 * (g2 = 1 - g2), f3.vy += d4 * g2;\n        }\n        function h2() {\n          if (r2) {\n            var a3, c3, f3 = r2.length, s3 = t2.length, l3 = new Map(r2.map((t3, n3) => [u2(t3, n3, r2), t3]));\n            for (a3 = 0, i2 = new Array(f3); a3 < s3; ++a3)\n              (c3 = t2[a3]).index = a3, \"object\" != typeof c3.source && (c3.source = Yc(l3, c3.source)), \"object\" != typeof c3.target && (c3.target = Yc(l3, c3.target)), i2[c3.source.index] = (i2[c3.source.index] || 0) + 1, i2[c3.target.index] = (i2[c3.target.index] || 0) + 1;\n            for (a3 = 0, o2 = new Array(s3); a3 < s3; ++a3)\n              c3 = t2[a3], o2[a3] = i2[c3.source.index] / (i2[c3.source.index] + i2[c3.target.index]);\n            n2 = new Array(s3), d2(), e2 = new Array(s3), p2();\n          }\n        }\n        function d2() {\n          if (r2)\n            for (var e3 = 0, i3 = t2.length; e3 < i3; ++e3)\n              n2[e3] = +c2(t2[e3], e3, t2);\n        }\n        function p2() {\n          if (r2)\n            for (var n3 = 0, i3 = t2.length; n3 < i3; ++n3)\n              e2[n3] = +f2(t2[n3], n3, t2);\n        }\n        return null == t2 && (t2 = []), l2.initialize = function(t3, n3) {\n          r2 = t3, a2 = n3, h2();\n        }, l2.links = function(n3) {\n          return arguments.length ? (t2 = n3, h2(), l2) : t2;\n        }, l2.id = function(t3) {\n          return arguments.length ? (u2 = t3, l2) : u2;\n        }, l2.iterations = function(t3) {\n          return arguments.length ? (s2 = +t3, l2) : s2;\n        }, l2.strength = function(t3) {\n          return arguments.length ? (c2 = \"function\" == typeof t3 ? t3 : qc(+t3), d2(), l2) : c2;\n        }, l2.distance = function(t3) {\n          return arguments.length ? (f2 = \"function\" == typeof t3 ? t3 : qc(+t3), p2(), l2) : f2;\n        }, l2;\n      }, t.forceManyBody = function() {\n        var t2, n2, e2, r2, i2, o2 = qc(-30), a2 = 1, u2 = 1 / 0, c2 = 0.81;\n        function f2(e3) {\n          var i3, o3 = t2.length, a3 = $c(t2, Xc, Gc).visitAfter(l2);\n          for (r2 = e3, i3 = 0; i3 < o3; ++i3)\n            n2 = t2[i3], a3.visit(h2);\n        }\n        function s2() {\n          if (t2) {\n            var n3, e3, r3 = t2.length;\n            for (i2 = new Array(r3), n3 = 0; n3 < r3; ++n3)\n              e3 = t2[n3], i2[e3.index] = +o2(e3, n3, t2);\n          }\n        }\n        function l2(t3) {\n          var n3, e3, r3, o3, a3, u3 = 0, c3 = 0;\n          if (t3.length) {\n            for (r3 = o3 = a3 = 0; a3 < 4; ++a3)\n              (n3 = t3[a3]) && (e3 = Math.abs(n3.value)) && (u3 += n3.value, c3 += e3, r3 += e3 * n3.x, o3 += e3 * n3.y);\n            t3.x = r3 / c3, t3.y = o3 / c3;\n          } else {\n            (n3 = t3).x = n3.data.x, n3.y = n3.data.y;\n            do {\n              u3 += i2[n3.data.index];\n            } while (n3 = n3.next);\n          }\n          t3.value = u3;\n        }\n        function h2(t3, o3, f3, s3) {\n          if (!t3.value)\n            return true;\n          var l3 = t3.x - n2.x, h3 = t3.y - n2.y, d2 = s3 - o3, p2 = l3 * l3 + h3 * h3;\n          if (d2 * d2 / c2 < p2)\n            return p2 < u2 && (0 === l3 && (p2 += (l3 = Uc(e2)) * l3), 0 === h3 && (p2 += (h3 = Uc(e2)) * h3), p2 < a2 && (p2 = Math.sqrt(a2 * p2)), n2.vx += l3 * t3.value * r2 / p2, n2.vy += h3 * t3.value * r2 / p2), true;\n          if (!(t3.length || p2 >= u2)) {\n            (t3.data !== n2 || t3.next) && (0 === l3 && (p2 += (l3 = Uc(e2)) * l3), 0 === h3 && (p2 += (h3 = Uc(e2)) * h3), p2 < a2 && (p2 = Math.sqrt(a2 * p2)));\n            do {\n              t3.data !== n2 && (d2 = i2[t3.data.index] * r2 / p2, n2.vx += l3 * d2, n2.vy += h3 * d2);\n            } while (t3 = t3.next);\n          }\n        }\n        return f2.initialize = function(n3, r3) {\n          t2 = n3, e2 = r3, s2();\n        }, f2.strength = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : qc(+t3), s2(), f2) : o2;\n        }, f2.distanceMin = function(t3) {\n          return arguments.length ? (a2 = t3 * t3, f2) : Math.sqrt(a2);\n        }, f2.distanceMax = function(t3) {\n          return arguments.length ? (u2 = t3 * t3, f2) : Math.sqrt(u2);\n        }, f2.theta = function(t3) {\n          return arguments.length ? (c2 = t3 * t3, f2) : Math.sqrt(c2);\n        }, f2;\n      }, t.forceRadial = function(t2, n2, e2) {\n        var r2, i2, o2, a2 = qc(0.1);\n        function u2(t3) {\n          for (var a3 = 0, u3 = r2.length; a3 < u3; ++a3) {\n            var c3 = r2[a3], f2 = c3.x - n2 || 1e-6, s2 = c3.y - e2 || 1e-6, l2 = Math.sqrt(f2 * f2 + s2 * s2), h2 = (o2[a3] - l2) * i2[a3] * t3 / l2;\n            c3.vx += f2 * h2, c3.vy += s2 * h2;\n          }\n        }\n        function c2() {\n          if (r2) {\n            var n3, e3 = r2.length;\n            for (i2 = new Array(e3), o2 = new Array(e3), n3 = 0; n3 < e3; ++n3)\n              o2[n3] = +t2(r2[n3], n3, r2), i2[n3] = isNaN(o2[n3]) ? 0 : +a2(r2[n3], n3, r2);\n          }\n        }\n        return \"function\" != typeof t2 && (t2 = qc(+t2)), null == n2 && (n2 = 0), null == e2 && (e2 = 0), u2.initialize = function(t3) {\n          r2 = t3, c2();\n        }, u2.strength = function(t3) {\n          return arguments.length ? (a2 = \"function\" == typeof t3 ? t3 : qc(+t3), c2(), u2) : a2;\n        }, u2.radius = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : qc(+n3), c2(), u2) : t2;\n        }, u2.x = function(t3) {\n          return arguments.length ? (n2 = +t3, u2) : n2;\n        }, u2.y = function(t3) {\n          return arguments.length ? (e2 = +t3, u2) : e2;\n        }, u2;\n      }, t.forceSimulation = function(t2) {\n        var n2, e2 = 1, r2 = 1e-3, i2 = 1 - Math.pow(r2, 1 / 300), o2 = 0, a2 = 0.6, u2 = /* @__PURE__ */ new Map(), c2 = Ni(l2), f2 = $t(\"tick\", \"end\"), s2 = /* @__PURE__ */ function() {\n          let t3 = 1;\n          return () => (t3 = (Lc * t3 + jc) % Hc) / Hc;\n        }();\n        function l2() {\n          h2(), f2.call(\"tick\", n2), e2 < r2 && (c2.stop(), f2.call(\"end\", n2));\n        }\n        function h2(r3) {\n          var c3, f3, s3 = t2.length;\n          void 0 === r3 && (r3 = 1);\n          for (var l3 = 0; l3 < r3; ++l3)\n            for (e2 += (o2 - e2) * i2, u2.forEach(function(t3) {\n              t3(e2);\n            }), c3 = 0; c3 < s3; ++c3)\n              null == (f3 = t2[c3]).fx ? f3.x += f3.vx *= a2 : (f3.x = f3.fx, f3.vx = 0), null == f3.fy ? f3.y += f3.vy *= a2 : (f3.y = f3.fy, f3.vy = 0);\n          return n2;\n        }\n        function d2() {\n          for (var n3, e3 = 0, r3 = t2.length; e3 < r3; ++e3) {\n            if ((n3 = t2[e3]).index = e3, null != n3.fx && (n3.x = n3.fx), null != n3.fy && (n3.y = n3.fy), isNaN(n3.x) || isNaN(n3.y)) {\n              var i3 = 10 * Math.sqrt(0.5 + e3), o3 = e3 * Vc;\n              n3.x = i3 * Math.cos(o3), n3.y = i3 * Math.sin(o3);\n            }\n            (isNaN(n3.vx) || isNaN(n3.vy)) && (n3.vx = n3.vy = 0);\n          }\n        }\n        function p2(n3) {\n          return n3.initialize && n3.initialize(t2, s2), n3;\n        }\n        return null == t2 && (t2 = []), d2(), n2 = { tick: h2, restart: function() {\n          return c2.restart(l2), n2;\n        }, stop: function() {\n          return c2.stop(), n2;\n        }, nodes: function(e3) {\n          return arguments.length ? (t2 = e3, d2(), u2.forEach(p2), n2) : t2;\n        }, alpha: function(t3) {\n          return arguments.length ? (e2 = +t3, n2) : e2;\n        }, alphaMin: function(t3) {\n          return arguments.length ? (r2 = +t3, n2) : r2;\n        }, alphaDecay: function(t3) {\n          return arguments.length ? (i2 = +t3, n2) : +i2;\n        }, alphaTarget: function(t3) {\n          return arguments.length ? (o2 = +t3, n2) : o2;\n        }, velocityDecay: function(t3) {\n          return arguments.length ? (a2 = 1 - t3, n2) : 1 - a2;\n        }, randomSource: function(t3) {\n          return arguments.length ? (s2 = t3, u2.forEach(p2), n2) : s2;\n        }, force: function(t3, e3) {\n          return arguments.length > 1 ? (null == e3 ? u2.delete(t3) : u2.set(t3, p2(e3)), n2) : u2.get(t3);\n        }, find: function(n3, e3, r3) {\n          var i3, o3, a3, u3, c3, f3 = 0, s3 = t2.length;\n          for (null == r3 ? r3 = 1 / 0 : r3 *= r3, f3 = 0; f3 < s3; ++f3)\n            (a3 = (i3 = n3 - (u3 = t2[f3]).x) * i3 + (o3 = e3 - u3.y) * o3) < r3 && (c3 = u3, r3 = a3);\n          return c3;\n        }, on: function(t3, e3) {\n          return arguments.length > 1 ? (f2.on(t3, e3), n2) : f2.on(t3);\n        } };\n      }, t.forceX = function(t2) {\n        var n2, e2, r2, i2 = qc(0.1);\n        function o2(t3) {\n          for (var i3, o3 = 0, a3 = n2.length; o3 < a3; ++o3)\n            (i3 = n2[o3]).vx += (r2[o3] - i3.x) * e2[o3] * t3;\n        }\n        function a2() {\n          if (n2) {\n            var o3, a3 = n2.length;\n            for (e2 = new Array(a3), r2 = new Array(a3), o3 = 0; o3 < a3; ++o3)\n              e2[o3] = isNaN(r2[o3] = +t2(n2[o3], o3, n2)) ? 0 : +i2(n2[o3], o3, n2);\n          }\n        }\n        return \"function\" != typeof t2 && (t2 = qc(null == t2 ? 0 : +t2)), o2.initialize = function(t3) {\n          n2 = t3, a2();\n        }, o2.strength = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : qc(+t3), a2(), o2) : i2;\n        }, o2.x = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : qc(+n3), a2(), o2) : t2;\n        }, o2;\n      }, t.forceY = function(t2) {\n        var n2, e2, r2, i2 = qc(0.1);\n        function o2(t3) {\n          for (var i3, o3 = 0, a3 = n2.length; o3 < a3; ++o3)\n            (i3 = n2[o3]).vy += (r2[o3] - i3.y) * e2[o3] * t3;\n        }\n        function a2() {\n          if (n2) {\n            var o3, a3 = n2.length;\n            for (e2 = new Array(a3), r2 = new Array(a3), o3 = 0; o3 < a3; ++o3)\n              e2[o3] = isNaN(r2[o3] = +t2(n2[o3], o3, n2)) ? 0 : +i2(n2[o3], o3, n2);\n          }\n        }\n        return \"function\" != typeof t2 && (t2 = qc(null == t2 ? 0 : +t2)), o2.initialize = function(t3) {\n          n2 = t3, a2();\n        }, o2.strength = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : qc(+t3), a2(), o2) : i2;\n        }, o2.y = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : qc(+n3), a2(), o2) : t2;\n        }, o2;\n      }, t.formatDefaultLocale = ff, t.formatLocale = cf, t.formatSpecifier = Jc, t.fsum = function(t2, n2) {\n        const e2 = new T();\n        if (void 0 === n2)\n          for (let n3 of t2)\n            (n3 = +n3) && e2.add(n3);\n        else {\n          let r2 = -1;\n          for (let i2 of t2)\n            (i2 = +n2(i2, ++r2, t2)) && e2.add(i2);\n        }\n        return +e2;\n      }, t.geoAlbers = xd, t.geoAlbersUsa = function() {\n        var t2, n2, e2, r2, i2, o2, a2 = xd(), u2 = md().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), c2 = md().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), f2 = { point: function(t3, n3) {\n          o2 = [t3, n3];\n        } };\n        function s2(t3) {\n          var n3 = t3[0], a3 = t3[1];\n          return o2 = null, e2.point(n3, a3), o2 || (r2.point(n3, a3), o2) || (i2.point(n3, a3), o2);\n        }\n        function l2() {\n          return t2 = n2 = null, s2;\n        }\n        return s2.invert = function(t3) {\n          var n3 = a2.scale(), e3 = a2.translate(), r3 = (t3[0] - e3[0]) / n3, i3 = (t3[1] - e3[1]) / n3;\n          return (i3 >= 0.12 && i3 < 0.234 && r3 >= -0.425 && r3 < -0.214 ? u2 : i3 >= 0.166 && i3 < 0.234 && r3 >= -0.214 && r3 < -0.115 ? c2 : a2).invert(t3);\n        }, s2.stream = function(e3) {\n          return t2 && n2 === e3 ? t2 : (r3 = [a2.stream(n2 = e3), u2.stream(e3), c2.stream(e3)], i3 = r3.length, t2 = { point: function(t3, n3) {\n            for (var e4 = -1; ++e4 < i3; )\n              r3[e4].point(t3, n3);\n          }, sphere: function() {\n            for (var t3 = -1; ++t3 < i3; )\n              r3[t3].sphere();\n          }, lineStart: function() {\n            for (var t3 = -1; ++t3 < i3; )\n              r3[t3].lineStart();\n          }, lineEnd: function() {\n            for (var t3 = -1; ++t3 < i3; )\n              r3[t3].lineEnd();\n          }, polygonStart: function() {\n            for (var t3 = -1; ++t3 < i3; )\n              r3[t3].polygonStart();\n          }, polygonEnd: function() {\n            for (var t3 = -1; ++t3 < i3; )\n              r3[t3].polygonEnd();\n          } });\n          var r3, i3;\n        }, s2.precision = function(t3) {\n          return arguments.length ? (a2.precision(t3), u2.precision(t3), c2.precision(t3), l2()) : a2.precision();\n        }, s2.scale = function(t3) {\n          return arguments.length ? (a2.scale(t3), u2.scale(0.35 * t3), c2.scale(t3), s2.translate(a2.translate())) : a2.scale();\n        }, s2.translate = function(t3) {\n          if (!arguments.length)\n            return a2.translate();\n          var n3 = a2.scale(), o3 = +t3[0], s3 = +t3[1];\n          return e2 = a2.translate(t3).clipExtent([[o3 - 0.455 * n3, s3 - 0.238 * n3], [o3 + 0.455 * n3, s3 + 0.238 * n3]]).stream(f2), r2 = u2.translate([o3 - 0.307 * n3, s3 + 0.201 * n3]).clipExtent([[o3 - 0.425 * n3 + df, s3 + 0.12 * n3 + df], [o3 - 0.214 * n3 - df, s3 + 0.234 * n3 - df]]).stream(f2), i2 = c2.translate([o3 - 0.205 * n3, s3 + 0.212 * n3]).clipExtent([[o3 - 0.214 * n3 + df, s3 + 0.166 * n3 + df], [o3 - 0.115 * n3 - df, s3 + 0.234 * n3 - df]]).stream(f2), l2();\n        }, s2.fitExtent = function(t3, n3) {\n          return ud(s2, t3, n3);\n        }, s2.fitSize = function(t3, n3) {\n          return cd(s2, t3, n3);\n        }, s2.fitWidth = function(t3, n3) {\n          return fd(s2, t3, n3);\n        }, s2.fitHeight = function(t3, n3) {\n          return sd(s2, t3, n3);\n        }, s2.scale(1070);\n      }, t.geoArea = function(t2) {\n        return us = new T(), Lf(t2, cs), 2 * us;\n      }, t.geoAzimuthalEqualArea = function() {\n        return yd(Td).scale(124.75).clipAngle(179.999);\n      }, t.geoAzimuthalEqualAreaRaw = Td, t.geoAzimuthalEquidistant = function() {\n        return yd(Ad).scale(79.4188).clipAngle(179.999);\n      }, t.geoAzimuthalEquidistantRaw = Ad, t.geoBounds = function(t2) {\n        var n2, e2, r2, i2, o2, a2, u2;\n        if (Qf = Kf = -(Wf = Zf = 1 / 0), is = [], Lf(t2, Fs), e2 = is.length) {\n          for (is.sort(Hs), n2 = 1, o2 = [r2 = is[0]]; n2 < e2; ++n2)\n            Xs(r2, (i2 = is[n2])[0]) || Xs(r2, i2[1]) ? (js(r2[0], i2[1]) > js(r2[0], r2[1]) && (r2[1] = i2[1]), js(i2[0], r2[1]) > js(r2[0], r2[1]) && (r2[0] = i2[0])) : o2.push(r2 = i2);\n          for (a2 = -1 / 0, n2 = 0, r2 = o2[e2 = o2.length - 1]; n2 <= e2; r2 = i2, ++n2)\n            i2 = o2[n2], (u2 = js(r2[1], i2[0])) > a2 && (a2 = u2, Wf = i2[0], Kf = r2[1]);\n        }\n        return is = os = null, Wf === 1 / 0 || Zf === 1 / 0 ? [[NaN, NaN], [NaN, NaN]] : [[Wf, Zf], [Kf, Qf]];\n      }, t.geoCentroid = function(t2) {\n        ms = xs = ws = Ms = Ts = As = Ss = Es = 0, Ns = new T(), ks = new T(), Cs = new T(), Lf(t2, Gs);\n        var n2 = +Ns, e2 = +ks, r2 = +Cs, i2 = Ef(n2, e2, r2);\n        return i2 < pf && (n2 = As, e2 = Ss, r2 = Es, xs < df && (n2 = ws, e2 = Ms, r2 = Ts), (i2 = Ef(n2, e2, r2)) < pf) ? [NaN, NaN] : [Mf(e2, n2) * bf, Rf(r2 / i2) * bf];\n      }, t.geoCircle = function() {\n        var t2, n2, e2 = il([0, 0]), r2 = il(90), i2 = il(6), o2 = { point: function(e3, r3) {\n          t2.push(e3 = n2(e3, r3)), e3[0] *= bf, e3[1] *= bf;\n        } };\n        function a2() {\n          var a3 = e2.apply(this, arguments), u2 = r2.apply(this, arguments) * mf, c2 = i2.apply(this, arguments) * mf;\n          return t2 = [], n2 = ul(-a3[0] * mf, -a3[1] * mf, 0).invert, hl(o2, u2, c2, 1), a3 = { type: \"Polygon\", coordinates: [t2] }, t2 = n2 = null, a3;\n        }\n        return a2.center = function(t3) {\n          return arguments.length ? (e2 = \"function\" == typeof t3 ? t3 : il([+t3[0], +t3[1]]), a2) : e2;\n        }, a2.radius = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : il(+t3), a2) : r2;\n        }, a2.precision = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : il(+t3), a2) : i2;\n        }, a2;\n      }, t.geoClipAntimeridian = Tl, t.geoClipCircle = Al, t.geoClipExtent = function() {\n        var t2, n2, e2, r2 = 0, i2 = 0, o2 = 960, a2 = 500;\n        return e2 = { stream: function(e3) {\n          return t2 && n2 === e3 ? t2 : t2 = zl(r2, i2, o2, a2)(n2 = e3);\n        }, extent: function(u2) {\n          return arguments.length ? (r2 = +u2[0][0], i2 = +u2[0][1], o2 = +u2[1][0], a2 = +u2[1][1], t2 = n2 = null, e2) : [[r2, i2], [o2, a2]];\n        } };\n      }, t.geoClipRectangle = zl, t.geoConicConformal = function() {\n        return _d(kd).scale(109.5).parallels([30, 30]);\n      }, t.geoConicConformalRaw = kd, t.geoConicEqualArea = md, t.geoConicEqualAreaRaw = bd, t.geoConicEquidistant = function() {\n        return _d(Pd).scale(131.154).center([0, 13.9389]);\n      }, t.geoConicEquidistantRaw = Pd, t.geoContains = function(t2, n2) {\n        return (t2 && Bl.hasOwnProperty(t2.type) ? Bl[t2.type] : Ll)(t2, n2);\n      }, t.geoDistance = Ol, t.geoEqualEarth = function() {\n        return yd(qd).scale(177.158);\n      }, t.geoEqualEarthRaw = qd, t.geoEquirectangular = function() {\n        return yd(Cd).scale(152.63);\n      }, t.geoEquirectangularRaw = Cd, t.geoGnomonic = function() {\n        return yd(Ud).scale(144.049).clipAngle(60);\n      }, t.geoGnomonicRaw = Ud, t.geoGraticule = Kl, t.geoGraticule10 = function() {\n        return Kl()();\n      }, t.geoIdentity = function() {\n        var t2, n2, e2, r2, i2, o2, a2, u2 = 1, c2 = 0, f2 = 0, s2 = 1, l2 = 1, h2 = 0, d2 = null, p2 = 1, g2 = 1, y2 = id({ point: function(t3, n3) {\n          var e3 = b2([t3, n3]);\n          this.stream.point(e3[0], e3[1]);\n        } }), v2 = eh;\n        function _2() {\n          return p2 = u2 * s2, g2 = u2 * l2, o2 = a2 = null, b2;\n        }\n        function b2(e3) {\n          var r3 = e3[0] * p2, i3 = e3[1] * g2;\n          if (h2) {\n            var o3 = i3 * t2 - r3 * n2;\n            r3 = r3 * t2 + i3 * n2, i3 = o3;\n          }\n          return [r3 + c2, i3 + f2];\n        }\n        return b2.invert = function(e3) {\n          var r3 = e3[0] - c2, i3 = e3[1] - f2;\n          if (h2) {\n            var o3 = i3 * t2 + r3 * n2;\n            r3 = r3 * t2 - i3 * n2, i3 = o3;\n          }\n          return [r3 / p2, i3 / g2];\n        }, b2.stream = function(t3) {\n          return o2 && a2 === t3 ? o2 : o2 = y2(v2(a2 = t3));\n        }, b2.postclip = function(t3) {\n          return arguments.length ? (v2 = t3, d2 = e2 = r2 = i2 = null, _2()) : v2;\n        }, b2.clipExtent = function(t3) {\n          return arguments.length ? (v2 = null == t3 ? (d2 = e2 = r2 = i2 = null, eh) : zl(d2 = +t3[0][0], e2 = +t3[0][1], r2 = +t3[1][0], i2 = +t3[1][1]), _2()) : null == d2 ? null : [[d2, e2], [r2, i2]];\n        }, b2.scale = function(t3) {\n          return arguments.length ? (u2 = +t3, _2()) : u2;\n        }, b2.translate = function(t3) {\n          return arguments.length ? (c2 = +t3[0], f2 = +t3[1], _2()) : [c2, f2];\n        }, b2.angle = function(e3) {\n          return arguments.length ? (n2 = Cf(h2 = e3 % 360 * mf), t2 = Tf(h2), _2()) : h2 * bf;\n        }, b2.reflectX = function(t3) {\n          return arguments.length ? (s2 = t3 ? -1 : 1, _2()) : s2 < 0;\n        }, b2.reflectY = function(t3) {\n          return arguments.length ? (l2 = t3 ? -1 : 1, _2()) : l2 < 0;\n        }, b2.fitExtent = function(t3, n3) {\n          return ud(b2, t3, n3);\n        }, b2.fitSize = function(t3, n3) {\n          return cd(b2, t3, n3);\n        }, b2.fitWidth = function(t3, n3) {\n          return fd(b2, t3, n3);\n        }, b2.fitHeight = function(t3, n3) {\n          return sd(b2, t3, n3);\n        }, b2;\n      }, t.geoInterpolate = function(t2, n2) {\n        var e2 = t2[0] * mf, r2 = t2[1] * mf, i2 = n2[0] * mf, o2 = n2[1] * mf, a2 = Tf(r2), u2 = Cf(r2), c2 = Tf(o2), f2 = Cf(o2), s2 = a2 * Tf(e2), l2 = a2 * Cf(e2), h2 = c2 * Tf(i2), d2 = c2 * Cf(i2), p2 = 2 * Rf(zf(Ff(o2 - r2) + a2 * c2 * Ff(i2 - e2))), g2 = Cf(p2), y2 = p2 ? function(t3) {\n          var n3 = Cf(t3 *= p2) / g2, e3 = Cf(p2 - t3) / g2, r3 = e3 * s2 + n3 * h2, i3 = e3 * l2 + n3 * d2, o3 = e3 * u2 + n3 * f2;\n          return [Mf(i3, r3) * bf, Mf(o3, zf(r3 * r3 + i3 * i3)) * bf];\n        } : function() {\n          return [e2 * bf, r2 * bf];\n        };\n        return y2.distance = p2, y2;\n      }, t.geoLength = ql, t.geoMercator = function() {\n        return Ed(Sd).scale(961 / _f);\n      }, t.geoMercatorRaw = Sd, t.geoNaturalEarth1 = function() {\n        return yd(Id).scale(175.295);\n      }, t.geoNaturalEarth1Raw = Id, t.geoOrthographic = function() {\n        return yd(Od).scale(249.5).clipAngle(90 + df);\n      }, t.geoOrthographicRaw = Od, t.geoPath = function(t2, n2) {\n        let e2, r2, i2 = 3, o2 = 4.5;\n        function a2(t3) {\n          return t3 && (\"function\" == typeof o2 && r2.pointRadius(+o2.apply(this, arguments)), Lf(t3, e2(r2))), r2.result();\n        }\n        return a2.area = function(t3) {\n          return Lf(t3, e2(sh)), sh.result();\n        }, a2.measure = function(t3) {\n          return Lf(t3, e2(Kh)), Kh.result();\n        }, a2.bounds = function(t3) {\n          return Lf(t3, e2(mh)), mh.result();\n        }, a2.centroid = function(t3) {\n          return Lf(t3, e2(Oh)), Oh.result();\n        }, a2.projection = function(n3) {\n          return arguments.length ? (e2 = null == n3 ? (t2 = null, eh) : (t2 = n3).stream, a2) : t2;\n        }, a2.context = function(t3) {\n          return arguments.length ? (r2 = null == t3 ? (n2 = null, new ed(i2)) : new Bh(n2 = t3), \"function\" != typeof o2 && r2.pointRadius(o2), a2) : n2;\n        }, a2.pointRadius = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : (r2.pointRadius(+t3), +t3), a2) : o2;\n        }, a2.digits = function(t3) {\n          if (!arguments.length)\n            return i2;\n          if (null == t3)\n            i2 = null;\n          else {\n            const n3 = Math.floor(t3);\n            if (!(n3 >= 0))\n              throw new RangeError(`invalid digits: ${t3}`);\n            i2 = n3;\n          }\n          return null === n2 && (r2 = new ed(i2)), a2;\n        }, a2.projection(t2).digits(i2).context(n2);\n      }, t.geoProjection = yd, t.geoProjectionMutator = vd, t.geoRotation = ll, t.geoStereographic = function() {\n        return yd(Bd).scale(250).clipAngle(142);\n      }, t.geoStereographicRaw = Bd, t.geoStream = Lf, t.geoTransform = function(t2) {\n        return { stream: id(t2) };\n      }, t.geoTransverseMercator = function() {\n        var t2 = Ed(Yd), n2 = t2.center, e2 = t2.rotate;\n        return t2.center = function(t3) {\n          return arguments.length ? n2([-t3[1], t3[0]]) : [(t3 = n2())[1], -t3[0]];\n        }, t2.rotate = function(t3) {\n          return arguments.length ? e2([t3[0], t3[1], t3.length > 2 ? t3[2] + 90 : 90]) : [(t3 = e2())[0], t3[1], t3[2] - 90];\n        }, e2([0, 0, 90]).scale(159.155);\n      }, t.geoTransverseMercatorRaw = Yd, t.gray = function(t2, n2) {\n        return new ur(t2, 0, 0, null == n2 ? 1 : n2);\n      }, t.greatest = ot, t.greatestIndex = function(t2, e2 = n) {\n        if (1 === e2.length)\n          return tt(t2, e2);\n        let r2, i2 = -1, o2 = -1;\n        for (const n2 of t2)\n          ++o2, (i2 < 0 ? 0 === e2(n2, n2) : e2(n2, r2) > 0) && (r2 = n2, i2 = o2);\n        return i2;\n      }, t.group = C, t.groupSort = function(t2, e2, r2) {\n        return (2 !== e2.length ? U($(t2, e2, r2), ([t3, e3], [r3, i2]) => n(e3, i2) || n(t3, r3)) : U(C(t2, r2), ([t3, r3], [i2, o2]) => e2(r3, o2) || n(t3, i2))).map(([t3]) => t3);\n      }, t.groups = P, t.hcl = dr, t.hierarchy = Gd, t.histogram = Q, t.hsl = He, t.html = Ec, t.image = function(t2, n2) {\n        return new Promise(function(e2, r2) {\n          var i2 = new Image();\n          for (var o2 in n2)\n            i2[o2] = n2[o2];\n          i2.onerror = r2, i2.onload = function() {\n            e2(i2);\n          }, i2.src = t2;\n        });\n      }, t.index = function(t2, ...n2) {\n        return F(t2, k, R, n2);\n      }, t.indexes = function(t2, ...n2) {\n        return F(t2, Array.from, R, n2);\n      }, t.interpolate = Gr, t.interpolateArray = function(t2, n2) {\n        return (Ir(n2) ? Ur : Or)(t2, n2);\n      }, t.interpolateBasis = Er, t.interpolateBasisClosed = Nr, t.interpolateBlues = Xb, t.interpolateBrBG = ib, t.interpolateBuGn = wb, t.interpolateBuPu = Tb, t.interpolateCividis = function(t2) {\n        return t2 = Math.max(0, Math.min(1, t2)), \"rgb(\" + Math.max(0, Math.min(255, Math.round(-4.54 - t2 * (35.34 - t2 * (2381.73 - t2 * (6402.7 - t2 * (7024.72 - 2710.57 * t2))))))) + \", \" + Math.max(0, Math.min(255, Math.round(32.49 + t2 * (170.73 + t2 * (52.82 - t2 * (131.46 - t2 * (176.58 - 67.37 * t2))))))) + \", \" + Math.max(0, Math.min(255, Math.round(81.24 + t2 * (442.36 - t2 * (2482.43 - t2 * (6167.24 - t2 * (6614.94 - 2475.67 * t2))))))) + \")\";\n      }, t.interpolateCool = om, t.interpolateCubehelix = li, t.interpolateCubehelixDefault = rm, t.interpolateCubehelixLong = hi, t.interpolateDate = Br, t.interpolateDiscrete = function(t2) {\n        var n2 = t2.length;\n        return function(e2) {\n          return t2[Math.max(0, Math.min(n2 - 1, Math.floor(e2 * n2)))];\n        };\n      }, t.interpolateGnBu = Sb, t.interpolateGreens = Vb, t.interpolateGreys = Zb, t.interpolateHcl = ci, t.interpolateHclLong = fi, t.interpolateHsl = oi, t.interpolateHslLong = ai, t.interpolateHue = function(t2, n2) {\n        var e2 = Pr(+t2, +n2);\n        return function(t3) {\n          var n3 = e2(t3);\n          return n3 - 360 * Math.floor(n3 / 360);\n        };\n      }, t.interpolateInferno = dm, t.interpolateLab = function(t2, n2) {\n        var e2 = $r((t2 = ar(t2)).l, (n2 = ar(n2)).l), r2 = $r(t2.a, n2.a), i2 = $r(t2.b, n2.b), o2 = $r(t2.opacity, n2.opacity);\n        return function(n3) {\n          return t2.l = e2(n3), t2.a = r2(n3), t2.b = i2(n3), t2.opacity = o2(n3), t2 + \"\";\n        };\n      }, t.interpolateMagma = hm, t.interpolateNumber = Yr, t.interpolateNumberArray = Ur, t.interpolateObject = Lr, t.interpolateOrRd = Nb, t.interpolateOranges = em, t.interpolatePRGn = ab, t.interpolatePiYG = cb, t.interpolatePlasma = pm, t.interpolatePuBu = zb, t.interpolatePuBuGn = Cb, t.interpolatePuOr = sb, t.interpolatePuRd = Db, t.interpolatePurples = Qb, t.interpolateRainbow = function(t2) {\n        (t2 < 0 || t2 > 1) && (t2 -= Math.floor(t2));\n        var n2 = Math.abs(t2 - 0.5);\n        return am.h = 360 * t2 - 100, am.s = 1.5 - 1.5 * n2, am.l = 0.8 - 0.9 * n2, am + \"\";\n      }, t.interpolateRdBu = hb, t.interpolateRdGy = pb, t.interpolateRdPu = Fb, t.interpolateRdYlBu = yb, t.interpolateRdYlGn = _b, t.interpolateReds = tm, t.interpolateRgb = Dr, t.interpolateRgbBasis = Fr, t.interpolateRgbBasisClosed = qr, t.interpolateRound = Vr, t.interpolateSinebow = function(t2) {\n        var n2;\n        return t2 = (0.5 - t2) * Math.PI, um.r = 255 * (n2 = Math.sin(t2)) * n2, um.g = 255 * (n2 = Math.sin(t2 + cm)) * n2, um.b = 255 * (n2 = Math.sin(t2 + fm)) * n2, um + \"\";\n      }, t.interpolateSpectral = mb, t.interpolateString = Xr, t.interpolateTransformCss = ti, t.interpolateTransformSvg = ni, t.interpolateTurbo = function(t2) {\n        return t2 = Math.max(0, Math.min(1, t2)), \"rgb(\" + Math.max(0, Math.min(255, Math.round(34.61 + t2 * (1172.33 - t2 * (10793.56 - t2 * (33300.12 - t2 * (38394.49 - 14825.05 * t2))))))) + \", \" + Math.max(0, Math.min(255, Math.round(23.31 + t2 * (557.33 + t2 * (1225.33 - t2 * (3574.96 - t2 * (1073.77 + 707.56 * t2))))))) + \", \" + Math.max(0, Math.min(255, Math.round(27.2 + t2 * (3211.1 - t2 * (15327.97 - t2 * (27814 - t2 * (22569.18 - 6838.66 * t2))))))) + \")\";\n      }, t.interpolateViridis = lm, t.interpolateWarm = im, t.interpolateYlGn = Ob, t.interpolateYlGnBu = Ub, t.interpolateYlOrBr = Yb, t.interpolateYlOrRd = jb, t.interpolateZoom = ri, t.interrupt = Gi, t.intersection = function(t2, ...n2) {\n        t2 = new InternSet(t2), n2 = n2.map(vt);\n        t:\n          for (const e2 of t2)\n            for (const r2 of n2)\n              if (!r2.has(e2)) {\n                t2.delete(e2);\n                continue t;\n              }\n        return t2;\n      }, t.interval = function(t2, n2, e2) {\n        var r2 = new Ei(), i2 = n2;\n        return null == n2 ? (r2.restart(t2, n2, e2), r2) : (r2._restart = r2.restart, r2.restart = function(t3, n3, e3) {\n          n3 = +n3, e3 = null == e3 ? Ai() : +e3, r2._restart(function o2(a2) {\n            a2 += i2, r2._restart(o2, i2 += n3, e3), t3(a2);\n          }, n3, e3);\n        }, r2.restart(t2, n2, e2), r2);\n      }, t.isoFormat = D_, t.isoParse = F_, t.json = function(t2, n2) {\n        return fetch(t2, n2).then(Tc);\n      }, t.lab = ar, t.lch = function(t2, n2, e2, r2) {\n        return 1 === arguments.length ? hr(t2) : new pr(e2, n2, t2, null == r2 ? 1 : r2);\n      }, t.least = function(t2, e2 = n) {\n        let r2, i2 = false;\n        if (1 === e2.length) {\n          let o2;\n          for (const a2 of t2) {\n            const t3 = e2(a2);\n            (i2 ? n(t3, o2) < 0 : 0 === n(t3, t3)) && (r2 = a2, o2 = t3, i2 = true);\n          }\n        } else\n          for (const n2 of t2)\n            (i2 ? e2(n2, r2) < 0 : 0 === e2(n2, n2)) && (r2 = n2, i2 = true);\n        return r2;\n      }, t.leastIndex = ht, t.line = Bm, t.lineRadial = Wm, t.link = ox, t.linkHorizontal = function() {\n        return ox(tx);\n      }, t.linkRadial = function() {\n        const t2 = ox(ex);\n        return t2.angle = t2.x, delete t2.x, t2.radius = t2.y, delete t2.y, t2;\n      }, t.linkVertical = function() {\n        return ox(nx);\n      }, t.local = Qn, t.map = function(t2, n2) {\n        if (\"function\" != typeof t2[Symbol.iterator])\n          throw new TypeError(\"values is not iterable\");\n        if (\"function\" != typeof n2)\n          throw new TypeError(\"mapper is not a function\");\n        return Array.from(t2, (e2, r2) => n2(e2, r2, t2));\n      }, t.matcher = Vt, t.max = J, t.maxIndex = tt, t.mean = function(t2, n2) {\n        let e2 = 0, r2 = 0;\n        if (void 0 === n2)\n          for (let n3 of t2)\n            null != n3 && (n3 = +n3) >= n3 && (++e2, r2 += n3);\n        else {\n          let i2 = -1;\n          for (let o2 of t2)\n            null != (o2 = n2(o2, ++i2, t2)) && (o2 = +o2) >= o2 && (++e2, r2 += o2);\n        }\n        if (e2)\n          return r2 / e2;\n      }, t.median = function(t2, n2) {\n        return at(t2, 0.5, n2);\n      }, t.medianIndex = function(t2, n2) {\n        return ct(t2, 0.5, n2);\n      }, t.merge = ft, t.min = nt, t.minIndex = et, t.mode = function(t2, n2) {\n        const e2 = new InternMap();\n        if (void 0 === n2)\n          for (let n3 of t2)\n            null != n3 && n3 >= n3 && e2.set(n3, (e2.get(n3) || 0) + 1);\n        else {\n          let r3 = -1;\n          for (let i3 of t2)\n            null != (i3 = n2(i3, ++r3, t2)) && i3 >= i3 && e2.set(i3, (e2.get(i3) || 0) + 1);\n        }\n        let r2, i2 = 0;\n        for (const [t3, n3] of e2)\n          n3 > i2 && (i2 = n3, r2 = t3);\n        return r2;\n      }, t.namespace = It, t.namespaces = Ut, t.nice = Z, t.now = Ai, t.pack = function() {\n        var t2 = null, n2 = 1, e2 = 1, r2 = np;\n        function i2(i3) {\n          const o2 = ap();\n          return i3.x = n2 / 2, i3.y = e2 / 2, t2 ? i3.eachBefore(xp(t2)).eachAfter(wp(r2, 0.5, o2)).eachBefore(Mp(1)) : i3.eachBefore(xp(mp)).eachAfter(wp(np, 1, o2)).eachAfter(wp(r2, i3.r / Math.min(n2, e2), o2)).eachBefore(Mp(Math.min(n2, e2) / (2 * i3.r))), i3;\n        }\n        return i2.radius = function(n3) {\n          return arguments.length ? (t2 = Jd(n3), i2) : t2;\n        }, i2.size = function(t3) {\n          return arguments.length ? (n2 = +t3[0], e2 = +t3[1], i2) : [n2, e2];\n        }, i2.padding = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : ep(+t3), i2) : r2;\n        }, i2;\n      }, t.packEnclose = function(t2) {\n        return up(t2, ap());\n      }, t.packSiblings = function(t2) {\n        return bp(t2, ap()), t2;\n      }, t.pairs = function(t2, n2 = st) {\n        const e2 = [];\n        let r2, i2 = false;\n        for (const o2 of t2)\n          i2 && e2.push(n2(r2, o2)), r2 = o2, i2 = true;\n        return e2;\n      }, t.partition = function() {\n        var t2 = 1, n2 = 1, e2 = 0, r2 = false;\n        function i2(i3) {\n          var o2 = i3.height + 1;\n          return i3.x0 = i3.y0 = e2, i3.x1 = t2, i3.y1 = n2 / o2, i3.eachBefore(/* @__PURE__ */ function(t3, n3) {\n            return function(r3) {\n              r3.children && Ap(r3, r3.x0, t3 * (r3.depth + 1) / n3, r3.x1, t3 * (r3.depth + 2) / n3);\n              var i4 = r3.x0, o3 = r3.y0, a2 = r3.x1 - e2, u2 = r3.y1 - e2;\n              a2 < i4 && (i4 = a2 = (i4 + a2) / 2), u2 < o3 && (o3 = u2 = (o3 + u2) / 2), r3.x0 = i4, r3.y0 = o3, r3.x1 = a2, r3.y1 = u2;\n            };\n          }(n2, o2)), r2 && i3.eachBefore(Tp), i3;\n        }\n        return i2.round = function(t3) {\n          return arguments.length ? (r2 = !!t3, i2) : r2;\n        }, i2.size = function(e3) {\n          return arguments.length ? (t2 = +e3[0], n2 = +e3[1], i2) : [t2, n2];\n        }, i2.padding = function(t3) {\n          return arguments.length ? (e2 = +t3, i2) : e2;\n        }, i2;\n      }, t.path = Ia, t.pathRound = function(t2 = 3) {\n        return new Ua(+t2);\n      }, t.permute = q, t.pie = function() {\n        var t2 = jm, n2 = Lm, e2 = null, r2 = gm(0), i2 = gm(Sm), o2 = gm(0);\n        function a2(a3) {\n          var u2, c2, f2, s2, l2, h2 = (a3 = Fm(a3)).length, d2 = 0, p2 = new Array(h2), g2 = new Array(h2), y2 = +r2.apply(this, arguments), v2 = Math.min(Sm, Math.max(-Sm, i2.apply(this, arguments) - y2)), _2 = Math.min(Math.abs(v2) / h2, o2.apply(this, arguments)), b2 = _2 * (v2 < 0 ? -1 : 1);\n          for (u2 = 0; u2 < h2; ++u2)\n            (l2 = g2[p2[u2] = u2] = +t2(a3[u2], u2, a3)) > 0 && (d2 += l2);\n          for (null != n2 ? p2.sort(function(t3, e3) {\n            return n2(g2[t3], g2[e3]);\n          }) : null != e2 && p2.sort(function(t3, n3) {\n            return e2(a3[t3], a3[n3]);\n          }), u2 = 0, f2 = d2 ? (v2 - h2 * b2) / d2 : 0; u2 < h2; ++u2, y2 = s2)\n            c2 = p2[u2], s2 = y2 + ((l2 = g2[c2]) > 0 ? l2 * f2 : 0) + b2, g2[c2] = { data: a3[c2], index: u2, value: l2, startAngle: y2, endAngle: s2, padAngle: _2 };\n          return g2;\n        }\n        return a2.value = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(+n3), a2) : t2;\n        }, a2.sortValues = function(t3) {\n          return arguments.length ? (n2 = t3, e2 = null, a2) : n2;\n        }, a2.sort = function(t3) {\n          return arguments.length ? (e2 = t3, n2 = null, a2) : e2;\n        }, a2.startAngle = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : gm(+t3), a2) : r2;\n        }, a2.endAngle = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : gm(+t3), a2) : i2;\n        }, a2.padAngle = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : gm(+t3), a2) : o2;\n        }, a2;\n      }, t.piecewise = di, t.pointRadial = Km, t.pointer = ne, t.pointers = function(t2, n2) {\n        return t2.target && (t2 = te(t2), void 0 === n2 && (n2 = t2.currentTarget), t2 = t2.touches || [t2]), Array.from(t2, (t3) => ne(t3, n2));\n      }, t.polygonArea = function(t2) {\n        for (var n2, e2 = -1, r2 = t2.length, i2 = t2[r2 - 1], o2 = 0; ++e2 < r2; )\n          n2 = i2, i2 = t2[e2], o2 += n2[1] * i2[0] - n2[0] * i2[1];\n        return o2 / 2;\n      }, t.polygonCentroid = function(t2) {\n        for (var n2, e2, r2 = -1, i2 = t2.length, o2 = 0, a2 = 0, u2 = t2[i2 - 1], c2 = 0; ++r2 < i2; )\n          n2 = u2, u2 = t2[r2], c2 += e2 = n2[0] * u2[1] - u2[0] * n2[1], o2 += (n2[0] + u2[0]) * e2, a2 += (n2[1] + u2[1]) * e2;\n        return [o2 / (c2 *= 3), a2 / c2];\n      }, t.polygonContains = function(t2, n2) {\n        for (var e2, r2, i2 = t2.length, o2 = t2[i2 - 1], a2 = n2[0], u2 = n2[1], c2 = o2[0], f2 = o2[1], s2 = false, l2 = 0; l2 < i2; ++l2)\n          e2 = (o2 = t2[l2])[0], (r2 = o2[1]) > u2 != f2 > u2 && a2 < (c2 - e2) * (u2 - r2) / (f2 - r2) + e2 && (s2 = !s2), c2 = e2, f2 = r2;\n        return s2;\n      }, t.polygonHull = function(t2) {\n        if ((e2 = t2.length) < 3)\n          return null;\n        var n2, e2, r2 = new Array(e2), i2 = new Array(e2);\n        for (n2 = 0; n2 < e2; ++n2)\n          r2[n2] = [+t2[n2][0], +t2[n2][1], n2];\n        for (r2.sort(Hp), n2 = 0; n2 < e2; ++n2)\n          i2[n2] = [r2[n2][0], -r2[n2][1]];\n        var o2 = Xp(r2), a2 = Xp(i2), u2 = a2[0] === o2[0], c2 = a2[a2.length - 1] === o2[o2.length - 1], f2 = [];\n        for (n2 = o2.length - 1; n2 >= 0; --n2)\n          f2.push(t2[r2[o2[n2]][2]]);\n        for (n2 = +u2; n2 < a2.length - c2; ++n2)\n          f2.push(t2[r2[a2[n2]][2]]);\n        return f2;\n      }, t.polygonLength = function(t2) {\n        for (var n2, e2, r2 = -1, i2 = t2.length, o2 = t2[i2 - 1], a2 = o2[0], u2 = o2[1], c2 = 0; ++r2 < i2; )\n          n2 = a2, e2 = u2, n2 -= a2 = (o2 = t2[r2])[0], e2 -= u2 = o2[1], c2 += Math.hypot(n2, e2);\n        return c2;\n      }, t.precisionFixed = sf, t.precisionPrefix = lf, t.precisionRound = hf, t.quadtree = $c, t.quantile = at, t.quantileIndex = ct, t.quantileSorted = ut, t.quantize = function(t2, n2) {\n        for (var e2 = new Array(n2), r2 = 0; r2 < n2; ++r2)\n          e2[r2] = t2(r2 / (n2 - 1));\n        return e2;\n      }, t.quickselect = rt, t.radialArea = Zm, t.radialLine = Wm, t.randomBates = Jp, t.randomBernoulli = eg, t.randomBeta = og, t.randomBinomial = ag, t.randomCauchy = cg, t.randomExponential = tg, t.randomGamma = ig, t.randomGeometric = rg, t.randomInt = Wp, t.randomIrwinHall = Qp, t.randomLcg = function(t2 = Math.random()) {\n        let n2 = 0 | (0 <= t2 && t2 < 1 ? t2 / lg : Math.abs(t2));\n        return () => (n2 = 1664525 * n2 + 1013904223 | 0, lg * (n2 >>> 0));\n      }, t.randomLogNormal = Kp, t.randomLogistic = fg, t.randomNormal = Zp, t.randomPareto = ng, t.randomPoisson = sg, t.randomUniform = Vp, t.randomWeibull = ug, t.range = lt, t.rank = function(t2, e2 = n) {\n        if (\"function\" != typeof t2[Symbol.iterator])\n          throw new TypeError(\"values is not iterable\");\n        let r2 = Array.from(t2);\n        const i2 = new Float64Array(r2.length);\n        2 !== e2.length && (r2 = r2.map(e2), e2 = n);\n        const o2 = (t3, n2) => e2(r2[t3], r2[n2]);\n        let a2, u2;\n        return (t2 = Uint32Array.from(r2, (t3, n2) => n2)).sort(e2 === n ? (t3, n2) => O(r2[t3], r2[n2]) : I(o2)), t2.forEach((t3, n2) => {\n          const e3 = o2(t3, void 0 === a2 ? t3 : a2);\n          e3 >= 0 ? ((void 0 === a2 || e3 > 0) && (a2 = t3, u2 = n2), i2[t3] = u2) : i2[t3] = NaN;\n        }), i2;\n      }, t.reduce = function(t2, n2, e2) {\n        if (\"function\" != typeof n2)\n          throw new TypeError(\"reducer is not a function\");\n        const r2 = t2[Symbol.iterator]();\n        let i2, o2, a2 = -1;\n        if (arguments.length < 3) {\n          if ({ done: i2, value: e2 } = r2.next(), i2)\n            return;\n          ++a2;\n        }\n        for (; { done: i2, value: o2 } = r2.next(), !i2; )\n          e2 = n2(e2, o2, ++a2, t2);\n        return e2;\n      }, t.reverse = function(t2) {\n        if (\"function\" != typeof t2[Symbol.iterator])\n          throw new TypeError(\"values is not iterable\");\n        return Array.from(t2).reverse();\n      }, t.rgb = Fe, t.ribbon = function() {\n        return Wa();\n      }, t.ribbonArrow = function() {\n        return Wa(Va);\n      }, t.rollup = $, t.rollups = D, t.scaleBand = yg, t.scaleDiverging = function t2() {\n        var n2 = Ng(L_()(mg));\n        return n2.copy = function() {\n          return B_(n2, t2());\n        }, dg.apply(n2, arguments);\n      }, t.scaleDivergingLog = function t2() {\n        var n2 = Fg(L_()).domain([0.1, 1, 10]);\n        return n2.copy = function() {\n          return B_(n2, t2()).base(n2.base());\n        }, dg.apply(n2, arguments);\n      }, t.scaleDivergingPow = j_, t.scaleDivergingSqrt = function() {\n        return j_.apply(null, arguments).exponent(0.5);\n      }, t.scaleDivergingSymlog = function t2() {\n        var n2 = Ig(L_());\n        return n2.copy = function() {\n          return B_(n2, t2()).constant(n2.constant());\n        }, dg.apply(n2, arguments);\n      }, t.scaleIdentity = function t2(n2) {\n        var e2;\n        function r2(t3) {\n          return null == t3 || isNaN(t3 = +t3) ? e2 : t3;\n        }\n        return r2.invert = r2, r2.domain = r2.range = function(t3) {\n          return arguments.length ? (n2 = Array.from(t3, _g), r2) : n2.slice();\n        }, r2.unknown = function(t3) {\n          return arguments.length ? (e2 = t3, r2) : e2;\n        }, r2.copy = function() {\n          return t2(n2).unknown(e2);\n        }, n2 = arguments.length ? Array.from(n2, _g) : [0, 1], Ng(r2);\n      }, t.scaleImplicit = pg, t.scaleLinear = function t2() {\n        var n2 = Sg();\n        return n2.copy = function() {\n          return Tg(n2, t2());\n        }, hg.apply(n2, arguments), Ng(n2);\n      }, t.scaleLog = function t2() {\n        const n2 = Fg(Ag()).domain([1, 10]);\n        return n2.copy = () => Tg(n2, t2()).base(n2.base()), hg.apply(n2, arguments), n2;\n      }, t.scaleOrdinal = gg, t.scalePoint = function() {\n        return vg(yg.apply(null, arguments).paddingInner(1));\n      }, t.scalePow = jg, t.scaleQuantile = function t2() {\n        var e2, r2 = [], i2 = [], o2 = [];\n        function a2() {\n          var t3 = 0, n2 = Math.max(1, i2.length);\n          for (o2 = new Array(n2 - 1); ++t3 < n2; )\n            o2[t3 - 1] = ut(r2, t3 / n2);\n          return u2;\n        }\n        function u2(t3) {\n          return null == t3 || isNaN(t3 = +t3) ? e2 : i2[s(o2, t3)];\n        }\n        return u2.invertExtent = function(t3) {\n          var n2 = i2.indexOf(t3);\n          return n2 < 0 ? [NaN, NaN] : [n2 > 0 ? o2[n2 - 1] : r2[0], n2 < o2.length ? o2[n2] : r2[r2.length - 1]];\n        }, u2.domain = function(t3) {\n          if (!arguments.length)\n            return r2.slice();\n          r2 = [];\n          for (let n2 of t3)\n            null == n2 || isNaN(n2 = +n2) || r2.push(n2);\n          return r2.sort(n), a2();\n        }, u2.range = function(t3) {\n          return arguments.length ? (i2 = Array.from(t3), a2()) : i2.slice();\n        }, u2.unknown = function(t3) {\n          return arguments.length ? (e2 = t3, u2) : e2;\n        }, u2.quantiles = function() {\n          return o2.slice();\n        }, u2.copy = function() {\n          return t2().domain(r2).range(i2).unknown(e2);\n        }, hg.apply(u2, arguments);\n      }, t.scaleQuantize = function t2() {\n        var n2, e2 = 0, r2 = 1, i2 = 1, o2 = [0.5], a2 = [0, 1];\n        function u2(t3) {\n          return null != t3 && t3 <= t3 ? a2[s(o2, t3, 0, i2)] : n2;\n        }\n        function c2() {\n          var t3 = -1;\n          for (o2 = new Array(i2); ++t3 < i2; )\n            o2[t3] = ((t3 + 1) * r2 - (t3 - i2) * e2) / (i2 + 1);\n          return u2;\n        }\n        return u2.domain = function(t3) {\n          return arguments.length ? ([e2, r2] = t3, e2 = +e2, r2 = +r2, c2()) : [e2, r2];\n        }, u2.range = function(t3) {\n          return arguments.length ? (i2 = (a2 = Array.from(t3)).length - 1, c2()) : a2.slice();\n        }, u2.invertExtent = function(t3) {\n          var n3 = a2.indexOf(t3);\n          return n3 < 0 ? [NaN, NaN] : n3 < 1 ? [e2, o2[0]] : n3 >= i2 ? [o2[i2 - 1], r2] : [o2[n3 - 1], o2[n3]];\n        }, u2.unknown = function(t3) {\n          return arguments.length ? (n2 = t3, u2) : u2;\n        }, u2.thresholds = function() {\n          return o2.slice();\n        }, u2.copy = function() {\n          return t2().domain([e2, r2]).range(a2).unknown(n2);\n        }, hg.apply(Ng(u2), arguments);\n      }, t.scaleRadial = function t2() {\n        var n2, e2 = Sg(), r2 = [0, 1], i2 = false;\n        function o2(t3) {\n          var r3 = function(t4) {\n            return Math.sign(t4) * Math.sqrt(Math.abs(t4));\n          }(e2(t3));\n          return isNaN(r3) ? n2 : i2 ? Math.round(r3) : r3;\n        }\n        return o2.invert = function(t3) {\n          return e2.invert(Hg(t3));\n        }, o2.domain = function(t3) {\n          return arguments.length ? (e2.domain(t3), o2) : e2.domain();\n        }, o2.range = function(t3) {\n          return arguments.length ? (e2.range((r2 = Array.from(t3, _g)).map(Hg)), o2) : r2.slice();\n        }, o2.rangeRound = function(t3) {\n          return o2.range(t3).round(true);\n        }, o2.round = function(t3) {\n          return arguments.length ? (i2 = !!t3, o2) : i2;\n        }, o2.clamp = function(t3) {\n          return arguments.length ? (e2.clamp(t3), o2) : e2.clamp();\n        }, o2.unknown = function(t3) {\n          return arguments.length ? (n2 = t3, o2) : n2;\n        }, o2.copy = function() {\n          return t2(e2.domain(), r2).round(i2).clamp(e2.clamp()).unknown(n2);\n        }, hg.apply(o2, arguments), Ng(o2);\n      }, t.scaleSequential = function t2() {\n        var n2 = Ng(O_()(mg));\n        return n2.copy = function() {\n          return B_(n2, t2());\n        }, dg.apply(n2, arguments);\n      }, t.scaleSequentialLog = function t2() {\n        var n2 = Fg(O_()).domain([1, 10]);\n        return n2.copy = function() {\n          return B_(n2, t2()).base(n2.base());\n        }, dg.apply(n2, arguments);\n      }, t.scaleSequentialPow = Y_, t.scaleSequentialQuantile = function t2() {\n        var e2 = [], r2 = mg;\n        function i2(t3) {\n          if (null != t3 && !isNaN(t3 = +t3))\n            return r2((s(e2, t3, 1) - 1) / (e2.length - 1));\n        }\n        return i2.domain = function(t3) {\n          if (!arguments.length)\n            return e2.slice();\n          e2 = [];\n          for (let n2 of t3)\n            null == n2 || isNaN(n2 = +n2) || e2.push(n2);\n          return e2.sort(n), i2;\n        }, i2.interpolator = function(t3) {\n          return arguments.length ? (r2 = t3, i2) : r2;\n        }, i2.range = function() {\n          return e2.map((t3, n2) => r2(n2 / (e2.length - 1)));\n        }, i2.quantiles = function(t3) {\n          return Array.from({ length: t3 + 1 }, (n2, r3) => at(e2, r3 / t3));\n        }, i2.copy = function() {\n          return t2(r2).domain(e2);\n        }, dg.apply(i2, arguments);\n      }, t.scaleSequentialSqrt = function() {\n        return Y_.apply(null, arguments).exponent(0.5);\n      }, t.scaleSequentialSymlog = function t2() {\n        var n2 = Ig(O_());\n        return n2.copy = function() {\n          return B_(n2, t2()).constant(n2.constant());\n        }, dg.apply(n2, arguments);\n      }, t.scaleSqrt = function() {\n        return jg.apply(null, arguments).exponent(0.5);\n      }, t.scaleSymlog = function t2() {\n        var n2 = Ig(Ag());\n        return n2.copy = function() {\n          return Tg(n2, t2()).constant(n2.constant());\n        }, hg.apply(n2, arguments);\n      }, t.scaleThreshold = function t2() {\n        var n2, e2 = [0.5], r2 = [0, 1], i2 = 1;\n        function o2(t3) {\n          return null != t3 && t3 <= t3 ? r2[s(e2, t3, 0, i2)] : n2;\n        }\n        return o2.domain = function(t3) {\n          return arguments.length ? (e2 = Array.from(t3), i2 = Math.min(e2.length, r2.length - 1), o2) : e2.slice();\n        }, o2.range = function(t3) {\n          return arguments.length ? (r2 = Array.from(t3), i2 = Math.min(e2.length, r2.length - 1), o2) : r2.slice();\n        }, o2.invertExtent = function(t3) {\n          var n3 = r2.indexOf(t3);\n          return [e2[n3 - 1], e2[n3]];\n        }, o2.unknown = function(t3) {\n          return arguments.length ? (n2 = t3, o2) : n2;\n        }, o2.copy = function() {\n          return t2().domain(e2).range(r2).unknown(n2);\n        }, hg.apply(o2, arguments);\n      }, t.scaleTime = function() {\n        return hg.apply(I_(uv, cv, tv, Zy, xy, py, sy, ay, iy, t.timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);\n      }, t.scaleUtc = function() {\n        return hg.apply(I_(ov, av, ev, Qy, Fy, yy, hy, cy, iy, t.utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);\n      }, t.scan = function(t2, n2) {\n        const e2 = ht(t2, n2);\n        return e2 < 0 ? void 0 : e2;\n      }, t.schemeAccent = G_, t.schemeBlues = Hb, t.schemeBrBG = rb, t.schemeBuGn = xb, t.schemeBuPu = Mb, t.schemeCategory10 = X_, t.schemeDark2 = V_, t.schemeGnBu = Ab, t.schemeGreens = Gb, t.schemeGreys = Wb, t.schemeOrRd = Eb, t.schemeOranges = nm, t.schemePRGn = ob, t.schemePaired = W_, t.schemePastel1 = Z_, t.schemePastel2 = K_, t.schemePiYG = ub, t.schemePuBu = Pb, t.schemePuBuGn = kb, t.schemePuOr = fb, t.schemePuRd = $b, t.schemePurples = Kb, t.schemeRdBu = lb, t.schemeRdGy = db, t.schemeRdPu = Rb, t.schemeRdYlBu = gb, t.schemeRdYlGn = vb, t.schemeReds = Jb, t.schemeSet1 = Q_, t.schemeSet2 = J_, t.schemeSet3 = tb, t.schemeSpectral = bb, t.schemeTableau10 = nb, t.schemeYlGn = Ib, t.schemeYlGnBu = qb, t.schemeYlOrBr = Bb, t.schemeYlOrRd = Lb, t.select = Zn, t.selectAll = function(t2) {\n        return \"string\" == typeof t2 ? new Vn([document.querySelectorAll(t2)], [document.documentElement]) : new Vn([Ht(t2)], Gn);\n      }, t.selection = Wn, t.selector = jt, t.selectorAll = Gt, t.shuffle = dt, t.shuffler = pt, t.some = function(t2, n2) {\n        if (\"function\" != typeof n2)\n          throw new TypeError(\"test is not a function\");\n        let e2 = -1;\n        for (const r2 of t2)\n          if (n2(r2, ++e2, t2))\n            return true;\n        return false;\n      }, t.sort = U, t.stack = function() {\n        var t2 = gm([]), n2 = hw, e2 = lw, r2 = dw;\n        function i2(i3) {\n          var o2, a2, u2 = Array.from(t2.apply(this, arguments), pw), c2 = u2.length, f2 = -1;\n          for (const t3 of i3)\n            for (o2 = 0, ++f2; o2 < c2; ++o2)\n              (u2[o2][f2] = [0, +r2(t3, u2[o2].key, f2, i3)]).data = t3;\n          for (o2 = 0, a2 = Fm(n2(u2)); o2 < c2; ++o2)\n            u2[a2[o2]].index = o2;\n          return e2(u2, a2), u2;\n        }\n        return i2.keys = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(Array.from(n3)), i2) : t2;\n        }, i2.value = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : gm(+t3), i2) : r2;\n        }, i2.order = function(t3) {\n          return arguments.length ? (n2 = null == t3 ? hw : \"function\" == typeof t3 ? t3 : gm(Array.from(t3)), i2) : n2;\n        }, i2.offset = function(t3) {\n          return arguments.length ? (e2 = null == t3 ? lw : t3, i2) : e2;\n        }, i2;\n      }, t.stackOffsetDiverging = function(t2, n2) {\n        if ((u2 = t2.length) > 0)\n          for (var e2, r2, i2, o2, a2, u2, c2 = 0, f2 = t2[n2[0]].length; c2 < f2; ++c2)\n            for (o2 = a2 = 0, e2 = 0; e2 < u2; ++e2)\n              (i2 = (r2 = t2[n2[e2]][c2])[1] - r2[0]) > 0 ? (r2[0] = o2, r2[1] = o2 += i2) : i2 < 0 ? (r2[1] = a2, r2[0] = a2 += i2) : (r2[0] = 0, r2[1] = i2);\n      }, t.stackOffsetExpand = function(t2, n2) {\n        if ((r2 = t2.length) > 0) {\n          for (var e2, r2, i2, o2 = 0, a2 = t2[0].length; o2 < a2; ++o2) {\n            for (i2 = e2 = 0; e2 < r2; ++e2)\n              i2 += t2[e2][o2][1] || 0;\n            if (i2)\n              for (e2 = 0; e2 < r2; ++e2)\n                t2[e2][o2][1] /= i2;\n          }\n          lw(t2, n2);\n        }\n      }, t.stackOffsetNone = lw, t.stackOffsetSilhouette = function(t2, n2) {\n        if ((e2 = t2.length) > 0) {\n          for (var e2, r2 = 0, i2 = t2[n2[0]], o2 = i2.length; r2 < o2; ++r2) {\n            for (var a2 = 0, u2 = 0; a2 < e2; ++a2)\n              u2 += t2[a2][r2][1] || 0;\n            i2[r2][1] += i2[r2][0] = -u2 / 2;\n          }\n          lw(t2, n2);\n        }\n      }, t.stackOffsetWiggle = function(t2, n2) {\n        if ((i2 = t2.length) > 0 && (r2 = (e2 = t2[n2[0]]).length) > 0) {\n          for (var e2, r2, i2, o2 = 0, a2 = 1; a2 < r2; ++a2) {\n            for (var u2 = 0, c2 = 0, f2 = 0; u2 < i2; ++u2) {\n              for (var s2 = t2[n2[u2]], l2 = s2[a2][1] || 0, h2 = (l2 - (s2[a2 - 1][1] || 0)) / 2, d2 = 0; d2 < u2; ++d2) {\n                var p2 = t2[n2[d2]];\n                h2 += (p2[a2][1] || 0) - (p2[a2 - 1][1] || 0);\n              }\n              c2 += l2, f2 += h2 * l2;\n            }\n            e2[a2 - 1][1] += e2[a2 - 1][0] = o2, c2 && (o2 -= f2 / c2);\n          }\n          e2[a2 - 1][1] += e2[a2 - 1][0] = o2, lw(t2, n2);\n        }\n      }, t.stackOrderAppearance = gw, t.stackOrderAscending = vw, t.stackOrderDescending = function(t2) {\n        return vw(t2).reverse();\n      }, t.stackOrderInsideOut = function(t2) {\n        var n2, e2, r2 = t2.length, i2 = t2.map(_w), o2 = gw(t2), a2 = 0, u2 = 0, c2 = [], f2 = [];\n        for (n2 = 0; n2 < r2; ++n2)\n          e2 = o2[n2], a2 < u2 ? (a2 += i2[e2], c2.push(e2)) : (u2 += i2[e2], f2.push(e2));\n        return f2.reverse().concat(c2);\n      }, t.stackOrderNone = hw, t.stackOrderReverse = function(t2) {\n        return hw(t2).reverse();\n      }, t.stratify = function() {\n        var t2, n2 = kp, e2 = Cp;\n        function r2(r3) {\n          var i2, o2, a2, u2, c2, f2, s2, l2, h2 = Array.from(r3), d2 = n2, p2 = e2, g2 = /* @__PURE__ */ new Map();\n          if (null != t2) {\n            const n3 = h2.map((n4, e4) => function(t3) {\n              t3 = `${t3}`;\n              let n5 = t3.length;\n              zp(t3, n5 - 1) && !zp(t3, n5 - 2) && (t3 = t3.slice(0, -1));\n              return \"/\" === t3[0] ? t3 : `/${t3}`;\n            }(t2(n4, e4, r3))), e3 = n3.map(Pp), i3 = new Set(n3).add(\"\");\n            for (const t3 of e3)\n              i3.has(t3) || (i3.add(t3), n3.push(t3), e3.push(Pp(t3)), h2.push(Np));\n            d2 = (t3, e4) => n3[e4], p2 = (t3, n4) => e3[n4];\n          }\n          for (a2 = 0, i2 = h2.length; a2 < i2; ++a2)\n            o2 = h2[a2], f2 = h2[a2] = new Qd(o2), null != (s2 = d2(o2, a2, r3)) && (s2 += \"\") && (l2 = f2.id = s2, g2.set(l2, g2.has(l2) ? Ep : f2)), null != (s2 = p2(o2, a2, r3)) && (s2 += \"\") && (f2.parent = s2);\n          for (a2 = 0; a2 < i2; ++a2)\n            if (s2 = (f2 = h2[a2]).parent) {\n              if (!(c2 = g2.get(s2)))\n                throw new Error(\"missing: \" + s2);\n              if (c2 === Ep)\n                throw new Error(\"ambiguous: \" + s2);\n              c2.children ? c2.children.push(f2) : c2.children = [f2], f2.parent = c2;\n            } else {\n              if (u2)\n                throw new Error(\"multiple roots\");\n              u2 = f2;\n            }\n          if (!u2)\n            throw new Error(\"no root\");\n          if (null != t2) {\n            for (; u2.data === Np && 1 === u2.children.length; )\n              u2 = u2.children[0], --i2;\n            for (let t3 = h2.length - 1; t3 >= 0 && (f2 = h2[t3]).data === Np; --t3)\n              f2.data = null;\n          }\n          if (u2.parent = Sp, u2.eachBefore(function(t3) {\n            t3.depth = t3.parent.depth + 1, --i2;\n          }).eachBefore(Kd), u2.parent = null, i2 > 0)\n            throw new Error(\"cycle\");\n          return u2;\n        }\n        return r2.id = function(t3) {\n          return arguments.length ? (n2 = Jd(t3), r2) : n2;\n        }, r2.parentId = function(t3) {\n          return arguments.length ? (e2 = Jd(t3), r2) : e2;\n        }, r2.path = function(n3) {\n          return arguments.length ? (t2 = Jd(n3), r2) : t2;\n        }, r2;\n      }, t.style = _n, t.subset = function(t2, n2) {\n        return _t(n2, t2);\n      }, t.sum = function(t2, n2) {\n        let e2 = 0;\n        if (void 0 === n2)\n          for (let n3 of t2)\n            (n3 = +n3) && (e2 += n3);\n        else {\n          let r2 = -1;\n          for (let i2 of t2)\n            (i2 = +n2(i2, ++r2, t2)) && (e2 += i2);\n        }\n        return e2;\n      }, t.superset = _t, t.svg = Nc, t.symbol = function(t2, n2) {\n        let e2 = null, r2 = Nm(i2);\n        function i2() {\n          let i3;\n          if (e2 || (e2 = i3 = r2()), t2.apply(this, arguments).draw(e2, +n2.apply(this, arguments)), i3)\n            return e2 = null, i3 + \"\" || null;\n        }\n        return t2 = \"function\" == typeof t2 ? t2 : gm(t2 || cx), n2 = \"function\" == typeof n2 ? n2 : gm(void 0 === n2 ? 64 : +n2), i2.type = function(n3) {\n          return arguments.length ? (t2 = \"function\" == typeof n3 ? n3 : gm(n3), i2) : t2;\n        }, i2.size = function(t3) {\n          return arguments.length ? (n2 = \"function\" == typeof t3 ? t3 : gm(+t3), i2) : n2;\n        }, i2.context = function(t3) {\n          return arguments.length ? (e2 = null == t3 ? null : t3, i2) : e2;\n        }, i2;\n      }, t.symbolAsterisk = ux, t.symbolCircle = cx, t.symbolCross = fx, t.symbolDiamond = hx, t.symbolDiamond2 = dx, t.symbolPlus = px, t.symbolSquare = gx, t.symbolSquare2 = yx, t.symbolStar = mx, t.symbolTimes = Cx, t.symbolTriangle = wx, t.symbolTriangle2 = Tx, t.symbolWye = kx, t.symbolX = Cx, t.symbols = Px, t.symbolsFill = Px, t.symbolsStroke = zx, t.text = mc, t.thresholdFreedmanDiaconis = function(t2, n2, e2) {\n        const r2 = v(t2), i2 = at(t2, 0.75) - at(t2, 0.25);\n        return r2 && i2 ? Math.ceil((e2 - n2) / (2 * i2 * Math.pow(r2, -1 / 3))) : 1;\n      }, t.thresholdScott = function(t2, n2, e2) {\n        const r2 = v(t2), i2 = w(t2);\n        return r2 && i2 ? Math.ceil((e2 - n2) * Math.cbrt(r2) / (3.49 * i2)) : 1;\n      }, t.thresholdSturges = K, t.tickFormat = Eg, t.tickIncrement = V, t.tickStep = W, t.ticks = G, t.timeDay = py, t.timeDays = gy, t.timeFormatDefaultLocale = P_, t.timeFormatLocale = hv, t.timeFriday = Sy, t.timeFridays = $y, t.timeHour = sy, t.timeHours = ly, t.timeInterval = Vg, t.timeMillisecond = Wg, t.timeMilliseconds = Zg, t.timeMinute = ay, t.timeMinutes = uy, t.timeMonday = wy, t.timeMondays = ky, t.timeMonth = Zy, t.timeMonths = Ky, t.timeSaturday = Ey, t.timeSaturdays = Dy, t.timeSecond = iy, t.timeSeconds = oy, t.timeSunday = xy, t.timeSundays = Ny, t.timeThursday = Ay, t.timeThursdays = zy, t.timeTickInterval = cv, t.timeTicks = uv, t.timeTuesday = My, t.timeTuesdays = Cy, t.timeWednesday = Ty, t.timeWednesdays = Py, t.timeWeek = xy, t.timeWeeks = Ny, t.timeYear = tv, t.timeYears = nv, t.timeout = $i, t.timer = Ni, t.timerFlush = ki, t.transition = go, t.transpose = gt, t.tree = function() {\n        var t2 = $p, n2 = 1, e2 = 1, r2 = null;\n        function i2(i3) {\n          var c2 = function(t3) {\n            for (var n3, e3, r3, i4, o3, a3 = new Up(t3, 0), u3 = [a3]; n3 = u3.pop(); )\n              if (r3 = n3._.children)\n                for (n3.children = new Array(o3 = r3.length), i4 = o3 - 1; i4 >= 0; --i4)\n                  u3.push(e3 = n3.children[i4] = new Up(r3[i4], i4)), e3.parent = n3;\n            return (a3.parent = new Up(null, 0)).children = [a3], a3;\n          }(i3);\n          if (c2.eachAfter(o2), c2.parent.m = -c2.z, c2.eachBefore(a2), r2)\n            i3.eachBefore(u2);\n          else {\n            var f2 = i3, s2 = i3, l2 = i3;\n            i3.eachBefore(function(t3) {\n              t3.x < f2.x && (f2 = t3), t3.x > s2.x && (s2 = t3), t3.depth > l2.depth && (l2 = t3);\n            });\n            var h2 = f2 === s2 ? 1 : t2(f2, s2) / 2, d2 = h2 - f2.x, p2 = n2 / (s2.x + h2 + d2), g2 = e2 / (l2.depth || 1);\n            i3.eachBefore(function(t3) {\n              t3.x = (t3.x + d2) * p2, t3.y = t3.depth * g2;\n            });\n          }\n          return i3;\n        }\n        function o2(n3) {\n          var e3 = n3.children, r3 = n3.parent.children, i3 = n3.i ? r3[n3.i - 1] : null;\n          if (e3) {\n            !function(t3) {\n              for (var n4, e4 = 0, r4 = 0, i4 = t3.children, o4 = i4.length; --o4 >= 0; )\n                (n4 = i4[o4]).z += e4, n4.m += e4, e4 += n4.s + (r4 += n4.c);\n            }(n3);\n            var o3 = (e3[0].z + e3[e3.length - 1].z) / 2;\n            i3 ? (n3.z = i3.z + t2(n3._, i3._), n3.m = n3.z - o3) : n3.z = o3;\n          } else\n            i3 && (n3.z = i3.z + t2(n3._, i3._));\n          n3.parent.A = function(n4, e4, r4) {\n            if (e4) {\n              for (var i4, o4 = n4, a3 = n4, u3 = e4, c2 = o4.parent.children[0], f2 = o4.m, s2 = a3.m, l2 = u3.m, h2 = c2.m; u3 = Rp(u3), o4 = Dp(o4), u3 && o4; )\n                c2 = Dp(c2), (a3 = Rp(a3)).a = n4, (i4 = u3.z + l2 - o4.z - f2 + t2(u3._, o4._)) > 0 && (Fp(qp(u3, n4, r4), n4, i4), f2 += i4, s2 += i4), l2 += u3.m, f2 += o4.m, h2 += c2.m, s2 += a3.m;\n              u3 && !Rp(a3) && (a3.t = u3, a3.m += l2 - s2), o4 && !Dp(c2) && (c2.t = o4, c2.m += f2 - h2, r4 = n4);\n            }\n            return r4;\n          }(n3, i3, n3.parent.A || r3[0]);\n        }\n        function a2(t3) {\n          t3._.x = t3.z + t3.parent.m, t3.m += t3.parent.m;\n        }\n        function u2(t3) {\n          t3.x *= n2, t3.y = t3.depth * e2;\n        }\n        return i2.separation = function(n3) {\n          return arguments.length ? (t2 = n3, i2) : t2;\n        }, i2.size = function(t3) {\n          return arguments.length ? (r2 = false, n2 = +t3[0], e2 = +t3[1], i2) : r2 ? null : [n2, e2];\n        }, i2.nodeSize = function(t3) {\n          return arguments.length ? (r2 = true, n2 = +t3[0], e2 = +t3[1], i2) : r2 ? [n2, e2] : null;\n        }, i2;\n      }, t.treemap = function() {\n        var t2 = Yp, n2 = false, e2 = 1, r2 = 1, i2 = [0], o2 = np, a2 = np, u2 = np, c2 = np, f2 = np;\n        function s2(t3) {\n          return t3.x0 = t3.y0 = 0, t3.x1 = e2, t3.y1 = r2, t3.eachBefore(l2), i2 = [0], n2 && t3.eachBefore(Tp), t3;\n        }\n        function l2(n3) {\n          var e3 = i2[n3.depth], r3 = n3.x0 + e3, s3 = n3.y0 + e3, l3 = n3.x1 - e3, h2 = n3.y1 - e3;\n          l3 < r3 && (r3 = l3 = (r3 + l3) / 2), h2 < s3 && (s3 = h2 = (s3 + h2) / 2), n3.x0 = r3, n3.y0 = s3, n3.x1 = l3, n3.y1 = h2, n3.children && (e3 = i2[n3.depth + 1] = o2(n3) / 2, r3 += f2(n3) - e3, s3 += a2(n3) - e3, (l3 -= u2(n3) - e3) < r3 && (r3 = l3 = (r3 + l3) / 2), (h2 -= c2(n3) - e3) < s3 && (s3 = h2 = (s3 + h2) / 2), t2(n3, r3, s3, l3, h2));\n        }\n        return s2.round = function(t3) {\n          return arguments.length ? (n2 = !!t3, s2) : n2;\n        }, s2.size = function(t3) {\n          return arguments.length ? (e2 = +t3[0], r2 = +t3[1], s2) : [e2, r2];\n        }, s2.tile = function(n3) {\n          return arguments.length ? (t2 = tp(n3), s2) : t2;\n        }, s2.padding = function(t3) {\n          return arguments.length ? s2.paddingInner(t3).paddingOuter(t3) : s2.paddingInner();\n        }, s2.paddingInner = function(t3) {\n          return arguments.length ? (o2 = \"function\" == typeof t3 ? t3 : ep(+t3), s2) : o2;\n        }, s2.paddingOuter = function(t3) {\n          return arguments.length ? s2.paddingTop(t3).paddingRight(t3).paddingBottom(t3).paddingLeft(t3) : s2.paddingTop();\n        }, s2.paddingTop = function(t3) {\n          return arguments.length ? (a2 = \"function\" == typeof t3 ? t3 : ep(+t3), s2) : a2;\n        }, s2.paddingRight = function(t3) {\n          return arguments.length ? (u2 = \"function\" == typeof t3 ? t3 : ep(+t3), s2) : u2;\n        }, s2.paddingBottom = function(t3) {\n          return arguments.length ? (c2 = \"function\" == typeof t3 ? t3 : ep(+t3), s2) : c2;\n        }, s2.paddingLeft = function(t3) {\n          return arguments.length ? (f2 = \"function\" == typeof t3 ? t3 : ep(+t3), s2) : f2;\n        }, s2;\n      }, t.treemapBinary = function(t2, n2, e2, r2, i2) {\n        var o2, a2, u2 = t2.children, c2 = u2.length, f2 = new Array(c2 + 1);\n        for (f2[0] = a2 = o2 = 0; o2 < c2; ++o2)\n          f2[o2 + 1] = a2 += u2[o2].value;\n        !function t3(n3, e3, r3, i3, o3, a3, c3) {\n          if (n3 >= e3 - 1) {\n            var s2 = u2[n3];\n            return s2.x0 = i3, s2.y0 = o3, s2.x1 = a3, void (s2.y1 = c3);\n          }\n          var l2 = f2[n3], h2 = r3 / 2 + l2, d2 = n3 + 1, p2 = e3 - 1;\n          for (; d2 < p2; ) {\n            var g2 = d2 + p2 >>> 1;\n            f2[g2] < h2 ? d2 = g2 + 1 : p2 = g2;\n          }\n          h2 - f2[d2 - 1] < f2[d2] - h2 && n3 + 1 < d2 && --d2;\n          var y2 = f2[d2] - l2, v2 = r3 - y2;\n          if (a3 - i3 > c3 - o3) {\n            var _2 = r3 ? (i3 * v2 + a3 * y2) / r3 : a3;\n            t3(n3, d2, y2, i3, o3, _2, c3), t3(d2, e3, v2, _2, o3, a3, c3);\n          } else {\n            var b2 = r3 ? (o3 * v2 + c3 * y2) / r3 : c3;\n            t3(n3, d2, y2, i3, o3, a3, b2), t3(d2, e3, v2, i3, b2, a3, c3);\n          }\n        }(0, c2, t2.value, n2, e2, r2, i2);\n      }, t.treemapDice = Ap, t.treemapResquarify = Lp, t.treemapSlice = Ip, t.treemapSliceDice = function(t2, n2, e2, r2, i2) {\n        (1 & t2.depth ? Ip : Ap)(t2, n2, e2, r2, i2);\n      }, t.treemapSquarify = Yp, t.tsv = Mc, t.tsvFormat = lc, t.tsvFormatBody = hc, t.tsvFormatRow = pc, t.tsvFormatRows = dc, t.tsvFormatValue = gc, t.tsvParse = fc, t.tsvParseRows = sc, t.union = function(...t2) {\n        const n2 = new InternSet();\n        for (const e2 of t2)\n          for (const t3 of e2)\n            n2.add(t3);\n        return n2;\n      }, t.unixDay = _y, t.unixDays = by, t.utcDay = yy, t.utcDays = vy, t.utcFriday = By, t.utcFridays = Vy, t.utcHour = hy, t.utcHours = dy, t.utcMillisecond = Wg, t.utcMilliseconds = Zg, t.utcMinute = cy, t.utcMinutes = fy, t.utcMonday = qy, t.utcMondays = jy, t.utcMonth = Qy, t.utcMonths = Jy, t.utcSaturday = Yy, t.utcSaturdays = Wy, t.utcSecond = iy, t.utcSeconds = oy, t.utcSunday = Fy, t.utcSundays = Ly, t.utcThursday = Oy, t.utcThursdays = Gy, t.utcTickInterval = av, t.utcTicks = ov, t.utcTuesday = Uy, t.utcTuesdays = Hy, t.utcWednesday = Iy, t.utcWednesdays = Xy, t.utcWeek = Fy, t.utcWeeks = Ly, t.utcYear = ev, t.utcYears = rv, t.variance = x, t.version = \"7.8.5\", t.window = pn, t.xml = Sc, t.zip = function() {\n        return gt(arguments);\n      }, t.zoom = function() {\n        var t2, n2, e2, r2 = Sw, i2 = Ew, o2 = Pw, a2 = kw, u2 = Cw, c2 = [0, 1 / 0], f2 = [[-1 / 0, -1 / 0], [1 / 0, 1 / 0]], s2 = 250, l2 = ri, h2 = $t(\"start\", \"zoom\", \"end\"), d2 = 500, p2 = 150, g2 = 0, y2 = 10;\n        function v2(t3) {\n          t3.property(\"__zoom\", Nw).on(\"wheel.zoom\", T2, { passive: false }).on(\"mousedown.zoom\", A2).on(\"dblclick.zoom\", S2).filter(u2).on(\"touchstart.zoom\", E2).on(\"touchmove.zoom\", N2).on(\"touchend.zoom touchcancel.zoom\", k2).style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n        }\n        function _2(t3, n3) {\n          return (n3 = Math.max(c2[0], Math.min(c2[1], n3))) === t3.k ? t3 : new xw(n3, t3.x, t3.y);\n        }\n        function b2(t3, n3, e3) {\n          var r3 = n3[0] - e3[0] * t3.k, i3 = n3[1] - e3[1] * t3.k;\n          return r3 === t3.x && i3 === t3.y ? t3 : new xw(t3.k, r3, i3);\n        }\n        function m2(t3) {\n          return [(+t3[0][0] + +t3[1][0]) / 2, (+t3[0][1] + +t3[1][1]) / 2];\n        }\n        function x2(t3, n3, e3, r3) {\n          t3.on(\"start.zoom\", function() {\n            w2(this, arguments).event(r3).start();\n          }).on(\"interrupt.zoom end.zoom\", function() {\n            w2(this, arguments).event(r3).end();\n          }).tween(\"zoom\", function() {\n            var t4 = this, o3 = arguments, a3 = w2(t4, o3).event(r3), u3 = i2.apply(t4, o3), c3 = null == e3 ? m2(u3) : \"function\" == typeof e3 ? e3.apply(t4, o3) : e3, f3 = Math.max(u3[1][0] - u3[0][0], u3[1][1] - u3[0][1]), s3 = t4.__zoom, h3 = \"function\" == typeof n3 ? n3.apply(t4, o3) : n3, d4 = l2(s3.invert(c3).concat(f3 / s3.k), h3.invert(c3).concat(f3 / h3.k));\n            return function(t5) {\n              if (1 === t5)\n                t5 = h3;\n              else {\n                var n4 = d4(t5), e4 = f3 / n4[2];\n                t5 = new xw(e4, c3[0] - n4[0] * e4, c3[1] - n4[1] * e4);\n              }\n              a3.zoom(null, t5);\n            };\n          });\n        }\n        function w2(t3, n3, e3) {\n          return !e3 && t3.__zooming || new M2(t3, n3);\n        }\n        function M2(t3, n3) {\n          this.that = t3, this.args = n3, this.active = 0, this.sourceEvent = null, this.extent = i2.apply(t3, n3), this.taps = 0;\n        }\n        function T2(t3, ...n3) {\n          if (r2.apply(this, arguments)) {\n            var e3 = w2(this, n3).event(t3), i3 = this.__zoom, u3 = Math.max(c2[0], Math.min(c2[1], i3.k * Math.pow(2, a2.apply(this, arguments)))), s3 = ne(t3);\n            if (e3.wheel)\n              e3.mouse[0][0] === s3[0] && e3.mouse[0][1] === s3[1] || (e3.mouse[1] = i3.invert(e3.mouse[0] = s3)), clearTimeout(e3.wheel);\n            else {\n              if (i3.k === u3)\n                return;\n              e3.mouse = [s3, i3.invert(s3)], Gi(this), e3.start();\n            }\n            Aw(t3), e3.wheel = setTimeout(function() {\n              e3.wheel = null, e3.end();\n            }, p2), e3.zoom(\"mouse\", o2(b2(_2(i3, u3), e3.mouse[0], e3.mouse[1]), e3.extent, f2));\n          }\n        }\n        function A2(t3, ...n3) {\n          if (!e2 && r2.apply(this, arguments)) {\n            var i3 = t3.currentTarget, a3 = w2(this, n3, true).event(t3), u3 = Zn(t3.view).on(\"mousemove.zoom\", function(t4) {\n              if (Aw(t4), !a3.moved) {\n                var n4 = t4.clientX - s3, e3 = t4.clientY - l3;\n                a3.moved = n4 * n4 + e3 * e3 > g2;\n              }\n              a3.event(t4).zoom(\"mouse\", o2(b2(a3.that.__zoom, a3.mouse[0] = ne(t4, i3), a3.mouse[1]), a3.extent, f2));\n            }, true).on(\"mouseup.zoom\", function(t4) {\n              u3.on(\"mousemove.zoom mouseup.zoom\", null), ue(t4.view, a3.moved), Aw(t4), a3.event(t4).end();\n            }, true), c3 = ne(t3, i3), s3 = t3.clientX, l3 = t3.clientY;\n            ae(t3.view), Tw(t3), a3.mouse = [c3, this.__zoom.invert(c3)], Gi(this), a3.start();\n          }\n        }\n        function S2(t3, ...n3) {\n          if (r2.apply(this, arguments)) {\n            var e3 = this.__zoom, a3 = ne(t3.changedTouches ? t3.changedTouches[0] : t3, this), u3 = e3.invert(a3), c3 = e3.k * (t3.shiftKey ? 0.5 : 2), l3 = o2(b2(_2(e3, c3), a3, u3), i2.apply(this, n3), f2);\n            Aw(t3), s2 > 0 ? Zn(this).transition().duration(s2).call(x2, l3, a3, t3) : Zn(this).call(v2.transform, l3, a3, t3);\n          }\n        }\n        function E2(e3, ...i3) {\n          if (r2.apply(this, arguments)) {\n            var o3, a3, u3, c3, f3 = e3.touches, s3 = f3.length, l3 = w2(this, i3, e3.changedTouches.length === s3).event(e3);\n            for (Tw(e3), a3 = 0; a3 < s3; ++a3)\n              c3 = [c3 = ne(u3 = f3[a3], this), this.__zoom.invert(c3), u3.identifier], l3.touch0 ? l3.touch1 || l3.touch0[2] === c3[2] || (l3.touch1 = c3, l3.taps = 0) : (l3.touch0 = c3, o3 = true, l3.taps = 1 + !!t2);\n            t2 && (t2 = clearTimeout(t2)), o3 && (l3.taps < 2 && (n2 = c3[0], t2 = setTimeout(function() {\n              t2 = null;\n            }, d2)), Gi(this), l3.start());\n          }\n        }\n        function N2(t3, ...n3) {\n          if (this.__zooming) {\n            var e3, r3, i3, a3, u3 = w2(this, n3).event(t3), c3 = t3.changedTouches, s3 = c3.length;\n            for (Aw(t3), e3 = 0; e3 < s3; ++e3)\n              i3 = ne(r3 = c3[e3], this), u3.touch0 && u3.touch0[2] === r3.identifier ? u3.touch0[0] = i3 : u3.touch1 && u3.touch1[2] === r3.identifier && (u3.touch1[0] = i3);\n            if (r3 = u3.that.__zoom, u3.touch1) {\n              var l3 = u3.touch0[0], h3 = u3.touch0[1], d4 = u3.touch1[0], p3 = u3.touch1[1], g3 = (g3 = d4[0] - l3[0]) * g3 + (g3 = d4[1] - l3[1]) * g3, y3 = (y3 = p3[0] - h3[0]) * y3 + (y3 = p3[1] - h3[1]) * y3;\n              r3 = _2(r3, Math.sqrt(g3 / y3)), i3 = [(l3[0] + d4[0]) / 2, (l3[1] + d4[1]) / 2], a3 = [(h3[0] + p3[0]) / 2, (h3[1] + p3[1]) / 2];\n            } else {\n              if (!u3.touch0)\n                return;\n              i3 = u3.touch0[0], a3 = u3.touch0[1];\n            }\n            u3.zoom(\"touch\", o2(b2(r3, i3, a3), u3.extent, f2));\n          }\n        }\n        function k2(t3, ...r3) {\n          if (this.__zooming) {\n            var i3, o3, a3 = w2(this, r3).event(t3), u3 = t3.changedTouches, c3 = u3.length;\n            for (Tw(t3), e2 && clearTimeout(e2), e2 = setTimeout(function() {\n              e2 = null;\n            }, d2), i3 = 0; i3 < c3; ++i3)\n              o3 = u3[i3], a3.touch0 && a3.touch0[2] === o3.identifier ? delete a3.touch0 : a3.touch1 && a3.touch1[2] === o3.identifier && delete a3.touch1;\n            if (a3.touch1 && !a3.touch0 && (a3.touch0 = a3.touch1, delete a3.touch1), a3.touch0)\n              a3.touch0[1] = this.__zoom.invert(a3.touch0[0]);\n            else if (a3.end(), 2 === a3.taps && (o3 = ne(o3, this), Math.hypot(n2[0] - o3[0], n2[1] - o3[1]) < y2)) {\n              var f3 = Zn(this).on(\"dblclick.zoom\");\n              f3 && f3.apply(this, arguments);\n            }\n          }\n        }\n        return v2.transform = function(t3, n3, e3, r3) {\n          var i3 = t3.selection ? t3.selection() : t3;\n          i3.property(\"__zoom\", Nw), t3 !== i3 ? x2(t3, n3, e3, r3) : i3.interrupt().each(function() {\n            w2(this, arguments).event(r3).start().zoom(null, \"function\" == typeof n3 ? n3.apply(this, arguments) : n3).end();\n          });\n        }, v2.scaleBy = function(t3, n3, e3, r3) {\n          v2.scaleTo(t3, function() {\n            return this.__zoom.k * (\"function\" == typeof n3 ? n3.apply(this, arguments) : n3);\n          }, e3, r3);\n        }, v2.scaleTo = function(t3, n3, e3, r3) {\n          v2.transform(t3, function() {\n            var t4 = i2.apply(this, arguments), r4 = this.__zoom, a3 = null == e3 ? m2(t4) : \"function\" == typeof e3 ? e3.apply(this, arguments) : e3, u3 = r4.invert(a3), c3 = \"function\" == typeof n3 ? n3.apply(this, arguments) : n3;\n            return o2(b2(_2(r4, c3), a3, u3), t4, f2);\n          }, e3, r3);\n        }, v2.translateBy = function(t3, n3, e3, r3) {\n          v2.transform(t3, function() {\n            return o2(this.__zoom.translate(\"function\" == typeof n3 ? n3.apply(this, arguments) : n3, \"function\" == typeof e3 ? e3.apply(this, arguments) : e3), i2.apply(this, arguments), f2);\n          }, null, r3);\n        }, v2.translateTo = function(t3, n3, e3, r3, a3) {\n          v2.transform(t3, function() {\n            var t4 = i2.apply(this, arguments), a4 = this.__zoom, u3 = null == r3 ? m2(t4) : \"function\" == typeof r3 ? r3.apply(this, arguments) : r3;\n            return o2(ww.translate(u3[0], u3[1]).scale(a4.k).translate(\"function\" == typeof n3 ? -n3.apply(this, arguments) : -n3, \"function\" == typeof e3 ? -e3.apply(this, arguments) : -e3), t4, f2);\n          }, r3, a3);\n        }, M2.prototype = { event: function(t3) {\n          return t3 && (this.sourceEvent = t3), this;\n        }, start: function() {\n          return 1 == ++this.active && (this.that.__zooming = this, this.emit(\"start\")), this;\n        }, zoom: function(t3, n3) {\n          return this.mouse && \"mouse\" !== t3 && (this.mouse[1] = n3.invert(this.mouse[0])), this.touch0 && \"touch\" !== t3 && (this.touch0[1] = n3.invert(this.touch0[0])), this.touch1 && \"touch\" !== t3 && (this.touch1[1] = n3.invert(this.touch1[0])), this.that.__zoom = n3, this.emit(\"zoom\"), this;\n        }, end: function() {\n          return 0 == --this.active && (delete this.that.__zooming, this.emit(\"end\")), this;\n        }, emit: function(t3) {\n          var n3 = Zn(this.that).datum();\n          h2.call(t3, this.that, new mw(t3, { sourceEvent: this.sourceEvent, target: v2, type: t3, transform: this.that.__zoom, dispatch: h2 }), n3);\n        } }, v2.wheelDelta = function(t3) {\n          return arguments.length ? (a2 = \"function\" == typeof t3 ? t3 : bw(+t3), v2) : a2;\n        }, v2.filter = function(t3) {\n          return arguments.length ? (r2 = \"function\" == typeof t3 ? t3 : bw(!!t3), v2) : r2;\n        }, v2.touchable = function(t3) {\n          return arguments.length ? (u2 = \"function\" == typeof t3 ? t3 : bw(!!t3), v2) : u2;\n        }, v2.extent = function(t3) {\n          return arguments.length ? (i2 = \"function\" == typeof t3 ? t3 : bw([[+t3[0][0], +t3[0][1]], [+t3[1][0], +t3[1][1]]]), v2) : i2;\n        }, v2.scaleExtent = function(t3) {\n          return arguments.length ? (c2[0] = +t3[0], c2[1] = +t3[1], v2) : [c2[0], c2[1]];\n        }, v2.translateExtent = function(t3) {\n          return arguments.length ? (f2[0][0] = +t3[0][0], f2[1][0] = +t3[1][0], f2[0][1] = +t3[0][1], f2[1][1] = +t3[1][1], v2) : [[f2[0][0], f2[0][1]], [f2[1][0], f2[1][1]]];\n        }, v2.constrain = function(t3) {\n          return arguments.length ? (o2 = t3, v2) : o2;\n        }, v2.duration = function(t3) {\n          return arguments.length ? (s2 = +t3, v2) : s2;\n        }, v2.interpolate = function(t3) {\n          return arguments.length ? (l2 = t3, v2) : l2;\n        }, v2.on = function() {\n          var t3 = h2.on.apply(h2, arguments);\n          return t3 === h2 ? v2 : t3;\n        }, v2.clickDistance = function(t3) {\n          return arguments.length ? (g2 = (t3 = +t3) * t3, v2) : Math.sqrt(g2);\n        }, v2.tapDistance = function(t3) {\n          return arguments.length ? (y2 = +t3, v2) : y2;\n        }, v2;\n      }, t.zoomIdentity = ww, t.zoomTransform = Mw;\n    });\n  }\n});\n\n// js/scatter_widget.js\nvar d3 = __toESM(require_d3_v7());\nfunction render({ model, el }) {\n  const colors = [\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\"];\n  const color_map = { \"#1f77b4\": \"a\", \"#ff7f0e\": \"b\", \"#2ca02c\": \"c\", \"#d62728\": \"d\" };\n  const height = 500;\n  const width = 800;\n  let container = document.createElement(\"div\");\n  let fieldset_radio = document.createElement(\"fieldset\");\n  fieldset_radio.setAttribute(\"style\", \"width: 170px; margin-left: 1px; margin-top: -10px; display:inline\");\n  let legend_radio = document.createElement(\"legend\");\n  legend_radio.innerText = \"Class:\";\n  fieldset_radio.appendChild(legend_radio);\n  let radio_buttons = {};\n  function add_label_elem(parent, id) {\n    let label = document.createElement(\"label\");\n    label.setAttribute(\"for\", id);\n    label.setAttribute(\"style\", \"padding-left: 5px;\");\n    if (id == \"a\") {\n      label.setAttribute(\"style\", \"padding-left: 17px;\");\n    }\n    label.innerText = id;\n    parent.appendChild(label);\n  }\n  [\"a\", \"b\", \"c\", \"d\"].map(function(d, i) {\n    let radio = document.createElement(\"input\");\n    radio.setAttribute(\"type\", \"radio\");\n    radio.setAttribute(\"name\", \"colorselector\");\n    radio.setAttribute(\"value\", i);\n    if (i == 0) {\n      radio.setAttribute(\"checked\", \"true\");\n      radio.click();\n    }\n    add_label_elem(fieldset_radio, d);\n    radio.onclick = function() {\n      selected_color = colors[i];\n    };\n    radio_buttons[d] = radio;\n    fieldset_radio.appendChild(radio);\n  });\n  container.appendChild(fieldset_radio);\n  let fieldset_size = document.createElement(\"fieldset\");\n  fieldset_size.setAttribute(\"style\", \"width: 200px; margin: 10px; display:inline\");\n  let legend_size = document.createElement(\"legend\");\n  legend_size.innerText = \"Brushsize:\";\n  fieldset_size.appendChild(legend_size);\n  let size_input = document.createElement(\"input\");\n  size_input.setAttribute(\"type\", \"range\");\n  size_input.setAttribute(\"id\", \"size\");\n  size_input.setAttribute(\"name\", \"size\");\n  size_input.setAttribute(\"min\", \"5\");\n  size_input.setAttribute(\"max\", \"100\");\n  size_input.setAttribute(\"value\", model.get(\"brushsize\"));\n  size_input.setAttribute(\"style\", \"display:inline; padding-left: 30px;\");\n  size_input.onchange = resize_brush;\n  size_input.oninput = resize_brush;\n  fieldset_size.appendChild(size_input);\n  container.appendChild(fieldset_size);\n  let reset_btn = document.createElement(\"button\");\n  reset_btn.setAttribute(\"id\", \"reset\");\n  reset_btn.setAttribute(\"style\", \"display:inline\");\n  reset_btn.innerText = \"Reset\";\n  reset_btn.onclick = reset;\n  container.appendChild(reset_btn);\n  let undo_btn = document.createElement(\"button\");\n  undo_btn.setAttribute(\"id\", \"undo\");\n  undo_btn.setAttribute(\"style\", \"display:inline\");\n  undo_btn.innerText = \"Undo\";\n  undo_btn.onclick = undo;\n  container.appendChild(undo_btn);\n  let div = document.createElement(\"div\");\n  div.setAttribute(\"style\", \"display:inline; padding-left: 10px;\");\n  let count_spans = {};\n  [\"a\", \"b\", \"c\", \"d\"].map(function(d, i) {\n    let background_colors = [\"#a4c8e0\", \"#ffcb9e\", \"#aad8aa\", \"#eea8a8\"];\n    let span = document.createElement(\"span\");\n    span.setAttribute(\"style\", `background-color: ${background_colors[i]}`);\n    span.innerText = `${d}: 0`;\n    span.setAttribute(\"class\", \"count\");\n    count_spans[d] = span;\n    div.appendChild(span);\n  });\n  container.appendChild(div);\n  el.appendChild(container);\n  let data = model.get(\"data\");\n  let svg = d3.select(container).append(\"svg\").style(\"display\", \"block\").style(\"cursor\", \"crosshair\");\n  let selected_color = colors[0];\n  let batch = 0;\n  svg.attr(\"width\", width).attr(\"height\", height).style(\"background\", \"#eeeeee\").call(\n    d3.drag().on(\"start\", drag_start).on(\"drag\", dragged).on(\"end\", drag_end)\n  ).on(\"mousemove\", mousemove);\n  function redraw_from_scratch() {\n    svg.selectAll(\"circle.drawn\").remove();\n    data.map(function(d) {\n      svg.append(\"circle\").attr(\"cx\", d.x).attr(\"cy\", height - d.y).attr(\"r\", 4).style(\"fill\", d.color).attr(\"class\", `batch_${d.batch} drawn`);\n    });\n    update_counts();\n  }\n  redraw_from_scratch();\n  model.on(\"change:data\", function() {\n    update_counts();\n  });\n  model.on(\"change:brushsize\", function() {\n    circle_brush.attr(\"r\", size_input.value);\n  });\n  let circle_brush = svg.append(\"circle\").attr(\"cx\", width / 2).attr(\"cy\", height / 2).attr(\"r\", model.get(\"brushsize\")).style(\"fill-opacity\", 0.1);\n  function drag_start(event) {\n    [\"a\", \"b\", \"c\", \"d\"].map(function(d, i) {\n      if (radio_buttons[d].checked) {\n        selected_color = colors[i];\n      }\n    });\n  }\n  function mousemove(event) {\n    let rect = svg.node().getBoundingClientRect();\n    circle_brush.attr(\"cx\", event.pageX - rect[\"x\"] + \"px\").attr(\"cy\", event.pageY - rect[\"top\"] + \"px\");\n  }\n  function resize_brush() {\n    model.set(\"brushsize\", Number(size_input.value));\n  }\n  function dragged(event) {\n    let r1 = container.getBoundingClientRect();\n    let r2 = svg.node().getBoundingClientRect();\n    let size = size_input.value;\n    let new_x = event.x + (Math.random() - 0.5) * size;\n    let corrected_y = event.y - (r2.y - r1.y);\n    let new_y = corrected_y + (Math.random() - 0.5) * size;\n    let label = color_map[selected_color];\n    svg.append(\"circle\").attr(\"cx\", new_x).attr(\"cy\", new_y).attr(\"r\", 4).style(\"fill\", selected_color).attr(\"class\", `batch_${batch} drawn`);\n    data.push({ x: new_x, y: height - new_y, color: selected_color, label, batch });\n    circle_brush.attr(\"cx\", event.x + \"px\").attr(\"cy\", corrected_y + \"px\");\n  }\n  function drag_end(event) {\n    model.set(\"data\", grab_data());\n    model.save_changes();\n    batch = Math.max(...data.map(function(d) {\n      return d.batch;\n    }), 0) + 1;\n    update_counts();\n  }\n  function grab_data() {\n    return data.map(function(d) {\n      return { x: d.x, y: d.y, color: d.color, label: d.label };\n    });\n  }\n  function reset() {\n    data = [];\n    model.set(\"data\", []);\n    model.save_changes();\n    svg.selectAll(\"circle.drawn\").remove();\n    update_counts();\n  }\n  function undo() {\n    let batch2 = Math.max(...data.map(function(d) {\n      return d.batch;\n    }), 0);\n    d3.selectAll(`circle.batch_${batch2}`).remove();\n    data = data.filter(function(d) {\n      return d.batch != batch2;\n    });\n    model.set(\"data\", grab_data());\n    model.save_changes();\n    update_counts();\n  }\n  function update_counts() {\n    [\"a\", \"b\", \"c\", \"d\"].map(function(d, i) {\n      let count = data.filter(function(d2) {\n        return d2.color == colors[i];\n      }).length;\n      count_spans[d].innerText = `${d}: ${count}`;\n    });\n  }\n  return () => {\n    d3.select(container).remove();\n  };\n}\nvar scatter_widget_default = { render };\nexport {\n  scatter_widget_default as default\n};\n",
            "_model_module": "anywidget",
            "_model_module_version": "0.9.6",
            "_model_name": "AnyModel",
            "_view_count": null,
            "_view_module": "anywidget",
            "_view_module_version": "0.9.6",
            "_view_name": "AnyView",
            "brushsize": 40,
            "data": [
              {
                "x": 190.58156038090985,
                "y": 385.54352602850446,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 181.10172608020778,
                "y": 396.28078061798686,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 187.5008841842126,
                "y": 342.757487694172,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 210.7096551887483,
                "y": 331.9124757754564,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 208.09836172977998,
                "y": 290.95884870164014,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 205.85493470502453,
                "y": 279.767164821957,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 204.720673495856,
                "y": 270.6959347961193,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 203.60431850982422,
                "y": 299.56373256667206,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 219.5191789621336,
                "y": 290.9028249307866,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 225.74045442895883,
                "y": 280.94637474944636,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 234.87326129751816,
                "y": 317.7146261991529,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 230.49827382782027,
                "y": 318.68529873757393,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 226.5418325123654,
                "y": 320.3791791220491,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 224.1649960649577,
                "y": 330.79766527376927,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 239.42212684332011,
                "y": 339.92038376039307,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 230.2570012022106,
                "y": 369.4584768062737,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 232.03019212509486,
                "y": 363.3373437044826,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 213.21929670127463,
                "y": 383.9641025925365,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 192.3216430722302,
                "y": 355.18277071480793,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 219.0163357917604,
                "y": 357.1629065424074,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 217.15923475538656,
                "y": 342.26175975697095,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 194.22709322941148,
                "y": 328.8883556898097,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 196.08407143440442,
                "y": 307.3435885262046,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 192.7120642731732,
                "y": 328.48648004900633,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 201.99760550282093,
                "y": 300.1571658924199,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 228.31952383158625,
                "y": 320.3376252967371,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 227.52861227577867,
                "y": 319.0899171494236,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 227.7536724922055,
                "y": 332.96974876469005,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 238.52995165303554,
                "y": 367.05695759831156,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 257.4925799282421,
                "y": 372.04105479967205,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 271.8809324599431,
                "y": 374.6213818687376,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 251.43210297842805,
                "y": 403.84998242744007,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 240.83670578821454,
                "y": 413.813071502929,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 236.2287620383255,
                "y": 401.4776287048511,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 242.65687404135127,
                "y": 420.9486970531426,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 208.00896918666393,
                "y": 418.6548358148834,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 231.50661121177004,
                "y": 378.21694005576734,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 217.8364166372558,
                "y": 344.26714847200356,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 204.75041293733486,
                "y": 336.64882355079646,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 176.88005942061022,
                "y": 343.3606477589187,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 176.09343568827705,
                "y": 312.96579428580947,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 193.8300448146506,
                "y": 314.3177791310777,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 189.55848426985096,
                "y": 293.66987911452543,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 200.8439940019262,
                "y": 313.13251514453003,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 192.72759428930016,
                "y": 276.72657616957116,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 210.670157892511,
                "y": 321.10590019334694,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 252.71731952263823,
                "y": 351.84837754149214,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 249.0231601078857,
                "y": 373.10871642229006,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 255.7140231687403,
                "y": 389.66819893610545,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 231.06682815638646,
                "y": 366.63281869506136,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 256.57643069651857,
                "y": 379.8526075472919,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 235.0352778214548,
                "y": 358.9124265862919,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 216.4285327223597,
                "y": 375.62980683610334,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 234.98933694502696,
                "y": 362.6521104292305,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 199.0027425449977,
                "y": 335.59625144920955,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 218.6094305913624,
                "y": 341.8804632035455,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 193.951517826554,
                "y": 334.4061659798732,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 212.21390794772552,
                "y": 296.87942393235926,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 211.26348495136827,
                "y": 284.8928475093736,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 198.05178633331457,
                "y": 284.0972825780201,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 234.0465717109554,
                "y": 292.6853330193379,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 225.00223848708234,
                "y": 289.2940968365123,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 240.1484722893772,
                "y": 301.82768771165433,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 259.0586278036068,
                "y": 319.76141393326634,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 255.8045341504912,
                "y": 364.77714151798483,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 283.7590831150934,
                "y": 363.9686541327829,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 292.46066038674667,
                "y": 387.1967486467527,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 287.8434283886347,
                "y": 394.32582068296585,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 284.6051318207539,
                "y": 404.999932614607,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 249.76290369252692,
                "y": 387.77233982197606,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 255.01473888391814,
                "y": 395.61830725364626,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 257.15630442092913,
                "y": 396.1349013651271,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 239.3024816258069,
                "y": 349.0682135998243,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 224.94465694567597,
                "y": 333.91710027996777,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 216.0068092984125,
                "y": 326.2876793602813,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 252.71521517747811,
                "y": 311.5458239906079,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 227.16206661485012,
                "y": 330.3863546275663,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 223.90716568253714,
                "y": 303.20030640477876,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 234.6270899000341,
                "y": 298.99038985263655,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 264.2597376798205,
                "y": 294.72916632698843,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 270.8699902683288,
                "y": 302.73668308752747,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 306.64058524065075,
                "y": 324.70560824315623,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 326.6123556122083,
                "y": 378.4727103978451,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 337.8650610160148,
                "y": 366.05770117671165,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 326.5382270444229,
                "y": 388.94946936776074,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 296.44541733490445,
                "y": 379.2221206494307,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 293.03532019756085,
                "y": 405.6984368023536,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 280.7745429538397,
                "y": 389.29901388321247,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 309.7401019277137,
                "y": 404.9558397057678,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 291.3984259338217,
                "y": 378.56178178785404,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 267.08883357403556,
                "y": 358.2294689211883,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 290.4884296099606,
                "y": 369.8537425055992,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 278.42322866207553,
                "y": 369.43182005409165,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 298.65087930168085,
                "y": 344.1583602169264,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 291.901919468141,
                "y": 323.4166870774846,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 277.55982970126524,
                "y": 315.7267150587202,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 291.9807223147297,
                "y": 340.1920955300719,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 301.8148752108337,
                "y": 322.4495077027444,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 335.74663755158156,
                "y": 306.99959478943254,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 351.47925717090385,
                "y": 336.1202198296414,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 332.29139700192485,
                "y": 346.2505212688427,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 357.5705190892298,
                "y": 333.5719064882131,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 378.9307128918244,
                "y": 372.3374240725835,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 358.68023260846263,
                "y": 377.12122830945265,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 367.8706378241278,
                "y": 378.5198759894091,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 347.22665432731907,
                "y": 361.36912245460405,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 325.0031481000792,
                "y": 387.6038031076766,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 309.0635732693399,
                "y": 373.97123230561726,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 308.8693918646056,
                "y": 353.1586576874231,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 286.11032657114686,
                "y": 328.9315797229903,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 286.82844824335695,
                "y": 325.65310333074495,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 297.88727129625016,
                "y": 280.1482149714602,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 262.4677477953514,
                "y": 290.9338000842199,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 290.67550207769517,
                "y": 272.05155656275343,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 262.32554170759107,
                "y": 261.948986384376,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 277.68387647682454,
                "y": 272.10041540955706,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 283.93684354423164,
                "y": 266.1099295939707,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 295.9001149360751,
                "y": 273.89688672148793,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 318.7510912371761,
                "y": 288.5341736711391,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 334.1053780175746,
                "y": 336.8965426673018,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 333.980801593964,
                "y": 343.0281393952712,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 314.2376368645199,
                "y": 347.7326012881215,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 334.0656671369782,
                "y": 358.91228309398167,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 308.7153480067786,
                "y": 378.43266956055845,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 313.9904507337588,
                "y": 388.0914608259674,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 287.06129290031976,
                "y": 383.46458951608577,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 284.8207141151828,
                "y": 380.1100635419922,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 281.8547719203451,
                "y": 348.7435192380794,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 281.4823748950653,
                "y": 344.7977339501148,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 262.41156090364314,
                "y": 330.6203838873957,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 265.5189642676276,
                "y": 339.87119224450976,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 286.2488601370014,
                "y": 334.553097613682,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 295.18354185710496,
                "y": 307.6956256160187,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 291.2091104648089,
                "y": 316.80415554731735,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 298.95878061310367,
                "y": 322.54129216124625,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 338.6739127575278,
                "y": 348.31032419920496,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 369.08124153161305,
                "y": 369.96342395780243,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 376.49449595273495,
                "y": 383.7394256016736,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 371.660099082741,
                "y": 407.9560504218152,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.215610520229,
                "y": 437.6304613557629,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 358.7664790481168,
                "y": 436.8893005266713,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 355.9422936222829,
                "y": 443.09550474838676,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 376.0181297642922,
                "y": 429.49028523058,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 337.86276055575865,
                "y": 417.5658915479475,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 348.612640855002,
                "y": 422.8112805415729,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 283.9991977036193,
                "y": 358.58084120236356,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 262.0186646929921,
                "y": 337.0430626207169,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 281.44975618120134,
                "y": 271.7630261722718,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 258.1217817472552,
                "y": 245.55786280107247,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 273.30388670648495,
                "y": 262.55688613018316,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 253.251659249107,
                "y": 247.16854160845264,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 265.58019325470855,
                "y": 259.5486648949314,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 271.2186019620192,
                "y": 224.33237004745763,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 290.6771317006626,
                "y": 246.47522508637257,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 313.620853026876,
                "y": 280.4132244928017,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 325.34766483095126,
                "y": 312.9699460296433,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 351.68083912137877,
                "y": 337.9008797590838,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 358.551738235672,
                "y": 331.9399257018496,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 346.33366865784575,
                "y": 348.59734916795276,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.7877580083877,
                "y": 379.9668259350037,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 323.43550401327195,
                "y": 361.46038175534454,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 312.378182291603,
                "y": 365.7905960174702,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 318.2228824289537,
                "y": 370.6792309258909,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 297.8677186519332,
                "y": 354.33621622326746,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 283.06769122329547,
                "y": 346.03358939065333,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 290.1841785317026,
                "y": 338.47993187543716,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 303.12917001756597,
                "y": 326.76101330989707,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 285.4622331824879,
                "y": 290.97409107681267,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 268.88588480330907,
                "y": 296.4728370897318,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 282.5091075557774,
                "y": 308.8185381694789,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 306.1516960625031,
                "y": 311.3121248834989,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 313.6877540274487,
                "y": 292.498993568449,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 326.79100176098717,
                "y": 307.49593355151774,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 307.82822368804807,
                "y": 336.84365244070636,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 336.9390870693255,
                "y": 363.7099067515544,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 350.62155614776003,
                "y": 397.146935068532,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 363.9460255447259,
                "y": 382.16940082969955,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 358.33487411880475,
                "y": 410.53579789805326,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 330.036171411033,
                "y": 401.5708304642234,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 353.57589517431984,
                "y": 394.2472694181034,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 329.2293322439632,
                "y": 404.78979709334214,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 338.21457761757046,
                "y": 358.4466387587417,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 336.8225227667329,
                "y": 353.2630713340599,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 321.7553376733511,
                "y": 371.250201554022,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 343.8118482282678,
                "y": 371.3228379651829,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 348.83626960849347,
                "y": 352.7283361357587,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 345.0904746310959,
                "y": 363.5606384165782,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 316.87401357514193,
                "y": 348.73118902793874,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 335.73829343603825,
                "y": 359.5571647891895,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 319.04983656571915,
                "y": 342.6735181896877,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 353.583633310955,
                "y": 351.05898759500315,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 349.1653282206857,
                "y": 406.2702444725754,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 327.95758042287594,
                "y": 379.44064879726466,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 334.9078384378136,
                "y": 386.67411897693717,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 336.166153608729,
                "y": 368.8608626351669,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 354.1328947853698,
                "y": 389.6259461798891,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 335.7041080698612,
                "y": 382.482237714204,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 349.97563249142024,
                "y": 386.39071737802834,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 311.8508536931173,
                "y": 373.46361020019265,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 326.4806097962524,
                "y": 382.6794597191141,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 340.29266074374493,
                "y": 378.9580118172905,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 330.6283268994127,
                "y": 346.9184697215719,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.57420985794533,
                "y": 369.79373907904665,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 321.01004831288736,
                "y": 361.88108866035464,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 323.5201983535554,
                "y": 373.38706252774443,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 338.7539913613145,
                "y": 375.75900018665664,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 352.2988752242726,
                "y": 354.5127255851233,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 337.72642435702016,
                "y": 367.99217102456964,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.9624583514403,
                "y": 378.98199348267923,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 321.2865277915931,
                "y": 344.8999205355319,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 337.21241702244293,
                "y": 365.10230898846885,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 340.9108446384877,
                "y": 361.634085781241,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 324.14215033200276,
                "y": 348.6193891579598,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 308.8641796084991,
                "y": 355.2272697087085,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 338.862280989888,
                "y": 362.58744378774577,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 313.2167968993092,
                "y": 371.7736030114409,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 312.82351046333565,
                "y": 357.7260141830128,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 318.7570555973235,
                "y": 362.35490297969216,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 317.48158087309855,
                "y": 343.3698057209622,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 340.1571775856678,
                "y": 338.3622542691189,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.24639647806026,
                "y": 375.20943899060876,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 334.80798206364517,
                "y": 363.8752717290534,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 344.03457678173214,
                "y": 366.7486621097672,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 345.5344338306378,
                "y": 372.46935572374707,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 347.44215400786294,
                "y": 384.04433967313673,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 340.240307694409,
                "y": 343.4001894408758,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 324.2118620389576,
                "y": 361.9021295855275,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 311.55620215643364,
                "y": 364.52327345627305,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 343.61534874660384,
                "y": 351.39768153552666,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 324.7147516575164,
                "y": 339.0006977992938,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 338.63854768254595,
                "y": 342.6900251866359,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 310.4904985482065,
                "y": 343.1400985071722,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 330.7705424553311,
                "y": 373.2246177421762,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.8669095506005,
                "y": 368.2631133636414,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 341.805414626418,
                "y": 351.09274582403134,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 346.94133815966126,
                "y": 375.81056134462324,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 316.93756036461656,
                "y": 366.40455964978645,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 337.1682287688425,
                "y": 374.56901855255063,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 332.61459519177384,
                "y": 345.8422521057101,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 335.5462253094398,
                "y": 369.59571932036766,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 315.20995429342173,
                "y": 371.0049984394741,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 336.90505463254425,
                "y": 343.7278270501454,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 315.7054049964226,
                "y": 378.4522302457839,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 328.57792600336705,
                "y": 361.58051162812654,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 351.0626467713198,
                "y": 355.5425416200943,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 323.33561033074324,
                "y": 367.14112784771135,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 321.898445325108,
                "y": 374.8477368593419,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 329.40008384406485,
                "y": 349.07798978622566,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 325.94336922353017,
                "y": 351.92525264134656,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 323.8385513716799,
                "y": 361.4623281361065,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 318.3566383560669,
                "y": 343.63918624909263,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 341.0280572543409,
                "y": 361.80030102693706,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 324.5423827163223,
                "y": 364.60729976305345,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 338.5997566848567,
                "y": 378.36271238577797,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 350.5057417431374,
                "y": 383.0099815521636,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.37164307985574,
                "y": 377.2758729002295,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 336.7379875618058,
                "y": 346.9928073526735,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 347.8563974424905,
                "y": 367.3139064429325,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.4781063007193,
                "y": 376.34285146612916,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 323.7923919254928,
                "y": 366.02994972733495,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 326.39651428321076,
                "y": 369.04132226113,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 339.4070113828192,
                "y": 380.4994379439564,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 323.4597639736684,
                "y": 377.6233171443143,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 346.8922650456064,
                "y": 394.09865016508684,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 360.85455168207864,
                "y": 367.24821988278717,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 343.0404157358485,
                "y": 357.3206902608605,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 364.6417240863839,
                "y": 394.30186308480245,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 348.23131281902016,
                "y": 370.94327963790784,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 345.25735618607246,
                "y": 365.9366992833398,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 331.15588095625884,
                "y": 357.32740753305933,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 369.2172677229638,
                "y": 386.2132626147944,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 346.77682282055423,
                "y": 348.92557168167167,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 357.006938095611,
                "y": 349.13890606076063,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 343.52149157175637,
                "y": 347.592837614951,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 345.77647822344557,
                "y": 368.1016062083294,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 359.67124549124554,
                "y": 355.2746932233737,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 355.8226032053733,
                "y": 362.25462999069435,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 369.9048591602002,
                "y": 373.6042310338785,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 352.3668136658892,
                "y": 379.0201244705863,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 353.62572867655064,
                "y": 396.1577694020478,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 361.73943098677836,
                "y": 397.4844552450108,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 345.89876625929907,
                "y": 368.5630296323284,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 367.6670166639906,
                "y": 394.4233730542571,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 356.2907589006581,
                "y": 363.83242067068795,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 369.39593558101046,
                "y": 376.5584030555068,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 368.21281361516264,
                "y": 376.0144695211311,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 367.791327092018,
                "y": 380.62599973543115,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.52003200276073,
                "y": 357.63845720049653,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 380.5103950897602,
                "y": 366.7313903984907,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 352.12190999412746,
                "y": 381.7517768068881,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 375.5073844367355,
                "y": 385.20072411883814,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 378.2985214653996,
                "y": 355.12058603955074,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 359.1647517425398,
                "y": 361.1438009818638,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 397.21417421023705,
                "y": 357.82850322584386,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 375.6620614924722,
                "y": 366.8965856417216,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 381.5926636988032,
                "y": 348.3814079622652,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 395.0863194936331,
                "y": 349.3325720858143,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 387.11069440329635,
                "y": 372.0171182542381,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 395.48144983017863,
                "y": 361.233950025729,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 403.5286984102793,
                "y": 365.3246070766821,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 380.3032388625505,
                "y": 341.0764060848995,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 375.7938530072452,
                "y": 358.0871141193597,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 399.2699596284066,
                "y": 364.44927935219494,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 401.1857518090822,
                "y": 346.59135225134185,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 402.4064101024549,
                "y": 356.2054776897279,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.8712860817384,
                "y": 337.76983718013287,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 410.26626729753366,
                "y": 352.31319400470267,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 375.3378792877288,
                "y": 345.3947990897246,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 398.63882650420476,
                "y": 371.1714172538474,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 390.4281433013201,
                "y": 364.8385854734445,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 404.7033520435149,
                "y": 340.8487954482042,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 402.3202692934726,
                "y": 354.9381712470463,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 398.77566523626376,
                "y": 359.52568795375925,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 403.2783527691659,
                "y": 379.28392285563143,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 418.92517302341037,
                "y": 360.3421176491555,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 406.00439037600563,
                "y": 357.0838700461418,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 419.58960961766473,
                "y": 380.1824033892919,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 403.1000557245811,
                "y": 384.11703980018854,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.4345135085663,
                "y": 359.79643560309364,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.42929681061094,
                "y": 360.63232373922006,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 385.53582359344085,
                "y": 369.61871337857394,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 365.19411195318906,
                "y": 350.69288527381406,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 390.52266033797446,
                "y": 370.46517430826884,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 368.8236909514865,
                "y": 351.84478498155823,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 394.3059695885979,
                "y": 342.0113131554346,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.3865308068725,
                "y": 351.85965162987355,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 357.8235212417518,
                "y": 352.0574155421401,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 358.83143804994904,
                "y": 363.1164204422414,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 397.38007750622364,
                "y": 337.3633754651704,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 379.93653051970176,
                "y": 337.7125698890361,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 379.5259294083499,
                "y": 334.0362605643154,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 378.91322495939954,
                "y": 355.0181426305974,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 388.25195180161063,
                "y": 346.0669673427219,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 399.49087411578574,
                "y": 353.4115831757129,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 383.2129828155015,
                "y": 371.52272338801725,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 415.58983378700185,
                "y": 349.63818247016945,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 417.5212655609614,
                "y": 356.93974492542054,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 403.78243303852656,
                "y": 369.74731135328955,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 403.02592254034823,
                "y": 352.7478013032868,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 411.39166176992336,
                "y": 344.204870580102,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 399.44376766892464,
                "y": 373.9421714893755,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 411.0382477872838,
                "y": 366.66886248767344,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.7421691742183,
                "y": 389.23488440443055,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 428.29717845886455,
                "y": 393.0862459511224,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.95704481471773,
                "y": 371.15870097657336,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 390.6425220205885,
                "y": 368.05986859870075,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 401.87522558002115,
                "y": 360.2799797839223,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 415.43262452520906,
                "y": 366.37270979297807,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 404.31323797269647,
                "y": 386.21927056966575,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 408.76001840804463,
                "y": 380.9342614598727,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 398.9276603275284,
                "y": 372.1808966685082,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 386.1493816055183,
                "y": 359.7650109376564,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 380.8542840295554,
                "y": 394.1431018800174,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 384.53874640899585,
                "y": 385.1116416594346,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 366.325098746958,
                "y": 361.64262555024175,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 386.85981716654123,
                "y": 367.6317880307784,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 365.9763379724747,
                "y": 377.68445769116505,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.9193298833113,
                "y": 356.078846223306,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 379.4040709438733,
                "y": 380.86980451039784,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 398.34650617394806,
                "y": 351.17254505155915,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 396.1390632248914,
                "y": 347.6225528503345,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 403.4978862760539,
                "y": 379.68628352960496,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 408.0294090389371,
                "y": 350.8331114192495,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 388.47838281050844,
                "y": 363.5413141948509,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 406.71663933887027,
                "y": 349.4674191723889,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 411.43917394012806,
                "y": 358.07470452231775,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.1387871087807,
                "y": 371.50229869534894,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 401.9167267645166,
                "y": 363.4184635289032,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 388.552738811115,
                "y": 391.68942675602943,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 410.88420834856515,
                "y": 357.496624396343,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 398.4622315593161,
                "y": 379.996609093954,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 404.2444014636,
                "y": 374.6162842668608,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 410.4623744335465,
                "y": 402.2297521145904,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.66644556126056,
                "y": 403.641760474022,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 384.3749955484819,
                "y": 398.13517911463,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 376.98686042217173,
                "y": 381.3467665377201,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 394.651311398952,
                "y": 369.1028829280774,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.33757935236594,
                "y": 381.8270207365151,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 359.8534151160313,
                "y": 365.65914275219905,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 386.37206961343355,
                "y": 396.1515304452976,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 368.0015146233004,
                "y": 392.2105498084508,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 356.8815999986685,
                "y": 365.8397211867295,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 372.48904535696914,
                "y": 363.8084229305444,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 373.9208773465434,
                "y": 385.86819851178296,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 390.6888278106014,
                "y": 384.226238213029,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 387.40396557199864,
                "y": 378.2982704518936,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 362.55560535225186,
                "y": 389.89822739887245,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 357.03967148364404,
                "y": 386.9630003843715,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 383.75826270502915,
                "y": 396.56644629284665,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 376.853666254763,
                "y": 408.867221567785,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 383.38256655823153,
                "y": 406.1783395476376,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 378.8853415443613,
                "y": 386.3039038697344,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 411.47489051628827,
                "y": 416.64332877031313,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 399.9952053854005,
                "y": 414.0123762356785,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 386.73521513004556,
                "y": 412.0644168319197,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 396.6092036711376,
                "y": 400.95494860415397,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 406.4800662029802,
                "y": 409.1684461005998,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.9391314164713,
                "y": 391.86839036475277,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 422.2801650539336,
                "y": 412.4941535109966,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 427.12755687554875,
                "y": 408.97545349342926,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 426.805637466274,
                "y": 419.14158339662555,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 408.16190220969474,
                "y": 397.339338253919,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 420.9615836380219,
                "y": 401.50114272567816,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 422.8076060104836,
                "y": 409.32969892333557,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 413.2153316780763,
                "y": 407.10315955844163,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 419.4777760368507,
                "y": 388.70100292406096,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 426.4827802052168,
                "y": 393.80876685576084,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 420.05404059917953,
                "y": 393.04754064947673,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 432.1812214225604,
                "y": 412.24413674168926,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 407.0565596516335,
                "y": 393.97616560713885,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 415.3068490365847,
                "y": 389.05217857703747,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 444.96578002656605,
                "y": 379.40723981451754,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 424.23544235732464,
                "y": 393.29331849589414,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 445.0714897900342,
                "y": 393.35405240082116,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 440.16685533304474,
                "y": 400.22094235622666,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 445.2900320209047,
                "y": 349.268981711033,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 440.0671632309754,
                "y": 351.60122627229214,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 413.5240401161937,
                "y": 359.3186107680302,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 414.167220670783,
                "y": 365.8374660843779,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 402.61831377668705,
                "y": 343.4085112549344,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 425.0386513990378,
                "y": 327.7490470974929,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 412.4641561450331,
                "y": 349.2411594442856,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 428.940954409091,
                "y": 323.4697653385957,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.3397234566362,
                "y": 351.1889536302127,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 414.8247194960161,
                "y": 338.3730021479932,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 387.895937729988,
                "y": 340.6893611087278,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 391.5755248834362,
                "y": 342.59955064471956,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 401.7561948890673,
                "y": 314.5822096170614,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 378.85740134645465,
                "y": 321.2822138642282,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 396.48813299663834,
                "y": 333.465611779164,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 395.51911336025057,
                "y": 331.5141738987828,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.1671339202131,
                "y": 319.31477503863323,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 396.61772471531816,
                "y": 324.3299457284037,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 405.96227856565605,
                "y": 320.4130540040142,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.0107946591955,
                "y": 340.4646964021226,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.4465921837406,
                "y": 336.4506158288649,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 372.7595638608309,
                "y": 331.3489266755365,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 366.30625955761496,
                "y": 324.67328644007273,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 352.86558396462914,
                "y": 332.0435685520751,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 362.53507216918433,
                "y": 341.34895470864797,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 354.1246090502932,
                "y": 337.5376991554364,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 361.7190179057242,
                "y": 345.8073604016305,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 342.7856044650911,
                "y": 368.19158197389214,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 345.7128673978498,
                "y": 339.05194526083017,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 357.7598978183994,
                "y": 351.2553652621161,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 367.37276241188295,
                "y": 340.8155799919275,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 369.26451141381216,
                "y": 367.3251744806131,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 380.0355996706693,
                "y": 337.10346508495695,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 374.16284668770027,
                "y": 346.1605161302383,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 343.2399989123936,
                "y": 333.703179768188,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 366.94674244389404,
                "y": 332.11122724066564,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 348.71480869319424,
                "y": 339.63890120953477,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 375.2308132234998,
                "y": 356.80977679464246,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 376.83739365423696,
                "y": 329.8562876497166,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 383.41268557356295,
                "y": 354.3114949138704,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 374.0712736393274,
                "y": 354.1060018699451,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.752019740425,
                "y": 346.29357743983326,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 385.320120879575,
                "y": 343.3981466529217,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 411.1467928940019,
                "y": 332.6445242284959,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 415.77001897053873,
                "y": 358.0106223386325,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 425.41252719496936,
                "y": 347.04975493026427,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 395.8253888508505,
                "y": 335.1141214152776,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 429.1161037449905,
                "y": 350.9966972769023,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 410.83008691505785,
                "y": 375.59785229387575,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 423.94434032609377,
                "y": 377.27128200114976,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 399.2445890073619,
                "y": 360.009397210162,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 391.8453976781969,
                "y": 377.38804083103906,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 401.52645467491055,
                "y": 382.3172790443543,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 396.61963274227026,
                "y": 395.7627397931112,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 407.4289969821856,
                "y": 383.4658268578763,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 419.6236673024797,
                "y": 389.1432481060763,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 405.40730595509933,
                "y": 396.26390762667097,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 393.75033437957734,
                "y": 370.6932183317881,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 392.26125861041714,
                "y": 396.68003131154666,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 386.3234659416988,
                "y": 386.4862228256048,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 394.25507755675835,
                "y": 372.26844786223376,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 394.1324721483432,
                "y": 396.41855776287593,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 379.12103055566865,
                "y": 402.612203249013,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 389.592454486122,
                "y": 395.49464479820665,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 382.7651034431428,
                "y": 367.4383385336594,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 394.89929375049536,
                "y": 392.7073867831232,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 399.19574091092653,
                "y": 403.8814050753102,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.24044334576183,
                "y": 394.9715241095944,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 400.45892334997444,
                "y": 406.98240344023117,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 389.4289630672519,
                "y": 389.00546667319895,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 397.0725921657088,
                "y": 406.3822316492028,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 391.9697416770849,
                "y": 396.8563402064767,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 377.46518053209235,
                "y": 380.76076526959883,
                "color": "#1f77b4",
                "label": "a"
              },
              {
                "x": 99.61584445067926,
                "y": 220.42715600990556,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 121.96144120044826,
                "y": 238.20408936373695,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 119.61724279180282,
                "y": 198.4727270634657,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 134.9308171304455,
                "y": 184.6899210602836,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 141.11607663193638,
                "y": 165.80361699812443,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 132.73018225469485,
                "y": 188.59454356103112,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 141.6287102663294,
                "y": 185.7908564561077,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 157.05484503747329,
                "y": 181.54080985520312,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 169.44415153458047,
                "y": 160.88338011319672,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 179.06718207592698,
                "y": 164.1769997169518,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 152.00711153087826,
                "y": 137.9507998059463,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 187.56499512237562,
                "y": 175.46004830440074,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 171.33304383860045,
                "y": 158.57191131731548,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 184.45992419172026,
                "y": 163.20723607029805,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 167.21589043526728,
                "y": 152.84407826861582,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 185.610064952476,
                "y": 194.80676420511668,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 163.66217759365895,
                "y": 196.52572913495675,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 142.88644969362716,
                "y": 222.37620204143082,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 129.63276893885126,
                "y": 233.61499108423038,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 120.1326295263572,
                "y": 223.8222851647174,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 113.44317087141337,
                "y": 234.18485132415918,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 135.17770663387114,
                "y": 201.10162342293432,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 134.9322751713272,
                "y": 223.0333197090756,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 115.05250798472846,
                "y": 186.9429231138501,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 153.04528327739314,
                "y": 194.33528081755514,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 118.5129645431991,
                "y": 190.35883727885982,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 157.12251791944377,
                "y": 170.31893619084912,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 149.83320215282248,
                "y": 196.2288240314777,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 148.7170581415237,
                "y": 176.5183574641269,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 159.96511024466807,
                "y": 190.71730270901674,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 179.74867889022238,
                "y": 174.5331799334475,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 162.77128276417474,
                "y": 174.14997144691,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 169.63151422799737,
                "y": 169.9280275248591,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 190.04659123475457,
                "y": 186.56041804700118,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 184.90242105632586,
                "y": 178.09634680289065,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 154.73844462430804,
                "y": 176.3390664885137,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 167.16558966456736,
                "y": 205.2519148587699,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 179.07788704139668,
                "y": 182.28091311113047,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 166.48313356264558,
                "y": 183.49526324993803,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 150.79493045467734,
                "y": 165.12944030464934,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 138.17461846820106,
                "y": 164.8645334301974,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 155.56563995702547,
                "y": 152.68175168354912,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 135.35904608438892,
                "y": 157.51723235009365,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 175.5687613000667,
                "y": 166.17108562134524,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 153.55818382270976,
                "y": 175.09022702220653,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 156.94381139281438,
                "y": 179.96416818479292,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 184.39092466338187,
                "y": 161.19865533818722,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 173.02624493152683,
                "y": 163.909669319765,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 180.50704494069274,
                "y": 148.06928884105088,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 180.59876135546878,
                "y": 167.08633380468825,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 189.33017262474792,
                "y": 208.44701079862455,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 170.68502872932342,
                "y": 211.34091929304032,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 178.48005640423784,
                "y": 211.4096939258626,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 186.67825079093228,
                "y": 186.84063875102555,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 197.97293004140752,
                "y": 211.44379763541224,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 181.73301775119768,
                "y": 222.13514530055204,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 167.04777858566126,
                "y": 212.3834276218172,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 171.57495383787384,
                "y": 223.78403999819625,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 199.74599176728097,
                "y": 193.80341441525553,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 202.51895349262176,
                "y": 175.76897332915576,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 193.07258275705556,
                "y": 207.16216583370618,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 203.27166595017206,
                "y": 183.3745681057751,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 201.51818047636462,
                "y": 198.83703493421757,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 200.9862986882127,
                "y": 171.24980289016395,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 189.5149532024869,
                "y": 199.87986277858403,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 237.07062444218437,
                "y": 178.62084527382808,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 219.99240073347892,
                "y": 178.61942561601944,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 244.10037117393048,
                "y": 194.4891913676741,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 250.7816059990782,
                "y": 152.21482469867942,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 249.82902366452225,
                "y": 143.30210635702156,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 255.95895174264803,
                "y": 155.48219617669383,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.0055793743148,
                "y": 169.42743730426417,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 257.582285132479,
                "y": 138.24735277378744,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 267.61036065699625,
                "y": 138.34781513215864,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 267.5496650739901,
                "y": 156.3280555514812,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 257.2615396511588,
                "y": 142.77051264721865,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 232.97481248271464,
                "y": 160.2688186422847,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 256.49757602058696,
                "y": 138.29221019807477,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 226.8958073078669,
                "y": 150.29613817941674,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 209.73272855867512,
                "y": 150.6039853185461,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 208.21515921575394,
                "y": 166.44081457970748,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 179.84596397313052,
                "y": 152.19854173142858,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 191.33677467607308,
                "y": 159.5244030938601,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 211.44550522746297,
                "y": 184.77817894891677,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 179.60302143832934,
                "y": 205.04684020241257,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 201.64014119371146,
                "y": 191.5121803157753,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 221.74626584334433,
                "y": 197.9040988858124,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 208.60102366654687,
                "y": 200.2839868307973,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 215.34910074575492,
                "y": 191.49610566363071,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 238.61514455729565,
                "y": 202.42171453761455,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 246.1490791240438,
                "y": 212.78848698289522,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 224.8760627220931,
                "y": 204.27265121066102,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 223.05107228559422,
                "y": 170.9747401850998,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 267.7863056129702,
                "y": 160.55395326197413,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.52047746065745,
                "y": 171.47858331063333,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 246.64150655871902,
                "y": 157.02096410434535,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 277.401828143695,
                "y": 136.56244243974146,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 283.8311278710668,
                "y": 135.27688294130905,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 256.3753253867085,
                "y": 151.903871178462,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 266.4979768397518,
                "y": 124.63652997696039,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 265.99918351497473,
                "y": 122.7373904189929,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 275.23034524015054,
                "y": 125.00143039485317,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 279.58621703593934,
                "y": 107.80567243319422,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.12744256902573,
                "y": 135.27878888332725,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 240.18752222491665,
                "y": 118.92999682258477,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 267.16489194274186,
                "y": 139.1565851189074,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 250.37647341643236,
                "y": 136.89755861524316,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.0601672602447,
                "y": 166.08825084552092,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 252.25173725206795,
                "y": 164.11441325299438,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 231.13961174452592,
                "y": 158.49996332245325,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 254.3269988101775,
                "y": 163.65483730905436,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 236.75782132589242,
                "y": 161.07195621066455,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 231.12762733613928,
                "y": 159.81790501701806,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 251.40369473041352,
                "y": 186.66528010955193,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 212.68363064363345,
                "y": 149.06744440884057,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 234.38354238168841,
                "y": 161.32674238155448,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 217.91260585514976,
                "y": 145.93248219603942,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 219.65197346899652,
                "y": 170.64573617823578,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 223.16306068292621,
                "y": 139.5680874379944,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 210.26756677764303,
                "y": 127.00284129284825,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 228.58400367330125,
                "y": 120.24554625168417,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 213.07630069252778,
                "y": 105.24070620226621,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 216.70517011435533,
                "y": 118.8025921474212,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.79609725007091,
                "y": 113.66286986572311,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 231.184763055836,
                "y": 97.31486865729318,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 252.3426217471142,
                "y": 112.04028064457322,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.40160108332068,
                "y": 94.13498005596233,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 247.46308811916137,
                "y": 135.30261163338173,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 267.69890048474076,
                "y": 166.22994777217087,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 262.6631926987646,
                "y": 154.92542708301818,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.42336446823464,
                "y": 139.7188544586583,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 248.9275750863961,
                "y": 152.982420146109,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 260.44639591669,
                "y": 153.09493357410548,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 220.89736305242945,
                "y": 172.7428960596231,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 213.01815906808588,
                "y": 140.5896540750427,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 237.4238076058303,
                "y": 134.629521312056,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.41631849910465,
                "y": 146.0974251736016,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.71687875644628,
                "y": 146.24879666202764,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 225.6025599590795,
                "y": 114.30134389885575,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 211.41696790453284,
                "y": 129.85494595859598,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 212.5235005622638,
                "y": 126.14677574684907,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 221.37634765003727,
                "y": 122.34556122829463,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 236.48762074036838,
                "y": 114.81259536825576,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 247.0944117734619,
                "y": 146.63180209002132,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 237.02408832945952,
                "y": 160.3639096582301,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 246.75311292882145,
                "y": 188.11025774512973,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 235.6722377830834,
                "y": 195.22769322523845,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.6368194832371,
                "y": 205.82634131452284,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 260.62437988571475,
                "y": 206.6459162851499,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 258.5418675573784,
                "y": 204.5768443005092,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 252.69043133998878,
                "y": 229.60941782762006,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 230.0264202085515,
                "y": 211.4632707954483,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 240.44791593955665,
                "y": 221.00512653217424,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.7795880587022,
                "y": 185.88893337645334,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.44716148603015,
                "y": 197.958207619905,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 223.89753507037867,
                "y": 197.9188623504295,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 226.83394103688772,
                "y": 192.94642808139844,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.13067335270952,
                "y": 202.5054974920668,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 231.78842525931827,
                "y": 203.33160661299183,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 217.35067936160505,
                "y": 225.30626054212877,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 222.53788854511913,
                "y": 227.95344350517564,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 215.71377806662616,
                "y": 227.4570474484638,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 210.07663860381734,
                "y": 257.70807595579873,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 174.65255888743792,
                "y": 253.300581157899,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 187.7633071070387,
                "y": 277.07924764614324,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 193.38063929015723,
                "y": 290.9659743139525,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 165.49205957021113,
                "y": 283.39736612549297,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 203.34755598644952,
                "y": 299.69588406756804,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 195.97338695472652,
                "y": 312.7590862593511,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 185.43688905863524,
                "y": 344.62900025065096,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 201.19875194527447,
                "y": 352.0114173052819,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 210.61362572598992,
                "y": 334.63038426838193,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 225.8670841927631,
                "y": 352.91016115787136,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 237.99628918593817,
                "y": 369.9252082951259,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 250.2609135386699,
                "y": 381.300658653424,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 261.81511913780565,
                "y": 376.9328703323924,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 272.37683366645604,
                "y": 391.04728775383836,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 261.02653931106624,
                "y": 391.674333610973,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 289.34642646030903,
                "y": 414.2340572313228,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 304.7473368037362,
                "y": 413.09471324238143,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 303.11752219299643,
                "y": 428.92914003915206,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 338.71743748418083,
                "y": 416.3908915903762,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 316.8627762852237,
                "y": 430.996192186307,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 340.48550633145277,
                "y": 421.46145330585745,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 370.1233744973062,
                "y": 431.45497040915524,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 375.88883197769735,
                "y": 415.03269060633056,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 373.3417798932474,
                "y": 436.41228937464643,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 389.0063214945035,
                "y": 438.1010812485175,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 369.8566913187859,
                "y": 417.021179346291,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 389.8049414596571,
                "y": 436.3066642606472,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 386.48743379483534,
                "y": 418.2117425079943,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 404.06422533734553,
                "y": 414.2351027587915,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 387.1393423217645,
                "y": 432.74736387743735,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 384.8782772158525,
                "y": 423.91432916196425,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 415.79595299221455,
                "y": 438.0602250690894,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 389.5185812266821,
                "y": 407.6515627148604,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 394.7482443183597,
                "y": 429.6495735045794,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 416.7335134316052,
                "y": 404.5945567569842,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 420.6245294149968,
                "y": 389.7041520500699,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 396.31128543070275,
                "y": 395.6907551856083,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 426.1814864521444,
                "y": 362.33252486085877,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 406.8134870883247,
                "y": 388.7415885148099,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 410.18368229107074,
                "y": 368.3524776232685,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 378.36871115481574,
                "y": 332.13045506794566,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 356.75092467927885,
                "y": 352.20561408623473,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 365.39543204603973,
                "y": 322.3148222628394,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 343.099303634294,
                "y": 304.3941116262679,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 312.6187640906631,
                "y": 288.29974130671786,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 299.71134887378844,
                "y": 298.8813717818267,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 305.67412734167556,
                "y": 269.9030218015596,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 272.4723067778634,
                "y": 256.1162122547297,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 266.19771499924605,
                "y": 242.49134353174253,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 254.2561105296444,
                "y": 218.31896196361873,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 259.4915463149686,
                "y": 213.71425007155915,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 248.77046596641654,
                "y": 195.68235828617804,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 243.04069516490298,
                "y": 207.07026500233087,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 261.2117734386633,
                "y": 167.5428403945324,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 262.50072670213,
                "y": 180.64976091459857,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 254.73026861483754,
                "y": 156.91533493936794,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 245.92894143571195,
                "y": 153.7995643614638,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 256.2999258120242,
                "y": 170.53153976733137,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 272.1659366938388,
                "y": 166.91562655216836,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 280.74524899945277,
                "y": 146.15973901763755,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 274.1143842561385,
                "y": 151.35946942575669,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 271.1872898925346,
                "y": 169.4093162736687,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 275.378941061211,
                "y": 142.42473605983326,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 285.6412620057686,
                "y": 178.08009416078323,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.7353190598134,
                "y": 192.0537249603189,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 251.97715923829705,
                "y": 187.1976773378854,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 274.82840457300244,
                "y": 191.14358706680366,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.80098388379685,
                "y": 178.27891421149593,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 255.8863413804338,
                "y": 174.1665053729559,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.5323918858496,
                "y": 168.7372361168933,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 273.9451390858451,
                "y": 185.5260659968402,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 259.09605445042877,
                "y": 163.1809036958985,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 261.3988138891583,
                "y": 167.97485727188354,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 269.53983993126224,
                "y": 158.91993437051383,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 247.90791513616807,
                "y": 162.72952309957583,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 275.41672946569497,
                "y": 139.68784852326473,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.7221465727739,
                "y": 157.35110893846553,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.6197537235137,
                "y": 153.02718067836145,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 276.4491335969258,
                "y": 178.20154509118106,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 282.27752057052857,
                "y": 178.64848755830815,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 278.68947282243164,
                "y": 175.25430752493736,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 278.1108602733178,
                "y": 160.94891371543775,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 260.50644139076877,
                "y": 151.62993810270973,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 243.50991837690776,
                "y": 168.06547292226924,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 271.45540930690896,
                "y": 163.24485164233,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.557834999981,
                "y": 168.93068616882414,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.037823573875,
                "y": 159.67185162481354,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.05204494452823,
                "y": 170.00746257436145,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.8078333659417,
                "y": 166.60890445476207,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 245.21592704031858,
                "y": 144.40493078701041,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 251.91747630512035,
                "y": 145.90759302120983,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 260.76313685917455,
                "y": 147.09297496810393,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 250.34723885251827,
                "y": 157.45342949915755,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 274.47412867835783,
                "y": 166.2528610235713,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 257.30432309284265,
                "y": 150.23880342352385,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.5422130576694,
                "y": 149.61354115487268,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 278.73170519657367,
                "y": 164.1449775872465,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 260.47821708558774,
                "y": 176.949477431278,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 272.09040555159885,
                "y": 158.79995200040298,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 260.0557409503806,
                "y": 170.5422790241708,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 211.0266702635403,
                "y": 143.687474577837,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 233.35555896640955,
                "y": 136.13810272520652,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 209.15559380677394,
                "y": 124.08792695927934,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 205.50240920094276,
                "y": 123.67981854728657,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 221.12886941111097,
                "y": 110.34369521812448,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 185.9999673014505,
                "y": 110.03551056550339,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 205.34692410664624,
                "y": 82.8434807082246,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 192.88538256734992,
                "y": 87.96120464593696,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 196.94909438494147,
                "y": 81.45153687895595,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 218.319073140914,
                "y": 67.41376598163623,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 214.86242213954827,
                "y": 76.80148157518886,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.6667576764585,
                "y": 77.27544929270789,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 223.49715707715322,
                "y": 82.0202466210149,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 237.094451261718,
                "y": 97.14056894455643,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 236.79501602204834,
                "y": 93.74955794887256,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.02325077725942,
                "y": 121.99243231715184,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 256.98614946664225,
                "y": 114.76506898068368,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 237.43080834503382,
                "y": 122.65020528936384,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 227.89423705212496,
                "y": 130.74472688351352,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 211.45136355972585,
                "y": 153.61687965840014,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 238.73112012550158,
                "y": 119.03361614773974,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 207.11411880205696,
                "y": 128.38705980075116,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 212.76963347799477,
                "y": 126.11958823329616,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 210.5668685752606,
                "y": 95.5855734305855,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 224.55818617632377,
                "y": 110.0157113369645,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 196.79418796464418,
                "y": 103.40631558561603,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 202.2010054750627,
                "y": 82.33135336212035,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 221.8141884182201,
                "y": 82.76010527546475,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 221.20541279445783,
                "y": 90.32203116304532,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 210.59636321402044,
                "y": 103.61353410874148,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 218.53569502796387,
                "y": 96.40952619898212,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.69237689465592,
                "y": 106.02409099141835,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 240.99735461992856,
                "y": 116.77818986710383,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 215.9547155561357,
                "y": 120.1883954544266,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 239.7389235342378,
                "y": 140.16499622580022,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 220.9183213764557,
                "y": 140.92365006479753,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 222.86609378805127,
                "y": 135.90540173881885,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 207.40019268040257,
                "y": 136.7870824597003,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 213.06986667631463,
                "y": 135.52251128076995,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 203.86417623793645,
                "y": 105.85046975990247,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 214.59411643856762,
                "y": 120.82985320373126,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 235.87877621548006,
                "y": 85.85681486312626,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 206.9829265408815,
                "y": 99.07039263646016,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 210.82960261224912,
                "y": 77.67687773559288,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 245.44320603252223,
                "y": 103.94552003937804,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 233.83438783161165,
                "y": 98.54265172105113,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 236.71701287697005,
                "y": 74.79991956353183,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 255.3221704890684,
                "y": 84.77936776336225,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 272.8364982582745,
                "y": 73.47618490839557,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 246.58748455340972,
                "y": 79.677027307929,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 252.4129301764666,
                "y": 93.95262673969609,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 263.16952953821936,
                "y": 96.56620779246327,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 257.25595148992386,
                "y": 122.76847993696674,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 271.9695267400807,
                "y": 134.004608061029,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 284.29034102135546,
                "y": 127.83043708812016,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 282.9191103000766,
                "y": 139.39343293220912,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 275.5099597428735,
                "y": 151.82501460958366,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 281.4146080471806,
                "y": 111.76094826470859,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 242.91165886370965,
                "y": 127.53887855972721,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 251.60843849866004,
                "y": 112.88742694154888,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 245.28483757020916,
                "y": 122.2758116515381,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 240.8451747443724,
                "y": 94.20346191267924,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 248.8574975241458,
                "y": 85.04594036011292,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.0068707561029,
                "y": 84.33180395114113,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 284.34615608239994,
                "y": 89.7586419354929,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 279.79217136613244,
                "y": 91.13715321872843,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 251.33679374854972,
                "y": 81.72266356112254,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 256.8431843668529,
                "y": 84.56623530406478,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 268.25415419118315,
                "y": 97.15523295810306,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 258.0297138545686,
                "y": 114.59781847339514,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 265.65176565135647,
                "y": 102.36088581360048,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 276.61263876777724,
                "y": 102.50938857074158,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 268.58138698805163,
                "y": 124.91504460712605,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 280.8913862904645,
                "y": 114.43539101939268,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 244.6875997657086,
                "y": 93.96131631380314,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 272.9343462066579,
                "y": 78.51588773811352,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 249.531089755967,
                "y": 94.78647697211716,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 247.19466081118853,
                "y": 86.75152466672625,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 250.75488417470032,
                "y": 84.61489248010565,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 240.85570844292803,
                "y": 73.35438590603263,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 241.32442264431495,
                "y": 60.512271167930066,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 225.51965984926662,
                "y": 72.0266344583136,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 181.1209659708837,
                "y": 46.95288963796531,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 192.5877198623138,
                "y": 47.745148672033224,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 157.03257512650706,
                "y": 37.1163097136386,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 178.64297789538264,
                "y": 50.75134933900978,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 164.4453715547613,
                "y": 42.270848154536225,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 135.12434283125043,
                "y": 53.50132036543528,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 110.07789582857899,
                "y": 65.91956795797529,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 97.81559378389072,
                "y": 64.65134772723349,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 76.89790066505883,
                "y": 64.88166600381817,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 82.40115062139641,
                "y": 60.26508663241111,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 72.250788829516,
                "y": 84.52073758760122,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 65.40839706798764,
                "y": 85.2257998427462,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 52.24362353072518,
                "y": 96.09968109513437,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 43.474848342620255,
                "y": 121.31382707715096,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 2.575387961716409,
                "y": 141.64950368160504,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": -28.80067480287728,
                "y": 216.56692084319786,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 3.7880187177045386,
                "y": 228.57192655513325,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 0.011929521961967282,
                "y": 275.410487500841,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": -14.179769260935188,
                "y": 274.9449011664237,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": -8.392229580884207,
                "y": 306.1060699528593,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": -28.546915291089796,
                "y": 296.6633108993167,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": -11.50583214271122,
                "y": 325.47912289588334,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": -0.017419192582650567,
                "y": 368.3435572664196,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 2.697086896522457,
                "y": 357.498029290281,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 8.095933792216995,
                "y": 364.9458548004575,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 30.652494718656605,
                "y": 387.05911502005813,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 43.64659234467939,
                "y": 368.61311122635004,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 69.0015928139393,
                "y": 379.04541695700283,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 54.615601407159865,
                "y": 365.73628397159126,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 83.32837204047863,
                "y": 388.7915772639342,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 94.41039215810585,
                "y": 353.3718258810721,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 83.76324191530189,
                "y": 381.9770712739958,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 131.95111739286324,
                "y": 383.72782674839266,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 139.47589195940677,
                "y": 363.93199593877364,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 131.0557988812061,
                "y": 369.6442215852758,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 144.22876367439352,
                "y": 377.6510252673221,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 154.839462571949,
                "y": 359.22258945852127,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 144.16676425401806,
                "y": 337.1002224636733,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 136.3302786781406,
                "y": 357.6910754694717,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 166.15481624237873,
                "y": 311.3179717620857,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 147.76590454044313,
                "y": 309.3772791890999,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 141.27683997181765,
                "y": 291.8267398303069,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 161.0977800996656,
                "y": 287.9245149276858,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 151.2569023220492,
                "y": 277.8773593322709,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 174.7630920295697,
                "y": 251.082678576189,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 179.19880218883625,
                "y": 221.8094098750454,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 160.99791392459431,
                "y": 250.94770692470934,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 158.2594274339324,
                "y": 221.88554686774967,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 176.07892835465674,
                "y": 215.90107391063788,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 152.12140918702772,
                "y": 247.0044308185871,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 165.14040791884057,
                "y": 214.45557731991084,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 164.44602186049931,
                "y": 260.6205113943706,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 181.003428096698,
                "y": 285.11245022093533,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 195.50851746340993,
                "y": 295.0154051881775,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 186.72431471435897,
                "y": 328.48590669078897,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 203.96417163442868,
                "y": 319.27150748192156,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 244.09577191034194,
                "y": 358.82653027462305,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 264.90736300523355,
                "y": 361.3394880917476,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 253.45377992327823,
                "y": 386.3623460556256,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 290.72538357624774,
                "y": 404.2205407740761,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 312.7202849261034,
                "y": 411.9561074404105,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 288.68364350266114,
                "y": 401.0979943821715,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 306.00204139778464,
                "y": 403.3399732429537,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 345.96140639946947,
                "y": 400.4071121158536,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 316.54369195004256,
                "y": 423.19647539846295,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 332.43444464987294,
                "y": 402.3077919127064,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 356.3730578605342,
                "y": 399.22368699822005,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 352.34423806985797,
                "y": 389.2018505992469,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 368.60001919368506,
                "y": 383.55487689298945,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 356.6217695213892,
                "y": 366.8760266027288,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 374.6635375483676,
                "y": 320.7483035001952,
                "color": "#ff7f0e",
                "label": "b"
              },
              {
                "x": 354.57674282073896,
                "y": 261.70902043135936,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 319.1652867543812,
                "y": 231.2084054749265,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.395474418756,
                "y": 195.66324199361674,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 312.799594906818,
                "y": 195.03593295246384,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 330.92632387419985,
                "y": 184.73811835354985,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 309.63808892596575,
                "y": 177.51895617915187,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 316.7585897040769,
                "y": 147.55206825808477,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 315.0687062780523,
                "y": 172.84320026436535,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 328.0030414749878,
                "y": 174.22922524579474,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 324.82352446472976,
                "y": 172.53832284906707,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 307.6474393989085,
                "y": 172.65536576146792,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 305.9168252766479,
                "y": 167.81561493415256,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 318.13136750603536,
                "y": 212.45862917313627,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 349.2677476219823,
                "y": 201.98789839869505,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 339.39040852246274,
                "y": 214.71180001024766,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 370.8614000308114,
                "y": 244.33294030208646,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 356.3493228977219,
                "y": 251.9872331296583,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.512643783576,
                "y": 266.9656799096863,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 347.15490061919314,
                "y": 246.03044607204416,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.8250441610958,
                "y": 266.526553440831,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 340.94918819992876,
                "y": 254.08133991067623,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 321.927783313644,
                "y": 261.273329784894,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 335.2081002373127,
                "y": 242.42941272385917,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 318.9891519495423,
                "y": 242.3101725140333,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 309.4090776063903,
                "y": 243.39184386243818,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 308.65420188040906,
                "y": 218.35390038667072,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 322.0228329631181,
                "y": 207.4037675645239,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 320.39102277664745,
                "y": 191.3311832551459,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 337.3443724252753,
                "y": 224.97943374167187,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 324.6171487503999,
                "y": 211.57552312738153,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 354.1909070042778,
                "y": 215.4228431238409,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 367.5252124000997,
                "y": 204.3421827336935,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 359.1444977393119,
                "y": 258.2102239502362,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 352.3411252810135,
                "y": 238.14588108338518,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 357.81063564765634,
                "y": 262.0691502228459,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 370.0100855834888,
                "y": 246.41193849646112,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.7305755494142,
                "y": 249.9017803368746,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 369.11781749079734,
                "y": 248.4251479918824,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 359.72697949349174,
                "y": 271.5027874536101,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 337.61694971824954,
                "y": 247.02258281734282,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 316.61403165259554,
                "y": 234.53607975001552,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 330.70553747835277,
                "y": 200.33713540814108,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 324.71573916033196,
                "y": 198.92981805708519,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 279.3667377422529,
                "y": 178.60191270825817,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 300.1616137532499,
                "y": 164.79346879137142,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 296.2146798415821,
                "y": 143.8052256777894,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 281.1965796340194,
                "y": 154.38890312026945,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 294.8606110281424,
                "y": 121.68304727602793,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 315.5421416079833,
                "y": 139.5441573516789,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 298.47725805204664,
                "y": 144.07319903240477,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 313.1144995590256,
                "y": 131.55278496712003,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 317.79456319867353,
                "y": 131.89952505500014,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 343.71909587777304,
                "y": 170.42400055524297,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 354.3120565722208,
                "y": 216.60448429471944,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 384.56091080669165,
                "y": 222.88888261452206,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 378.9735224043586,
                "y": 237.18797627937346,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 393.65983471580955,
                "y": 257.27479645591825,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 377.81678076354933,
                "y": 273.2924830972601,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 354.84333018807695,
                "y": 282.2251939622537,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.35827928121205,
                "y": 297.5232565258696,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 367.0751702194111,
                "y": 293.9833224279424,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 364.4037996804003,
                "y": 296.226626713941,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.2767192450856,
                "y": 271.5007237358053,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 336.14299540586063,
                "y": 260.29977999880316,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 318.72868335933924,
                "y": 229.30102512822566,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 302.0861732840694,
                "y": 226.38496147860974,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 330.56556372884563,
                "y": 198.25978154139432,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 335.79321830175303,
                "y": 222.39287830339316,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 319.93447779400174,
                "y": 225.4613833728855,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 307.55280491149887,
                "y": 217.96530830158673,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 322.416556673317,
                "y": 224.37189352573,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 329.51760110412164,
                "y": 235.61670483500814,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 351.1894798299674,
                "y": 273.3464039343854,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 393.9650245830206,
                "y": 282.2460966273851,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 374.51839929324257,
                "y": 323.53727218527615,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 388.79387919762996,
                "y": 303.5962229002191,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 393.95764226074175,
                "y": 337.9733389588964,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 376.36207493617786,
                "y": 307.861624469242,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.9171986408321,
                "y": 334.6689811811035,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 375.7080057788964,
                "y": 291.2824033480109,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 372.71719288505017,
                "y": 300.2110308027394,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 350.377422189989,
                "y": 291.7376662560754,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 378.33450969154205,
                "y": 258.8979002439697,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 347.2824136601749,
                "y": 268.48038730790495,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 340.8962193466653,
                "y": 232.58750596116465,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 359.4024550031166,
                "y": 237.40128684384985,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 334.93167871181913,
                "y": 221.68259454040845,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 362.26867722153736,
                "y": 223.6651793040997,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 343.2358742454212,
                "y": 209.3138712787914,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 351.8442897584232,
                "y": 215.30287920379908,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 342.7845401355733,
                "y": 220.5885830521769,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 381.5995752916523,
                "y": 239.18778016750025,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 356.9385069326315,
                "y": 260.7195511588992,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 350.4349328061943,
                "y": 231.6643038897845,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 371.26516970827817,
                "y": 235.1703365499311,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 358.74863217818665,
                "y": 244.70447394776292,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.37956553248824,
                "y": 260.3833937456145,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 320.75628274578185,
                "y": 253.58762616514363,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 327.94143289349626,
                "y": 225.28517493660667,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 333.63937238387444,
                "y": 237.9226126671358,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.28161057821603,
                "y": 229.17058777408,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.3849820171754,
                "y": 220.8312812404987,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 332.46735096378154,
                "y": 234.67077081617333,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 324.28612871705184,
                "y": 219.6674396646108,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 350.7733934068933,
                "y": 190.6966185851458,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 357.521074792416,
                "y": 186.3639450294172,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 351.34868956614474,
                "y": 188.67660140561782,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 364.9846745684606,
                "y": 217.07620374170403,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 374.617558320505,
                "y": 228.34143301753022,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 361.76081698445006,
                "y": 224.84867414775294,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.149409969137,
                "y": 260.34339302876634,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 364.51163964425734,
                "y": 247.93220976541585,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 358.1455384791028,
                "y": 246.0365846203496,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.1361501418805,
                "y": 267.8755247739959,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 383.99817155439854,
                "y": 239.67516432116315,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.150589410127,
                "y": 245.57090603557705,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 379.2533250030973,
                "y": 226.92333688930842,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 355.4865000338239,
                "y": 220.56136263739756,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 357.5534244425161,
                "y": 226.0474164469648,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 351.7441842611511,
                "y": 215.347815254895,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 364.85578032292415,
                "y": 210.35370423345358,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 379.6964814744588,
                "y": 208.473141160698,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 368.20532552076924,
                "y": 225.07611658531516,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 372.8277225240713,
                "y": 220.2310322560819,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 388.2139526012812,
                "y": 211.4162611138746,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 385.1600196996554,
                "y": 204.4614349730058,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 416.4506526563249,
                "y": 218.597585086766,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 400.199142094635,
                "y": 223.32344920693748,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 397.9199205246066,
                "y": 218.23419978254742,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 404.8519777483881,
                "y": 218.75891832103923,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 401.9157187648179,
                "y": 243.28982526473737,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 425.70825924324487,
                "y": 258.9948018739153,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 393.61874070139754,
                "y": 263.9766390974927,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 375.4773443101701,
                "y": 242.56353568086678,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 405.27967684750683,
                "y": 228.46950109455548,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 400.414714159197,
                "y": 242.50796556450757,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 367.8871438404642,
                "y": 230.47782971021212,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 368.93197930072176,
                "y": 210.19950318111376,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 384.6230501403172,
                "y": 205.1500061963847,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 389.19548388730965,
                "y": 222.67103055750795,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 404.1093773302198,
                "y": 210.09731738461312,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.0354162571401,
                "y": 200.67479823680696,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 407.61697614778956,
                "y": 199.25003611669592,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 420.34807883906427,
                "y": 203.4690248290678,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.3552950492223,
                "y": 205.38933618827645,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 400.9838746157149,
                "y": 209.64839980089192,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 429.43156105743907,
                "y": 180.47404801663555,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 401.1538602769554,
                "y": 208.87435012037542,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.61379910066415,
                "y": 221.37125329828223,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 427.261816766948,
                "y": 202.13847101405918,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 408.4369918625456,
                "y": 220.7131211021914,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 401.53670450448743,
                "y": 242.34538267974432,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 407.0846457423411,
                "y": 239.6332813061514,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.78355255389624,
                "y": 250.54787998024162,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 366.59776117167917,
                "y": 238.92006564326255,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 367.47464909699426,
                "y": 218.2987864607025,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.94868888674415,
                "y": 200.1458307019745,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.1577843681497,
                "y": 195.5422904681322,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 350.7663479005179,
                "y": 185.2422573859995,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.40570672942835,
                "y": 182.0651235255815,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 350.53226750593177,
                "y": 172.5579857653562,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 372.74751574081404,
                "y": 164.51881126065797,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 362.08478276873336,
                "y": 157.08182824019883,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 380.60073862486416,
                "y": 172.8061423413596,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.3590867008047,
                "y": 183.50868244105607,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 417.9181435355462,
                "y": 185.01711808019576,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 397.7293874131967,
                "y": 184.45322213572422,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 421.470875032619,
                "y": 180.99163151607246,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 428.18881154724625,
                "y": 224.75315881816886,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 414.9410418997164,
                "y": 242.34544330772906,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 415.0947605453159,
                "y": 243.37509596502952,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 405.9993854470361,
                "y": 273.7718664005315,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 402.9301254140273,
                "y": 244.63833620133917,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 354.87018253836544,
                "y": 266.949839825288,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 373.6219179866803,
                "y": 277.7899894492714,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 361.5684425668575,
                "y": 249.01539730561868,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 375.48475587830455,
                "y": 225.7553702300899,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 340.22324506179297,
                "y": 212.33801623275548,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.1568489884042,
                "y": 228.74141176820734,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.57877969197665,
                "y": 192.22523373716228,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.0463196882876,
                "y": 187.50611601619102,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 380.3520501398428,
                "y": 208.44414932563672,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 370.36894434764906,
                "y": 187.31853523903965,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.6243162190135,
                "y": 223.10673790259472,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.8964549173322,
                "y": 236.01346903638074,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 402.06914349838706,
                "y": 237.68180687422,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 408.59315074546026,
                "y": 268.94531309913,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 411.75682490979517,
                "y": 256.6010814637201,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.02787647088854,
                "y": 287.5595088015709,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 395.55910467316,
                "y": 321.6584051624391,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 396.4631368778497,
                "y": 311.6356936121309,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 382.2794206684756,
                "y": 322.89101031924974,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 406.3343725184589,
                "y": 319.9691444664415,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 386.21219157316744,
                "y": 273.8313302949441,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 376.4388818988849,
                "y": 291.11442566984056,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 381.31107998409834,
                "y": 259.84215280960484,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 397.22552594801,
                "y": 257.17430885935835,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 393.9961671973666,
                "y": 227.7701952736885,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 403.9697887645883,
                "y": 228.58455565165428,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 378.11301230332884,
                "y": 245.8502955708814,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 410.20450060154866,
                "y": 236.72002488701503,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 412.00321877259984,
                "y": 250.51646437824598,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 406.10810516834954,
                "y": 268.9115383028795,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 402.2532758903147,
                "y": 286.0593021999716,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 390.3847648222373,
                "y": 280.3313720133885,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 411.49695090871086,
                "y": 280.80406614548747,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 394.6905765565804,
                "y": 264.8671888557934,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 394.7264697760819,
                "y": 256.3097407914662,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 410.46312867081883,
                "y": 290.6970420048782,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 420.66023175704186,
                "y": 253.3826825771332,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 415.9854708219426,
                "y": 271.8818082626297,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 424.84300658708156,
                "y": 284.71561566299124,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 400.9735069033672,
                "y": 284.62042745908786,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 419.4948553816965,
                "y": 268.8732680669183,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 433.6094582666561,
                "y": 263.47975823715075,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 421.94461311475425,
                "y": 251.21237735049928,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 449.5760746824183,
                "y": 283.43629644930354,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 453.39366913968576,
                "y": 266.45437939865155,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 451.5221063206966,
                "y": 251.1443153370601,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 446.767129183151,
                "y": 263.6472155917663,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 435.4688488405789,
                "y": 258.64458152846083,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 439.74412219139515,
                "y": 233.4793011445238,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 449.52400577195885,
                "y": 238.2827321578426,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 464.58080370714987,
                "y": 232.03700570455004,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 465.0117963977887,
                "y": 213.11423493415714,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 470.60938542670857,
                "y": 197.6436962915762,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 446.40219681493966,
                "y": 221.71898086509037,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 435.92776820117217,
                "y": 205.91098288334376,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 444.70971161947284,
                "y": 175.1114544257419,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 435.71493007624156,
                "y": 178.48839875470884,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 435.5881604597741,
                "y": 180.53509050088581,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 413.60533940639596,
                "y": 158.3886968150103,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 411.9143158859206,
                "y": 152.99216193033402,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 390.53320922428975,
                "y": 152.58896518513808,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 396.09478868593897,
                "y": 169.6979685448796,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 371.3468808938324,
                "y": 174.91334777189644,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 386.6334949324141,
                "y": 172.30494332012285,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 352.58044669531137,
                "y": 177.0225416823717,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 346.758073455888,
                "y": 201.37938049551485,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 352.47499550199177,
                "y": 209.13319305397397,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 365.09602842179606,
                "y": 201.42714608970778,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 350.16608916693946,
                "y": 207.66717674858717,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 368.70944962105426,
                "y": 246.4445221588892,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 351.6963957780375,
                "y": 249.71562491475123,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 362.3872294775691,
                "y": 284.01918481439606,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 378.50173876716013,
                "y": 280.6567255730032,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.2408593760757,
                "y": 251.12654992938604,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 395.69391884341894,
                "y": 251.13060454249222,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 399.53146473194334,
                "y": 281.4177435342324,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 372.77909163708097,
                "y": 273.75498898701744,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.3881753461328,
                "y": 263.31493749343485,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 383.23766916072145,
                "y": 257.6426871527103,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 397.38731857765765,
                "y": 264.6275790934254,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.5152599634358,
                "y": 257.56405013194626,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 430.8234907881761,
                "y": 264.8080132579356,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 426.8625543273525,
                "y": 220.96065630242947,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 426.8999251643251,
                "y": 211.72280477068608,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 433.9758786209584,
                "y": 209.86900018227828,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 426.506216296311,
                "y": 216.99665320795606,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 435.78113323583955,
                "y": 212.31050145927503,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 423.4528527023039,
                "y": 215.4919538742675,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 438.8954374640109,
                "y": 198.0839072252956,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 450.3688813352163,
                "y": 188.6013440847471,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 449.2130631443822,
                "y": 191.67457884288552,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 441.23623752111223,
                "y": 185.59926503926818,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 434.44662987753003,
                "y": 202.30844816872877,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 432.11332372012316,
                "y": 204.52653146108474,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 462.5351434380028,
                "y": 239.3297249890905,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 464.90634232684965,
                "y": 274.50520996884114,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 465.16301133454584,
                "y": 281.68838186670365,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 464.9901350038159,
                "y": 297.24754303076656,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 473.5776391464557,
                "y": 330.3233007605762,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 454.3418746451915,
                "y": 298.3133433959457,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 454.7242573612416,
                "y": 325.59500995262215,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 427.8675204287531,
                "y": 300.2682033249076,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 428.16966306596055,
                "y": 290.8205894621507,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 441.43311910208354,
                "y": 303.73423111147395,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 438.86325678063946,
                "y": 297.12907094130986,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 419.7513148104469,
                "y": 308.9386789873912,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 448.77029190270673,
                "y": 291.8493564482816,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 417.4678896786934,
                "y": 294.20100105936064,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 422.5589181285736,
                "y": 280.4960856914324,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.9994446579994,
                "y": 284.3153782860807,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 414.7368533883444,
                "y": 265.6176955842028,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 409.1065937502257,
                "y": 271.98133137452305,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.51361394849613,
                "y": 286.41608669355685,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 441.3170805639451,
                "y": 281.8564301326541,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 424.58438315624466,
                "y": 251.0430159392669,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 444.7790140442241,
                "y": 272.4583051019697,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 448.323430215201,
                "y": 246.93976773949393,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 439.2302821584074,
                "y": 254.21940368535857,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 431.30649736285426,
                "y": 251.38359430707334,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 451.8489715275462,
                "y": 253.48155715971393,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 444.99377154148215,
                "y": 258.28370440672415,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 476.35678059460326,
                "y": 260.9762682988222,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 470.5789708661098,
                "y": 249.2795088034373,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 461.3545767391998,
                "y": 249.49606449801934,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 471.6643330517028,
                "y": 275.93221686540016,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 470.25985832522724,
                "y": 257.1031123142659,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 464.00487748473864,
                "y": 290.1035706215291,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 456.6360163916728,
                "y": 287.4311803112778,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 445.06470434890866,
                "y": 309.81124060637296,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 476.4350330449886,
                "y": 291.0997529838115,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 432.6061383027537,
                "y": 288.1210002500028,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 428.7541093330507,
                "y": 305.522629839208,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 442.82073388352956,
                "y": 321.0818657564754,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 453.5932726168085,
                "y": 285.9412229148923,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 450.26021313704763,
                "y": 304.8150268377052,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 440.9593785068648,
                "y": 304.31211311085195,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 421.37938253651504,
                "y": 297.66377977009694,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 436.6938538479866,
                "y": 285.6048860239724,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 441.8641628541203,
                "y": 279.01198461349736,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.3544943652534,
                "y": 277.8155504259231,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 407.31815533972633,
                "y": 292.67810467711575,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 421.0709897650176,
                "y": 302.44259752804,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 418.1106563022074,
                "y": 287.3442288957838,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 415.8296699013565,
                "y": 308.03001244084373,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 424.1830705372472,
                "y": 294.79312618485045,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 436.39319282099234,
                "y": 315.805473864006,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 430.64404826314654,
                "y": 306.85158112425347,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 458.6035914807681,
                "y": 317.8213998657858,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.1915989819275,
                "y": 307.1982501115704,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 471.24728158926956,
                "y": 311.08391227608075,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 456.7427814960732,
                "y": 300.47414538332544,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 470.45903401967774,
                "y": 304.28850601380645,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 461.30461848528023,
                "y": 268.56904800973723,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 462.45763284597086,
                "y": 291.7580998815581,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 455.87537829036404,
                "y": 279.2784462717618,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 454.0725710272607,
                "y": 273.1414658966151,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 473.9601067184335,
                "y": 270.03843434887006,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 492.73422516219523,
                "y": 225.38645574820532,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 467.57941574897853,
                "y": 212.8900146320458,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 447.05123172950994,
                "y": 221.84961246722912,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 439.54379700440325,
                "y": 189.49659083204142,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.1417305926934,
                "y": 198.35787618261867,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 454.94343557692406,
                "y": 176.1099110300632,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 426.25037929741023,
                "y": 169.029761373719,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 430.9946373300204,
                "y": 170.75124616535834,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 410.42739557207716,
                "y": 162.22588073823414,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 389.8265543853587,
                "y": 173.7761375719262,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 381.0456740956988,
                "y": 166.069139709054,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.6247338601222,
                "y": 155.29506509294805,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 370.31060009198404,
                "y": 156.98614955156472,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 367.69725497955665,
                "y": 151.18088938126238,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 363.7399627376273,
                "y": 164.0321712974283,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 342.89392750156594,
                "y": 170.02550499925388,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 336.4666237870225,
                "y": 148.4304842875589,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 357.2557395008024,
                "y": 180.2579972674091,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 346.96243419662346,
                "y": 195.51077844871224,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 318.31772901054546,
                "y": 188.0708818951304,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.32002820119277,
                "y": 231.90041385874304,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 346.9584459032625,
                "y": 223.82023594206817,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 340.67751165311995,
                "y": 230.61187160442438,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 317.24240065788973,
                "y": 242.1906592054758,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 314.3017934911833,
                "y": 225.30246231668718,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.23880112574,
                "y": 256.2036022775259,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 311.24338484601043,
                "y": 257.90288313416613,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 348.7617677171372,
                "y": 232.19368784248638,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 313.8451068597654,
                "y": 221.80266780094155,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 327.02058629849813,
                "y": 213.85452790553802,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.3964689953448,
                "y": 235.48165347252188,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 346.8323778190343,
                "y": 206.98092146063817,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 356.36363301950814,
                "y": 231.61117652795997,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 345.6154091369975,
                "y": 201.5174075709234,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.9771899758222,
                "y": 219.79308417508008,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 396.11447171738916,
                "y": 213.92510964822486,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 388.63018559051983,
                "y": 202.95318618290486,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 395.89630800773296,
                "y": 202.80061856187336,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 410.6915779550222,
                "y": 193.92801161059066,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 404.99204167193983,
                "y": 227.22764139936857,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 442.9717578782435,
                "y": 266.94174823134773,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 434.5140090203804,
                "y": 279.59081429755463,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 465.19453509595394,
                "y": 290.38934691231873,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 447.24003149149604,
                "y": 329.91798112237063,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 458.6873479825231,
                "y": 337.9565687567115,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 446.7527176578848,
                "y": 306.4615586688959,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 446.8109815734473,
                "y": 318.64252929459775,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 401.70131644325215,
                "y": 296.0687042327057,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 420.99390110057203,
                "y": 324.8409848957551,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 391.63015255935255,
                "y": 308.44746304241596,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 410.9103124689067,
                "y": 282.8350646959967,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 394.18923001349305,
                "y": 277.63806744772194,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 393.94063243916196,
                "y": 267.533542856563,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 390.403601450086,
                "y": 282.9859536947504,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 385.5309716059779,
                "y": 265.4942741348103,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 415.58864746559965,
                "y": 269.3955983890675,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 416.02806410225435,
                "y": 232.27133570113403,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.4752429200861,
                "y": 238.7901249736085,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 411.97280978480575,
                "y": 224.92262603933693,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 422.75555843765744,
                "y": 237.74574721438944,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 413.16941564235316,
                "y": 211.14862472245426,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 437.2646451864768,
                "y": 222.56659947029482,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 436.74986782979397,
                "y": 225.9743725972465,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 419.63226236815785,
                "y": 237.4538761686282,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 444.862743189652,
                "y": 245.4675128341661,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 438.16285897824565,
                "y": 251.78169816990538,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 461.1433097782054,
                "y": 268.9342764331909,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 483.7912420697384,
                "y": 263.41831382878274,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 456.1947318800313,
                "y": 301.066442269851,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 478.60593326023013,
                "y": 306.0296353375664,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 444.3229193310165,
                "y": 303.2564434069458,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 464.4241010228709,
                "y": 332.29262941183856,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 467.77254659047554,
                "y": 336.61767789419423,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 462.37608636995265,
                "y": 293.34375364226764,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 432.0579875880452,
                "y": 321.42040501633335,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 447.12346564825805,
                "y": 301.78808850155554,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 430.2917839949111,
                "y": 290.1928950963412,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 435.4929388121309,
                "y": 262.94524720461027,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 433.2973234531874,
                "y": 261.6478318900444,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 433.61987804765346,
                "y": 260.51599252352054,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 424.2505933227474,
                "y": 259.25206571460797,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 414.31466197140185,
                "y": 231.5330077318966,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 443.39076966181057,
                "y": 218.93123990392695,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 411.76609319440166,
                "y": 217.1572295413635,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 449.4170018162987,
                "y": 229.06610735186985,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 430.9134940687423,
                "y": 228.7068866073015,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 445.32859912291804,
                "y": 232.9244657255013,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 430.1683174155183,
                "y": 237.10505131779314,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 465.569923627898,
                "y": 258.45721466337994,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 463.6493391864992,
                "y": 250.7958039048197,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 461.1892020528717,
                "y": 276.6981917900409,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 474.7226138756443,
                "y": 266.2660228872396,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 461.17795954836225,
                "y": 295.8799674286434,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 476.2948016253364,
                "y": 281.4444608957644,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 438.23987683029924,
                "y": 268.3608562941938,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 442.2277222344082,
                "y": 272.04170800327785,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 414.8765208566917,
                "y": 283.47304588093147,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 434.13126756439175,
                "y": 289.4779226517488,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 392.58404296605823,
                "y": 290.8936457651704,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 399.1661219931676,
                "y": 282.73219343225645,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 402.5710409538553,
                "y": 246.90620698563455,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 387.5267079065496,
                "y": 240.03399440410323,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 400.2334114696877,
                "y": 260.15653418222956,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 379.5127747830705,
                "y": 269.4343669068899,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 400.73831255412546,
                "y": 248.56924697149546,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 407.14689950467255,
                "y": 244.09163852967734,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 225.41976453626495,
                "y": 235.55405426078454,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 160.88465566540268,
                "y": 247.7785331427451,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 154.31503731684677,
                "y": 270.0644584847849,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 124.32555605871644,
                "y": 272.73140064949996,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 141.7634420829458,
                "y": 295.69961367170254,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 105.69914253230301,
                "y": 295.9690572703031,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 96.20130786934398,
                "y": 319.97295627589233,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 91.15583304764607,
                "y": 318.7458027872027,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 104.18531675079251,
                "y": 323.91536967080845,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 113.57272915770896,
                "y": 354.084973228177,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 96.71188402184549,
                "y": 321.3203816774186,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 196.08979808030938,
                "y": 395.7528467449748,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 254.13679861233584,
                "y": 412.98605350590435,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 279.66144973177313,
                "y": 417.4514327259732,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 278.1028269985249,
                "y": 422.99899526663756,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 303.3276110065657,
                "y": 419.4291840144388,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 494.52912161318415,
                "y": 430.95004194380164,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 526.4173844716676,
                "y": 444.5314986695069,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 561.2806132503918,
                "y": 427.76540261325584,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 570.7538664942734,
                "y": 395.97955874250835,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 556.8976623298748,
                "y": 377.5484654755058,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 593.2463000318025,
                "y": 387.87030769294665,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 600.3213684615222,
                "y": 379.75053471099756,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 608.4429816855508,
                "y": 360.57495169073275,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 609.3826493590058,
                "y": 374.66580758856674,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 602.439725585972,
                "y": 330.46163021196395,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 612.9945942503358,
                "y": 346.0124736001495,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 639.6376333456813,
                "y": 323.1679199849402,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 613.822015271962,
                "y": 325.7797236128707,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 616.8450766230509,
                "y": 322.9410080894012,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 644.2356977134419,
                "y": 293.77809187633227,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 620.8810699539669,
                "y": 289.85495837221015,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 637.2571708077893,
                "y": 269.2231174898187,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 610.9608978957377,
                "y": 238.802404577995,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 633.208082604131,
                "y": 233.30620269025098,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 608.5613964511726,
                "y": 211.79245006207788,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 590.0549900996864,
                "y": 144.04460862491868,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 561.4474424529344,
                "y": 114.97650306995644,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 564.8695982175493,
                "y": 36.47410866849816,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 493.67461128311646,
                "y": -62.55945190072998,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 482.36016812676115,
                "y": -74.11141488928627,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 454.8940677066029,
                "y": -74.332761778997,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 388.68428001509113,
                "y": -92.96551304366199,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 396.2497775190882,
                "y": -81.22462123752621,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 379.1322327394229,
                "y": -102.08919895674774,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 356.9512598979749,
                "y": -94.56711774744542,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 362.0745338422893,
                "y": -105.1991749087017,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 340.7793164531293,
                "y": -100.86239847970432,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 345.8604649074256,
                "y": -71.1627373080629,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 329.85651877635615,
                "y": -68.18131665815577,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 329.95970539341795,
                "y": -78.54473248885131,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 323.6240966488522,
                "y": -15.562545973823603,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 304.55472737183925,
                "y": -9.292442064213844,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 322.6521659653723,
                "y": 2.5130458858961333,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 309.43246770524144,
                "y": 12.755962874086606,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 297.2561121337018,
                "y": 19.160480663735484,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 303.6667632095798,
                "y": 55.529189732374675,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 331.33035803809616,
                "y": 70.13828195603259,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 313.54888891195674,
                "y": 65.0742063786771,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 334.7099885202084,
                "y": 53.711801008413545,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 341.96487305147053,
                "y": 74.84343599792584,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 324.9144971747507,
                "y": 82.96038307649644,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 322.6959924740967,
                "y": 68.25567839770514,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 357.8436475396927,
                "y": 84.55575485731157,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 333.90545528130946,
                "y": 91.24217482312827,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 373.3730507739318,
                "y": 92.81166992812314,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 368.4979549061188,
                "y": 71.02342011138546,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 370.32455266917356,
                "y": 65.07601336381254,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 377.22405568936756,
                "y": 90.48212077417907,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 383.52573253491744,
                "y": 88.07677180212374,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 383.5665876755017,
                "y": 98.34905239237526,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 386.7461197073438,
                "y": 64.21740743481837,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 404.06339034325543,
                "y": 63.37029859739812,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 419.94699189498675,
                "y": 88.73016818591219,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 416.57171618742615,
                "y": 76.16174434642721,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 439.4737343894011,
                "y": 83.5576380252428,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 466.6155064643113,
                "y": 82.65967690782168,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 454.30899422885324,
                "y": 91.21763600561593,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 473.5591897136286,
                "y": 91.36446371965098,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 508.53705813948966,
                "y": 112.17252702627695,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 501.38789657067673,
                "y": 128.80477009000492,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 524.2111554484106,
                "y": 99.74918570867266,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 504.88458494426663,
                "y": 125.61278568042547,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 531.209031919301,
                "y": 107.88406830791837,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 543.602703898623,
                "y": 107.37243579209269,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 536.1487278753063,
                "y": 128.4891597564917,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 517.1026122805378,
                "y": 116.55219700578363,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 534.2747559428296,
                "y": 143.8136629413034,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 554.6942832075584,
                "y": 135.97685724066184,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 565.3816596998389,
                "y": 129.60915057025363,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 556.1776875102194,
                "y": 141.65729671944308,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 580.5926689383875,
                "y": 166.1103577931313,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 533.8013522148111,
                "y": 355.45119180324946,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 536.7402550849222,
                "y": 313.79991989626967,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 556.0546065644086,
                "y": 263.13347702654045,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 590.8836750999965,
                "y": 231.82699192151216,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 586.1908074419023,
                "y": 177.97637271107897,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 619.6022267212207,
                "y": 159.11285235175302,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 601.524368553163,
                "y": 163.0944923378948,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 638.5127396784898,
                "y": 117.57585619132095,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 628.6176724040989,
                "y": 133.1570968389995,
                "color": "#2ca02c",
                "label": "c"
              },
              {
                "x": 615.3021609547642,
                "y": 107.39439278075167,
                "color": "#2ca02c",
                "label": "c"
              }
            ],
            "layout": "IPY_MODEL_9e0cc4cea42f4e788094c4ef2468766f"
          }
        },
        "9e0cc4cea42f4e788094c4ef2468766f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}